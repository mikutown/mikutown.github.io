{"title":"leetcode541.反转字符串II","slug":"leetcode541-反转字符串II","date":"2023-03-19T06:36:21.000Z","updated":"2023-03-19T06:37:34.018Z","comments":true,"path":"api/articles/leetcode541-反转字符串II.json","excerpt":"题目给定一个字符串 s 和一个整数 k，从字符串开头算起，每计数至 2k 个字符，就反转这 2k 字符中的前 k 个字符。如果剩余字符少于 k 个，则将剩余字符全部反转。如果剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符，其余字符保持原样。","covers":null,"content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个字符串 <code>s</code> 和一个整数 <code>k</code>，从字符串开头算起，每计数至 <code>2k</code> 个字符，就反转这 <code>2k</code> 字符中的前 <code>k</code> 个字符。</p>\n<ul>\n<li>如果剩余字符少于 <code>k</code> 个，则将剩余字符全部反转。</li>\n<li>如果剩余字符小于 <code>2k</code> 但大于或等于 <code>k</code> 个，则反转前 <code>k</code> 个字符，其余字符保持原样。</li>\n</ul>\n <span id=\"more\"></span>\n\n<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;abcdefg&quot;, k &#x3D; 2\n输出：&quot;bacdfeg&quot;</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;abcd&quot;, k &#x3D; 2\n输出：&quot;bacd&quot;</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= s.length &lt;= 104</code></li>\n<li><code>s</code> 仅由小写英文组成</li>\n<li><code>1 &lt;= k &lt;= 104</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ul>\n<li>直接进行交换即可</li>\n</ul>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    string reverseStr(string s, int k) &#123;\n        int n &#x3D; s.size(); &#x2F;&#x2F; 字符串的长度\n        for (int i &#x3D; 0; i &lt; n; i +&#x3D; 2 * k) &#123; &#x2F;&#x2F; 每 2k 个字符为一组进行反转\n            int left &#x3D; i; &#x2F;&#x2F; 左边界\n            int right &#x3D; min(i + k - 1, n - 1); &#x2F;&#x2F; 右边界，注意防止越界\n            while (left &lt; right) &#123; &#x2F;&#x2F; 双指针反转\n                swap(s[left], s[right]); &#x2F;&#x2F; 交换左右指针对应的字符。\n                left++;\n                right--; &#x2F;&#x2F; 左右指针向中间移动。\n            &#125;\n        &#125;\n        return s; &#x2F;&#x2F; 返回反转后的字符串\n    &#125;\n&#125;;</code></pre>\n\n","more":"<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;abcdefg&quot;, k &#x3D; 2\n输出：&quot;bacdfeg&quot;</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;abcd&quot;, k &#x3D; 2\n输出：&quot;bacd&quot;</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= s.length &lt;= 104</code></li>\n<li><code>s</code> 仅由小写英文组成</li>\n<li><code>1 &lt;= k &lt;= 104</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ul>\n<li>直接进行交换即可</li>\n</ul>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    string reverseStr(string s, int k) &#123;\n        int n &#x3D; s.size(); &#x2F;&#x2F; 字符串的长度\n        for (int i &#x3D; 0; i &lt; n; i +&#x3D; 2 * k) &#123; &#x2F;&#x2F; 每 2k 个字符为一组进行反转\n            int left &#x3D; i; &#x2F;&#x2F; 左边界\n            int right &#x3D; min(i + k - 1, n - 1); &#x2F;&#x2F; 右边界，注意防止越界\n            while (left &lt; right) &#123; &#x2F;&#x2F; 双指针反转\n                swap(s[left], s[right]); &#x2F;&#x2F; 交换左右指针对应的字符。\n                left++;\n                right--; &#x2F;&#x2F; 左右指针向中间移动。\n            &#125;\n        &#125;\n        return s; &#x2F;&#x2F; 返回反转后的字符串\n    &#125;\n&#125;;</code></pre>","categories":[],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"}]}