{"title":"Go语言の变量","slug":"Go语言の变量","date":"2021-01-04T13:22:07.000Z","updated":"2021-01-08T12:19:42.000Z","comments":true,"path":"api/articles/Go语言の变量.json","excerpt":"Go语言の变量本文章主要写Go语言中使用的变量类型以及其知识点","covers":["https://gitee.com/mikutown/pic/raw/master/img/20210104214110.png","https://gitee.com/mikutown/pic/raw/master/img/20210104214226.png","https://gitee.com/mikutown/pic/raw/master/img/20210104223253.png","https://gitee.com/mikutown/pic/raw/master/img/20210107171749.png","https://gitee.com/mikutown/pic/raw/master/img/20210107172259.png","https://gitee.com/mikutown/pic/raw/master/img/20210107172329.png","https://gitee.com/mikutown/pic/raw/master/img/20210107183135.png","https://gitee.com/mikutown/pic/raw/master/img/20210107185952.png","https://gitee.com/mikutown/pic/raw/master/img/20210107190838.png","https://gitee.com/mikutown/pic/raw/master/img/20210108160654.png","https://gitee.com/mikutown/pic/raw/master/img/20210108160833.png","https://gitee.com/mikutown/pic/raw/master/img/20210108161524.png","https://gitee.com/mikutown/pic/raw/master/img/20210108185224.png","https://gitee.com/mikutown/pic/raw/master/img/20210108185333.png","https://gitee.com/mikutown/pic/raw/master/img/20210108185352.png","https://gitee.com/mikutown/pic/raw/master/img/20210108194237.png"],"content":"<h1 id=\"Go语言の变量\"><a href=\"#Go语言の变量\" class=\"headerlink\" title=\"Go语言の变量\"></a>Go语言の变量</h1><p>本文章主要写Go语言中使用的变量类型以及其知识点</p>\n<a id=\"more\"></a>\n\n<h2 id=\"为什么需要变量\"><a href=\"#为什么需要变量\" class=\"headerlink\" title=\"为什么需要变量\"></a>为什么需要变量</h2><p><strong>因为变量是高级程序语言的程序的基本组成单位，如下面的代码的实例：</strong></p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">getVal</span><span class=\"token punctuation\">(</span>num1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> num2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    sum <span class=\"token operator\">:=</span> num1 <span class=\"token operator\">+</span> num2\n    sub <span class=\"token operator\">:=</span> num2 <span class=\"token operator\">-</span> num1\n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">,</span> sub\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    sum<span class=\"token punctuation\">,</span> sub <span class=\"token operator\">:=</span> <span class=\"token function\">getVal</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum=\"</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">,</span><span class=\"token string\">\"sub=\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">)</span>\n    sum2<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> <span class=\"token function\">getVal</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//只取出第一个返回值</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum=\"</span><span class=\"token punctuation\">,</span> sum2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n<p>以上代码中的sum,sub都是变量。</p>\n<h2 id=\"变量的介绍\"><a href=\"#变量的介绍\" class=\"headerlink\" title=\"变量的介绍\"></a>变量的介绍</h2><h3 id=\"变量的概念\"><a href=\"#变量的概念\" class=\"headerlink\" title=\"变量的概念\"></a>变量的概念</h3><p>变量相当于内存中一个数据存储空间的表示，你可以把变量看作是一个房间的门牌号，通过门牌号我们可以找到房间，同样的道理，通过变量名可以访问到变量/变量的值。</p>\n<h3 id=\"变量的使用步骤\"><a href=\"#变量的使用步骤\" class=\"headerlink\" title=\"变量的使用步骤\"></a>变量的使用步骤</h3><ol>\n<li>声明变量（也叫定义变量）</li>\n<li>非变量赋值</li>\n<li>使用变量</li>\n</ol>\n<h2 id=\"变量快速入门案例\"><a href=\"#变量快速入门案例\" class=\"headerlink\" title=\"变量快速入门案例\"></a>变量快速入门案例</h2><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//定义变量/声明变量</span>\n\t<span class=\"token keyword\">var</span> i <span class=\"token builtin\">int</span>\n\t<span class=\"token comment\">//给i赋值</span>\n\ti <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\t<span class=\"token comment\">//使用变量</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>输出结果：</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210104214110.png\" alt=\"image-20210104214110288\" loading=\"lazy\"></p>\n<h2 id=\"变量使用注意事项\"><a href=\"#变量使用注意事项\" class=\"headerlink\" title=\"变量使用注意事项\"></a>变量使用注意事项</h2><ol>\n<li>变量表示内存中的一个存储区域</li>\n<li>该区域有自己的名称（变量名）和类型（数据类型）</li>\n</ol>\n<p>示意图:</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210104214226.png\" alt=\"image-20210104214226281\" loading=\"lazy\"></p>\n<ol start=\"3\">\n<li><p>Golang变量使用的三种方式</p>\n<ol>\n<li>指定变量类型，声明后若不赋值，使用默认值。<code>var i int</code></li>\n<li>根据值自行判定变量类型（类型推导）<code>var num = 10.11</code></li>\n<li>省略var,注意 := 左侧的变量不应该是已经声明过的，否则会导致编译错误</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">name <span class=\"token operator\">:=</span> <span class=\"token string\">\"tom\"</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name=\"</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span>\n</code></pre></li>\n<li><p>多变量声明</p>\n<p>在编程中，有时我们需要一次性声明多个变量，Golang也提供这样的语法，举例说明:</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//该案例演示golang如何一次性声明多个变量</span>\n    <span class=\"token comment\">// var n1, n2, n3 int</span>\n    <span class=\"token comment\">// fmt.Println(\"n1=\",n1, \"n2=\",n2 ,\"n3=\",n3)</span>\n    \n    <span class=\"token comment\">//方式2</span>\n    <span class=\"token comment\">// var n1, name, n3 = 100, \"tom\", 888</span>\n    <span class=\"token comment\">// fmt.Println(\"n1=\",n1, \"name=\",name ,\"n3=\",n3)</span>\n    \n    <span class=\"token comment\">//方式3 同样可以使用类型推导</span>\n    n1<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> n3 <span class=\"token operator\">:=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tom~\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">888</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name=\"</span><span class=\"token punctuation\">,</span>name <span class=\"token punctuation\">,</span><span class=\"token string\">\"n3=\"</span><span class=\"token punctuation\">,</span>n3<span class=\"token punctuation\">)</span>\n    \n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>​    如何一次性声明多个全局变量【在go中函数外部定义变量就是全局变量】：</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//定义全局变量</span>\n<span class=\"token keyword\">var</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token keyword\">var</span> n2 <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"jack\"</span>\n<span class=\"token comment\">//上面的声明方式，也可以改成一次性声明</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n    n3 <span class=\"token operator\">=</span> <span class=\"token number\">300</span>\n    n4 <span class=\"token operator\">=</span> <span class=\"token number\">900</span>\n    name2 <span class=\"token operator\">=</span> <span class=\"token string\">\"mary\"</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<ol start=\"5\">\n<li>该区域的数据值可以在同一类型范围内不断变化（重点）</li>\n</ol>\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token comment\">//变量使用的注意事项</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//该区域的数据值可以在同一类型范围内不断变化</span>\n    <span class=\"token keyword\">var</span> i <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">50</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span><span class=\"token comment\">//int， 原因是不能改变数据类型</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"6\">\n<li>变量在<strong>同一个作用域</strong>（在一个函数或者代码块）内不能重名</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> i <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">59</span>\ni <span class=\"token operator\">:=</span> <span class=\"token number\">99</span><span class=\"token comment\">//错误!</span></code></pre>\n<h2 id=\"变量的声明，初始化和赋值\"><a href=\"#变量的声明，初始化和赋值\" class=\"headerlink\" title=\"变量的声明，初始化和赋值\"></a>变量的声明，初始化和赋值</h2><ul>\n<li><p>声明变量</p>\n<ul>\n<li>基本语法： var 变量名 数据类型</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span> <span class=\"token comment\">//这就是声明了一个变量，变量名为a</span>\n\n<span class=\"token keyword\">var</span> num1 <span class=\"token builtin\">float32</span> <span class=\"token comment\">//这也是声明了一个变量，表示一个单精度类型的小数，变量名是num1</span></code></pre></li>\n<li><p>初始化变量</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//在声明变量的时候，就给值</span>\n<span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">45</span> <span class=\"token comment\">//这就是初始化变量a</span>\n<span class=\"token comment\">//使用细节，如过声明时就直接赋值，可以省略数据类型</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">400</span></code></pre></li>\n<li><p>给变量赋值</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//先声明变量</span>\n<span class=\"token keyword\">var</span> num in <span class=\"token comment\">//默认0</span>\n<span class=\"token comment\">//赋值</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">780</span> <span class=\"token comment\">//这就是赋值</span></code></pre>\n<h2 id=\"程序中”-“号的使用\"><a href=\"#程序中”-“号的使用\" class=\"headerlink\" title=\"程序中”+“号的使用\"></a>程序中”+“号的使用</h2></li>\n</ul>\n<ol>\n<li>当左右两边都是数值型时，则做加法运算</li>\n<li>当左右两边都是字符串，则做字符串拼接</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n<span class=\"token comment\">//演示golang中\"+\"的使用</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> j\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r=\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">var</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\n    <span class=\"token keyword\">var</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span>\n    <span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> str1 <span class=\"token operator\">+</span> str2 <span class=\"token comment\">//做拼接操作</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"数据类型的基本介绍\"><a href=\"#数据类型的基本介绍\" class=\"headerlink\" title=\"数据类型的基本介绍\"></a>数据类型的基本介绍</h2><ul>\n<li>每一种数据都定义了明确的数据类型，在内存中分配了不同大小的内存空间。</li>\n</ul>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210104223253.png\" alt=\"image-20210104223253926\" loading=\"lazy\"></p>\n<h2 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h2><h3 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>​    简单地说，就是用于存放整数值的，比如0，-1，2345等等。</p>\n<h3 id=\"案例演示\"><a href=\"#案例演示\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//演示Golang中整数类型的使用</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> i <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">//测试以下int8的范围 -128~127</span>\n    <span class=\"token comment\">//其他的 int16,int32,int64,类推...</span>\n    <span class=\"token keyword\">var</span> j <span class=\"token builtin\">int8</span> <span class=\"token operator\">=</span> <span class=\"token number\">127</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"j=\"</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"整数的各个类型\"><a href=\"#整数的各个类型\" class=\"headerlink\" title=\"整数的各个类型\"></a>整数的各个类型</h3><ul>\n<li>整形的类型</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>有无符号</th>\n<th>占用存储空间</th>\n<th>表数范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>int8</td>\n<td>有</td>\n<td>1字节</td>\n<td>-128~127</td>\n</tr>\n<tr>\n<td>int16</td>\n<td>有</td>\n<td>2字节</td>\n<td>-2<sup>15</sup>~2<sup>15</sup>-1</td>\n</tr>\n<tr>\n<td>int32</td>\n<td>有</td>\n<td>4字节</td>\n<td>-2<sup>31</sup>~2<sup>31</sup>-1</td>\n</tr>\n<tr>\n<td>int64</td>\n<td>有</td>\n<td>8字节</td>\n<td>-2<sup>63</sup>~2<sup>63</sup>-1</td>\n</tr>\n</tbody></table>\n<ul>\n<li>整形的无符号类型</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>有无符号</th>\n<th>占用存储空间</th>\n<th>表数范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>uint8</td>\n<td>无</td>\n<td>1字节</td>\n<td>0~255</td>\n</tr>\n<tr>\n<td>uint16</td>\n<td>无</td>\n<td>2字节</td>\n<td>0~2<sup>16</sup>-1</td>\n</tr>\n<tr>\n<td>uint32</td>\n<td>无</td>\n<td>4字节</td>\n<td>0~2<sup>32</sup>-1</td>\n</tr>\n<tr>\n<td>uint64</td>\n<td>无</td>\n<td>8字节</td>\n<td>0~2<sup>64</sup>-1</td>\n</tr>\n</tbody></table>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//测试一下uint8的范围（0~255），其他的uint16,uint32,uint64类推即可</span>\n<span class=\"token keyword\">var</span> k <span class=\"token builtin\">uint16</span> <span class=\"token operator\">=</span> <span class=\"token number\">255</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k=\"</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span></code></pre>\n<ul>\n<li>int的其他类型的说明：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>有无符号</th>\n<th>占用存储空间</th>\n<th>表数范围</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>int</td>\n<td>有</td>\n<td>32位系统4个字节<br />64位系统8个字节</td>\n<td>-2<sup>31</sup><del>2<sup>31</sup>-1<br />-2<sup>63</sup></del>2<sup>63</sup>-1</td>\n<td></td>\n</tr>\n<tr>\n<td>uint</td>\n<td>无</td>\n<td>32位系统4个字节<br />64位系统8个字节</td>\n<td>-0<del>2<sup>32</sup>-1<br />0</del>2<sup>64</sup>-1</td>\n<td></td>\n</tr>\n<tr>\n<td>rune</td>\n<td>有</td>\n<td>与int32一样</td>\n<td>-2<sup>31</sup>~2<sup>31</sup>-1</td>\n<td>等价int32，表示一个Unicode码</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>无</td>\n<td>与uint8等价</td>\n<td>0~255</td>\n<td>当要存储字符时选用byte</td>\n</tr>\n</tbody></table>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//int,uint,rune,byte的使用</span>\n<span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">8900</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> b <span class=\"token builtin\">uint</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">var</span> c <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token number\">255</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token string\">\"c=\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"整形的使用细节\"><a href=\"#整形的使用细节\" class=\"headerlink\" title=\"整形的使用细节\"></a>整形的使用细节</h3><ol>\n<li>Golang各整数类型分：有符号和无符号，int uint的大小和系统有关</li>\n<li>Golang的整型默认声明为int型</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//整形的使用细节</span>\n<span class=\"token keyword\">var</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\">//? n1是什么类型</span>\n<span class=\"token comment\">//这里我们给大家介绍如何查看某个变量的数据类型</span>\n<span class=\"token comment\">//fmt.Println() 可以用于做格式化输出。</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n1 的类型 %T \\n\"</span><span class=\"token punctuation\">,</span> n1<span class=\"token punctuation\">)</span></code></pre>\n<ol start=\"3\">\n<li>如何在程序查看某个变量的字节大小和数据类型 （使用较多）</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//如何在程序查看某个变量的占用字节大小和数据类型 （使用较多）</span>\n<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">int64</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token comment\">//unsafe.Sizeof(n1) 是unsafe包的一个函数，可以返回n1变量占用的字节数</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n2 的 类型 %T\tn2占用的字节数是 %d\"</span><span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span>n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<ol start=\"4\">\n<li>Golang程序中整型变量在使用时，遵守保小不保大的原则，即：在保证程序正确运行下，尽量使用占用空间小的数据类型。【如：年龄】</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//Golang程序中整型变量在使用时，遵守保小不保大的原则，</span>\n<span class=\"token comment\">//即：在保证程序正确运行下，尽量使用占用空间小的数据类型。</span>\n<span class=\"token keyword\">var</span> age <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token number\">90</span></code></pre>\n<ol start=\"5\">\n<li>bit:计算机中的最小存储单位。byte：计算机中基本存储单元。1 byte = 8 bit</li>\n</ol>\n<h2 id=\"小数类型-浮点型\"><a href=\"#小数类型-浮点型\" class=\"headerlink\" title=\"小数类型/浮点型\"></a>小数类型/浮点型</h2><h3 id=\"基本介绍-1\"><a href=\"#基本介绍-1\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>顾名思义，小数类型就是用于存放小数的，如1.2，0.23，-1.91</p>\n<h3 id=\"案例演示-1\"><a href=\"#案例演示-1\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//演示golang中小数类型使用</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> price <span class=\"token builtin\">float32</span> <span class=\"token operator\">=</span> <span class=\"token number\">89.12</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"price=\"</span><span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>运行结果如下图</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210107171749.png\" alt=\"image-20210107171748992\" loading=\"lazy\"></p>\n<h3 id=\"小数类型分类\"><a href=\"#小数类型分类\" class=\"headerlink\" title=\"小数类型分类\"></a>小数类型分类</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>占用存储空间</th>\n<th>表数范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单精度float32</td>\n<td>4字节</td>\n<td>-3.403E38~3.403E38</td>\n</tr>\n<tr>\n<td>双精度float64</td>\n<td>8字节</td>\n<td>-1.798E308~1.798E308</td>\n</tr>\n</tbody></table>\n<p><strong>说明</strong>:</p>\n<ol>\n<li>关于浮点数在机器中存放形式的简单说明，浮点数=符号位+指数位+尾数位，浮点数都是有符号的。</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210107172259.png\" alt=\"image-20210107172259894\" loading=\"lazy\"></p>\n<ol start=\"2\">\n<li>尾数部分可能丢失，造成精度损失。 -123.0000901</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210107172329.png\" alt=\"image-20210107172329694\" loading=\"lazy\"></p>\n<p><strong>说明：</strong></p>\n<ul>\n<li>float64的精度比float32的要准确</li>\n<li>如果我们要保存一个精度高的数，则应该选用float64</li>\n</ul>\n<ol start=\"3\">\n<li>浮点型的存储分为三部分：符号位+指数位+尾数位    在存储过程中，精度会有丢失哦</li>\n</ol>\n<h3 id=\"浮点型使用细节\"><a href=\"#浮点型使用细节\" class=\"headerlink\" title=\"浮点型使用细节\"></a>浮点型使用细节</h3><ol>\n<li><p>Golang浮点类型有固定的范围和字段长度，不受具体的操作系统的影响。</p>\n</li>\n<li><p>Golang的浮点型默认声明为float64类型。</p>\n</li>\n<li><p>浮点型常量有两种表示形式</p>\n<ul>\n<li>十进制数形式：如：5.12        .512（必须有小数点）</li>\n<li>科学计数法形式：如： 5.1234e2 = 5.12 * 10 ^ 2      5.12E-2 = 5.12/(10^2)</li>\n</ul>\n</li>\n<li><p>通常情况下，应该使用float64，因为它精度更高。</p>\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//Golang的浮点型默认声明为float64类型</span>\n<span class=\"token keyword\">var</span> num5 <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num5的数据类型是 %T \\n\"</span><span class=\"token punctuation\">,</span> num5<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//十进制数形式：如：5.12        .512（必须有小数点）</span>\nnum6 <span class=\"token operator\">:=</span> <span class=\"token number\">5.12</span>\nnum7 <span class=\"token operator\">:=</span> <span class=\"token number\">.123</span> <span class=\"token comment\">//->0.123</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num6=\"</span><span class=\"token punctuation\">,</span> num6<span class=\"token punctuation\">,</span> <span class=\"token string\">\"num7=\"</span><span class=\"token punctuation\">,</span> num7<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//科学计数法形式：如： 5.1234e2 = 5.12 * 10 ^ 2      5.12E-2 = 5.12/(10^2)</span>\nnum8 <span class=\"token operator\">:=</span> <span class=\"token number\">5.1234e2</span> <span class=\"token comment\">// 5.1234 * 10 ^ 2</span>\nnum8 <span class=\"token operator\">:=</span> <span class=\"token number\">5.1234E2</span> <span class=\"token comment\">// 5.1234 * 10 ^ 2</span></code></pre>\n<h2 id=\"字符类型\"><a href=\"#字符类型\" class=\"headerlink\" title=\"字符类型\"></a>字符类型</h2><h3 id=\"基本介绍-2\"><a href=\"#基本介绍-2\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>在Golang中没有专门的字符类型，如果要存储单个字符(字母)，一般使用byte来保存。</p>\n<p><strong>字符串就是一串固定长度的字符连接起来的字符序列。</strong>Go的字符串是由单个字节连接起来的。也就是说对于传统的字符串是由字符组成的，而Go的字符串不同，它是由字节组成的。</p>\n<h3 id=\"案例演示-2\"><a href=\"#案例演示-2\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//演示Golang中字符类型使用</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> c1 <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span>\n\t<span class=\"token keyword\">var</span> c2 <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span>   <span class=\"token comment\">//字符的0</span>\n\n\t<span class=\"token comment\">//当我们直接输出byte值，就是输出了对应字符的码值</span>\n\t<span class=\"token comment\">//'a' ==> </span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c1=\"</span><span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c2=\"</span><span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//如果我们希望输出对应字符，需要使用格式化输出</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c1=%c c2=%c\\n\"</span><span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//var c3 byte = '北' //overflow溢出</span>\n\t<span class=\"token keyword\">var</span> c3 <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token string\">'北'</span> <span class=\"token comment\">//overflow溢出</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c3=%c c3对应码值=%d\\n\"</span><span class=\"token punctuation\">,</span> c3<span class=\"token punctuation\">,</span> c3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210107183135.png\" alt=\"image-20210107183135116\" loading=\"lazy\"></p>\n<p><strong>对上述代码的说明</strong></p>\n<ol>\n<li>如果我们保存的字符在ASCII表中，比如[0-1，a-z,A-Z]  我们可以直接保存到byte中</li>\n<li>如果我们要保存的字符的对应码值大于255，这时我们可以考虑使用int类型保存</li>\n<li>如果我们需要按照字符的方式输出，此时就需要进行格式化输出，即<code>fmt.Printf(&quot;%c&quot;,c1)</code></li>\n</ol>\n<h3 id=\"字符类型使用细节\"><a href=\"#字符类型使用细节\" class=\"headerlink\" title=\"字符类型使用细节\"></a>字符类型使用细节</h3><ol>\n<li>字符常量是用单引号（”)括起来的单个字符。例如<code>var c1 byte = &#39;a&#39;</code>,<code>car c2 int = &#39;中&#39;</code>,<code>var c3 byte = &#39;9&#39;</code></li>\n<li>Go中允许使用转义字符’\\‘来将其后面的字符转变为特殊字符型常量。例如：<code>var c3 char = &#39;\\n&#39;  </code>（\\n表示换行符）</li>\n<li>Go语言的字符使UTF-8编码，如果想查询字符对应的utf8码值，请点击[链接](<a href=\"http://www.mytju.com/classcode/tools/encode_utf8.asp\">查看字符编码（UTF-8） (mytju.com)</a>). 英文字母占1个自己，汉字占3个字节</li>\n<li>在Go中，字符的本质是一个整数，直接输出时，是该字符对应的 UTF-8编码的码值。</li>\n<li>可以直接给某个变量赋一个数字，然后按格式化输出%c,会输出该数字对应的Unicode字符，如</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> c4 <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">22269</span> <span class=\"token comment\">//22269 -> '国'</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c4 = %c\\n\"</span><span class=\"token punctuation\">,</span> c4<span class=\"token punctuation\">)</span></code></pre>\n<ol start=\"6\">\n<li>字符类型可以进行运算，它相当于一个整数，因为每个字符都有对应的Unicode码。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token string\">'a'</span>   <span class=\"token comment\">// 10+97 = 107</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n1 = %c\\n\"</span><span class=\"token punctuation\">,</span> n1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//输出为k</span></code></pre>\n<h3 id=\"字符类型本质探讨\"><a href=\"#字符类型本质探讨\" class=\"headerlink\" title=\"字符类型本质探讨\"></a>字符类型本质探讨</h3><ol>\n<li>字符型存储到计算机中，需要将字符对应的码值（整数）找出来<ul>\n<li>存储： 字符 –&gt; 对应码值  –&gt; 二进制 –&gt; 存储</li>\n<li>读取： 二进制 –&gt;  码值 –&gt; 字符 –&gt; 读取</li>\n</ul>\n</li>\n<li>字符和码值的对应关系是通过字符编码表决定的（这是规定）</li>\n<li>Go语言的编码都统一成了UTF-8。这非常的方便，再也没有编码乱码的困扰了。</li>\n</ol>\n<h2 id=\"布尔类型\"><a href=\"#布尔类型\" class=\"headerlink\" title=\"布尔类型\"></a>布尔类型</h2><h3 id=\"基本介绍-3\"><a href=\"#基本介绍-3\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><ol>\n<li>布尔类型，又名bool类型，bool类型数据只允许取值true和false</li>\n<li>bool类型占1个字节</li>\n<li>bool类型适用于逻辑运算，一般用于程序流程控制（之后会详细了解）<ul>\n<li>if条件控制语句</li>\n<li>for循环控制语句</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"案例演示-3\"><a href=\"#案例演示-3\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"unsafe\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//演示Golang中bool类型的使用</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//注意事项</span>\n\t<span class=\"token comment\">//1. bool类型占用的存储空间是1字节</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b 的占用空间 = \"</span><span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//2. bool类型只能取true或false</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>运行结果</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210107185952.png\" alt=\"image-20210107185952514\" loading=\"lazy\"></p>\n<h2 id=\"string类型\"><a href=\"#string类型\" class=\"headerlink\" title=\"string类型\"></a>string类型</h2><h3 id=\"基本介绍-4\"><a href=\"#基本介绍-4\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>字符串就是一串固定长度的字符连接起来的字符序列。Go的字符串是由单个字节连接起来的。Go语言的字符串的字节使用UTF-8编码标识Unicode文本</p>\n<h3 id=\"案例演示-4\"><a href=\"#案例演示-4\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//演示Golang中string类型的使用</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//string的基本使用</span>\n\t<span class=\"token keyword\">var</span> address <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"北京长城 厉害了1234 hello world！\"</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"string的注意事项和细节\"><a href=\"#string的注意事项和细节\" class=\"headerlink\" title=\"string的注意事项和细节\"></a>string的注意事项和细节</h3><ol>\n<li>Go语言的字符串的字节使用UTF-8编码标识Unicode文本，这样Golang统一使用UTF-8编码，中文乱码问题不会再困扰程序员。</li>\n<li>字符串一旦赋值了，字符串就不能修改了：在Go中字符串是不可变的。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\nstr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span>    <span class=\"token comment\">//这里不能修改str的内容，也就是说Go中的字符串是不可变的</span></code></pre>\n<ol start=\"3\">\n<li>字符串的两种表示形式<ol>\n<li>双引号，会识别转义字符</li>\n<li>反引号，以字符串的原生形式输出，包括换行和特殊字符，可以实现防止攻击，输出源代码等效果。</li>\n</ol>\n</li>\n</ol>\n<p>【案例演示】</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//演示Golang中string类型的使用</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//string的基本使用</span>\n\taddress <span class=\"token operator\">:=</span> <span class=\"token string\">\"abc\\nabc\"</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span>\n\n\tstr2 <span class=\"token operator\">:=</span> <span class=\"token string\">`\n\tpackage main\n\timport (\n\t\t\"fmt\"\n\t)\n\t//演示Golang中string类型的使用\n\tfunc main() &#123;\n\t\t//string的基本使用\n\t\tvar address string = \"北京长城 厉害了1234 hello world！\"\n\t\tfmt.Println(address)\n\t&#125;\n\t`</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>运行结果:</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210107190838.png\" alt=\"image-20210107190838210\" loading=\"lazy\"></p>\n<ol start=\"4\">\n<li>字符串拼接方式</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//字符串拼接方式</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world\"</span>\nstr <span class=\"token operator\">+=</span> <span class=\"token string\">\" haha!\"</span></code></pre>\n<ol start=\"5\">\n<li>当一行字符串太长时，需要用到多行字符串，可以如下处理</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//当一个拼接的操作很长时，怎么办？可以分行写，但是注意，需要将+保留在上一行。</span>\nstr4 <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">+</span> \n<span class=\"token string\">\"world\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world\"</span> <span class=\"token operator\">+</span>\n<span class=\"token string\">\"hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world\"</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"基本数据类型的默认值\"><a href=\"#基本数据类型的默认值\" class=\"headerlink\" title=\"基本数据类型的默认值\"></a>基本数据类型的默认值</h2><h3 id=\"基本介绍-5\"><a href=\"#基本介绍-5\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>在Go中，数据类型都有一个默认值，当程序员没有赋值时，就会保留默认值，在Go中，默认值又叫零值。</p>\n<h3 id=\"基本数据类型的默认值-1\"><a href=\"#基本数据类型的默认值-1\" class=\"headerlink\" title=\"基本数据类型的默认值\"></a>基本数据类型的默认值</h3><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>整形</td>\n<td>0</td>\n</tr>\n<tr>\n<td>浮点型</td>\n<td>0</td>\n</tr>\n<tr>\n<td>字符串</td>\n<td>“”</td>\n</tr>\n<tr>\n<td>布尔类型</td>\n<td>false</td>\n</tr>\n</tbody></table>\n<h2 id=\"基本数据类型的相互转换\"><a href=\"#基本数据类型的相互转换\" class=\"headerlink\" title=\"基本数据类型的相互转换\"></a>基本数据类型的相互转换</h2><h3 id=\"基本介绍-6\"><a href=\"#基本介绍-6\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>Golang和java/C不同，Go在不同类型的变量之间赋值时<strong>需要显式转换</strong>。也就是说Golang中的数据类型不能自动转换。</p>\n<h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><p>表达式T(v)将值v转换为类型T</p>\n<p>T:就是数据类型，比如int32,int64.float32等等</p>\n<p>v：就是需要转换的变量</p>\n<h3 id=\"案例演示-5\"><a href=\"#案例演示-5\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> i <span class=\"token builtin\">int32</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token comment\">//希望将 i => float</span>\n<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">float32</span> <span class=\"token operator\">=</span> <span class=\"token function\">float32</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">int8</span> <span class=\"token operator\">=</span> <span class=\"token function\">int8</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> n3 <span class=\"token builtin\">int64</span> <span class=\"token operator\">=</span> <span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">//低精度->高精度</span>\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=%v n1=%v n2=%v n3=%v \\n\"</span><span class=\"token punctuation\">,</span> i <span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n3<span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>Go中，数据类型的转换可以是从 表示范围小–&gt;表示范围大，也可以从 表示范围大–&gt;表示范围小</li>\n<li>被转换的是变量存储的数据（即值），变量本身的数据类型并没有变化！</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> i <span class=\"token builtin\">int32</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token comment\">//被转换的是变量存储的数据(即值)，变量本身的数据类型并没有变化</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i type is %T\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token comment\">// int32</span></code></pre>\n<ol start=\"3\">\n<li>在转换中，比如将 int64 转换成 int8 【-128~127】，编译时不会报错，只是转换的结果按<strong>溢出处理</strong>。和我们希望的结果不一样。因此在转换时，需要考虑范围。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//在转换中，比如将 int64  转成 int8 【-128---127】 ，编译时不会报错，</span>\n<span class=\"token comment\">//只是转换的结果是按溢出处理，和我们希望的结果不一样</span>\n<span class=\"token keyword\">var</span> num1 <span class=\"token builtin\">int64</span> <span class=\"token operator\">=</span> <span class=\"token number\">999999</span>\n<span class=\"token keyword\">var</span> num2 <span class=\"token builtin\">int8</span> <span class=\"token operator\">=</span> <span class=\"token function\">int8</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// </span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num2=\"</span><span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"课堂练习\"><a href=\"#课堂练习\" class=\"headerlink\" title=\"课堂练习\"></a>课堂练习</h3><ul>\n<li>练习1</li>\n</ul>\n<p>如何修改一下代码，使之正确</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">int32</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    <span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">int64</span>\n    <span class=\"token keyword\">var</span> n3 <span class=\"token builtin\">int8</span>\n    n2 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">20</span>\n    n3 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">20</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>答案：</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">int32</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    <span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">int64</span>\n    <span class=\"token keyword\">var</span> n3 <span class=\"token builtin\">int8</span>\n    n2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span>     <span class=\"token comment\">//int32 --> int64错误</span>\n    n3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span>      <span class=\"token comment\">//int32 --> int8 错误</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>练习2 </li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">int32</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n<span class=\"token keyword\">var</span> n3 <span class=\"token builtin\">int8</span>\n<span class=\"token keyword\">var</span> n4 <span class=\"token builtin\">int8</span>\nn4 <span class=\"token operator\">=</span> <span class=\"token function\">int8</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">127</span> <span class=\"token comment\">//编译通过，值溢出</span>\nn3 <span class=\"token operator\">=</span> <span class=\"token function\">int8</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">128</span> <span class=\"token comment\">//编译不通过</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n4<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"基本数据类型和string的转换\"><a href=\"#基本数据类型和string的转换\" class=\"headerlink\" title=\"基本数据类型和string的转换\"></a>基本数据类型和string的转换</h2><h3 id=\"基本介绍-7\"><a href=\"#基本介绍-7\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>在程序开发中，我们经常将基本数据类型转成string。或者将string转成基本数据类型。</p>\n<h3 id=\"基本类型转string类型\"><a href=\"#基本类型转string类型\" class=\"headerlink\" title=\"基本类型转string类型\"></a>基本类型转string类型</h3><ul>\n<li><p>方式1：fmt.Sprintf(“%参数”，表达式)   【这个比较灵活】</p>\n<ul>\n<li><p>函数的介绍：</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//func Sprintf</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span>format <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>a <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token comment\">//Sprintf根据format参数生成格式化的字符串并返回该字符串。</span></code></pre>\n<p><strong>参数需要和表达式的数据类型相匹配</strong></p>\n</li>\n<li><p>案例演示</p>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//演示Golang中基本数据练习转成string使用</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> num1 <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">99</span>\n\t<span class=\"token keyword\">var</span> num2 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">23.456</span>\n\t<span class=\"token keyword\">var</span> b <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token keyword\">var</span> mychar <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token string\">'h'</span>\n\t<span class=\"token keyword\">var</span> str <span class=\"token builtin\">string</span> <span class=\"token comment\">//空的str</span>\n\n\t<span class=\"token comment\">//使用第一种方式来转换  fmt.Sprintf方法</span>\n\tstr <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> num1<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str type %T str=%q\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span>\n\n\tstr <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str type %T str=%q\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span>\n\t\n\tstr <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str type %T str=%q\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\n\tstr <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> mychar<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str type %T str=%q\\n\"</span><span class=\"token punctuation\">,</span> mychar<span class=\"token punctuation\">,</span> mychar<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>运行结果</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">str type string str&#x3D;&quot;99&quot;\nstr type string str&#x3D;&quot;%!d(float64&#x3D;23.456)&quot;\nstr type bool str&#x3D;%!q(bool&#x3D;true)\nstr type uint8 str&#x3D;&#39;h&#39;</code></pre></li>\n<li><p>方式2：使用strconv包的函数</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">FormatBool</span><span class=\"token punctuation\">(</span>b <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">FormatFloat</span><span class=\"token punctuation\">(</span>f <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> fmt <span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> prec<span class=\"token punctuation\">,</span> bitSize <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">FormatInt</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int64</span><span class=\"token punctuation\">,</span> base <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">FormatUint</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">,</span> base <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span></code></pre>\n<ul>\n<li>案例说明</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"strconv\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//第二种方式strconv函数</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> num3 <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">99</span>\n\t<span class=\"token keyword\">var</span> num4 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">23.456</span>\n\t<span class=\"token keyword\">var</span> b2 <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token keyword\">var</span> str <span class=\"token builtin\">string</span> <span class=\"token comment\">//空str</span>\n\tstr <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">FormatInt</span><span class=\"token punctuation\">(</span><span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>num3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str type %T str=%q\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//strconv.FormatFloat(num3, 'f', 10, 64)</span>\n\t<span class=\"token comment\">//说明： 'f'格式 10：表示小数位保留10位 64：表示这个小数是float64</span>\n\tstr <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">FormatFloat</span><span class=\"token punctuation\">(</span>num4<span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str type %T str=%q\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span>\n\n\tstr <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">FormatBool</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str type %T str=%q\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//strconv包中有一个函数Itoa</span>\n\t<span class=\"token keyword\">var</span> num5 <span class=\"token builtin\">int64</span> <span class=\"token operator\">=</span> <span class=\"token number\">4567</span>\n\tstr <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>num5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str type %T str=%q\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>运行结果</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">str type string str&#x3D;&quot;99&quot;\nstr type string str&#x3D;&quot;23.4560000000&quot;\nstr type string str&#x3D;&quot;true&quot;\nstr type string str&#x3D;&quot;4567&quot;</code></pre>\n<h3 id=\"string类型转基本数据类型\"><a href=\"#string类型转基本数据类型\" class=\"headerlink\" title=\"string类型转基本数据类型\"></a>string类型转基本数据类型</h3></li>\n<li><p>使用时strconv包的函数</p>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">ParseBool</span><span class=\"token punctuation\">(</span>str <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>value <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ParseFloat</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>bitSize <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>f <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ParseInt</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> base <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> bitSize <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int64</span><span class=\"token punctuation\">,</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ParseUint</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> bitSize <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">,</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span></code></pre>\n<ul>\n<li><p>案例演示</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"strconv\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//第二种方式strconv函数</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> str <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"true\"</span>\n\t<span class=\"token keyword\">var</span> b <span class=\"token builtin\">bool</span>\n\t<span class=\"token comment\">// b, _ = strconv.ParseBool(str)</span>\n\t<span class=\"token comment\">//说明</span>\n\t<span class=\"token comment\">//1. strconv.ParseBool(str) 函数会返回两个值 （value bool,err error)</span>\n\t<span class=\"token comment\">//2. 因为我只想获取到value bool, 不限孤鸿去err 所以我使用_忽略</span>\n\tb <span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseBool</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b type %T b=%v\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">var</span> str2 <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1234590\"</span>\n\t<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">int64</span>\n\t<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">int</span>\n\tn1<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseInt</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n\tn2 <span class=\"token operator\">=</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n1 type %T n1=%v\\n\"</span><span class=\"token punctuation\">,</span> n1<span class=\"token punctuation\">,</span> n1<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n2 type %T n2=%v\\n\"</span><span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">var</span> str3 <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"123.456\"</span>\n\t<span class=\"token keyword\">var</span> f1 <span class=\"token builtin\">float64</span>\n\tf1<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseFloat</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f1 type %T f1=%v\\n\"</span><span class=\"token punctuation\">,</span> f1<span class=\"token punctuation\">,</span> f1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>运行结果</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">b type bool b&#x3D;true\nn1 type int64 n1&#x3D;1234590\nn2 type int n2&#x3D;1234590\nf1 type float64 f1&#x3D;123.456</code></pre></li>\n<li><p>说明一下</p>\n<p><strong>因为返回的是int64或者float64，所以如果希望得到int32，float32等，要进行如下处理：</strong></p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> num5 <span class=\"token builtin\">int</span> <span class=\"token number\">32</span>\nnum5 <span class=\"token operator\">=</span> <span class=\"token function\">int32</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"string转基本数据类型的注意事项\"><a href=\"#string转基本数据类型的注意事项\" class=\"headerlink\" title=\"string转基本数据类型的注意事项\"></a>string转基本数据类型的注意事项</h3></li>\n</ul>\n<p>​    在将string类型转成基本数据类型时，要确保string类型能够转成有效的数据，比如我们可以把“123”，转成一个整数，但是我们不能将”hello”转成一个整数，如果这样做，Golang直接将其转成0，其他类型也是一样的道理.float–&gt;0      bool –&gt; false</p>\n<ul>\n<li>案例说明：</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//注意</span>\n<span class=\"token keyword\">var</span> str4 <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\n<span class=\"token keyword\">var</span> n3 <span class=\"token builtin\">int64</span> <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\nn3<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseInt</span><span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n3 type %T n3=%v\\n\"</span><span class=\"token punctuation\">,</span> n3<span class=\"token punctuation\">,</span> n3<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h2><h3 id=\"基本介绍-8\"><a href=\"#基本介绍-8\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><ol>\n<li>基本数据类型，变量存的就是值，也叫值类型</li>\n<li>获取变量的地址，用&amp;，比如: var num int, 获取num的地址： &amp;num</li>\n</ol>\n<ul>\n<li>分析一下基本数据类型在内存的布局</li>\n</ul>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210108160654.png\" alt=\"image-20210108160647027\" loading=\"lazy\"></p>\n<ol start=\"3\">\n<li>指针类型，指针变量保存的是一个地址，这个地址指向的空间存的才是值，比如：<code>var ptr *int = &amp;num</code> ，指针在内存的布局如图所示：<img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210108160833.png\" alt=\"image-20210108160833386\" loading=\"lazy\"></li>\n<li>获取指针类型所指向的值，使用：<em>，比如:<code>var ptr *int</code>，使用</em>ptr获取ptr指向的值。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//演示Golang中指针类型</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//基本数据类型在内存布局</span>\n\t<span class=\"token keyword\">var</span> i <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\t<span class=\"token comment\">// i 的地址是什么，&amp;i</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i的地址=\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//下面的 var ptr *int = &amp;i</span>\n\t<span class=\"token comment\">//1. ptr是一个指针变量</span>\n\t<span class=\"token comment\">//2. ptr的类型是 *int</span>\n\t<span class=\"token comment\">//3. ptr本身的值是 &amp;i</span>\n\t<span class=\"token keyword\">var</span> ptr <span class=\"token operator\">*</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr=%v\\n\"</span><span class=\"token punctuation\">,</span> ptr<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr 的地址=%v\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ptr<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr 指向的值=%v\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">ptr&#x3D;0xc000014090\nptr 的地址&#x3D;0xc000006030\nptr 指向的值&#x3D;10</code></pre>\n<ol start=\"5\">\n<li>一个案例再说明</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210108161524.png\" alt=\"image-20210108161524000\" loading=\"lazy\"></p>\n<h3 id=\"案例演示-6\"><a href=\"#案例演示-6\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h3><ol>\n<li>写一个程序，获取一个int变量num的地址，并显示到终端</li>\n<li>将num的地址赋给指针ptr，并通过ptr去修改num的值</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//案例演示</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> num <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num's address=%v\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">var</span> ptr <span class=\"token operator\">*</span><span class=\"token builtin\">int</span>\n\tptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>num\n\t<span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num=%d\\n\"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">num&#39;s address&#x3D;0xc000014090\nnum&#x3D;10</code></pre>\n<h3 id=\"指针的课堂练习\"><a href=\"#指针的课堂练习\" class=\"headerlink\" title=\"指针的课堂练习\"></a>指针的课堂练习</h3><ol>\n<li>这个代码中有无错误？</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">300</span>\n    <span class=\"token keyword\">var</span> ptr <span class=\"token operator\">*</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> a<span class=\"token comment\">//错误</span>\n    <span class=\"token comment\">//应该改成 var ptr *int = &amp;a(取地址)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">300</span>\n    <span class=\"token keyword\">var</span> ptr <span class=\"token operator\">*</span><span class=\"token builtin\">float32</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a <span class=\"token comment\">//错误 类型不匹配！</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">300</span>\n    <span class=\"token keyword\">var</span> b <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">400</span>\n    <span class=\"token keyword\">var</span> ptr <span class=\"token operator\">*</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a <span class=\"token comment\">//OK</span>\n    <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\">//等价于a = 100</span>\n    ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b <span class=\"token comment\">// OK</span>\n    <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token number\">200</span> <span class=\"token comment\">//b = 200</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=%d,b=%d,*ptr=%d\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//输出什么内容？</span>\n<span class=\"token comment\">/*\n输出a=100,b=200,*ptr=200\n*/</span></code></pre>\n<h3 id=\"指针的使用细节\"><a href=\"#指针的使用细节\" class=\"headerlink\" title=\"指针的使用细节\"></a>指针的使用细节</h3><ol>\n<li>值类型，都有对应的指针类型，形式为 *<strong>数据类型</strong>，比如说int的对应的指针就是<em>int,float32对应的指针类型就是 **</em>float32** 依次类推。</li>\n<li>值类型包括：基本数据类型，int 系列，float系列， bool,string，数组和结构体struct</li>\n</ol>\n<h2 id=\"值类型和引用类型\"><a href=\"#值类型和引用类型\" class=\"headerlink\" title=\"值类型和引用类型\"></a>值类型和引用类型</h2><h3 id=\"值类型和引用类型的说明\"><a href=\"#值类型和引用类型的说明\" class=\"headerlink\" title=\"值类型和引用类型的说明\"></a>值类型和引用类型的说明</h3><ol>\n<li>值类型：基本数据类型，int 系列，float系列， bool,string，数组和结构体struct</li>\n<li>引用类型：指针、slice切片、map、管道chan、interface等都是引用类型</li>\n</ol>\n<h3 id=\"值类型和引用类型的使用特点\"><a href=\"#值类型和引用类型的使用特点\" class=\"headerlink\" title=\"值类型和引用类型的使用特点\"></a>值类型和引用类型的使用特点</h3><ol>\n<li>值类型：变量直接存储值，内存通常在栈中分配</li>\n</ol>\n<p>示意图：<img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210108185224.png\" alt=\"image-20210108185224664\" loading=\"lazy\"></p>\n<ol start=\"2\">\n<li>引用类型：变量存储是一个地址，这个地址对应的空间才真正存储数据（值），内存通常在堆上分配，当没有任何变量引用这个地址时，该地址对应的数据空间就成为一个垃圾，由GC来回收</li>\n</ol>\n<p>示意图：<img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210108185333.png\" alt=\"image-20210108185333236\" loading=\"lazy\"></p>\n<ol start=\"3\">\n<li>内存的栈区和堆区示意图<img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210108185352.png\" alt=\"image-20210108185352262\" loading=\"lazy\"></li>\n</ol>\n<h2 id=\"标识符的命名规范\"><a href=\"#标识符的命名规范\" class=\"headerlink\" title=\"标识符的命名规范\"></a>标识符的命名规范</h2><h3 id=\"标识符概念\"><a href=\"#标识符概念\" class=\"headerlink\" title=\"标识符概念\"></a>标识符概念</h3><ol>\n<li>Golang对各种变量，方法，函数等命名时使用的字符序列称为标识符</li>\n<li>凡是自己可以取名字的地方都叫标识符</li>\n</ol>\n<h3 id=\"标识符的命名规则\"><a href=\"#标识符的命名规则\" class=\"headerlink\" title=\"标识符的命名规则\"></a>标识符的命名规则</h3><ol>\n<li>由26个英文字母大小写，0-9，_ 组成</li>\n<li>数字不可以开头。<code>var num int //ok</code>     <code>var 3num int  // error</code></li>\n<li>Golang中严格区分大小写。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> num <span class=\"token builtin\">int</span>\n<span class=\"token keyword\">var</span> Num <span class=\"token builtin\">int</span></code></pre>\n<p><strong>说明：</strong>在Golang中，num和Num是两个不同的变量</p>\n<ol start=\"4\">\n<li>标识符不能包含空格。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//这样8行！</span>\n<span class=\"token keyword\">var</span> ab c <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span></code></pre>\n<ol start=\"5\">\n<li>下划线”_”本身在Go中是一个特殊的标识符，称为空标识符。可以代表任何其它的标识符，但是它对应的值会被忽略（比如：忽略某个返回值)。所以仅能被作为占位符使用，不能作为标识符使用。</li>\n</ol>\n<pre class=\"language-Go\" data-language=\"Go\"><code class=\"language-Go\">&#x2F;&#x2F; _ 是空标识符，用于占用\nvar _ int &#x3D; 40 &#x2F;&#x2F;error\nfmt.Println(_) &#x2F;&#x2F;错的！8行！</code></pre>\n<ol start=\"6\">\n<li>不能以系统<strong>保留关键字</strong>作为标识符（一共有25个），比如  break, if 等等…</li>\n</ol>\n<h3 id=\"标识符的案例\"><a href=\"#标识符的案例\" class=\"headerlink\" title=\"标识符的案例\"></a>标识符的案例</h3><pre class=\"language-none\"><code class=\"language-none\">hello &#x2F;&#x2F;ok\nhello12 &#x2F;&#x2F;ok\n1hello &#x2F;&#x2F;error 数字开头不可取！\nh-b &#x2F;&#x2F;error 不能使用！\nx h &#x2F;&#x2F;error 不能含有空格\nh_4 &#x2F;&#x2F;ok\n_ab &#x2F;&#x2F;ok\nint &#x2F;&#x2F;ok 但是最好别这样使用\nfloat32 &#x2F;&#x2F;ok 但是最好别这样使用\n_ &#x2F;&#x2F;error 不行！\nAbc &#x2F;&#x2F; ok</code></pre>\n<h3 id=\"标识符命名注意事项\"><a href=\"#标识符命名注意事项\" class=\"headerlink\" title=\"标识符命名注意事项\"></a>标识符命名注意事项</h3><ol>\n<li>包名：保持package的名字和目录保持一致，尽量采取有意义的包名，简短，有意义，不要和标准库冲突 fmt</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210108194237.png\" loading=\"lazy\"></p>\n<ol start=\"2\">\n<li>变量名、函数名、常量名：采用驼峰法</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//举例</span>\n<span class=\"token keyword\">var</span> stuName <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"tom\"</span>   <span class=\"token comment\">//形式： xxxYyyZzz...</span>\n<span class=\"token keyword\">var</span> goodPrice <span class=\"token builtin\">float32</span> <span class=\"token operator\">=</span> <span class=\"token number\">1234.5</span></code></pre>\n<ol start=\"3\">\n<li>如果变量名、函数名、常量名首字母大写，则可以被其他的包访问：如果首字母小写，则只能在本包中使用（注:可以简单的理解成，首字母大写是公开的，首字母小写是私有的），在golang没有public，private等关键字。</li>\n</ol>\n<ul>\n<li>案例演示：</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//路径:../main/main.go</span>\n<span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n    <span class=\"token comment\">//为了使用utils.go,引入该文件所在的包(注意你的环境变量)</span>\n\t<span class=\"token string\">\"go_code/chapter03/demo10/model\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//变量的使用事项</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//该区域的数据值可以在同一类型范围内不断变化</span>\n\t<span class=\"token keyword\">var</span> i <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\ti <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n\ti <span class=\"token operator\">=</span> <span class=\"token number\">50</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//i = 1.2 //int 原因是不能改变数据类型</span>\n\n\t<span class=\"token comment\">//变量在同一个作用域（在一个函数或者在代码块内）不能重名</span>\n\t<span class=\"token comment\">//var i int = 59</span>\n\t<span class=\"token comment\">//i := 99</span>\n\t<span class=\"token comment\">// 我们使用utils.go 的heroName 包名，标志符</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>HeroName<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/***********************************************/</span>\n<span class=\"token comment\">// 路径： ../model/utils.go</span>\n<span class=\"token keyword\">package</span> model\n\n<span class=\"token keyword\">var</span> HeroName <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"吴用\"</span></code></pre>\n<h2 id=\"系统保留关键字\"><a href=\"#系统保留关键字\" class=\"headerlink\" title=\"系统保留关键字\"></a>系统保留关键字</h2><h3 id=\"保留关键字介绍\"><a href=\"#保留关键字介绍\" class=\"headerlink\" title=\"保留关键字介绍\"></a>保留关键字介绍</h3><p>在Go中，为了简化代码编译过程中对代码的解析，其定义的保留关键字只有25个。详见如下</p>\n<table>\n<thead>\n<tr>\n<th>break</th>\n<th>default</th>\n<th>func</th>\n<th>interface</th>\n<th>select</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>case</td>\n<td>defer</td>\n<td>go</td>\n<td>map</td>\n<td>struct</td>\n</tr>\n<tr>\n<td>chan</td>\n<td>else</td>\n<td>goto</td>\n<td>package</td>\n<td>switch</td>\n</tr>\n<tr>\n<td>const</td>\n<td>fallthrough</td>\n<td>if</td>\n<td>range</td>\n<td>type</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>for</td>\n<td>import</td>\n<td>return</td>\n<td>var</td>\n</tr>\n</tbody></table>\n<h2 id=\"系统的预定义标识符\"><a href=\"#系统的预定义标识符\" class=\"headerlink\" title=\"系统的预定义标识符\"></a>系统的预定义标识符</h2><h3 id=\"预定义标识符介绍\"><a href=\"#预定义标识符介绍\" class=\"headerlink\" title=\"预定义标识符介绍\"></a>预定义标识符介绍</h3><p>除了保留关键字外，Go还提供了36个预定的标识符，其包括基础数据类型和系统内嵌函数</p>\n<table>\n<thead>\n<tr>\n<th>append</th>\n<th>bool</th>\n<th>byte</th>\n<th>cap</th>\n<th>close</th>\n<th>complex</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>complex64</td>\n<td>complex128</td>\n<td>uint16</td>\n<td>copy</td>\n<td>false</td>\n<td>float32</td>\n</tr>\n<tr>\n<td>float64</td>\n<td>imag</td>\n<td>int</td>\n<td>int8</td>\n<td>int16</td>\n<td>uint32</td>\n</tr>\n<tr>\n<td>int32</td>\n<td>int64</td>\n<td>iota</td>\n<td>len</td>\n<td>make</td>\n<td>new</td>\n</tr>\n<tr>\n<td>nil</td>\n<td>panic</td>\n<td>uint64</td>\n<td>print</td>\n<td>println</td>\n<td>rea</td>\n</tr>\n<tr>\n<td>recover</td>\n<td>string</td>\n<td>true</td>\n<td>uint</td>\n<td>uint8</td>\n<td>uintprt</td>\n</tr>\n</tbody></table>\n<hr>\n<p><strong>Go语言の变量这节结束啦！辛苦啦！</strong></p>\n","more":"<h2 id=\"为什么需要变量\"><a href=\"#为什么需要变量\" class=\"headerlink\" title=\"为什么需要变量\"></a>为什么需要变量</h2><p><strong>因为变量是高级程序语言的程序的基本组成单位，如下面的代码的实例：</strong></p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">getVal</span><span class=\"token punctuation\">(</span>num1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> num2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    sum <span class=\"token operator\">:=</span> num1 <span class=\"token operator\">+</span> num2\n    sub <span class=\"token operator\">:=</span> num2 <span class=\"token operator\">-</span> num1\n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">,</span> sub\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    sum<span class=\"token punctuation\">,</span> sub <span class=\"token operator\">:=</span> <span class=\"token function\">getVal</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum=\"</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">,</span><span class=\"token string\">\"sub=\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">)</span>\n    sum2<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> <span class=\"token function\">getVal</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//只取出第一个返回值</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum=\"</span><span class=\"token punctuation\">,</span> sum2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n<p>以上代码中的sum,sub都是变量。</p>\n<h2 id=\"变量的介绍\"><a href=\"#变量的介绍\" class=\"headerlink\" title=\"变量的介绍\"></a>变量的介绍</h2><h3 id=\"变量的概念\"><a href=\"#变量的概念\" class=\"headerlink\" title=\"变量的概念\"></a>变量的概念</h3><p>变量相当于内存中一个数据存储空间的表示，你可以把变量看作是一个房间的门牌号，通过门牌号我们可以找到房间，同样的道理，通过变量名可以访问到变量/变量的值。</p>\n<h3 id=\"变量的使用步骤\"><a href=\"#变量的使用步骤\" class=\"headerlink\" title=\"变量的使用步骤\"></a>变量的使用步骤</h3><ol>\n<li>声明变量（也叫定义变量）</li>\n<li>非变量赋值</li>\n<li>使用变量</li>\n</ol>\n<h2 id=\"变量快速入门案例\"><a href=\"#变量快速入门案例\" class=\"headerlink\" title=\"变量快速入门案例\"></a>变量快速入门案例</h2><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//定义变量/声明变量</span>\n\t<span class=\"token keyword\">var</span> i <span class=\"token builtin\">int</span>\n\t<span class=\"token comment\">//给i赋值</span>\n\ti <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\t<span class=\"token comment\">//使用变量</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>输出结果：</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210104214110.png\" alt=\"image-20210104214110288\"></p>\n<h2 id=\"变量使用注意事项\"><a href=\"#变量使用注意事项\" class=\"headerlink\" title=\"变量使用注意事项\"></a>变量使用注意事项</h2><ol>\n<li>变量表示内存中的一个存储区域</li>\n<li>该区域有自己的名称（变量名）和类型（数据类型）</li>\n</ol>\n<p>示意图:</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210104214226.png\" alt=\"image-20210104214226281\"></p>\n<ol start=\"3\">\n<li><p>Golang变量使用的三种方式</p>\n<ol>\n<li>指定变量类型，声明后若不赋值，使用默认值。<code>var i int</code></li>\n<li>根据值自行判定变量类型（类型推导）<code>var num = 10.11</code></li>\n<li>省略var,注意 := 左侧的变量不应该是已经声明过的，否则会导致编译错误</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">name <span class=\"token operator\">:=</span> <span class=\"token string\">\"tom\"</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name=\"</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span>\n</code></pre></li>\n<li><p>多变量声明</p>\n<p>在编程中，有时我们需要一次性声明多个变量，Golang也提供这样的语法，举例说明:</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//该案例演示golang如何一次性声明多个变量</span>\n    <span class=\"token comment\">// var n1, n2, n3 int</span>\n    <span class=\"token comment\">// fmt.Println(\"n1=\",n1, \"n2=\",n2 ,\"n3=\",n3)</span>\n    \n    <span class=\"token comment\">//方式2</span>\n    <span class=\"token comment\">// var n1, name, n3 = 100, \"tom\", 888</span>\n    <span class=\"token comment\">// fmt.Println(\"n1=\",n1, \"name=\",name ,\"n3=\",n3)</span>\n    \n    <span class=\"token comment\">//方式3 同样可以使用类型推导</span>\n    n1<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> n3 <span class=\"token operator\">:=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tom~\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">888</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name=\"</span><span class=\"token punctuation\">,</span>name <span class=\"token punctuation\">,</span><span class=\"token string\">\"n3=\"</span><span class=\"token punctuation\">,</span>n3<span class=\"token punctuation\">)</span>\n    \n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>​    如何一次性声明多个全局变量【在go中函数外部定义变量就是全局变量】：</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//定义全局变量</span>\n<span class=\"token keyword\">var</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token keyword\">var</span> n2 <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"jack\"</span>\n<span class=\"token comment\">//上面的声明方式，也可以改成一次性声明</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n    n3 <span class=\"token operator\">=</span> <span class=\"token number\">300</span>\n    n4 <span class=\"token operator\">=</span> <span class=\"token number\">900</span>\n    name2 <span class=\"token operator\">=</span> <span class=\"token string\">\"mary\"</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<ol start=\"5\">\n<li>该区域的数据值可以在同一类型范围内不断变化（重点）</li>\n</ol>\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token comment\">//变量使用的注意事项</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//该区域的数据值可以在同一类型范围内不断变化</span>\n    <span class=\"token keyword\">var</span> i <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">50</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span><span class=\"token comment\">//int， 原因是不能改变数据类型</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"6\">\n<li>变量在<strong>同一个作用域</strong>（在一个函数或者代码块）内不能重名</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> i <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">59</span>\ni <span class=\"token operator\">:=</span> <span class=\"token number\">99</span><span class=\"token comment\">//错误!</span></code></pre>\n<h2 id=\"变量的声明，初始化和赋值\"><a href=\"#变量的声明，初始化和赋值\" class=\"headerlink\" title=\"变量的声明，初始化和赋值\"></a>变量的声明，初始化和赋值</h2><ul>\n<li><p>声明变量</p>\n<ul>\n<li>基本语法： var 变量名 数据类型</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span> <span class=\"token comment\">//这就是声明了一个变量，变量名为a</span>\n\n<span class=\"token keyword\">var</span> num1 <span class=\"token builtin\">float32</span> <span class=\"token comment\">//这也是声明了一个变量，表示一个单精度类型的小数，变量名是num1</span></code></pre></li>\n<li><p>初始化变量</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//在声明变量的时候，就给值</span>\n<span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">45</span> <span class=\"token comment\">//这就是初始化变量a</span>\n<span class=\"token comment\">//使用细节，如过声明时就直接赋值，可以省略数据类型</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">400</span></code></pre></li>\n<li><p>给变量赋值</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//先声明变量</span>\n<span class=\"token keyword\">var</span> num in <span class=\"token comment\">//默认0</span>\n<span class=\"token comment\">//赋值</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">780</span> <span class=\"token comment\">//这就是赋值</span></code></pre>\n<h2 id=\"程序中”-“号的使用\"><a href=\"#程序中”-“号的使用\" class=\"headerlink\" title=\"程序中”+“号的使用\"></a>程序中”+“号的使用</h2></li>\n</ul>\n<ol>\n<li>当左右两边都是数值型时，则做加法运算</li>\n<li>当左右两边都是字符串，则做字符串拼接</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n<span class=\"token comment\">//演示golang中\"+\"的使用</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> j\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r=\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">var</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\n    <span class=\"token keyword\">var</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span>\n    <span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> str1 <span class=\"token operator\">+</span> str2 <span class=\"token comment\">//做拼接操作</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"数据类型的基本介绍\"><a href=\"#数据类型的基本介绍\" class=\"headerlink\" title=\"数据类型的基本介绍\"></a>数据类型的基本介绍</h2><ul>\n<li>每一种数据都定义了明确的数据类型，在内存中分配了不同大小的内存空间。</li>\n</ul>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210104223253.png\" alt=\"image-20210104223253926\"></p>\n<h2 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h2><h3 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>​    简单地说，就是用于存放整数值的，比如0，-1，2345等等。</p>\n<h3 id=\"案例演示\"><a href=\"#案例演示\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//演示Golang中整数类型的使用</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> i <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">//测试以下int8的范围 -128~127</span>\n    <span class=\"token comment\">//其他的 int16,int32,int64,类推...</span>\n    <span class=\"token keyword\">var</span> j <span class=\"token builtin\">int8</span> <span class=\"token operator\">=</span> <span class=\"token number\">127</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"j=\"</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"整数的各个类型\"><a href=\"#整数的各个类型\" class=\"headerlink\" title=\"整数的各个类型\"></a>整数的各个类型</h3><ul>\n<li>整形的类型</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>有无符号</th>\n<th>占用存储空间</th>\n<th>表数范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>int8</td>\n<td>有</td>\n<td>1字节</td>\n<td>-128~127</td>\n</tr>\n<tr>\n<td>int16</td>\n<td>有</td>\n<td>2字节</td>\n<td>-2<sup>15</sup>~2<sup>15</sup>-1</td>\n</tr>\n<tr>\n<td>int32</td>\n<td>有</td>\n<td>4字节</td>\n<td>-2<sup>31</sup>~2<sup>31</sup>-1</td>\n</tr>\n<tr>\n<td>int64</td>\n<td>有</td>\n<td>8字节</td>\n<td>-2<sup>63</sup>~2<sup>63</sup>-1</td>\n</tr>\n</tbody></table>\n<ul>\n<li>整形的无符号类型</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>有无符号</th>\n<th>占用存储空间</th>\n<th>表数范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>uint8</td>\n<td>无</td>\n<td>1字节</td>\n<td>0~255</td>\n</tr>\n<tr>\n<td>uint16</td>\n<td>无</td>\n<td>2字节</td>\n<td>0~2<sup>16</sup>-1</td>\n</tr>\n<tr>\n<td>uint32</td>\n<td>无</td>\n<td>4字节</td>\n<td>0~2<sup>32</sup>-1</td>\n</tr>\n<tr>\n<td>uint64</td>\n<td>无</td>\n<td>8字节</td>\n<td>0~2<sup>64</sup>-1</td>\n</tr>\n</tbody></table>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//测试一下uint8的范围（0~255），其他的uint16,uint32,uint64类推即可</span>\n<span class=\"token keyword\">var</span> k <span class=\"token builtin\">uint16</span> <span class=\"token operator\">=</span> <span class=\"token number\">255</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k=\"</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span></code></pre>\n<ul>\n<li>int的其他类型的说明：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>有无符号</th>\n<th>占用存储空间</th>\n<th>表数范围</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>int</td>\n<td>有</td>\n<td>32位系统4个字节<br />64位系统8个字节</td>\n<td>-2<sup>31</sup><del>2<sup>31</sup>-1<br />-2<sup>63</sup></del>2<sup>63</sup>-1</td>\n<td></td>\n</tr>\n<tr>\n<td>uint</td>\n<td>无</td>\n<td>32位系统4个字节<br />64位系统8个字节</td>\n<td>-0<del>2<sup>32</sup>-1<br />0</del>2<sup>64</sup>-1</td>\n<td></td>\n</tr>\n<tr>\n<td>rune</td>\n<td>有</td>\n<td>与int32一样</td>\n<td>-2<sup>31</sup>~2<sup>31</sup>-1</td>\n<td>等价int32，表示一个Unicode码</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>无</td>\n<td>与uint8等价</td>\n<td>0~255</td>\n<td>当要存储字符时选用byte</td>\n</tr>\n</tbody></table>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//int,uint,rune,byte的使用</span>\n<span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">8900</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> b <span class=\"token builtin\">uint</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">var</span> c <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token number\">255</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token string\">\"c=\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"整形的使用细节\"><a href=\"#整形的使用细节\" class=\"headerlink\" title=\"整形的使用细节\"></a>整形的使用细节</h3><ol>\n<li>Golang各整数类型分：有符号和无符号，int uint的大小和系统有关</li>\n<li>Golang的整型默认声明为int型</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//整形的使用细节</span>\n<span class=\"token keyword\">var</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\">//? n1是什么类型</span>\n<span class=\"token comment\">//这里我们给大家介绍如何查看某个变量的数据类型</span>\n<span class=\"token comment\">//fmt.Println() 可以用于做格式化输出。</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n1 的类型 %T \\n\"</span><span class=\"token punctuation\">,</span> n1<span class=\"token punctuation\">)</span></code></pre>\n<ol start=\"3\">\n<li>如何在程序查看某个变量的字节大小和数据类型 （使用较多）</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//如何在程序查看某个变量的占用字节大小和数据类型 （使用较多）</span>\n<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">int64</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token comment\">//unsafe.Sizeof(n1) 是unsafe包的一个函数，可以返回n1变量占用的字节数</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n2 的 类型 %T\tn2占用的字节数是 %d\"</span><span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span>n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<ol start=\"4\">\n<li>Golang程序中整型变量在使用时，遵守保小不保大的原则，即：在保证程序正确运行下，尽量使用占用空间小的数据类型。【如：年龄】</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//Golang程序中整型变量在使用时，遵守保小不保大的原则，</span>\n<span class=\"token comment\">//即：在保证程序正确运行下，尽量使用占用空间小的数据类型。</span>\n<span class=\"token keyword\">var</span> age <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token number\">90</span></code></pre>\n<ol start=\"5\">\n<li>bit:计算机中的最小存储单位。byte：计算机中基本存储单元。1 byte = 8 bit</li>\n</ol>\n<h2 id=\"小数类型-浮点型\"><a href=\"#小数类型-浮点型\" class=\"headerlink\" title=\"小数类型/浮点型\"></a>小数类型/浮点型</h2><h3 id=\"基本介绍-1\"><a href=\"#基本介绍-1\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>顾名思义，小数类型就是用于存放小数的，如1.2，0.23，-1.91</p>\n<h3 id=\"案例演示-1\"><a href=\"#案例演示-1\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//演示golang中小数类型使用</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> price <span class=\"token builtin\">float32</span> <span class=\"token operator\">=</span> <span class=\"token number\">89.12</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"price=\"</span><span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>运行结果如下图</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210107171749.png\" alt=\"image-20210107171748992\"></p>\n<h3 id=\"小数类型分类\"><a href=\"#小数类型分类\" class=\"headerlink\" title=\"小数类型分类\"></a>小数类型分类</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>占用存储空间</th>\n<th>表数范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单精度float32</td>\n<td>4字节</td>\n<td>-3.403E38~3.403E38</td>\n</tr>\n<tr>\n<td>双精度float64</td>\n<td>8字节</td>\n<td>-1.798E308~1.798E308</td>\n</tr>\n</tbody></table>\n<p><strong>说明</strong>:</p>\n<ol>\n<li>关于浮点数在机器中存放形式的简单说明，浮点数=符号位+指数位+尾数位，浮点数都是有符号的。</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210107172259.png\" alt=\"image-20210107172259894\"></p>\n<ol start=\"2\">\n<li>尾数部分可能丢失，造成精度损失。 -123.0000901</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210107172329.png\" alt=\"image-20210107172329694\"></p>\n<p><strong>说明：</strong></p>\n<ul>\n<li>float64的精度比float32的要准确</li>\n<li>如果我们要保存一个精度高的数，则应该选用float64</li>\n</ul>\n<ol start=\"3\">\n<li>浮点型的存储分为三部分：符号位+指数位+尾数位    在存储过程中，精度会有丢失哦</li>\n</ol>\n<h3 id=\"浮点型使用细节\"><a href=\"#浮点型使用细节\" class=\"headerlink\" title=\"浮点型使用细节\"></a>浮点型使用细节</h3><ol>\n<li><p>Golang浮点类型有固定的范围和字段长度，不受具体的操作系统的影响。</p>\n</li>\n<li><p>Golang的浮点型默认声明为float64类型。</p>\n</li>\n<li><p>浮点型常量有两种表示形式</p>\n<ul>\n<li>十进制数形式：如：5.12        .512（必须有小数点）</li>\n<li>科学计数法形式：如： 5.1234e2 = 5.12 * 10 ^ 2      5.12E-2 = 5.12/(10^2)</li>\n</ul>\n</li>\n<li><p>通常情况下，应该使用float64，因为它精度更高。</p>\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//Golang的浮点型默认声明为float64类型</span>\n<span class=\"token keyword\">var</span> num5 <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num5的数据类型是 %T \\n\"</span><span class=\"token punctuation\">,</span> num5<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//十进制数形式：如：5.12        .512（必须有小数点）</span>\nnum6 <span class=\"token operator\">:=</span> <span class=\"token number\">5.12</span>\nnum7 <span class=\"token operator\">:=</span> <span class=\"token number\">.123</span> <span class=\"token comment\">//->0.123</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num6=\"</span><span class=\"token punctuation\">,</span> num6<span class=\"token punctuation\">,</span> <span class=\"token string\">\"num7=\"</span><span class=\"token punctuation\">,</span> num7<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//科学计数法形式：如： 5.1234e2 = 5.12 * 10 ^ 2      5.12E-2 = 5.12/(10^2)</span>\nnum8 <span class=\"token operator\">:=</span> <span class=\"token number\">5.1234e2</span> <span class=\"token comment\">// 5.1234 * 10 ^ 2</span>\nnum8 <span class=\"token operator\">:=</span> <span class=\"token number\">5.1234E2</span> <span class=\"token comment\">// 5.1234 * 10 ^ 2</span></code></pre>\n<h2 id=\"字符类型\"><a href=\"#字符类型\" class=\"headerlink\" title=\"字符类型\"></a>字符类型</h2><h3 id=\"基本介绍-2\"><a href=\"#基本介绍-2\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>在Golang中没有专门的字符类型，如果要存储单个字符(字母)，一般使用byte来保存。</p>\n<p><strong>字符串就是一串固定长度的字符连接起来的字符序列。</strong>Go的字符串是由单个字节连接起来的。也就是说对于传统的字符串是由字符组成的，而Go的字符串不同，它是由字节组成的。</p>\n<h3 id=\"案例演示-2\"><a href=\"#案例演示-2\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//演示Golang中字符类型使用</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> c1 <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span>\n\t<span class=\"token keyword\">var</span> c2 <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span>   <span class=\"token comment\">//字符的0</span>\n\n\t<span class=\"token comment\">//当我们直接输出byte值，就是输出了对应字符的码值</span>\n\t<span class=\"token comment\">//'a' ==> </span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c1=\"</span><span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c2=\"</span><span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//如果我们希望输出对应字符，需要使用格式化输出</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c1=%c c2=%c\\n\"</span><span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//var c3 byte = '北' //overflow溢出</span>\n\t<span class=\"token keyword\">var</span> c3 <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token string\">'北'</span> <span class=\"token comment\">//overflow溢出</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c3=%c c3对应码值=%d\\n\"</span><span class=\"token punctuation\">,</span> c3<span class=\"token punctuation\">,</span> c3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210107183135.png\" alt=\"image-20210107183135116\"></p>\n<p><strong>对上述代码的说明</strong></p>\n<ol>\n<li>如果我们保存的字符在ASCII表中，比如[0-1，a-z,A-Z]  我们可以直接保存到byte中</li>\n<li>如果我们要保存的字符的对应码值大于255，这时我们可以考虑使用int类型保存</li>\n<li>如果我们需要按照字符的方式输出，此时就需要进行格式化输出，即<code>fmt.Printf(&quot;%c&quot;,c1)</code></li>\n</ol>\n<h3 id=\"字符类型使用细节\"><a href=\"#字符类型使用细节\" class=\"headerlink\" title=\"字符类型使用细节\"></a>字符类型使用细节</h3><ol>\n<li>字符常量是用单引号（”)括起来的单个字符。例如<code>var c1 byte = &#39;a&#39;</code>,<code>car c2 int = &#39;中&#39;</code>,<code>var c3 byte = &#39;9&#39;</code></li>\n<li>Go中允许使用转义字符’\\‘来将其后面的字符转变为特殊字符型常量。例如：<code>var c3 char = &#39;\\n&#39;  </code>（\\n表示换行符）</li>\n<li>Go语言的字符使UTF-8编码，如果想查询字符对应的utf8码值，请点击[链接](<a href=\"http://www.mytju.com/classcode/tools/encode_utf8.asp\">查看字符编码（UTF-8） (mytju.com)</a>). 英文字母占1个自己，汉字占3个字节</li>\n<li>在Go中，字符的本质是一个整数，直接输出时，是该字符对应的 UTF-8编码的码值。</li>\n<li>可以直接给某个变量赋一个数字，然后按格式化输出%c,会输出该数字对应的Unicode字符，如</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> c4 <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">22269</span> <span class=\"token comment\">//22269 -> '国'</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c4 = %c\\n\"</span><span class=\"token punctuation\">,</span> c4<span class=\"token punctuation\">)</span></code></pre>\n<ol start=\"6\">\n<li>字符类型可以进行运算，它相当于一个整数，因为每个字符都有对应的Unicode码。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token string\">'a'</span>   <span class=\"token comment\">// 10+97 = 107</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n1 = %c\\n\"</span><span class=\"token punctuation\">,</span> n1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//输出为k</span></code></pre>\n<h3 id=\"字符类型本质探讨\"><a href=\"#字符类型本质探讨\" class=\"headerlink\" title=\"字符类型本质探讨\"></a>字符类型本质探讨</h3><ol>\n<li>字符型存储到计算机中，需要将字符对应的码值（整数）找出来<ul>\n<li>存储： 字符 –&gt; 对应码值  –&gt; 二进制 –&gt; 存储</li>\n<li>读取： 二进制 –&gt;  码值 –&gt; 字符 –&gt; 读取</li>\n</ul>\n</li>\n<li>字符和码值的对应关系是通过字符编码表决定的（这是规定）</li>\n<li>Go语言的编码都统一成了UTF-8。这非常的方便，再也没有编码乱码的困扰了。</li>\n</ol>\n<h2 id=\"布尔类型\"><a href=\"#布尔类型\" class=\"headerlink\" title=\"布尔类型\"></a>布尔类型</h2><h3 id=\"基本介绍-3\"><a href=\"#基本介绍-3\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><ol>\n<li>布尔类型，又名bool类型，bool类型数据只允许取值true和false</li>\n<li>bool类型占1个字节</li>\n<li>bool类型适用于逻辑运算，一般用于程序流程控制（之后会详细了解）<ul>\n<li>if条件控制语句</li>\n<li>for循环控制语句</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"案例演示-3\"><a href=\"#案例演示-3\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"unsafe\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//演示Golang中bool类型的使用</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//注意事项</span>\n\t<span class=\"token comment\">//1. bool类型占用的存储空间是1字节</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b 的占用空间 = \"</span><span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//2. bool类型只能取true或false</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>运行结果</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210107185952.png\" alt=\"image-20210107185952514\"></p>\n<h2 id=\"string类型\"><a href=\"#string类型\" class=\"headerlink\" title=\"string类型\"></a>string类型</h2><h3 id=\"基本介绍-4\"><a href=\"#基本介绍-4\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>字符串就是一串固定长度的字符连接起来的字符序列。Go的字符串是由单个字节连接起来的。Go语言的字符串的字节使用UTF-8编码标识Unicode文本</p>\n<h3 id=\"案例演示-4\"><a href=\"#案例演示-4\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//演示Golang中string类型的使用</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//string的基本使用</span>\n\t<span class=\"token keyword\">var</span> address <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"北京长城 厉害了1234 hello world！\"</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"string的注意事项和细节\"><a href=\"#string的注意事项和细节\" class=\"headerlink\" title=\"string的注意事项和细节\"></a>string的注意事项和细节</h3><ol>\n<li>Go语言的字符串的字节使用UTF-8编码标识Unicode文本，这样Golang统一使用UTF-8编码，中文乱码问题不会再困扰程序员。</li>\n<li>字符串一旦赋值了，字符串就不能修改了：在Go中字符串是不可变的。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\nstr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span>    <span class=\"token comment\">//这里不能修改str的内容，也就是说Go中的字符串是不可变的</span></code></pre>\n<ol start=\"3\">\n<li>字符串的两种表示形式<ol>\n<li>双引号，会识别转义字符</li>\n<li>反引号，以字符串的原生形式输出，包括换行和特殊字符，可以实现防止攻击，输出源代码等效果。</li>\n</ol>\n</li>\n</ol>\n<p>【案例演示】</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//演示Golang中string类型的使用</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//string的基本使用</span>\n\taddress <span class=\"token operator\">:=</span> <span class=\"token string\">\"abc\\nabc\"</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span>\n\n\tstr2 <span class=\"token operator\">:=</span> <span class=\"token string\">`\n\tpackage main\n\timport (\n\t\t\"fmt\"\n\t)\n\t//演示Golang中string类型的使用\n\tfunc main() &#123;\n\t\t//string的基本使用\n\t\tvar address string = \"北京长城 厉害了1234 hello world！\"\n\t\tfmt.Println(address)\n\t&#125;\n\t`</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>运行结果:</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210107190838.png\" alt=\"image-20210107190838210\"></p>\n<ol start=\"4\">\n<li>字符串拼接方式</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//字符串拼接方式</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world\"</span>\nstr <span class=\"token operator\">+=</span> <span class=\"token string\">\" haha!\"</span></code></pre>\n<ol start=\"5\">\n<li>当一行字符串太长时，需要用到多行字符串，可以如下处理</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//当一个拼接的操作很长时，怎么办？可以分行写，但是注意，需要将+保留在上一行。</span>\nstr4 <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">+</span> \n<span class=\"token string\">\"world\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world\"</span> <span class=\"token operator\">+</span>\n<span class=\"token string\">\"hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world\"</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"基本数据类型的默认值\"><a href=\"#基本数据类型的默认值\" class=\"headerlink\" title=\"基本数据类型的默认值\"></a>基本数据类型的默认值</h2><h3 id=\"基本介绍-5\"><a href=\"#基本介绍-5\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>在Go中，数据类型都有一个默认值，当程序员没有赋值时，就会保留默认值，在Go中，默认值又叫零值。</p>\n<h3 id=\"基本数据类型的默认值-1\"><a href=\"#基本数据类型的默认值-1\" class=\"headerlink\" title=\"基本数据类型的默认值\"></a>基本数据类型的默认值</h3><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>整形</td>\n<td>0</td>\n</tr>\n<tr>\n<td>浮点型</td>\n<td>0</td>\n</tr>\n<tr>\n<td>字符串</td>\n<td>“”</td>\n</tr>\n<tr>\n<td>布尔类型</td>\n<td>false</td>\n</tr>\n</tbody></table>\n<h2 id=\"基本数据类型的相互转换\"><a href=\"#基本数据类型的相互转换\" class=\"headerlink\" title=\"基本数据类型的相互转换\"></a>基本数据类型的相互转换</h2><h3 id=\"基本介绍-6\"><a href=\"#基本介绍-6\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>Golang和java/C不同，Go在不同类型的变量之间赋值时<strong>需要显式转换</strong>。也就是说Golang中的数据类型不能自动转换。</p>\n<h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><p>表达式T(v)将值v转换为类型T</p>\n<p>T:就是数据类型，比如int32,int64.float32等等</p>\n<p>v：就是需要转换的变量</p>\n<h3 id=\"案例演示-5\"><a href=\"#案例演示-5\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> i <span class=\"token builtin\">int32</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token comment\">//希望将 i => float</span>\n<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">float32</span> <span class=\"token operator\">=</span> <span class=\"token function\">float32</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">int8</span> <span class=\"token operator\">=</span> <span class=\"token function\">int8</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> n3 <span class=\"token builtin\">int64</span> <span class=\"token operator\">=</span> <span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">//低精度->高精度</span>\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=%v n1=%v n2=%v n3=%v \\n\"</span><span class=\"token punctuation\">,</span> i <span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n3<span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>Go中，数据类型的转换可以是从 表示范围小–&gt;表示范围大，也可以从 表示范围大–&gt;表示范围小</li>\n<li>被转换的是变量存储的数据（即值），变量本身的数据类型并没有变化！</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> i <span class=\"token builtin\">int32</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token comment\">//被转换的是变量存储的数据(即值)，变量本身的数据类型并没有变化</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i type is %T\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token comment\">// int32</span></code></pre>\n<ol start=\"3\">\n<li>在转换中，比如将 int64 转换成 int8 【-128~127】，编译时不会报错，只是转换的结果按<strong>溢出处理</strong>。和我们希望的结果不一样。因此在转换时，需要考虑范围。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//在转换中，比如将 int64  转成 int8 【-128---127】 ，编译时不会报错，</span>\n<span class=\"token comment\">//只是转换的结果是按溢出处理，和我们希望的结果不一样</span>\n<span class=\"token keyword\">var</span> num1 <span class=\"token builtin\">int64</span> <span class=\"token operator\">=</span> <span class=\"token number\">999999</span>\n<span class=\"token keyword\">var</span> num2 <span class=\"token builtin\">int8</span> <span class=\"token operator\">=</span> <span class=\"token function\">int8</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// </span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num2=\"</span><span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"课堂练习\"><a href=\"#课堂练习\" class=\"headerlink\" title=\"课堂练习\"></a>课堂练习</h3><ul>\n<li>练习1</li>\n</ul>\n<p>如何修改一下代码，使之正确</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">int32</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    <span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">int64</span>\n    <span class=\"token keyword\">var</span> n3 <span class=\"token builtin\">int8</span>\n    n2 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">20</span>\n    n3 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">20</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>答案：</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">int32</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    <span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">int64</span>\n    <span class=\"token keyword\">var</span> n3 <span class=\"token builtin\">int8</span>\n    n2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span>     <span class=\"token comment\">//int32 --> int64错误</span>\n    n3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span>      <span class=\"token comment\">//int32 --> int8 错误</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>练习2 </li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">int32</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n<span class=\"token keyword\">var</span> n3 <span class=\"token builtin\">int8</span>\n<span class=\"token keyword\">var</span> n4 <span class=\"token builtin\">int8</span>\nn4 <span class=\"token operator\">=</span> <span class=\"token function\">int8</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">127</span> <span class=\"token comment\">//编译通过，值溢出</span>\nn3 <span class=\"token operator\">=</span> <span class=\"token function\">int8</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">128</span> <span class=\"token comment\">//编译不通过</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n4<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"基本数据类型和string的转换\"><a href=\"#基本数据类型和string的转换\" class=\"headerlink\" title=\"基本数据类型和string的转换\"></a>基本数据类型和string的转换</h2><h3 id=\"基本介绍-7\"><a href=\"#基本介绍-7\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>在程序开发中，我们经常将基本数据类型转成string。或者将string转成基本数据类型。</p>\n<h3 id=\"基本类型转string类型\"><a href=\"#基本类型转string类型\" class=\"headerlink\" title=\"基本类型转string类型\"></a>基本类型转string类型</h3><ul>\n<li><p>方式1：fmt.Sprintf(“%参数”，表达式)   【这个比较灵活】</p>\n<ul>\n<li><p>函数的介绍：</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//func Sprintf</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span>format <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>a <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token comment\">//Sprintf根据format参数生成格式化的字符串并返回该字符串。</span></code></pre>\n<p><strong>参数需要和表达式的数据类型相匹配</strong></p>\n</li>\n<li><p>案例演示</p>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//演示Golang中基本数据练习转成string使用</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> num1 <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">99</span>\n\t<span class=\"token keyword\">var</span> num2 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">23.456</span>\n\t<span class=\"token keyword\">var</span> b <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token keyword\">var</span> mychar <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token string\">'h'</span>\n\t<span class=\"token keyword\">var</span> str <span class=\"token builtin\">string</span> <span class=\"token comment\">//空的str</span>\n\n\t<span class=\"token comment\">//使用第一种方式来转换  fmt.Sprintf方法</span>\n\tstr <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> num1<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str type %T str=%q\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span>\n\n\tstr <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str type %T str=%q\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span>\n\t\n\tstr <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str type %T str=%q\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\n\tstr <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> mychar<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str type %T str=%q\\n\"</span><span class=\"token punctuation\">,</span> mychar<span class=\"token punctuation\">,</span> mychar<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>运行结果</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">str type string str&#x3D;&quot;99&quot;\nstr type string str&#x3D;&quot;%!d(float64&#x3D;23.456)&quot;\nstr type bool str&#x3D;%!q(bool&#x3D;true)\nstr type uint8 str&#x3D;&#39;h&#39;</code></pre></li>\n<li><p>方式2：使用strconv包的函数</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">FormatBool</span><span class=\"token punctuation\">(</span>b <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">FormatFloat</span><span class=\"token punctuation\">(</span>f <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> fmt <span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> prec<span class=\"token punctuation\">,</span> bitSize <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">FormatInt</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int64</span><span class=\"token punctuation\">,</span> base <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">FormatUint</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">,</span> base <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span></code></pre>\n<ul>\n<li>案例说明</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"strconv\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//第二种方式strconv函数</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> num3 <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">99</span>\n\t<span class=\"token keyword\">var</span> num4 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">23.456</span>\n\t<span class=\"token keyword\">var</span> b2 <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token keyword\">var</span> str <span class=\"token builtin\">string</span> <span class=\"token comment\">//空str</span>\n\tstr <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">FormatInt</span><span class=\"token punctuation\">(</span><span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>num3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str type %T str=%q\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//strconv.FormatFloat(num3, 'f', 10, 64)</span>\n\t<span class=\"token comment\">//说明： 'f'格式 10：表示小数位保留10位 64：表示这个小数是float64</span>\n\tstr <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">FormatFloat</span><span class=\"token punctuation\">(</span>num4<span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str type %T str=%q\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span>\n\n\tstr <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">FormatBool</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str type %T str=%q\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//strconv包中有一个函数Itoa</span>\n\t<span class=\"token keyword\">var</span> num5 <span class=\"token builtin\">int64</span> <span class=\"token operator\">=</span> <span class=\"token number\">4567</span>\n\tstr <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>num5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str type %T str=%q\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>运行结果</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">str type string str&#x3D;&quot;99&quot;\nstr type string str&#x3D;&quot;23.4560000000&quot;\nstr type string str&#x3D;&quot;true&quot;\nstr type string str&#x3D;&quot;4567&quot;</code></pre>\n<h3 id=\"string类型转基本数据类型\"><a href=\"#string类型转基本数据类型\" class=\"headerlink\" title=\"string类型转基本数据类型\"></a>string类型转基本数据类型</h3></li>\n<li><p>使用时strconv包的函数</p>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">ParseBool</span><span class=\"token punctuation\">(</span>str <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>value <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ParseFloat</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>bitSize <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>f <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ParseInt</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> base <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> bitSize <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int64</span><span class=\"token punctuation\">,</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ParseUint</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> bitSize <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">,</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span></code></pre>\n<ul>\n<li><p>案例演示</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"strconv\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//第二种方式strconv函数</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> str <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"true\"</span>\n\t<span class=\"token keyword\">var</span> b <span class=\"token builtin\">bool</span>\n\t<span class=\"token comment\">// b, _ = strconv.ParseBool(str)</span>\n\t<span class=\"token comment\">//说明</span>\n\t<span class=\"token comment\">//1. strconv.ParseBool(str) 函数会返回两个值 （value bool,err error)</span>\n\t<span class=\"token comment\">//2. 因为我只想获取到value bool, 不限孤鸿去err 所以我使用_忽略</span>\n\tb <span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseBool</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b type %T b=%v\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">var</span> str2 <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1234590\"</span>\n\t<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">int64</span>\n\t<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">int</span>\n\tn1<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseInt</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n\tn2 <span class=\"token operator\">=</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n1 type %T n1=%v\\n\"</span><span class=\"token punctuation\">,</span> n1<span class=\"token punctuation\">,</span> n1<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n2 type %T n2=%v\\n\"</span><span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">var</span> str3 <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"123.456\"</span>\n\t<span class=\"token keyword\">var</span> f1 <span class=\"token builtin\">float64</span>\n\tf1<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseFloat</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f1 type %T f1=%v\\n\"</span><span class=\"token punctuation\">,</span> f1<span class=\"token punctuation\">,</span> f1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>运行结果</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">b type bool b&#x3D;true\nn1 type int64 n1&#x3D;1234590\nn2 type int n2&#x3D;1234590\nf1 type float64 f1&#x3D;123.456</code></pre></li>\n<li><p>说明一下</p>\n<p><strong>因为返回的是int64或者float64，所以如果希望得到int32，float32等，要进行如下处理：</strong></p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> num5 <span class=\"token builtin\">int</span> <span class=\"token number\">32</span>\nnum5 <span class=\"token operator\">=</span> <span class=\"token function\">int32</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"string转基本数据类型的注意事项\"><a href=\"#string转基本数据类型的注意事项\" class=\"headerlink\" title=\"string转基本数据类型的注意事项\"></a>string转基本数据类型的注意事项</h3></li>\n</ul>\n<p>​    在将string类型转成基本数据类型时，要确保string类型能够转成有效的数据，比如我们可以把“123”，转成一个整数，但是我们不能将”hello”转成一个整数，如果这样做，Golang直接将其转成0，其他类型也是一样的道理.float–&gt;0      bool –&gt; false</p>\n<ul>\n<li>案例说明：</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//注意</span>\n<span class=\"token keyword\">var</span> str4 <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\n<span class=\"token keyword\">var</span> n3 <span class=\"token builtin\">int64</span> <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\nn3<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseInt</span><span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n3 type %T n3=%v\\n\"</span><span class=\"token punctuation\">,</span> n3<span class=\"token punctuation\">,</span> n3<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h2><h3 id=\"基本介绍-8\"><a href=\"#基本介绍-8\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><ol>\n<li>基本数据类型，变量存的就是值，也叫值类型</li>\n<li>获取变量的地址，用&amp;，比如: var num int, 获取num的地址： &amp;num</li>\n</ol>\n<ul>\n<li>分析一下基本数据类型在内存的布局</li>\n</ul>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210108160654.png\" alt=\"image-20210108160647027\"></p>\n<ol start=\"3\">\n<li>指针类型，指针变量保存的是一个地址，这个地址指向的空间存的才是值，比如：<code>var ptr *int = &amp;num</code> ，指针在内存的布局如图所示：<img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210108160833.png\" alt=\"image-20210108160833386\"></li>\n<li>获取指针类型所指向的值，使用：<em>，比如:<code>var ptr *int</code>，使用</em>ptr获取ptr指向的值。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//演示Golang中指针类型</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//基本数据类型在内存布局</span>\n\t<span class=\"token keyword\">var</span> i <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\t<span class=\"token comment\">// i 的地址是什么，&amp;i</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i的地址=\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//下面的 var ptr *int = &amp;i</span>\n\t<span class=\"token comment\">//1. ptr是一个指针变量</span>\n\t<span class=\"token comment\">//2. ptr的类型是 *int</span>\n\t<span class=\"token comment\">//3. ptr本身的值是 &amp;i</span>\n\t<span class=\"token keyword\">var</span> ptr <span class=\"token operator\">*</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr=%v\\n\"</span><span class=\"token punctuation\">,</span> ptr<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr 的地址=%v\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ptr<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr 指向的值=%v\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">ptr&#x3D;0xc000014090\nptr 的地址&#x3D;0xc000006030\nptr 指向的值&#x3D;10</code></pre>\n<ol start=\"5\">\n<li>一个案例再说明</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210108161524.png\" alt=\"image-20210108161524000\"></p>\n<h3 id=\"案例演示-6\"><a href=\"#案例演示-6\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h3><ol>\n<li>写一个程序，获取一个int变量num的地址，并显示到终端</li>\n<li>将num的地址赋给指针ptr，并通过ptr去修改num的值</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//案例演示</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> num <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num's address=%v\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">var</span> ptr <span class=\"token operator\">*</span><span class=\"token builtin\">int</span>\n\tptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>num\n\t<span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num=%d\\n\"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">num&#39;s address&#x3D;0xc000014090\nnum&#x3D;10</code></pre>\n<h3 id=\"指针的课堂练习\"><a href=\"#指针的课堂练习\" class=\"headerlink\" title=\"指针的课堂练习\"></a>指针的课堂练习</h3><ol>\n<li>这个代码中有无错误？</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">300</span>\n    <span class=\"token keyword\">var</span> ptr <span class=\"token operator\">*</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> a<span class=\"token comment\">//错误</span>\n    <span class=\"token comment\">//应该改成 var ptr *int = &amp;a(取地址)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">300</span>\n    <span class=\"token keyword\">var</span> ptr <span class=\"token operator\">*</span><span class=\"token builtin\">float32</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a <span class=\"token comment\">//错误 类型不匹配！</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">300</span>\n    <span class=\"token keyword\">var</span> b <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">400</span>\n    <span class=\"token keyword\">var</span> ptr <span class=\"token operator\">*</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a <span class=\"token comment\">//OK</span>\n    <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\">//等价于a = 100</span>\n    ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b <span class=\"token comment\">// OK</span>\n    <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token number\">200</span> <span class=\"token comment\">//b = 200</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=%d,b=%d,*ptr=%d\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//输出什么内容？</span>\n<span class=\"token comment\">/*\n输出a=100,b=200,*ptr=200\n*/</span></code></pre>\n<h3 id=\"指针的使用细节\"><a href=\"#指针的使用细节\" class=\"headerlink\" title=\"指针的使用细节\"></a>指针的使用细节</h3><ol>\n<li>值类型，都有对应的指针类型，形式为 *<strong>数据类型</strong>，比如说int的对应的指针就是<em>int,float32对应的指针类型就是 **</em>float32** 依次类推。</li>\n<li>值类型包括：基本数据类型，int 系列，float系列， bool,string，数组和结构体struct</li>\n</ol>\n<h2 id=\"值类型和引用类型\"><a href=\"#值类型和引用类型\" class=\"headerlink\" title=\"值类型和引用类型\"></a>值类型和引用类型</h2><h3 id=\"值类型和引用类型的说明\"><a href=\"#值类型和引用类型的说明\" class=\"headerlink\" title=\"值类型和引用类型的说明\"></a>值类型和引用类型的说明</h3><ol>\n<li>值类型：基本数据类型，int 系列，float系列， bool,string，数组和结构体struct</li>\n<li>引用类型：指针、slice切片、map、管道chan、interface等都是引用类型</li>\n</ol>\n<h3 id=\"值类型和引用类型的使用特点\"><a href=\"#值类型和引用类型的使用特点\" class=\"headerlink\" title=\"值类型和引用类型的使用特点\"></a>值类型和引用类型的使用特点</h3><ol>\n<li>值类型：变量直接存储值，内存通常在栈中分配</li>\n</ol>\n<p>示意图：<img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210108185224.png\" alt=\"image-20210108185224664\"></p>\n<ol start=\"2\">\n<li>引用类型：变量存储是一个地址，这个地址对应的空间才真正存储数据（值），内存通常在堆上分配，当没有任何变量引用这个地址时，该地址对应的数据空间就成为一个垃圾，由GC来回收</li>\n</ol>\n<p>示意图：<img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210108185333.png\" alt=\"image-20210108185333236\"></p>\n<ol start=\"3\">\n<li>内存的栈区和堆区示意图<img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210108185352.png\" alt=\"image-20210108185352262\"></li>\n</ol>\n<h2 id=\"标识符的命名规范\"><a href=\"#标识符的命名规范\" class=\"headerlink\" title=\"标识符的命名规范\"></a>标识符的命名规范</h2><h3 id=\"标识符概念\"><a href=\"#标识符概念\" class=\"headerlink\" title=\"标识符概念\"></a>标识符概念</h3><ol>\n<li>Golang对各种变量，方法，函数等命名时使用的字符序列称为标识符</li>\n<li>凡是自己可以取名字的地方都叫标识符</li>\n</ol>\n<h3 id=\"标识符的命名规则\"><a href=\"#标识符的命名规则\" class=\"headerlink\" title=\"标识符的命名规则\"></a>标识符的命名规则</h3><ol>\n<li>由26个英文字母大小写，0-9，_ 组成</li>\n<li>数字不可以开头。<code>var num int //ok</code>     <code>var 3num int  // error</code></li>\n<li>Golang中严格区分大小写。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> num <span class=\"token builtin\">int</span>\n<span class=\"token keyword\">var</span> Num <span class=\"token builtin\">int</span></code></pre>\n<p><strong>说明：</strong>在Golang中，num和Num是两个不同的变量</p>\n<ol start=\"4\">\n<li>标识符不能包含空格。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//这样8行！</span>\n<span class=\"token keyword\">var</span> ab c <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span></code></pre>\n<ol start=\"5\">\n<li>下划线”_”本身在Go中是一个特殊的标识符，称为空标识符。可以代表任何其它的标识符，但是它对应的值会被忽略（比如：忽略某个返回值)。所以仅能被作为占位符使用，不能作为标识符使用。</li>\n</ol>\n<pre class=\"language-Go\" data-language=\"Go\"><code class=\"language-Go\">&#x2F;&#x2F; _ 是空标识符，用于占用\nvar _ int &#x3D; 40 &#x2F;&#x2F;error\nfmt.Println(_) &#x2F;&#x2F;错的！8行！</code></pre>\n<ol start=\"6\">\n<li>不能以系统<strong>保留关键字</strong>作为标识符（一共有25个），比如  break, if 等等…</li>\n</ol>\n<h3 id=\"标识符的案例\"><a href=\"#标识符的案例\" class=\"headerlink\" title=\"标识符的案例\"></a>标识符的案例</h3><pre class=\"language-none\"><code class=\"language-none\">hello &#x2F;&#x2F;ok\nhello12 &#x2F;&#x2F;ok\n1hello &#x2F;&#x2F;error 数字开头不可取！\nh-b &#x2F;&#x2F;error 不能使用！\nx h &#x2F;&#x2F;error 不能含有空格\nh_4 &#x2F;&#x2F;ok\n_ab &#x2F;&#x2F;ok\nint &#x2F;&#x2F;ok 但是最好别这样使用\nfloat32 &#x2F;&#x2F;ok 但是最好别这样使用\n_ &#x2F;&#x2F;error 不行！\nAbc &#x2F;&#x2F; ok</code></pre>\n<h3 id=\"标识符命名注意事项\"><a href=\"#标识符命名注意事项\" class=\"headerlink\" title=\"标识符命名注意事项\"></a>标识符命名注意事项</h3><ol>\n<li>包名：保持package的名字和目录保持一致，尽量采取有意义的包名，简短，有意义，不要和标准库冲突 fmt</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20210108194237.png\"></p>\n<ol start=\"2\">\n<li>变量名、函数名、常量名：采用驼峰法</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//举例</span>\n<span class=\"token keyword\">var</span> stuName <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"tom\"</span>   <span class=\"token comment\">//形式： xxxYyyZzz...</span>\n<span class=\"token keyword\">var</span> goodPrice <span class=\"token builtin\">float32</span> <span class=\"token operator\">=</span> <span class=\"token number\">1234.5</span></code></pre>\n<ol start=\"3\">\n<li>如果变量名、函数名、常量名首字母大写，则可以被其他的包访问：如果首字母小写，则只能在本包中使用（注:可以简单的理解成，首字母大写是公开的，首字母小写是私有的），在golang没有public，private等关键字。</li>\n</ol>\n<ul>\n<li>案例演示：</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//路径:../main/main.go</span>\n<span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n    <span class=\"token comment\">//为了使用utils.go,引入该文件所在的包(注意你的环境变量)</span>\n\t<span class=\"token string\">\"go_code/chapter03/demo10/model\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//变量的使用事项</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//该区域的数据值可以在同一类型范围内不断变化</span>\n\t<span class=\"token keyword\">var</span> i <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\ti <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n\ti <span class=\"token operator\">=</span> <span class=\"token number\">50</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//i = 1.2 //int 原因是不能改变数据类型</span>\n\n\t<span class=\"token comment\">//变量在同一个作用域（在一个函数或者在代码块内）不能重名</span>\n\t<span class=\"token comment\">//var i int = 59</span>\n\t<span class=\"token comment\">//i := 99</span>\n\t<span class=\"token comment\">// 我们使用utils.go 的heroName 包名，标志符</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>HeroName<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/***********************************************/</span>\n<span class=\"token comment\">// 路径： ../model/utils.go</span>\n<span class=\"token keyword\">package</span> model\n\n<span class=\"token keyword\">var</span> HeroName <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"吴用\"</span></code></pre>\n<h2 id=\"系统保留关键字\"><a href=\"#系统保留关键字\" class=\"headerlink\" title=\"系统保留关键字\"></a>系统保留关键字</h2><h3 id=\"保留关键字介绍\"><a href=\"#保留关键字介绍\" class=\"headerlink\" title=\"保留关键字介绍\"></a>保留关键字介绍</h3><p>在Go中，为了简化代码编译过程中对代码的解析，其定义的保留关键字只有25个。详见如下</p>\n<table>\n<thead>\n<tr>\n<th>break</th>\n<th>default</th>\n<th>func</th>\n<th>interface</th>\n<th>select</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>case</td>\n<td>defer</td>\n<td>go</td>\n<td>map</td>\n<td>struct</td>\n</tr>\n<tr>\n<td>chan</td>\n<td>else</td>\n<td>goto</td>\n<td>package</td>\n<td>switch</td>\n</tr>\n<tr>\n<td>const</td>\n<td>fallthrough</td>\n<td>if</td>\n<td>range</td>\n<td>type</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>for</td>\n<td>import</td>\n<td>return</td>\n<td>var</td>\n</tr>\n</tbody></table>\n<h2 id=\"系统的预定义标识符\"><a href=\"#系统的预定义标识符\" class=\"headerlink\" title=\"系统的预定义标识符\"></a>系统的预定义标识符</h2><h3 id=\"预定义标识符介绍\"><a href=\"#预定义标识符介绍\" class=\"headerlink\" title=\"预定义标识符介绍\"></a>预定义标识符介绍</h3><p>除了保留关键字外，Go还提供了36个预定的标识符，其包括基础数据类型和系统内嵌函数</p>\n<table>\n<thead>\n<tr>\n<th>append</th>\n<th>bool</th>\n<th>byte</th>\n<th>cap</th>\n<th>close</th>\n<th>complex</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>complex64</td>\n<td>complex128</td>\n<td>uint16</td>\n<td>copy</td>\n<td>false</td>\n<td>float32</td>\n</tr>\n<tr>\n<td>float64</td>\n<td>imag</td>\n<td>int</td>\n<td>int8</td>\n<td>int16</td>\n<td>uint32</td>\n</tr>\n<tr>\n<td>int32</td>\n<td>int64</td>\n<td>iota</td>\n<td>len</td>\n<td>make</td>\n<td>new</td>\n</tr>\n<tr>\n<td>nil</td>\n<td>panic</td>\n<td>uint64</td>\n<td>print</td>\n<td>println</td>\n<td>rea</td>\n</tr>\n<tr>\n<td>recover</td>\n<td>string</td>\n<td>true</td>\n<td>uint</td>\n<td>uint8</td>\n<td>uintprt</td>\n</tr>\n</tbody></table>\n<hr>\n<p><strong>Go语言の变量这节结束啦！辛苦啦！</strong></p>","categories":[],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}