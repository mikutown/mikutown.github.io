{"title":"Numpy练习_数据清洗","slug":"Numpy练习-数据清洗","date":"2022-05-24T16:24:09.000Z","updated":"2022-05-29T11:32:23.035Z","comments":true,"path":"api/articles/Numpy练习-数据清洗.json","excerpt":"Numpy练习_数据清洗​        Numpy 的一切都是和数据打交道，那么在大数据时代，数据其实是不完整，不完美的。比如下面这张图里面， 你会发现，这份数据显然有些不完整的地方，city有数据缺失，duration 虽然是时间上的数据，但是时间单位不统一，时间格式不统一， 这都给后面我们让机器使用这份数据增加难度。","covers":["http://cdn.leafii.top/img/20220529123648.png"],"content":"<h1 id=\"Numpy练习-数据清洗\"><a href=\"#Numpy练习-数据清洗\" class=\"headerlink\" title=\"Numpy练习_数据清洗\"></a>Numpy练习_数据清洗</h1><p>​        Numpy 的一切都是和数据打交道，那么在大数据时代，数据其实是不完整，不完美的。比如下面这张图里面， 你会发现，这份数据显然有些不完整的地方，city有数据缺失，duration 虽然是时间上的数据，但是时间单位不统一，时间格式不统一， 这都给后面我们让机器使用这份数据增加难度。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"http://cdn.leafii.top/img/20220529123648.png\" loading=\"lazy\"></p>\n<p>​        这次课程我会展示如何用 Numpy 处理 Numpy 比较擅长的数据清理。但是在数据清理上，还有一个更好用的 Pandas 库，我们会在后期的教学当中，一步步深入到。</p>\n<h2 id=\"脏数据\"><a href=\"#脏数据\" class=\"headerlink\" title=\"脏数据\"></a>脏数据</h2><p>​        如果你真有做过数据分析，当你拿到一份数据的时候，是十分期望这份数据没什么问题的，但是事与愿违，通常这份数据都多多少少有些问题。 常见的脏数据种类有：</p>\n<ol>\n<li>数据值缺失</li>\n<li>数据值异常大或小</li>\n<li>格式错误</li>\n<li>非独立数据错误</li>\n</ol>\n<p>​        一般来说，你遇到的数都是需要从外部存储读取出来的，但是为了简化这节的内容，我们直接用Python的List来做一份数据。想要学习使用Numpy读取保存数据的话，可以看下一篇文章。</p>\n<p>​        自造数据</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">raw_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"StudentID\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"AttendClass\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Score\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20131</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"小花\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20132</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"小菜\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20133</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"98\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"小七\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20134</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">110</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"花菜\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20134</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"刘欣\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20136</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>raw_data<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        这是一份学生上课的考试的数据，里面记录了学生姓名，ID，年龄，是否上过课（1-上过，0-没上），课程成绩信息。 比这复杂的数据还有很多，但是这份数据中的脏数据类型基本上都涵盖了我上面讲的那些。</p>\n<p>​        首先，我们要做的就是把这份 Python list 数据转化成 Numpy 数据。其实用 Python 列表也能做数据清洗工作， 但为什么要用 Numpy 来做呢？这不得不提到 Numpy 面对大数据时，它得天独厚的计算速度优势了。同样一份 1GB 的数据，Python List 处理起来可能要 1 小时， Numpy 优化后，速度可以成倍增长。</p>\n<p>​        首先，我们尝试直接转一下 Python list 到 Numpy Array，看看会不会有问题。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>raw_data<span class=\"token punctuation\">)</span>\ndata</code></pre>\n\n<p>​         运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">array([[&#39;Name&#39;, &#39;StudentID&#39;, &#39;Age&#39;, &#39;AttendClass&#39;, &#39;Score&#39;],\n       [&#39;小明&#39;, 20131, 10, 1, 67],\n       [&#39;小花&#39;, 20132, 11, 1, 88],\n       [&#39;小菜&#39;, 20133, None, 1, &#39;98&#39;],\n       [&#39;小七&#39;, 20134, 8, 1, 110],\n       [&#39;花菜&#39;, 20134, 98, 0, None],\n       [&#39;刘欣&#39;, 20136, 12, 0, 12]], dtype&#x3D;object)</code></pre>\n\n<p>​        你会发现，这时的 array 输出的结果，结尾处有一个标识。<code>dtype=object</code>，这是什么意思呢？（剧透一下：这种 dtype 会对后续数据处理带来很多麻烦） 我们对比一下如果是纯数据的格式，numpy 的 dtype 是什么样。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">test1 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ntest2 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ntest3 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test1.dtype\"</span><span class=\"token punctuation\">,</span> test1<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test2.dtype\"</span><span class=\"token punctuation\">,</span> test2<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test3.dtype\"</span><span class=\"token punctuation\">,</span> test3<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test2 > 2 \"</span><span class=\"token punctuation\">,</span> test2 <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data > 2\"</span><span class=\"token punctuation\">,</span> data <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 这里会报错</span>\n<span class=\"token comment\">#TypeError: '>' not supported between instances of 'str' and 'int'</span></code></pre>\n\n<p>​        我们可以看到不同的array创建方式，可能有不同的dtype，而之前的<code>data.dtype=object</code>，说明Python list直接转换的 <code>data</code>是无法参与诸多Numpy计算的。而只有<code>dtype</code>为<code>int</code>,<code>float</code>这样的数值格式，才能参与运算。</p>\n<h2 id=\"数据预处理\"><a href=\"#数据预处理\" class=\"headerlink\" title=\"数据预处理\"></a>数据预处理</h2><p>​        那怎么办呢？我们怎么才能把那个又有 string，又有 None，还有数值的数据转换为 Numpy 能运算的数据呢？ 方法很简单，我们筛选过滤一下。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">data_process <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>raw_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">continue</span>    <span class=\"token comment\"># 不要首行字符串</span>\n    <span class=\"token comment\"># 去掉首列名字</span>\n    data_process<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>raw_data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>data_process<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.dtype\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> </code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[2.0131e+04 1.0000e+01 1.0000e+00 6.7000e+01]\n [2.0132e+04 1.1000e+01 1.0000e+00 8.8000e+01]\n [2.0133e+04        nan 1.0000e+00 9.8000e+01]\n [2.0134e+04 8.0000e+00 1.0000e+00 1.1000e+02]\n [2.0134e+04 9.8000e+01 0.0000e+00        nan]\n [2.0136e+04 1.2000e+01 0.0000e+00 1.2000e+01]]</code></pre>\n\n\n\n<p>​        有同学可能注意到了，这份数据没有 <code>float</code>，应该是全部是整数 <code>int</code>，为什么我在创建 array 的时候，选的 <code>dtype=np.float</code> 呢？ 那是因为 <code>dtype=np.int</code> 会报错呀，不信你试试。因为这份数据中存在 <code>None</code>，而只有 <code>np.float</code> 能转换 <code>None</code>，所以不是我不想，而是人家不让。</p>\n<p>另外有趣的一个点是，我们在原始数据中有一个字符串的 98，这个字符串也被转换成数字了，可见 numpy 还自动帮我们处理了一部份能被转换的数字。</p>\n<p>好了，现在总算是把这个数据的预处理做好了，接下来就要来清洗数据啦。</p>\n<h2 id=\"清洗数据\"><a href=\"#清洗数据\" class=\"headerlink\" title=\"清洗数据\"></a>清洗数据</h2><p>​        怎么清洗脏数据，取决于你要拿这个数据做什么，很明显，我们想要看看有没有什么数据是不合逻辑的。比如我发现学号有重复，可能是在输入学生信息的时候手误输错了。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">sid <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nunique<span class=\"token punctuation\">,</span> counts <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>unique<span class=\"token punctuation\">(</span>sid<span class=\"token punctuation\">,</span> return_counts<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>counts<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#[1 1 1 2 1]</span></code></pre>\n\n<p>​        <code>np.unique()</code> 功能为用来查找数据中独一无二的数据的，<code>return_counts</code> 让我能清楚看到是数据的重复数量。 比如有一个数据重复出现了 2 次。我们来看看是哪个数据出现了多次。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>unique<span class=\"token punctuation\">[</span>counts <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#[20134.]</span></code></pre>\n\n<p>​        然后综合判断，我们的数据中少了一个 <code>20135</code>，可能就是把某个同学的学号输错了，我们将错误的同学修改过来。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">data<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20135</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        学号应该就没有大问题了。我们来看看第二列 <code>Age</code> 年龄。一眼可以发现，存在两个问题，有一个同学没有年龄。我们看看能不能用平均年龄补全这个缺失的信息。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">is_nan <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>isnan<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"is_nan:\"</span><span class=\"token punctuation\">,</span> is_nan<span class=\"token punctuation\">)</span>\nnan_idx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argwhere<span class=\"token punctuation\">(</span>is_nan<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 计算有数据的平均年龄，用 ~ 符号可以 True/False 对调</span>\nmean_age <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>np<span class=\"token punctuation\">.</span>isnan<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"有数据的平均年龄：\"</span><span class=\"token punctuation\">,</span> mean_age<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        <strong>呀！为啥平均年龄有 27.8 岁，不正常啊！是的，在你处理自己的数据的时候，也会遇到不太正常的情况。</strong> 是哪里出问题了呢？原来仔细看，我们居然有一个 98 岁的学生。 这不太正常啊，所以我觉得我也得把这个 98 岁的当异常数据看待。（在你的项目中，你也要综合判断哪些是异常数据）。我也没什么好办法，就用除开 98 和 nan 的数据， 计算其它数的平均值代替他们吧。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># ~ 表示 True/False 对调，&amp; 就是逐个做 Python and 的运算</span>\nnormal_age_mask <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>np<span class=\"token punctuation\">.</span>isnan<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"normal_age_mask:\"</span><span class=\"token punctuation\">,</span> normal_age_mask<span class=\"token punctuation\">)</span>\n\nnormal_age_mean <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>normal_age_mask<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"normal_age_mean:\"</span><span class=\"token punctuation\">,</span> normal_age_mean<span class=\"token punctuation\">)</span>\n\ndata<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>normal_age_mask<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> normal_age_mean\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ages:\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        到这一步之后，我们要看看上课和成绩的数据需不需要清洗。按理来说，如果没有上课（0），课程的成绩应该是不存在的（nan）；上课了（1）才会有成绩。 所以我们观察下面两组数据：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        你会发现，倒数第二行的数据还算是 ok 的，因为没上课，就没成绩，但是倒数第一行，没上课，怎么还有成绩？还有倒数第三行，成绩居然超出了满分 100 分。这些情况都是我们要处理的情况。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 没上课的转成 nan</span>\ndata<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>nan\n\n<span class=\"token comment\"># 超过 100 分和低于 0 分的都处理一下</span>\ndata<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>clip<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>好了，数据清洗的工作已经告一段落啦。你会发现，即使是这么小规模的数据，我们也能体验到多种不同情况的数据清洗工作:</p>\n<ol>\n<li>数据值缺失</li>\n<li>数据值异常大或小</li>\n<li>格式错误</li>\n<li>非独立数据错误</li>\n</ol>\n<p>有了这次体验，我相信你在自己的数据上也能更清楚如何操作了。</p>\n","more":"<p><img src=\"http://cdn.leafii.top/img/20220529123648.png\"></p>\n<p>​        这次课程我会展示如何用 Numpy 处理 Numpy 比较擅长的数据清理。但是在数据清理上，还有一个更好用的 Pandas 库，我们会在后期的教学当中，一步步深入到。</p>\n<h2 id=\"脏数据\"><a href=\"#脏数据\" class=\"headerlink\" title=\"脏数据\"></a>脏数据</h2><p>​        如果你真有做过数据分析，当你拿到一份数据的时候，是十分期望这份数据没什么问题的，但是事与愿违，通常这份数据都多多少少有些问题。 常见的脏数据种类有：</p>\n<ol>\n<li>数据值缺失</li>\n<li>数据值异常大或小</li>\n<li>格式错误</li>\n<li>非独立数据错误</li>\n</ol>\n<p>​        一般来说，你遇到的数都是需要从外部存储读取出来的，但是为了简化这节的内容，我们直接用Python的List来做一份数据。想要学习使用Numpy读取保存数据的话，可以看下一篇文章。</p>\n<p>​        自造数据</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">raw_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"StudentID\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"AttendClass\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Score\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20131</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"小花\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20132</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"小菜\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20133</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"98\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"小七\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20134</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">110</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"花菜\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20134</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"刘欣\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20136</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>raw_data<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        这是一份学生上课的考试的数据，里面记录了学生姓名，ID，年龄，是否上过课（1-上过，0-没上），课程成绩信息。 比这复杂的数据还有很多，但是这份数据中的脏数据类型基本上都涵盖了我上面讲的那些。</p>\n<p>​        首先，我们要做的就是把这份 Python list 数据转化成 Numpy 数据。其实用 Python 列表也能做数据清洗工作， 但为什么要用 Numpy 来做呢？这不得不提到 Numpy 面对大数据时，它得天独厚的计算速度优势了。同样一份 1GB 的数据，Python List 处理起来可能要 1 小时， Numpy 优化后，速度可以成倍增长。</p>\n<p>​        首先，我们尝试直接转一下 Python list 到 Numpy Array，看看会不会有问题。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>raw_data<span class=\"token punctuation\">)</span>\ndata</code></pre>\n\n<p>​         运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">array([[&#39;Name&#39;, &#39;StudentID&#39;, &#39;Age&#39;, &#39;AttendClass&#39;, &#39;Score&#39;],\n       [&#39;小明&#39;, 20131, 10, 1, 67],\n       [&#39;小花&#39;, 20132, 11, 1, 88],\n       [&#39;小菜&#39;, 20133, None, 1, &#39;98&#39;],\n       [&#39;小七&#39;, 20134, 8, 1, 110],\n       [&#39;花菜&#39;, 20134, 98, 0, None],\n       [&#39;刘欣&#39;, 20136, 12, 0, 12]], dtype&#x3D;object)</code></pre>\n\n<p>​        你会发现，这时的 array 输出的结果，结尾处有一个标识。<code>dtype=object</code>，这是什么意思呢？（剧透一下：这种 dtype 会对后续数据处理带来很多麻烦） 我们对比一下如果是纯数据的格式，numpy 的 dtype 是什么样。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">test1 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ntest2 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ntest3 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test1.dtype\"</span><span class=\"token punctuation\">,</span> test1<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test2.dtype\"</span><span class=\"token punctuation\">,</span> test2<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test3.dtype\"</span><span class=\"token punctuation\">,</span> test3<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test2 > 2 \"</span><span class=\"token punctuation\">,</span> test2 <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data > 2\"</span><span class=\"token punctuation\">,</span> data <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 这里会报错</span>\n<span class=\"token comment\">#TypeError: '>' not supported between instances of 'str' and 'int'</span></code></pre>\n\n<p>​        我们可以看到不同的array创建方式，可能有不同的dtype，而之前的<code>data.dtype=object</code>，说明Python list直接转换的 <code>data</code>是无法参与诸多Numpy计算的。而只有<code>dtype</code>为<code>int</code>,<code>float</code>这样的数值格式，才能参与运算。</p>\n<h2 id=\"数据预处理\"><a href=\"#数据预处理\" class=\"headerlink\" title=\"数据预处理\"></a>数据预处理</h2><p>​        那怎么办呢？我们怎么才能把那个又有 string，又有 None，还有数值的数据转换为 Numpy 能运算的数据呢？ 方法很简单，我们筛选过滤一下。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">data_process <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>raw_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">continue</span>    <span class=\"token comment\"># 不要首行字符串</span>\n    <span class=\"token comment\"># 去掉首列名字</span>\n    data_process<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>raw_data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>data_process<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.dtype\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> </code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[2.0131e+04 1.0000e+01 1.0000e+00 6.7000e+01]\n [2.0132e+04 1.1000e+01 1.0000e+00 8.8000e+01]\n [2.0133e+04        nan 1.0000e+00 9.8000e+01]\n [2.0134e+04 8.0000e+00 1.0000e+00 1.1000e+02]\n [2.0134e+04 9.8000e+01 0.0000e+00        nan]\n [2.0136e+04 1.2000e+01 0.0000e+00 1.2000e+01]]</code></pre>\n\n\n\n<p>​        有同学可能注意到了，这份数据没有 <code>float</code>，应该是全部是整数 <code>int</code>，为什么我在创建 array 的时候，选的 <code>dtype=np.float</code> 呢？ 那是因为 <code>dtype=np.int</code> 会报错呀，不信你试试。因为这份数据中存在 <code>None</code>，而只有 <code>np.float</code> 能转换 <code>None</code>，所以不是我不想，而是人家不让。</p>\n<p>另外有趣的一个点是，我们在原始数据中有一个字符串的 98，这个字符串也被转换成数字了，可见 numpy 还自动帮我们处理了一部份能被转换的数字。</p>\n<p>好了，现在总算是把这个数据的预处理做好了，接下来就要来清洗数据啦。</p>\n<h2 id=\"清洗数据\"><a href=\"#清洗数据\" class=\"headerlink\" title=\"清洗数据\"></a>清洗数据</h2><p>​        怎么清洗脏数据，取决于你要拿这个数据做什么，很明显，我们想要看看有没有什么数据是不合逻辑的。比如我发现学号有重复，可能是在输入学生信息的时候手误输错了。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">sid <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nunique<span class=\"token punctuation\">,</span> counts <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>unique<span class=\"token punctuation\">(</span>sid<span class=\"token punctuation\">,</span> return_counts<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>counts<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#[1 1 1 2 1]</span></code></pre>\n\n<p>​        <code>np.unique()</code> 功能为用来查找数据中独一无二的数据的，<code>return_counts</code> 让我能清楚看到是数据的重复数量。 比如有一个数据重复出现了 2 次。我们来看看是哪个数据出现了多次。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>unique<span class=\"token punctuation\">[</span>counts <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#[20134.]</span></code></pre>\n\n<p>​        然后综合判断，我们的数据中少了一个 <code>20135</code>，可能就是把某个同学的学号输错了，我们将错误的同学修改过来。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">data<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20135</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        学号应该就没有大问题了。我们来看看第二列 <code>Age</code> 年龄。一眼可以发现，存在两个问题，有一个同学没有年龄。我们看看能不能用平均年龄补全这个缺失的信息。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">is_nan <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>isnan<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"is_nan:\"</span><span class=\"token punctuation\">,</span> is_nan<span class=\"token punctuation\">)</span>\nnan_idx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argwhere<span class=\"token punctuation\">(</span>is_nan<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 计算有数据的平均年龄，用 ~ 符号可以 True/False 对调</span>\nmean_age <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>np<span class=\"token punctuation\">.</span>isnan<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"有数据的平均年龄：\"</span><span class=\"token punctuation\">,</span> mean_age<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        <strong>呀！为啥平均年龄有 27.8 岁，不正常啊！是的，在你处理自己的数据的时候，也会遇到不太正常的情况。</strong> 是哪里出问题了呢？原来仔细看，我们居然有一个 98 岁的学生。 这不太正常啊，所以我觉得我也得把这个 98 岁的当异常数据看待。（在你的项目中，你也要综合判断哪些是异常数据）。我也没什么好办法，就用除开 98 和 nan 的数据， 计算其它数的平均值代替他们吧。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># ~ 表示 True/False 对调，&amp; 就是逐个做 Python and 的运算</span>\nnormal_age_mask <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>np<span class=\"token punctuation\">.</span>isnan<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"normal_age_mask:\"</span><span class=\"token punctuation\">,</span> normal_age_mask<span class=\"token punctuation\">)</span>\n\nnormal_age_mean <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>normal_age_mask<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"normal_age_mean:\"</span><span class=\"token punctuation\">,</span> normal_age_mean<span class=\"token punctuation\">)</span>\n\ndata<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>normal_age_mask<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> normal_age_mean\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ages:\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        到这一步之后，我们要看看上课和成绩的数据需不需要清洗。按理来说，如果没有上课（0），课程的成绩应该是不存在的（nan）；上课了（1）才会有成绩。 所以我们观察下面两组数据：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        你会发现，倒数第二行的数据还算是 ok 的，因为没上课，就没成绩，但是倒数第一行，没上课，怎么还有成绩？还有倒数第三行，成绩居然超出了满分 100 分。这些情况都是我们要处理的情况。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 没上课的转成 nan</span>\ndata<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>nan\n\n<span class=\"token comment\"># 超过 100 分和低于 0 分的都处理一下</span>\ndata<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>clip<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>好了，数据清洗的工作已经告一段落啦。你会发现，即使是这么小规模的数据，我们也能体验到多种不同情况的数据清洗工作:</p>\n<ol>\n<li>数据值缺失</li>\n<li>数据值异常大或小</li>\n<li>格式错误</li>\n<li>非独立数据错误</li>\n</ol>\n<p>有了这次体验，我相信你在自己的数据上也能更清楚如何操作了。</p>","categories":[],"tags":[{"name":"python","path":"api/tags/python.json"},{"name":"机器学习基础","path":"api/tags/机器学习基础.json"}]}