{"title":"leetcode980.不同路径III","slug":"leetcode980-不同路径III","date":"2023-07-21T01:12:46.000Z","updated":"2023-07-21T01:26:26.514Z","comments":true,"path":"api/articles/leetcode980-不同路径III.json","excerpt":"题目在二维网格 grid 上，有 4 种类型的方格：1 表示起始方格。且只有一个起始方格。2 表示结束方格，且只有一个结束方格。0 表示我们可以走过的空方格。-1 表示我们无法跨越的障碍。返回在四个方向（上、下、左、右）上行走时，从起始方格到结束方格的不同路径的数目。每一个无障碍方格都要通过一次，但是一条路径中不能重复通过同一个方格。","covers":null,"content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>在二维网格 <code>grid</code> 上，有 4 种类型的方格：</p>\n<ul>\n<li><code>1</code> 表示起始方格。且只有一个起始方格。</li>\n<li><code>2</code> 表示结束方格，且只有一个结束方格。</li>\n<li><code>0</code> 表示我们可以走过的空方格。</li>\n<li><code>-1</code> 表示我们无法跨越的障碍。</li>\n</ul>\n<p>返回在四个方向（上、下、左、右）上行走时，从起始方格到结束方格的不同路径的数目<strong>。</strong></p>\n<p><strong>每一个无障碍方格都要通过一次，但是一条路径中不能重复通过同一个方格</strong>。</p>\n <span id=\"more\"></span>\n\n<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：[[1,0,0,0],[0,0,0,0],[0,0,2,-1]]\n输出：2\n解释：我们有以下两条路径：\n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：[[1,0,0,0],[0,0,0,0],[0,0,0,2]]\n输出：4\n解释：我们有以下四条路径： \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)</code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：[[0,1],[2,0]]\n输出：0\n解释：\n没有一条路能完全穿过每一个空的方格一次。\n请注意，起始和结束方格可以位于网格中的任意位置。</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= grid.length * grid[0].length &lt;= 20</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><blockquote>\n<p> 答案所要求的路径其实就是从1到2在没有经过重复的位置的情况下长度为<br>【0的个数 + 2】的路径 所以其实可以直接dfs，并在dfs时记录路径的长度，当我们走到2的位置的时候，检查路径长度是否足够长即可。为了避免走重复的位置，我们在经过一个位置时将该位置标记为-1，递归函数结束时恢复为0即可。</p>\n</blockquote>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    int uniquePathsIII(vector&lt;vector&lt;int&gt;&gt;&amp; grid) &#123;\n        int m &#x3D; grid.size(), n &#x3D; grid[0].size();\n        &#x2F;&#x2F; 定义四个方向的偏移量，用于遍历上、下、左、右四个方向\n        short dis_x[] &#x3D; &#123;1, -1, 0, 0&#125;, dis_y[] &#x3D; &#123;0, 0, 1, -1&#125;;\n        int ret &#x3D; 0;\n        &#x2F;&#x2F; x1, y1是起点（值为1）的坐标，x2, y2是终点（值为2）的坐标，len是目标长度（包括起点和终点）\n        int x1, y1, x2, y2, len &#x3D; 2;\n        &#x2F;&#x2F; 遍历整个矩阵，计算0的个数，以及获取1和2的坐标\n        for (int i &#x3D; 0; i &lt; m; ++i) &#123;\n            for (int j &#x3D; 0; j &lt; n; ++j) &#123;\n                switch (grid[i][j]) &#123;\n                    case 0: &#x2F;&#x2F; 值为0，代表可访问的空格，目标长度len需要加1\n                        ++len;\n                        break;\n                    case 1: &#x2F;&#x2F; 值为1，代表起点\n                        x1 &#x3D; i;\n                        y1 &#x3D; j;\n                        break;\n                    case 2: &#x2F;&#x2F; 值为2，代表终点\n                        x2 &#x3D; i;\n                        y2 &#x3D; j;\n                        break;\n                &#125;\n            &#125;\n        &#125;\n        \n        &#x2F;&#x2F; 定义深度优先搜索函数，使用lambda表达式\n        function&lt;void(int, int, int)&gt; dfs &#x3D; [&amp;](int x, int y, int cnt) &#123;\n            if (x &#x3D;&#x3D; x2 &amp;&amp; y &#x3D;&#x3D; y2) &#123; &#x2F;&#x2F; 如果当前坐标为终点坐标\n                if (cnt &#x3D;&#x3D; len) &#x2F;&#x2F; 如果路径长度等于目标长度（包括起点和终点），则结果ret加1\n                    ++ret;\n                return;\n            &#125;\n            grid[x][y] &#x3D; -1; &#x2F;&#x2F; 将当前坐标标记为已访问（-1）\n            for (int i &#x3D; 0; i &lt; 4; ++i) &#123; &#x2F;&#x2F; 尝试向四个方向进行搜索\n                int nx &#x3D; dis_x[i] + x; &#x2F;&#x2F; 计算下一个搜索位置的横坐标\n                int ny &#x3D; dis_y[i] + y; &#x2F;&#x2F; 计算下一个搜索位置的纵坐标\n                &#x2F;&#x2F; 检查下一个搜索位置是否合法（在矩阵范围内且不为已访问的位置）\n                if (nx &gt;&#x3D; 0 &amp;&amp; ny &gt;&#x3D; 0 &amp;&amp; nx &lt; m &amp;&amp; ny &lt; n &amp;&amp; grid[nx][ny] !&#x3D; -1) &#123;\n                    dfs(nx, ny, cnt + 1); &#x2F;&#x2F; 继续向下一个位置进行搜索，路径长度加1\n                &#125;\n            &#125;\n            grid[x][y] &#x3D; 0; &#x2F;&#x2F; 恢复当前坐标的值为0，表示当前位置未被访问\n        &#125;;\n        \n        dfs(x1, y1, 1); &#x2F;&#x2F; 调用深度优先搜索函数，初始长度为1（起点）\n        return ret; &#x2F;&#x2F; 返回结果\n    &#125;\n&#125;;\n</code></pre>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n<p>作者：吸鼠霸王<br>链接：<a href=\"https://leetcode.cn/problems/unique-paths-iii/solutions/2212729/dfs-hui-su-by-v-me-50-l178/\">https://leetcode.cn/problems/unique-paths-iii/solutions/2212729/dfs-hui-su-by-v-me-50-l178/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","more":"<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：[[1,0,0,0],[0,0,0,0],[0,0,2,-1]]\n输出：2\n解释：我们有以下两条路径：\n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：[[1,0,0,0],[0,0,0,0],[0,0,0,2]]\n输出：4\n解释：我们有以下四条路径： \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)</code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：[[0,1],[2,0]]\n输出：0\n解释：\n没有一条路能完全穿过每一个空的方格一次。\n请注意，起始和结束方格可以位于网格中的任意位置。</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= grid.length * grid[0].length &lt;= 20</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><blockquote>\n<p> 答案所要求的路径其实就是从1到2在没有经过重复的位置的情况下长度为<br>【0的个数 + 2】的路径 所以其实可以直接dfs，并在dfs时记录路径的长度，当我们走到2的位置的时候，检查路径长度是否足够长即可。为了避免走重复的位置，我们在经过一个位置时将该位置标记为-1，递归函数结束时恢复为0即可。</p>\n</blockquote>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    int uniquePathsIII(vector&lt;vector&lt;int&gt;&gt;&amp; grid) &#123;\n        int m &#x3D; grid.size(), n &#x3D; grid[0].size();\n        &#x2F;&#x2F; 定义四个方向的偏移量，用于遍历上、下、左、右四个方向\n        short dis_x[] &#x3D; &#123;1, -1, 0, 0&#125;, dis_y[] &#x3D; &#123;0, 0, 1, -1&#125;;\n        int ret &#x3D; 0;\n        &#x2F;&#x2F; x1, y1是起点（值为1）的坐标，x2, y2是终点（值为2）的坐标，len是目标长度（包括起点和终点）\n        int x1, y1, x2, y2, len &#x3D; 2;\n        &#x2F;&#x2F; 遍历整个矩阵，计算0的个数，以及获取1和2的坐标\n        for (int i &#x3D; 0; i &lt; m; ++i) &#123;\n            for (int j &#x3D; 0; j &lt; n; ++j) &#123;\n                switch (grid[i][j]) &#123;\n                    case 0: &#x2F;&#x2F; 值为0，代表可访问的空格，目标长度len需要加1\n                        ++len;\n                        break;\n                    case 1: &#x2F;&#x2F; 值为1，代表起点\n                        x1 &#x3D; i;\n                        y1 &#x3D; j;\n                        break;\n                    case 2: &#x2F;&#x2F; 值为2，代表终点\n                        x2 &#x3D; i;\n                        y2 &#x3D; j;\n                        break;\n                &#125;\n            &#125;\n        &#125;\n        \n        &#x2F;&#x2F; 定义深度优先搜索函数，使用lambda表达式\n        function&lt;void(int, int, int)&gt; dfs &#x3D; [&amp;](int x, int y, int cnt) &#123;\n            if (x &#x3D;&#x3D; x2 &amp;&amp; y &#x3D;&#x3D; y2) &#123; &#x2F;&#x2F; 如果当前坐标为终点坐标\n                if (cnt &#x3D;&#x3D; len) &#x2F;&#x2F; 如果路径长度等于目标长度（包括起点和终点），则结果ret加1\n                    ++ret;\n                return;\n            &#125;\n            grid[x][y] &#x3D; -1; &#x2F;&#x2F; 将当前坐标标记为已访问（-1）\n            for (int i &#x3D; 0; i &lt; 4; ++i) &#123; &#x2F;&#x2F; 尝试向四个方向进行搜索\n                int nx &#x3D; dis_x[i] + x; &#x2F;&#x2F; 计算下一个搜索位置的横坐标\n                int ny &#x3D; dis_y[i] + y; &#x2F;&#x2F; 计算下一个搜索位置的纵坐标\n                &#x2F;&#x2F; 检查下一个搜索位置是否合法（在矩阵范围内且不为已访问的位置）\n                if (nx &gt;&#x3D; 0 &amp;&amp; ny &gt;&#x3D; 0 &amp;&amp; nx &lt; m &amp;&amp; ny &lt; n &amp;&amp; grid[nx][ny] !&#x3D; -1) &#123;\n                    dfs(nx, ny, cnt + 1); &#x2F;&#x2F; 继续向下一个位置进行搜索，路径长度加1\n                &#125;\n            &#125;\n            grid[x][y] &#x3D; 0; &#x2F;&#x2F; 恢复当前坐标的值为0，表示当前位置未被访问\n        &#125;;\n        \n        dfs(x1, y1, 1); &#x2F;&#x2F; 调用深度优先搜索函数，初始长度为1（起点）\n        return ret; &#x2F;&#x2F; 返回结果\n    &#125;\n&#125;;\n</code></pre>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n<p>作者：吸鼠霸王<br>链接：<a href=\"https://leetcode.cn/problems/unique-paths-iii/solutions/2212729/dfs-hui-su-by-v-me-50-l178/\">https://leetcode.cn/problems/unique-paths-iii/solutions/2212729/dfs-hui-su-by-v-me-50-l178/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>","categories":[],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"}]}