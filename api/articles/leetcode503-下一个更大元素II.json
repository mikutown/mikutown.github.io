{"title":"leetcode503.下一个更大元素II","slug":"leetcode503-下一个更大元素II","date":"2023-05-10T01:36:21.000Z","updated":"2023-05-10T01:38:08.043Z","comments":true,"path":"api/articles/leetcode503-下一个更大元素II.json","excerpt":"题目给定一个循环数组 nums （ nums[nums.length - 1] 的下一个元素是 nums[0] ），返回 nums 中每个元素的 下一个更大元素 。数字 x 的 下一个更大的元素 是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1 。","covers":null,"content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个循环数组 <code>nums</code> （ <code>nums[nums.length - 1]</code> 的下一个元素是 <code>nums[0]</code> ），返回 <em><code>nums</code> 中每个元素的 <strong>下一个更大元素</strong></em> 。</p>\n<p>数字 <code>x</code> 的 <strong>下一个更大的元素</strong> 是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 <code>-1</code> 。</p>\n <span id=\"more\"></span>\n\n<p><strong>示例 1:</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入: nums &#x3D; [1,2,1]\n输出: [2,-1,2]\n解释: 第一个 1 的下一个更大的数是 2；\n数字 2 找不到下一个更大的数； \n第二个 1 的下一个最大的数需要循环搜索，结果也是 2。</code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入: nums &#x3D; [1,2,3,4,3]\n输出: [2,3,4,-1,4]</code></pre>\n\n<p><strong>提示:</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 104</code></li>\n<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ul>\n<li>暴力解法</li>\n</ul>\n<p>直接进行循环遍历判断即可。C++代码实现如下：</p>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    vector&lt;int&gt; nextGreaterElements(vector&lt;int&gt;&amp; nums) &#123;\n        int len &#x3D; nums.size();\n        vector&lt;int&gt; answers;\n        for (int i &#x3D; 0; i &lt; len; i++) &#123;\n            int temp &#x3D; nums[i]; &#x2F;&#x2F; 保存当前需要判断的值\n            int temp_index &#x3D; i; &#x2F;&#x2F; 保存当前需要判断的值的索引\n            int answer &#x3D; -1; &#x2F;&#x2F; 初始化answer元素\n            for (int j &#x3D; (i + 1) % len; j !&#x3D; temp_index; j &#x3D; (j + 1) % len) &#123;\n                if (nums[j] &gt; temp) &#123;\n                    answer &#x3D; nums[j]; &#x2F;&#x2F;找到第一个比temp大的元素，将其赋值给answer 并跳出当前for循环\n                    break;\n                &#125;\n            &#125;\n            answers.push_back(answer); &#x2F;&#x2F; 将answer放进答案数组中\n        &#125;\n        return answers; &#x2F;&#x2F; 返回答案数组\n\n    &#125;\n&#125;;</code></pre>\n\n","more":"<p><strong>示例 1:</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入: nums &#x3D; [1,2,1]\n输出: [2,-1,2]\n解释: 第一个 1 的下一个更大的数是 2；\n数字 2 找不到下一个更大的数； \n第二个 1 的下一个最大的数需要循环搜索，结果也是 2。</code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入: nums &#x3D; [1,2,3,4,3]\n输出: [2,3,4,-1,4]</code></pre>\n\n<p><strong>提示:</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 104</code></li>\n<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ul>\n<li>暴力解法</li>\n</ul>\n<p>直接进行循环遍历判断即可。C++代码实现如下：</p>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    vector&lt;int&gt; nextGreaterElements(vector&lt;int&gt;&amp; nums) &#123;\n        int len &#x3D; nums.size();\n        vector&lt;int&gt; answers;\n        for (int i &#x3D; 0; i &lt; len; i++) &#123;\n            int temp &#x3D; nums[i]; &#x2F;&#x2F; 保存当前需要判断的值\n            int temp_index &#x3D; i; &#x2F;&#x2F; 保存当前需要判断的值的索引\n            int answer &#x3D; -1; &#x2F;&#x2F; 初始化answer元素\n            for (int j &#x3D; (i + 1) % len; j !&#x3D; temp_index; j &#x3D; (j + 1) % len) &#123;\n                if (nums[j] &gt; temp) &#123;\n                    answer &#x3D; nums[j]; &#x2F;&#x2F;找到第一个比temp大的元素，将其赋值给answer 并跳出当前for循环\n                    break;\n                &#125;\n            &#125;\n            answers.push_back(answer); &#x2F;&#x2F; 将answer放进答案数组中\n        &#125;\n        return answers; &#x2F;&#x2F; 返回答案数组\n\n    &#125;\n&#125;;</code></pre>","categories":[],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"}]}