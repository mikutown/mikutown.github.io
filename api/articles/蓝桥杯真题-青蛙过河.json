{"title":"蓝桥杯真题-青蛙过河","slug":"蓝桥杯真题-青蛙过河","date":"2023-04-06T12:23:29.000Z","updated":"2023-04-06T13:02:57.231Z","comments":true,"path":"api/articles/蓝桥杯真题-青蛙过河.json","excerpt":"题目小青蛙住在一条河边, 它想到河对岸的学校去学习。小青蛙打算经过河里 的石头跳到对岸。河里的石头排成了一条直线, 小青蛙每次跳跃必须落在一块石头或者岸上。 不过, 每块石头有一个高度, 每次小青蛙从一块石头起跳, 这块石头的高度就 会下降 1 , 当石头的高度下降到 0 时小青蛙不能再跳到这块石头上（某次跳跃 后使石头高度下降到 0 是允许的)。小青蛙一共需要去学校上 $x$ 天课, 所以它需要往返 $2x$次。当小青蛙具有 一个跳跃能力 $y$ 时, 它能跳不超过 $y$的距离。请问小青蛙的跳跃能力至少是多少才能用这些石头上完 $x$ 次课。","covers":null,"content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>小青蛙住在一条河边, 它想到河对岸的学校去学习。小青蛙打算经过河里 的石头跳到对岸。</p>\n<p>河里的石头排成了一条直线, 小青蛙每次跳跃必须落在一块石头或者岸上。 不过, 每块石头有一个高度, 每次小青蛙从一块石头起跳, 这块石头的高度就 会下降 1 , 当石头的高度下降到 0 时小青蛙不能再跳到这块石头上（某次跳跃 后使石头高度下降到 0 是允许的)。</p>\n<p>小青蛙一共需要去学校上 $x$ 天课, 所以它需要往返 $2x$次。当小青蛙具有 一个跳跃能力 $y$ 时, 它能跳不超过 $y$的距离。</p>\n<p>请问小青蛙的跳跃能力至少是多少才能用这些石头上完 $x$ 次课。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>输入的第一行包含两个整数$n,x$, 分别表示河的宽度和小青蛙需要去学校 的天数。请注意$2x$ 才是实际过河的次数。</p>\n<p>第二行包含 $n−1$ 个非负整数$H_1,H_2,⋯,H_{n−1}$, 其中 $H_i$&gt;0 表示在河中与小青蛙的家相距 $i$的地方有一块高度为 $H_i$ 的石头,$H_i&#x3D;0$ 表示这个位置没有石头。</p>\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>输出一行, 包含一个整数, 表示小青蛙需要的最低跳跃能力。</p>\n<h3 id=\"样例输入\"><a href=\"#样例输入\" class=\"headerlink\" title=\"样例输入\"></a>样例输入</h3><pre class=\"language-txt\" data-language=\"txt\"><code class=\"language-txt\">5 1\n1 0 1 0</code></pre>\n\n<h3 id=\"样例输出\"><a href=\"#样例输出\" class=\"headerlink\" title=\"样例输出\"></a>样例输出</h3><pre class=\"language-text\" data-language=\"text\"><code class=\"language-text\">4</code></pre>\n\n<h3 id=\"样例说明\"><a href=\"#样例说明\" class=\"headerlink\" title=\"样例说明\"></a>样例说明</h3><p>由于只有两块高度为 1 的石头，所以往返只能各用一块。第 1 块石头和对岸的距离为 4，如果小青蛙的跳跃能力为 3 则无法满足要求。所以小青蛙最少需要 4 的跳跃能力。</p>\n<h3 id=\"评测用例规模与约定\"><a href=\"#评测用例规模与约定\" class=\"headerlink\" title=\"评测用例规模与约定\"></a>评测用例规模与约定</h3><p>对于 30% 的评测用例, $n≤100$;</p>\n<p>对于 60% 的评测用例, $n≤1000$;</p>\n<p>对于所有评测用例, $1≤n≤10^5,1≤x≤10^9,1≤H_i≤10^4 $。</p>\n<h3 id=\"运行限制\"><a href=\"#运行限制\" class=\"headerlink\" title=\"运行限制\"></a>运行限制</h3><ul>\n<li>最大运行时间：1s</li>\n<li>最大运行内存: 512M</li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ul>\n<li>常规思路</li>\n</ul>\n<p>一只青蛙上x次课，来回走了2x次；相当于2x只青蛙上了一次课（只走一段）；每次踩石头它的高度都下降1，而且青蛙都能过河。所以可以先求前缀和之后二分法进行贪心的求解，代码的思路如下：</p>\n<ol>\n<li>定义数组的最大长度N，整型数字n,m，数组a用于接收输入，数组b用于计算前缀和;</li>\n<li>得到n，m和数组a之后，定义数组<code>a[0] = a[n] = N</code>,然后进行计算前缀和的操作。例如前缀和<code>b[i]=x</code>的意思就是i之前的石头一共可以容纳x个青蛙跳过(我们一共需要2m)个;</li>\n<li>进行二分+贪心操作，求出最小的跳跃能力值。</li>\n<li>check函数用于计算在x的下标下，石头是否能让2m个青蛙通过。</li>\n</ol>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;bits&#x2F;stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N &#x3D; 1e5 + 3;\nll a[N],b[N];\nint n, m;\nbool check(int x) &#123;\n    for(int i &#x3D; 1; i + x - 1 &lt; n ;i++) &#123;\n        &#x2F;&#x2F; 只有一个的时候\n        if (b[i + x - 1] - b[i - 1] &lt; 2 * m) &#123;\n            &#x2F;&#x2F; 石块为0的情况\n            return false;\n        &#125;\n    &#125;\n    return true;\n&#125;\nint main()&#123;\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i &#x3D; 1; i &lt; n; i++) &#123;\n        &#x2F;&#x2F; 循环到n-1\n        cin &gt;&gt; a[i];\n    &#125;\n    a[0] &#x3D; a[n] &#x3D; N;\n    for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;\n        &#x2F;&#x2F; 计算前缀和\n        b[i] &#x3D; b[i - 1] + a[i]; &#x2F;&#x2F; 我能让几只小青蛙在上面\n    &#125;\n    &#x2F;&#x2F; 贪心求y\n    int l &#x3D; 1, r &#x3D; N;\n    while (l &lt; r)&#123;\n        int mid &#x3D; (l + r) &#x2F; 2;\n        if (check(mid)) &#123; &#x2F;&#x2F; 石头足够青蛙分，继续贪心\n            r &#x3D; mid;\n        &#125;\n        else &#123; &#x2F;&#x2F; 石头不够青蛙分\n            l &#x3D; mid + 1;\n        &#125;\n    &#125;\n    cout &lt;&lt; l;\n    return 0;\n&#125;</code></pre>\n\n","more":"<h3 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>输入的第一行包含两个整数$n,x$, 分别表示河的宽度和小青蛙需要去学校 的天数。请注意$2x$ 才是实际过河的次数。</p>\n<p>第二行包含 $n−1$ 个非负整数$H_1,H_2,⋯,H_{n−1}$, 其中 $H_i$&gt;0 表示在河中与小青蛙的家相距 $i$的地方有一块高度为 $H_i$ 的石头,$H_i&#x3D;0$ 表示这个位置没有石头。</p>\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>输出一行, 包含一个整数, 表示小青蛙需要的最低跳跃能力。</p>\n<h3 id=\"样例输入\"><a href=\"#样例输入\" class=\"headerlink\" title=\"样例输入\"></a>样例输入</h3><pre class=\"language-txt\" data-language=\"txt\"><code class=\"language-txt\">5 1\n1 0 1 0</code></pre>\n\n<h3 id=\"样例输出\"><a href=\"#样例输出\" class=\"headerlink\" title=\"样例输出\"></a>样例输出</h3><pre class=\"language-text\" data-language=\"text\"><code class=\"language-text\">4</code></pre>\n\n<h3 id=\"样例说明\"><a href=\"#样例说明\" class=\"headerlink\" title=\"样例说明\"></a>样例说明</h3><p>由于只有两块高度为 1 的石头，所以往返只能各用一块。第 1 块石头和对岸的距离为 4，如果小青蛙的跳跃能力为 3 则无法满足要求。所以小青蛙最少需要 4 的跳跃能力。</p>\n<h3 id=\"评测用例规模与约定\"><a href=\"#评测用例规模与约定\" class=\"headerlink\" title=\"评测用例规模与约定\"></a>评测用例规模与约定</h3><p>对于 30% 的评测用例, $n≤100$;</p>\n<p>对于 60% 的评测用例, $n≤1000$;</p>\n<p>对于所有评测用例, $1≤n≤10^5,1≤x≤10^9,1≤H_i≤10^4 $。</p>\n<h3 id=\"运行限制\"><a href=\"#运行限制\" class=\"headerlink\" title=\"运行限制\"></a>运行限制</h3><ul>\n<li>最大运行时间：1s</li>\n<li>最大运行内存: 512M</li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ul>\n<li>常规思路</li>\n</ul>\n<p>一只青蛙上x次课，来回走了2x次；相当于2x只青蛙上了一次课（只走一段）；每次踩石头它的高度都下降1，而且青蛙都能过河。所以可以先求前缀和之后二分法进行贪心的求解，代码的思路如下：</p>\n<ol>\n<li>定义数组的最大长度N，整型数字n,m，数组a用于接收输入，数组b用于计算前缀和;</li>\n<li>得到n，m和数组a之后，定义数组<code>a[0] = a[n] = N</code>,然后进行计算前缀和的操作。例如前缀和<code>b[i]=x</code>的意思就是i之前的石头一共可以容纳x个青蛙跳过(我们一共需要2m)个;</li>\n<li>进行二分+贪心操作，求出最小的跳跃能力值。</li>\n<li>check函数用于计算在x的下标下，石头是否能让2m个青蛙通过。</li>\n</ol>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;bits&#x2F;stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N &#x3D; 1e5 + 3;\nll a[N],b[N];\nint n, m;\nbool check(int x) &#123;\n    for(int i &#x3D; 1; i + x - 1 &lt; n ;i++) &#123;\n        &#x2F;&#x2F; 只有一个的时候\n        if (b[i + x - 1] - b[i - 1] &lt; 2 * m) &#123;\n            &#x2F;&#x2F; 石块为0的情况\n            return false;\n        &#125;\n    &#125;\n    return true;\n&#125;\nint main()&#123;\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i &#x3D; 1; i &lt; n; i++) &#123;\n        &#x2F;&#x2F; 循环到n-1\n        cin &gt;&gt; a[i];\n    &#125;\n    a[0] &#x3D; a[n] &#x3D; N;\n    for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;\n        &#x2F;&#x2F; 计算前缀和\n        b[i] &#x3D; b[i - 1] + a[i]; &#x2F;&#x2F; 我能让几只小青蛙在上面\n    &#125;\n    &#x2F;&#x2F; 贪心求y\n    int l &#x3D; 1, r &#x3D; N;\n    while (l &lt; r)&#123;\n        int mid &#x3D; (l + r) &#x2F; 2;\n        if (check(mid)) &#123; &#x2F;&#x2F; 石头足够青蛙分，继续贪心\n            r &#x3D; mid;\n        &#125;\n        else &#123; &#x2F;&#x2F; 石头不够青蛙分\n            l &#x3D; mid + 1;\n        &#125;\n    &#125;\n    cout &lt;&lt; l;\n    return 0;\n&#125;</code></pre>","categories":[],"tags":[{"name":"算法","path":"api/tags/算法.json"},{"name":"蓝桥杯","path":"api/tags/蓝桥杯.json"}]}