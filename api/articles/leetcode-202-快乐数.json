{"title":"leetcode:202.快乐数","slug":"leetcode-202-快乐数","date":"2023-01-09T03:25:47.000Z","updated":"2023-01-09T03:32:17.227Z","comments":true,"path":"api/articles/leetcode-202-快乐数.json","excerpt":"题目编写一个算法来判断一个数 n 是不是快乐数。「快乐数」 定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。如果这个过程 结果为 1，那么这个数就是快乐数。如果 n 是 快乐数 就返回 true ；不是，则返回 false 。","covers":null,"content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>编写一个算法来判断一个数 <code>n</code> 是不是快乐数。</p>\n<p><strong>「快乐数」</strong> 定义为：</p>\n<ul>\n<li>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</li>\n<li>然后重复这个过程直到这个数变为 1，也可能是 <strong>无限循环</strong> 但始终变不到 1。</li>\n<li>如果这个过程 <strong>结果为</strong> 1，那么这个数就是快乐数。</li>\n</ul>\n<p>如果 <code>n</code> 是 <em>快乐数</em> 就返回 <code>true</code> ；不是，则返回 <code>false</code> 。</p>\n<span id=\"more\"></span>\n\n<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 19\n输出：true\n解释：\n12 + 92 &#x3D; 82\n82 + 22 &#x3D; 68\n62 + 82 &#x3D; 100\n12 + 02 + 02 &#x3D; 1</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 2\n输出：false</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= n &lt;= 231 - 1</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ol>\n<li>递归暴力求解（C++实现）</li>\n</ol>\n<p>首先确定递归判断的条件：<code>n==1</code>时返回true，当<code>n &lt; 10 &amp;&amp; n % 2 == 0</code>时返回false。</p>\n<p>对输入数字<code>n</code>的每一位数的计算方法为<code>temp = n % 10</code>，取余的结果的平方与sum累加，同时<code>n = n / 10</code>，求得的sum递归传入判断函数中。代码如下：</p>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    bool isHappy(int n) &#123;\n        if(n &#x3D;&#x3D; 1)\n        &#123;\n            return true;\n        &#125;\n        if(n &lt; 10 &amp;&amp; n % 2 &#x3D;&#x3D; 0)\n        &#123;\n            return false;\n        &#125;\n        int sum &#x3D; 0;\n        int temp &#x3D; 0;\n        while(n !&#x3D; 0)\n        &#123;\n            temp &#x3D; n % 10;\n            n &#x3D; n &#x2F; 10;\n            sum &#x3D; sum + temp * temp;\n        &#125;\n        return isHappy(sum);\n    &#125;\n&#125;;</code></pre>\n\n","more":"<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 19\n输出：true\n解释：\n12 + 92 &#x3D; 82\n82 + 22 &#x3D; 68\n62 + 82 &#x3D; 100\n12 + 02 + 02 &#x3D; 1</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 2\n输出：false</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= n &lt;= 231 - 1</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ol>\n<li>递归暴力求解（C++实现）</li>\n</ol>\n<p>首先确定递归判断的条件：<code>n==1</code>时返回true，当<code>n &lt; 10 &amp;&amp; n % 2 == 0</code>时返回false。</p>\n<p>对输入数字<code>n</code>的每一位数的计算方法为<code>temp = n % 10</code>，取余的结果的平方与sum累加，同时<code>n = n / 10</code>，求得的sum递归传入判断函数中。代码如下：</p>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    bool isHappy(int n) &#123;\n        if(n &#x3D;&#x3D; 1)\n        &#123;\n            return true;\n        &#125;\n        if(n &lt; 10 &amp;&amp; n % 2 &#x3D;&#x3D; 0)\n        &#123;\n            return false;\n        &#125;\n        int sum &#x3D; 0;\n        int temp &#x3D; 0;\n        while(n !&#x3D; 0)\n        &#123;\n            temp &#x3D; n % 10;\n            n &#x3D; n &#x2F; 10;\n            sum &#x3D; sum + temp * temp;\n        &#125;\n        return isHappy(sum);\n    &#125;\n&#125;;</code></pre>","categories":[],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"}]}