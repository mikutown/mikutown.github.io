{"title":"算法练习-22-Java中的字符串源码分析(1.2.4-1.2.5)","slug":"算法练习-22-Java中的字符串源码分析-(1.2.4-1.2.5)","date":"2021-01-25T03:05:06.000Z","updated":"2021-01-25T05:19:30.813Z","comments":true,"path":"api/articles/算法练习-22-Java中的字符串源码分析-(1.2.4-1.2.5).json","excerpt":"算法练习-22-Java中的字符串源码分析(1.2.4-1.2.5)知识点Java中的字符串字符串常量","covers":["https://gitee.com/mikutown/pic/raw/master/img/d98257d1697a3e7e8ed0c0f7ffacfd95.png"],"content":"<h1 id=\"算法练习-22-Java中的字符串源码分析-1-2-4-1-2-5\"><a href=\"#算法练习-22-Java中的字符串源码分析-1-2-4-1-2-5\" class=\"headerlink\" title=\"算法练习-22-Java中的字符串源码分析(1.2.4-1.2.5)\"></a>算法练习-22-Java中的字符串源码分析(1.2.4-1.2.5)</h1><ul>\n<li>知识点<ul>\n<li>Java中的字符串</li>\n<li>字符串常量</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"1-2-4以下这段代码会打印出什么？\"><a href=\"#1-2-4以下这段代码会打印出什么？\" class=\"headerlink\" title=\"1.2.4以下这段代码会打印出什么？\"></a><strong>1.2.4以下这段代码会打印出什么？</strong></h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> string1 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> string2 <span class=\"token operator\">=</span> string1<span class=\"token punctuation\">;</span>\n        string1 <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StdOut</span><span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>string1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StdOut</span><span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>string2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>打印结果：</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">world\nhello</code></pre>\n<h3 id=\"1-2-5以下这段代码会打印出什么？\"><a href=\"#1-2-5以下这段代码会打印出什么？\" class=\"headerlink\" title=\"1.2.5以下这段代码会打印出什么？\"></a>1.2.5以下这段代码会打印出什么？</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">StdOut</span><span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li><p>分析 </p>\n<p>只是截取了String类型的s，但是s本身没有改变哦 所以还是打印本来的值</p>\n</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">Hello World</code></pre>\n<h2 id=\"附录：String方法常用API\"><a href=\"#附录：String方法常用API\" class=\"headerlink\" title=\"附录：String方法常用API\"></a>附录：String方法常用API</h2><p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/d98257d1697a3e7e8ed0c0f7ffacfd95.png\" alt=\"img\" loading=\"lazy\"></p>\n<p>附上String源码：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n * Copyright (c) 1994, 2013, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */</span>\n\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectStreamField</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UnsupportedEncodingException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span>charset<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Charset</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Formatter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Locale</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringJoiner</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>regex<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Matcher</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>regex<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>regex<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PatternSyntaxException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * The &#123;@code String&#125; class represents character strings. All\n * string literals in Java programs, such as &#123;@code \"abc\"&#125;, are\n * implemented as instances of this class.\n * &lt;p>\n * Strings are constant; their values cannot be changed after they\n * are created. String buffers support mutable strings.\n * Because String objects are immutable they can be shared. For example:\n * &lt;blockquote>&lt;pre>\n *     String str = \"abc\";\n * &lt;/pre>&lt;/blockquote>&lt;p>\n * is equivalent to:\n * &lt;blockquote>&lt;pre>\n *     char data[] = &#123;'a', 'b', 'c'&#125;;\n *     String str = new String(data);\n * &lt;/pre>&lt;/blockquote>&lt;p>\n * Here are some more examples of how strings can be used:\n * &lt;blockquote>&lt;pre>\n *     System.out.println(\"abc\");\n *     String cde = \"cde\";\n *     System.out.println(\"abc\" + cde);\n *     String c = \"abc\".substring(2,3);\n *     String d = cde.substring(1, 2);\n * &lt;/pre>&lt;/blockquote>\n * &lt;p>\n * The class &#123;@code String&#125; includes methods for examining\n * individual characters of the sequence, for comparing strings, for\n * searching strings, for extracting substrings, and for creating a\n * copy of a string with all characters translated to uppercase or to\n * lowercase. Case mapping is based on the Unicode Standard version\n * specified by the &#123;@link java.lang.Character Character&#125; class.\n * &lt;p>\n * The Java language provides special support for the string\n * concatenation operator (&amp;nbsp;+&amp;nbsp;), and for conversion of\n * other objects to strings. String concatenation is implemented\n * through the &#123;@code StringBuilder&#125;(or &#123;@code StringBuffer&#125;)\n * class and its &#123;@code append&#125; method.\n * String conversions are implemented through the method\n * &#123;@code toString&#125;, defined by &#123;@code Object&#125; and\n * inherited by all classes in Java. For additional information on\n * string concatenation and conversion, see Gosling, Joy, and Steele,\n * &lt;i>The Java Language Specification&lt;/i>.\n *\n * &lt;p> Unless otherwise noted, passing a &lt;tt>null&lt;/tt> argument to a constructor\n * or method in this class will cause a &#123;@link NullPointerException&#125; to be\n * thrown.\n *\n * &lt;p>A &#123;@code String&#125; represents a string in the UTF-16 format\n * in which &lt;em>supplementary characters&lt;/em> are represented by &lt;em>surrogate\n * pairs&lt;/em> (see the section &lt;a href=\"Character.html#unicode\">Unicode\n * Character Representations&lt;/a> in the &#123;@code Character&#125; class for\n * more information).\n * Index values refer to &#123;@code char&#125; code units, so a supplementary\n * character uses two positions in a &#123;@code String&#125;.\n * &lt;p>The &#123;@code String&#125; class provides methods for dealing with\n * Unicode code points (i.e., characters), in addition to those for\n * dealing with Unicode code units (i.e., &#123;@code char&#125; values).\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Martin Buchholz\n * @author  Ulf Zibis\n * @see     java.lang.Object#toString()\n * @see     java.lang.StringBuffer\n * @see     java.lang.StringBuilder\n * @see     java.nio.charset.Charset\n * @since   JDK1.0\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CharSequence</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/** The value is used for character storage. */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span> value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/** Cache the hash code for the string */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Default to 0</span>\n\n    <span class=\"token comment\">/** use serialVersionUID from JDK 1.0.2 for interoperability */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">6849794470754667710L</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Class String is special cased within the Serialization Stream Protocol.\n     *\n     * A String instance is written into an ObjectOutputStream according to\n     * &lt;a href=\"&#123;@docRoot&#125;/../platform/serialization/spec/output.html\">\n     * Object Serialization Specification, Section 6.2, \"Stream Elements\"&lt;/a>\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ObjectStreamField</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> serialPersistentFields <span class=\"token operator\">=</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectStreamField</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Initializes a newly created &#123;@code String&#125; object so that it represents\n     * an empty character sequence.  Note that use of this constructor is\n     * unnecessary since Strings are immutable.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Initializes a newly created &#123;@code String&#125; object so that it represents\n     * the same sequence of characters as the argument; in other words, the\n     * newly created string is a copy of the argument string. Unless an\n     * explicit copy of &#123;@code original&#125; is needed, use of this constructor is\n     * unnecessary since Strings are immutable.\n     *\n     * @param  original\n     *         A &#123;@code String&#125;\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> original<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> original<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hash <span class=\"token operator\">=</span> original<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Allocates a new &#123;@code String&#125; so that it represents the sequence of\n     * characters currently contained in the character array argument. The\n     * contents of the character array are copied; subsequent modification of\n     * the character array does not affect the newly created string.\n     *\n     * @param  value\n     *         The initial value of the string\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Allocates a new &#123;@code String&#125; that contains characters from a subarray\n     * of the character array argument. The &#123;@code offset&#125; argument is the\n     * index of the first character of the subarray and the &#123;@code count&#125;\n     * argument specifies the length of the subarray. The contents of the\n     * subarray are copied; subsequent modification of the character array does\n     * not affect the newly created string.\n     *\n     * @param  value\n     *         Array that is the source of characters\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the &#123;@code offset&#125; and &#123;@code count&#125; arguments index\n     *          characters outside the bounds of the &#123;@code value&#125; array\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">&lt;=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// Note: offset or count might be near -1>>>1.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">></span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>offset <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> offset<span class=\"token operator\">+</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Allocates a new &#123;@code String&#125; that contains characters from a subarray\n     * of the &lt;a href=\"Character.html#unicode\">Unicode code point&lt;/a> array\n     * argument.  The &#123;@code offset&#125; argument is the index of the first code\n     * point of the subarray and the &#123;@code count&#125; argument specifies the\n     * length of the subarray.  The contents of the subarray are converted to\n     * &#123;@code char&#125;s; subsequent modification of the &#123;@code int&#125; array does not\n     * affect the newly created string.\n     *\n     * @param  codePoints\n     *         Array that is the source of Unicode code points\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IllegalArgumentException\n     *          If any invalid Unicode code point is found in &#123;@code\n     *          codePoints&#125;\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the &#123;@code offset&#125; and &#123;@code count&#125; arguments index\n     *          characters outside the bounds of the &#123;@code codePoints&#125; array\n     *\n     * @since  1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> codePoints<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">&lt;=</span> codePoints<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// Note: offset or count might be near -1>>>1.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">></span> codePoints<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>offset <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> offset <span class=\"token operator\">+</span> count<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Pass 1: Compute precise size of char[]</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> offset<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> codePoints<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBmpCodePoint</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">isValidCodePoint</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// Pass 2: Allocate and fill in char[]</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> v <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> offset<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> codePoints<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBmpCodePoint</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                v<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>c<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSurrogates</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Allocates a new &#123;@code String&#125; constructed from a subarray of an array\n     * of 8-bit integer values.\n     *\n     * &lt;p> The &#123;@code offset&#125; argument is the index of the first byte of the\n     * subarray, and the &#123;@code count&#125; argument specifies the length of the\n     * subarray.\n     *\n     * &lt;p> Each &#123;@code byte&#125; in the subarray is converted to a &#123;@code char&#125; as\n     * specified in the method above.\n     *\n     * @deprecated This method does not properly convert bytes into characters.\n     * As of JDK&amp;nbsp;1.1, the preferred way to do this is via the\n     * &#123;@code String&#125; constructors that take a &#123;@link\n     * java.nio.charset.Charset&#125;, charset name, or that use the platform's\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @param  offset\n     *         The initial offset\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the &#123;@code offset&#125; or &#123;@code count&#125; argument is invalid\n     *\n     * @see  #String(byte[], int)\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */</span>\n    <span class=\"token annotation punctuation\">@Deprecated</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> ascii<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hibyte<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">checkBounds</span><span class=\"token punctuation\">(</span>ascii<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hibyte <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ascii<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            hibyte <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>hibyte <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>ascii<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Allocates a new &#123;@code String&#125; containing characters constructed from\n     * an array of 8-bit integer values. Each character &lt;i>c&lt;/i>in the\n     * resulting string is constructed from the corresponding component\n     * &lt;i>b&lt;/i> in the byte array such that:\n     *\n     * &lt;blockquote>&lt;pre>\n     *     &lt;b>&lt;i>c&lt;/i>&lt;/b> == (char)(((hibyte &amp;amp; 0xff) &amp;lt;&amp;lt; 8)\n     *                         | (&lt;b>&lt;i>b&lt;/i>&lt;/b> &amp;amp; 0xff))\n     * &lt;/pre>&lt;/blockquote>\n     *\n     * @deprecated  This method does not properly convert bytes into\n     * characters.  As of JDK&amp;nbsp;1.1, the preferred way to do this is via the\n     * &#123;@code String&#125; constructors that take a &#123;@link\n     * java.nio.charset.Charset&#125;, charset name, or that use the platform's\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */</span>\n    <span class=\"token annotation punctuation\">@Deprecated</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> ascii<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hibyte<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>ascii<span class=\"token punctuation\">,</span> hibyte<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ascii<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/* Common private utility method used to bounds check the byte array\n     * and requested offset &amp; length values used by the String(byte[],..)\n     * constructors.\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkBounds</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">></span> bytes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> length<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>offset <span class=\"token operator\">+</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Constructs a new &#123;@code String&#125; by decoding the specified subarray of\n     * bytes using the specified charset.  The length of the new &#123;@code String&#125;\n     * is a function of the charset, and hence may not be equal to the length\n     * of the subarray.\n     *\n     * &lt;p> The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The &#123;@link\n     * java.nio.charset.CharsetDecoder&#125; class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n\n     * @param  charsetName\n     *         The name of a supported &#123;@linkplain java.nio.charset.Charset\n     *         charset&#125;\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the &#123;@code offset&#125; and &#123;@code length&#125; arguments index\n     *          characters outside the bounds of the &#123;@code bytes&#125; array\n     *\n     * @since  JDK1.1\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> bytes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> charsetName<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnsupportedEncodingException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>charsetName <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"charsetName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">checkBounds</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">StringCoding</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>charsetName<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Constructs a new &#123;@code String&#125; by decoding the specified subarray of\n     * bytes using the specified &#123;@linkplain java.nio.charset.Charset charset&#125;.\n     * The length of the new &#123;@code String&#125; is a function of the charset, and\n     * hence may not be equal to the length of the subarray.\n     *\n     * &lt;p> This method always replaces malformed-input and unmappable-character\n     * sequences with this charset's default replacement string.  The &#123;@link\n     * java.nio.charset.CharsetDecoder&#125; class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @param  charset\n     *         The &#123;@linkplain java.nio.charset.Charset charset&#125; to be used to\n     *         decode the &#123;@code bytes&#125;\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the &#123;@code offset&#125; and &#123;@code length&#125; arguments index\n     *          characters outside the bounds of the &#123;@code bytes&#125; array\n     *\n     * @since  1.6\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> bytes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Charset</span> charset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>charset <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"charset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">checkBounds</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span>  <span class=\"token class-name\">StringCoding</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>charset<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Constructs a new &#123;@code String&#125; by decoding the specified array of bytes\n     * using the specified &#123;@linkplain java.nio.charset.Charset charset&#125;.  The\n     * length of the new &#123;@code String&#125; is a function of the charset, and hence\n     * may not be equal to the length of the byte array.\n     *\n     * &lt;p> The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The &#123;@link\n     * java.nio.charset.CharsetDecoder&#125; class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charsetName\n     *         The name of a supported &#123;@linkplain java.nio.charset.Charset\n     *         charset&#125;\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  JDK1.1\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> bytes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> charsetName<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnsupportedEncodingException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> charsetName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Constructs a new &#123;@code String&#125; by decoding the specified array of\n     * bytes using the specified &#123;@linkplain java.nio.charset.Charset charset&#125;.\n     * The length of the new &#123;@code String&#125; is a function of the charset, and\n     * hence may not be equal to the length of the byte array.\n     *\n     * &lt;p> This method always replaces malformed-input and unmappable-character\n     * sequences with this charset's default replacement string.  The &#123;@link\n     * java.nio.charset.CharsetDecoder&#125; class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charset\n     *         The &#123;@linkplain java.nio.charset.Charset charset&#125; to be used to\n     *         decode the &#123;@code bytes&#125;\n     *\n     * @since  1.6\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> bytes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Charset</span> charset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> charset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Constructs a new &#123;@code String&#125; by decoding the specified subarray of\n     * bytes using the platform's default charset.  The length of the new\n     * &#123;@code String&#125; is a function of the charset, and hence may not be equal\n     * to the length of the subarray.\n     *\n     * &lt;p> The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The &#123;@link\n     * java.nio.charset.CharsetDecoder&#125; class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the &#123;@code offset&#125; and the &#123;@code length&#125; arguments index\n     *          characters outside the bounds of the &#123;@code bytes&#125; array\n     *\n     * @since  JDK1.1\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> bytes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">checkBounds</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">StringCoding</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Constructs a new &#123;@code String&#125; by decoding the specified array of bytes\n     * using the platform's default charset.  The length of the new &#123;@code\n     * String&#125; is a function of the charset, and hence may not be equal to the\n     * length of the byte array.\n     *\n     * &lt;p> The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The &#123;@link\n     * java.nio.charset.CharsetDecoder&#125; class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @since  JDK1.1\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> bytes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string buffer argument. The contents of the\n     * string buffer are copied; subsequent modification of the string buffer\n     * does not affect the newly created string.\n     *\n     * @param  buffer\n     *         A &#123;@code StringBuffer&#125;\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringBuffer</span> buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string builder argument. The contents of the\n     * string builder are copied; subsequent modification of the string builder\n     * does not affect the newly created string.\n     *\n     * &lt;p> This constructor is provided to ease migration to &#123;@code\n     * StringBuilder&#125;. Obtaining a string from a string builder via the &#123;@code\n     * toString&#125; method is likely to run faster and is generally preferred.\n     *\n     * @param   builder\n     *          A &#123;@code StringBuilder&#125;\n     *\n     * @since  1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringBuilder</span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/*\n    * Package private constructor which shares value array for speed.\n    * this constructor is always expected to be called with share==true.\n    * a separate constructor is needed because we already have a public\n    * String(char[]) constructor that makes a copy of the given char[].\n    */</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> share<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// assert share : \"unshared not supported\";</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the length of this string.\n     * The length is equal to the number of &lt;a href=\"Character.html#unicode\">Unicode\n     * code units&lt;/a> in the string.\n     *\n     * @return  the length of the sequence of characters represented by this\n     *          object.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns &#123;@code true&#125; if, and only if, &#123;@link #length()&#125; is &#123;@code 0&#125;.\n     *\n     * @return &#123;@code true&#125; if &#123;@link #length()&#125; is &#123;@code 0&#125;, otherwise\n     * &#123;@code false&#125;\n     *\n     * @since 1.6\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the &#123;@code char&#125; value at the\n     * specified index. An index ranges from &#123;@code 0&#125; to\n     * &#123;@code length() - 1&#125;. The first &#123;@code char&#125; value of the sequence\n     * is at index &#123;@code 0&#125;, the next at index &#123;@code 1&#125;,\n     * and so on, as for array indexing.\n     *\n     * &lt;p>If the &#123;@code char&#125; value specified by the index is a\n     * &lt;a href=\"Character.html#unicode\">surrogate&lt;/a>, the surrogate\n     * value is returned.\n     *\n     * @param      index   the index of the &#123;@code char&#125; value.\n     * @return     the &#123;@code char&#125; value at the specified index of this string.\n     *             The first &#123;@code char&#125; value is at index &#123;@code 0&#125;.\n     * @exception  IndexOutOfBoundsException  if the &#123;@code index&#125;\n     *             argument is negative or not less than the length of this\n     *             string.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">char</span> <span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the character (Unicode code point) at the specified\n     * index. The index refers to &#123;@code char&#125; values\n     * (Unicode code units) and ranges from &#123;@code 0&#125; to\n     * &#123;@link #length()&#125;&#123;@code  - 1&#125;.\n     *\n     * &lt;p> If the &#123;@code char&#125; value specified at the given index\n     * is in the high-surrogate range, the following index is less\n     * than the length of this &#123;@code String&#125;, and the\n     * &#123;@code char&#125; value at the following index is in the\n     * low-surrogate range, then the supplementary code point\n     * corresponding to this surrogate pair is returned. Otherwise,\n     * the &#123;@code char&#125; value at the given index is returned.\n     *\n     * @param      index the index to the &#123;@code char&#125; values\n     * @return     the code point value of the character at the\n     *             &#123;@code index&#125;\n     * @exception  IndexOutOfBoundsException  if the &#123;@code index&#125;\n     *             argument is negative or not less than the length of this\n     *             string.\n     * @since      1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">codePointAtImpl</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the character (Unicode code point) before the specified\n     * index. The index refers to &#123;@code char&#125; values\n     * (Unicode code units) and ranges from &#123;@code 1&#125; to &#123;@link\n     * CharSequence#length() length&#125;.\n     *\n     * &lt;p> If the &#123;@code char&#125; value at &#123;@code (index - 1)&#125;\n     * is in the low-surrogate range, &#123;@code (index - 2)&#125; is not\n     * negative, and the &#123;@code char&#125; value at &#123;@code (index -\n     * 2)&#125; is in the high-surrogate range, then the\n     * supplementary code point value of the surrogate pair is\n     * returned. If the &#123;@code char&#125; value at &#123;@code index -\n     * 1&#125; is an unpaired low-surrogate or a high-surrogate, the\n     * surrogate value is returned.\n     *\n     * @param     index the index following the code point that should be returned\n     * @return    the Unicode code point value before the given index.\n     * @exception IndexOutOfBoundsException if the &#123;@code index&#125;\n     *            argument is less than 1 or greater than the length\n     *            of this string.\n     * @since     1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">codePointBefore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">codePointBeforeImpl</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the number of Unicode code points in the specified text\n     * range of this &#123;@code String&#125;. The text range begins at the\n     * specified &#123;@code beginIndex&#125; and extends to the\n     * &#123;@code char&#125; at index &#123;@code endIndex - 1&#125;. Thus the\n     * length (in &#123;@code char&#125;s) of the text range is\n     * &#123;@code endIndex-beginIndex&#125;. Unpaired surrogates within\n     * the text range count as one code point each.\n     *\n     * @param beginIndex the index to the first &#123;@code char&#125; of\n     * the text range.\n     * @param endIndex the index after the last &#123;@code char&#125; of\n     * the text range.\n     * @return the number of Unicode code points in the specified text\n     * range\n     * @exception IndexOutOfBoundsException if the\n     * &#123;@code beginIndex&#125; is negative, or &#123;@code endIndex&#125;\n     * is larger than the length of this &#123;@code String&#125;, or\n     * &#123;@code beginIndex&#125; is larger than &#123;@code endIndex&#125;.\n     * @since  1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">codePointCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> beginIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> endIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beginIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> endIndex <span class=\"token operator\">></span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> beginIndex <span class=\"token operator\">></span> endIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexOutOfBoundsException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">codePointCountImpl</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> beginIndex<span class=\"token punctuation\">,</span> endIndex <span class=\"token operator\">-</span> beginIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the index within this &#123;@code String&#125; that is\n     * offset from the given &#123;@code index&#125; by\n     * &#123;@code codePointOffset&#125; code points. Unpaired surrogates\n     * within the text range given by &#123;@code index&#125; and\n     * &#123;@code codePointOffset&#125; count as one code point each.\n     *\n     * @param index the index to be offset\n     * @param codePointOffset the offset in code points\n     * @return the index within this &#123;@code String&#125;\n     * @exception IndexOutOfBoundsException if &#123;@code index&#125;\n     *   is negative or larger then the length of this\n     *   &#123;@code String&#125;, or if &#123;@code codePointOffset&#125; is positive\n     *   and the substring starting with &#123;@code index&#125; has fewer\n     *   than &#123;@code codePointOffset&#125; code points,\n     *   or if &#123;@code codePointOffset&#125; is negative and the substring\n     *   before &#123;@code index&#125; has fewer than the absolute value\n     *   of &#123;@code codePointOffset&#125; code points.\n     * @since 1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">offsetByCodePoints</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> codePointOffset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">></span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexOutOfBoundsException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">offsetByCodePointsImpl</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n                index<span class=\"token punctuation\">,</span> codePointOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Copy characters from this string into dst starting at dstBegin.\n     * This method doesn't perform any range checking.\n     */</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">getChars</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> dst<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dstBegin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">,</span> dstBegin<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Copies characters from this string into the destination character\n     * array.\n     * &lt;p>\n     * The first character to be copied is at index &#123;@code srcBegin&#125;;\n     * the last character to be copied is at index &#123;@code srcEnd-1&#125;\n     * (thus the total number of characters to be copied is\n     * &#123;@code srcEnd-srcBegin&#125;). The characters are copied into the\n     * subarray of &#123;@code dst&#125; starting at index &#123;@code dstBegin&#125;\n     * and ending at index:\n     * &lt;blockquote>&lt;pre>\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * &lt;/pre>&lt;/blockquote>\n     *\n     * @param      srcBegin   index of the first character in the string\n     *                        to copy.\n     * @param      srcEnd     index after the last character in the string\n     *                        to copy.\n     * @param      dst        the destination array.\n     * @param      dstBegin   the start offset in the destination array.\n     * @exception IndexOutOfBoundsException If any of the following\n     *            is true:\n     *            &lt;ul>&lt;li>&#123;@code srcBegin&#125; is negative.\n     *            &lt;li>&#123;@code srcBegin&#125; is greater than &#123;@code srcEnd&#125;\n     *            &lt;li>&#123;@code srcEnd&#125; is greater than the length of this\n     *                string\n     *            &lt;li>&#123;@code dstBegin&#125; is negative\n     *            &lt;li>&#123;@code dstBegin+(srcEnd-srcBegin)&#125; is larger than\n     *                &#123;@code dst.length&#125;&lt;/ul>\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getChars</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> srcBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> srcEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> dst<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dstBegin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>srcBegin <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>srcBegin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>srcEnd <span class=\"token operator\">></span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>srcEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>srcBegin <span class=\"token operator\">></span> srcEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>srcEnd <span class=\"token operator\">-</span> srcBegin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> srcBegin<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">,</span> dstBegin<span class=\"token punctuation\">,</span> srcEnd <span class=\"token operator\">-</span> srcBegin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Copies characters from this string into the destination byte array. Each\n     * byte receives the 8 low-order bits of the corresponding character. The\n     * eight high-order bits of each character are not copied and do not\n     * participate in the transfer in any way.\n     *\n     * &lt;p> The first character to be copied is at index &#123;@code srcBegin&#125;; the\n     * last character to be copied is at index &#123;@code srcEnd-1&#125;.  The total\n     * number of characters to be copied is &#123;@code srcEnd-srcBegin&#125;. The\n     * characters, converted to bytes, are copied into the subarray of &#123;@code\n     * dst&#125; starting at index &#123;@code dstBegin&#125; and ending at index:\n     *\n     * &lt;blockquote>&lt;pre>\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * &lt;/pre>&lt;/blockquote>\n     *\n     * @deprecated  This method does not properly convert characters into\n     * bytes.  As of JDK&amp;nbsp;1.1, the preferred way to do this is via the\n     * &#123;@link #getBytes()&#125; method, which uses the platform's default charset.\n     *\n     * @param  srcBegin\n     *         Index of the first character in the string to copy\n     *\n     * @param  srcEnd\n     *         Index after the last character in the string to copy\n     *\n     * @param  dst\n     *         The destination array\n     *\n     * @param  dstBegin\n     *         The start offset in the destination array\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If any of the following is true:\n     *          &lt;ul>\n     *            &lt;li> &#123;@code srcBegin&#125; is negative\n     *            &lt;li> &#123;@code srcBegin&#125; is greater than &#123;@code srcEnd&#125;\n     *            &lt;li> &#123;@code srcEnd&#125; is greater than the length of this String\n     *            &lt;li> &#123;@code dstBegin&#125; is negative\n     *            &lt;li> &#123;@code dstBegin+(srcEnd-srcBegin)&#125; is larger than &#123;@code\n     *                 dst.length&#125;\n     *          &lt;/ul>\n     */</span>\n    <span class=\"token annotation punctuation\">@Deprecated</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> srcBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> srcEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span> dst<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dstBegin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>srcBegin <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>srcBegin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>srcEnd <span class=\"token operator\">></span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>srcEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>srcBegin <span class=\"token operator\">></span> srcEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>srcEnd <span class=\"token operator\">-</span> srcBegin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> dstBegin<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> srcEnd<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> srcBegin<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> val <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* avoid getfield opcode */</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            dst<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span>val<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Encodes this &#123;@code String&#125; into a sequence of bytes using the named\n     * charset, storing the result into a new byte array.\n     *\n     * &lt;p> The behavior of this method when this string cannot be encoded in\n     * the given charset is unspecified.  The &#123;@link\n     * java.nio.charset.CharsetEncoder&#125; class should be used when more control\n     * over the encoding process is required.\n     *\n     * @param  charsetName\n     *         The name of a supported &#123;@linkplain java.nio.charset.Charset\n     *         charset&#125;\n     *\n     * @return  The resultant byte array\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  JDK1.1\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> charsetName<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnsupportedEncodingException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>charsetName <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">StringCoding</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>charsetName<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Encodes this &#123;@code String&#125; into a sequence of bytes using the given\n     * &#123;@linkplain java.nio.charset.Charset charset&#125;, storing the result into a\n     * new byte array.\n     *\n     * &lt;p> This method always replaces malformed-input and unmappable-character\n     * sequences with this charset's default replacement byte array.  The\n     * &#123;@link java.nio.charset.CharsetEncoder&#125; class should be used when more\n     * control over the encoding process is required.\n     *\n     * @param  charset\n     *         The &#123;@linkplain java.nio.charset.Charset&#125; to be used to encode\n     *         the &#123;@code String&#125;\n     *\n     * @return  The resultant byte array\n     *\n     * @since  1.6\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Charset</span> charset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>charset <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">StringCoding</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>charset<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Encodes this &#123;@code String&#125; into a sequence of bytes using the\n     * platform's default charset, storing the result into a new byte array.\n     *\n     * &lt;p> The behavior of this method when this string cannot be encoded in\n     * the default charset is unspecified.  The &#123;@link\n     * java.nio.charset.CharsetEncoder&#125; class should be used when more control\n     * over the encoding process is required.\n     *\n     * @return  The resultant byte array\n     *\n     * @since      JDK1.1\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">StringCoding</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Compares this string to the specified object.  The result is &#123;@code\n     * true&#125; if and only if the argument is not &#123;@code null&#125; and is a &#123;@code\n     * String&#125; object that represents the same sequence of characters as this\n     * object.\n     *\n     * @param  anObject\n     *         The object to compare this &#123;@code String&#125; against\n     *\n     * @return  &#123;@code true&#125; if the given object represents a &#123;@code String&#125;\n     *          equivalent to this string, &#123;@code false&#125; otherwise\n     *\n     * @see  #compareTo(String)\n     * @see  #equalsIgnoreCase(String)\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> anObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> anObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>anObject <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">String</span> anotherString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>anObject<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> anotherString<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">char</span> v1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">char</span> v2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> anotherString<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> v2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Compares this string to the specified &#123;@code StringBuffer&#125;.  The result\n     * is &#123;@code true&#125; if and only if this &#123;@code String&#125; represents the same\n     * sequence of characters as the specified &#123;@code StringBuffer&#125;. This method\n     * synchronizes on the &#123;@code StringBuffer&#125;.\n     *\n     * @param  sb\n     *         The &#123;@code StringBuffer&#125; to compare this &#123;@code String&#125; against\n     *\n     * @return  &#123;@code true&#125; if this &#123;@code String&#125; represents the same\n     *          sequence of characters as the specified &#123;@code StringBuffer&#125;,\n     *          &#123;@code false&#125; otherwise\n     *\n     * @since  1.4\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">contentEquals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringBuffer</span> sb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">contentEquals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span><span class=\"token punctuation\">)</span>sb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">nonSyncContentEquals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractStringBuilder</span> sb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span> v1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> v2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> v2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Compares this string to the specified &#123;@code CharSequence&#125;.  The\n     * result is &#123;@code true&#125; if and only if this &#123;@code String&#125; represents the\n     * same sequence of char values as the specified sequence. Note that if the\n     * &#123;@code CharSequence&#125; is a &#123;@code StringBuffer&#125; then the method\n     * synchronizes on it.\n     *\n     * @param  cs\n     *         The sequence to compare this &#123;@code String&#125; against\n     *\n     * @return  &#123;@code true&#125; if this &#123;@code String&#125; represents the same\n     *          sequence of char values as the specified sequence, &#123;@code\n     *          false&#125; otherwise\n     *\n     * @since  1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">contentEquals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> cs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Argument is a StringBuffer, StringBuilder</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cs <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">AbstractStringBuilder</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cs <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                   <span class=\"token keyword\">return</span> <span class=\"token function\">nonSyncContentEquals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractStringBuilder</span><span class=\"token punctuation\">)</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">nonSyncContentEquals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractStringBuilder</span><span class=\"token punctuation\">)</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// Argument is a String</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cs <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// Argument is a generic CharSequence</span>\n        <span class=\"token keyword\">char</span> v1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> cs<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> cs<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Compares this &#123;@code String&#125; to another &#123;@code String&#125;, ignoring case\n     * considerations.  Two strings are considered equal ignoring case if they\n     * are of the same length and corresponding characters in the two strings\n     * are equal ignoring case.\n     *\n     * &lt;p> Two characters &#123;@code c1&#125; and &#123;@code c2&#125; are considered the same\n     * ignoring case if at least one of the following is true:\n     * &lt;ul>\n     *   &lt;li> The two characters are the same (as compared by the\n     *        &#123;@code ==&#125; operator)\n     *   &lt;li> Applying the method &#123;@link\n     *        java.lang.Character#toUpperCase(char)&#125; to each character\n     *        produces the same result\n     *   &lt;li> Applying the method &#123;@link\n     *        java.lang.Character#toLowerCase(char)&#125; to each character\n     *        produces the same result\n     * &lt;/ul>\n     *\n     * @param  anotherString\n     *         The &#123;@code String&#125; to compare this &#123;@code String&#125; against\n     *\n     * @return  &#123;@code true&#125; if the argument is not &#123;@code null&#125; and it\n     *          represents an equivalent &#123;@code String&#125; ignoring case; &#123;@code\n     *          false&#125; otherwise\n     *\n     * @see  #equals(Object)\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> anotherString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> anotherString<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span>\n                <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>anotherString <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>anotherString<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">regionMatches</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> anotherString<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Compares two strings lexicographically.\n     * The comparison is based on the Unicode value of each character in\n     * the strings. The character sequence represented by this\n     * &#123;@code String&#125; object is compared lexicographically to the\n     * character sequence represented by the argument string. The result is\n     * a negative integer if this &#123;@code String&#125; object\n     * lexicographically precedes the argument string. The result is a\n     * positive integer if this &#123;@code String&#125; object lexicographically\n     * follows the argument string. The result is zero if the strings\n     * are equal; &#123;@code compareTo&#125; returns &#123;@code 0&#125; exactly when\n     * the &#123;@link #equals(Object)&#125; method would return &#123;@code true&#125;.\n     * &lt;p>\n     * This is the definition of lexicographic ordering. If two strings are\n     * different, then either they have different characters at some index\n     * that is a valid index for both strings, or their lengths are different,\n     * or both. If they have different characters at one or more index\n     * positions, let &lt;i>k&lt;/i> be the smallest such index; then the string\n     * whose character at position &lt;i>k&lt;/i> has the smaller value, as\n     * determined by using the &amp;lt; operator, lexicographically precedes the\n     * other string. In this case, &#123;@code compareTo&#125; returns the\n     * difference of the two character values at position &#123;@code k&#125; in\n     * the two string -- that is, the value:\n     * &lt;blockquote>&lt;pre>\n     * this.charAt(k)-anotherString.charAt(k)\n     * &lt;/pre>&lt;/blockquote>\n     * If there is no index position at which they differ, then the shorter\n     * string lexicographically precedes the longer string. In this case,\n     * &#123;@code compareTo&#125; returns the difference of the lengths of the\n     * strings -- that is, the value:\n     * &lt;blockquote>&lt;pre>\n     * this.length()-anotherString.length()\n     * &lt;/pre>&lt;/blockquote>\n     *\n     * @param   anotherString   the &#123;@code String&#125; to be compared.\n     * @return  the value &#123;@code 0&#125; if the argument string is equal to\n     *          this string; a value less than &#123;@code 0&#125; if this string\n     *          is lexicographically less than the string argument; and a\n     *          value greater than &#123;@code 0&#125; if this string is\n     *          lexicographically greater than the string argument.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> anotherString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> len1 <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> len2 <span class=\"token operator\">=</span> anotherString<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> lim <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>len1<span class=\"token punctuation\">,</span> len2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> v1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> v2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> anotherString<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&lt;</span> lim<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">char</span> c1 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">char</span> c2 <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">!=</span> c2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> c1 <span class=\"token operator\">-</span> c2<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> len1 <span class=\"token operator\">-</span> len2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * A Comparator that orders &#123;@code String&#125; objects as by\n     * &#123;@code compareToIgnoreCase&#125;. This comparator is serializable.\n     * &lt;p>\n     * Note that this Comparator does &lt;em>not&lt;/em> take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The java.text package provides &lt;em>Collators&lt;/em> to allow\n     * locale-sensitive ordering.\n     *\n     * @see     java.text.Collator#compare(String, String)\n     * @since   1.2\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> CASE_INSENSITIVE_ORDER\n                                         <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CaseInsensitiveComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CaseInsensitiveComparator</span>\n            <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// use serialVersionUID from JDK 1.2.2 for interoperability</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">8575799808933029326L</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> n2 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">char</span> c1 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">char</span> c2 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">!=</span> c2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    c1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    c2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">!=</span> c2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        c1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        c2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">!=</span> c2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token comment\">// No overflow because of numeric promotion</span>\n                            <span class=\"token keyword\">return</span> c1 <span class=\"token operator\">-</span> c2<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">-</span> n2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">/** Replaces the de-serialized object. */</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">readResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> CASE_INSENSITIVE_ORDER<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Compares two strings lexicographically, ignoring case\n     * differences. This method returns an integer whose sign is that of\n     * calling &#123;@code compareTo&#125; with normalized versions of the strings\n     * where case differences have been eliminated by calling\n     * &#123;@code Character.toLowerCase(Character.toUpperCase(character))&#125; on\n     * each character.\n     * &lt;p>\n     * Note that this method does &lt;em>not&lt;/em> take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The java.text package provides &lt;em>collators&lt;/em> to allow\n     * locale-sensitive ordering.\n     *\n     * @param   str   the &#123;@code String&#125; to be compared.\n     * @return  a negative integer, zero, or a positive integer as the\n     *          specified String is greater than, equal to, or less\n     *          than this String, ignoring case considerations.\n     * @see     java.text.Collator#compare(String, String)\n     * @since   1.2\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareToIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> CASE_INSENSITIVE_ORDER<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Tests if two string regions are equal.\n     * &lt;p>\n     * A substring of this &#123;@code String&#125; object is compared to a substring\n     * of the argument other. The result is true if these substrings\n     * represent identical character sequences. The substring of this\n     * &#123;@code String&#125; object to be compared begins at index &#123;@code toffset&#125;\n     * and has length &#123;@code len&#125;. The substring of other to be compared\n     * begins at index &#123;@code ooffset&#125; and has length &#123;@code len&#125;. The\n     * result is &#123;@code false&#125; if and only if at least one of the following\n     * is true:\n     * &lt;ul>&lt;li>&#123;@code toffset&#125; is negative.\n     * &lt;li>&#123;@code ooffset&#125; is negative.\n     * &lt;li>&#123;@code toffset+len&#125; is greater than the length of this\n     * &#123;@code String&#125; object.\n     * &lt;li>&#123;@code ooffset+len&#125; is greater than the length of the other\n     * argument.\n     * &lt;li>There is some nonnegative integer &lt;i>k&lt;/i> less than &#123;@code len&#125;\n     * such that:\n     * &#123;@code this.charAt(toffset + &#125;&lt;i>k&lt;/i>&#123;@code ) != other.charAt(ooffset + &#125;\n     * &lt;i>k&lt;/i>&#123;@code )&#125;\n     * &lt;/ul>\n     *\n     * @param   toffset   the starting offset of the subregion in this string.\n     * @param   other     the string argument.\n     * @param   ooffset   the starting offset of the subregion in the string\n     *                    argument.\n     * @param   len       the number of characters to compare.\n     * @return  &#123;@code true&#125; if the specified subregion of this string\n     *          exactly matches the specified subregion of the string argument;\n     *          &#123;@code false&#125; otherwise.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">regionMatches</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> toffset<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> other<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ooffset<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span> ta<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span> <span class=\"token operator\">=</span> toffset<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> pa<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> po <span class=\"token operator\">=</span> ooffset<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Note: toffset, ooffset, or len might be near -1>>>1.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ooffset <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>toffset <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>toffset <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> len<span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>ooffset <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>other<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>len<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ta<span class=\"token punctuation\">[</span><span class=\"token keyword\">to</span><span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> pa<span class=\"token punctuation\">[</span>po<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Tests if two string regions are equal.\n     * &lt;p>\n     * A substring of this &#123;@code String&#125; object is compared to a substring\n     * of the argument &#123;@code other&#125;. The result is &#123;@code true&#125; if these\n     * substrings represent character sequences that are the same, ignoring\n     * case if and only if &#123;@code ignoreCase&#125; is true. The substring of\n     * this &#123;@code String&#125; object to be compared begins at index\n     * &#123;@code toffset&#125; and has length &#123;@code len&#125;. The substring of\n     * &#123;@code other&#125; to be compared begins at index &#123;@code ooffset&#125; and\n     * has length &#123;@code len&#125;. The result is &#123;@code false&#125; if and only if\n     * at least one of the following is true:\n     * &lt;ul>&lt;li>&#123;@code toffset&#125; is negative.\n     * &lt;li>&#123;@code ooffset&#125; is negative.\n     * &lt;li>&#123;@code toffset+len&#125; is greater than the length of this\n     * &#123;@code String&#125; object.\n     * &lt;li>&#123;@code ooffset+len&#125; is greater than the length of the other\n     * argument.\n     * &lt;li>&#123;@code ignoreCase&#125; is &#123;@code false&#125; and there is some nonnegative\n     * integer &lt;i>k&lt;/i> less than &#123;@code len&#125; such that:\n     * &lt;blockquote>&lt;pre>\n     * this.charAt(toffset+k) != other.charAt(ooffset+k)\n     * &lt;/pre>&lt;/blockquote>\n     * &lt;li>&#123;@code ignoreCase&#125; is &#123;@code true&#125; and there is some nonnegative\n     * integer &lt;i>k&lt;/i> less than &#123;@code len&#125; such that:\n     * &lt;blockquote>&lt;pre>\n     * Character.toLowerCase(this.charAt(toffset+k)) !=\n     Character.toLowerCase(other.charAt(ooffset+k))\n     * &lt;/pre>&lt;/blockquote>\n     * and:\n     * &lt;blockquote>&lt;pre>\n     * Character.toUpperCase(this.charAt(toffset+k)) !=\n     *         Character.toUpperCase(other.charAt(ooffset+k))\n     * &lt;/pre>&lt;/blockquote>\n     * &lt;/ul>\n     *\n     * @param   ignoreCase   if &#123;@code true&#125;, ignore case when comparing\n     *                       characters.\n     * @param   toffset      the starting offset of the subregion in this\n     *                       string.\n     * @param   other        the string argument.\n     * @param   ooffset      the starting offset of the subregion in the string\n     *                       argument.\n     * @param   len          the number of characters to compare.\n     * @return  &#123;@code true&#125; if the specified subregion of this string\n     *          matches the specified subregion of the string argument;\n     *          &#123;@code false&#125; otherwise. Whether the matching is exact\n     *          or case insensitive depends on the &#123;@code ignoreCase&#125;\n     *          argument.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">regionMatches</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> ignoreCase<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> toffset<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span> other<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ooffset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span> ta<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span> <span class=\"token operator\">=</span> toffset<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> pa<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> po <span class=\"token operator\">=</span> ooffset<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Note: toffset, ooffset, or len might be near -1>>>1.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ooffset <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>toffset <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>toffset <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> len<span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>ooffset <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>other<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>len<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">char</span> c1 <span class=\"token operator\">=</span> ta<span class=\"token punctuation\">[</span><span class=\"token keyword\">to</span><span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">char</span> c2 <span class=\"token operator\">=</span> pa<span class=\"token punctuation\">[</span>po<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ignoreCase<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// If characters don't match but case may be ignored,</span>\n                <span class=\"token comment\">// try converting both characters to uppercase.</span>\n                <span class=\"token comment\">// If the results match, then the comparison scan should</span>\n                <span class=\"token comment\">// continue.</span>\n                <span class=\"token keyword\">char</span> u1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">char</span> u2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>u1 <span class=\"token operator\">==</span> u2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token comment\">// Unfortunately, conversion to uppercase does not work properly</span>\n                <span class=\"token comment\">// for the Georgian alphabet, which has strange rules about case</span>\n                <span class=\"token comment\">// conversion.  So we need to make one last check before</span>\n                <span class=\"token comment\">// exiting.</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span>u1<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span>u2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Tests if the substring of this string beginning at the\n     * specified index starts with the specified prefix.\n     *\n     * @param   prefix    the prefix.\n     * @param   toffset   where to begin looking in this string.\n     * @return  &#123;@code true&#125; if the character sequence represented by the\n     *          argument is a prefix of the substring of this object starting\n     *          at index &#123;@code toffset&#125;; &#123;@code false&#125; otherwise.\n     *          The result is &#123;@code false&#125; if &#123;@code toffset&#125; is\n     *          negative or greater than the length of this\n     *          &#123;@code String&#125; object; otherwise the result is the same\n     *          as the result of the expression\n     *          &lt;pre>\n     *          this.substring(toffset).startsWith(prefix)\n     *          &lt;/pre>\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> prefix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> toffset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span> ta<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span> <span class=\"token operator\">=</span> toffset<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> pa<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> prefix<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> po <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> pc <span class=\"token operator\">=</span> prefix<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Note: toffset might be near -1>>>1.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>toffset <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>toffset <span class=\"token operator\">></span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>pc <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ta<span class=\"token punctuation\">[</span><span class=\"token keyword\">to</span><span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> pa<span class=\"token punctuation\">[</span>po<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Tests if this string starts with the specified prefix.\n     *\n     * @param   prefix   the prefix.\n     * @return  &#123;@code true&#125; if the character sequence represented by the\n     *          argument is a prefix of the character sequence represented by\n     *          this string; &#123;@code false&#125; otherwise.\n     *          Note also that &#123;@code true&#125; will be returned if the\n     *          argument is an empty string or is equal to this\n     *          &#123;@code String&#125; object as determined by the\n     *          &#123;@link #equals(Object)&#125; method.\n     * @since   1. 0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> prefix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Tests if this string ends with the specified suffix.\n     *\n     * @param   suffix   the suffix.\n     * @return  &#123;@code true&#125; if the character sequence represented by the\n     *          argument is a suffix of the character sequence represented by\n     *          this object; &#123;@code false&#125; otherwise. Note that the\n     *          result will be &#123;@code true&#125; if the argument is the\n     *          empty string or is equal to this &#123;@code String&#125; object\n     *          as determined by the &#123;@link #equals(Object)&#125; method.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> suffix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>suffix<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> suffix<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a hash code for this string. The hash code for a\n     * &#123;@code String&#125; object is computed as\n     * &lt;blockquote>&lt;pre>\n     * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n     * &lt;/pre>&lt;/blockquote>\n     * using &#123;@code int&#125; arithmetic, where &#123;@code s[i]&#125; is the\n     * &lt;i>i&lt;/i>th character of the string, &#123;@code n&#125; is the length of\n     * the string, and &#123;@code ^&#125; indicates exponentiation.\n     * (The hash value of the empty string is zero.)\n     *\n     * @return  a hash code value for this object.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">char</span> val<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                h <span class=\"token operator\">=</span> <span class=\"token number\">31</span> <span class=\"token operator\">*</span> h <span class=\"token operator\">+</span> val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            hash <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> h<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the index within this string of the first occurrence of\n     * the specified character. If a character with value\n     * &#123;@code ch&#125; occurs in the character sequence represented by\n     * this &#123;@code String&#125; object, then the index (in Unicode\n     * code units) of the first such occurrence is returned. For\n     * values of &#123;@code ch&#125; in the range from 0 to 0xFFFF\n     * (inclusive), this is the smallest value &lt;i>k&lt;/i> such that:\n     * &lt;blockquote>&lt;pre>\n     * this.charAt(&lt;i>k&lt;/i>) == ch\n     * &lt;/pre>&lt;/blockquote>\n     * is true. For other values of &#123;@code ch&#125;, it is the\n     * smallest value &lt;i>k&lt;/i> such that:\n     * &lt;blockquote>&lt;pre>\n     * this.codePointAt(&lt;i>k&lt;/i>) == ch\n     * &lt;/pre>&lt;/blockquote>\n     * is true. In either case, if no such character occurs in this\n     * string, then &#123;@code -1&#125; is returned.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          &#123;@code -1&#125; if the character does not occur.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the index within this string of the first occurrence of the\n     * specified character, starting the search at the specified index.\n     * &lt;p>\n     * If a character with value &#123;@code ch&#125; occurs in the\n     * character sequence represented by this &#123;@code String&#125;\n     * object at an index no smaller than &#123;@code fromIndex&#125;, then\n     * the index of the first such occurrence is returned. For values\n     * of &#123;@code ch&#125; in the range from 0 to 0xFFFF (inclusive),\n     * this is the smallest value &lt;i>k&lt;/i> such that:\n     * &lt;blockquote>&lt;pre>\n     * (this.charAt(&lt;i>k&lt;/i>) == ch) &#123;@code &amp;&amp;&#125; (&lt;i>k&lt;/i> &amp;gt;= fromIndex)\n     * &lt;/pre>&lt;/blockquote>\n     * is true. For other values of &#123;@code ch&#125;, it is the\n     * smallest value &lt;i>k&lt;/i> such that:\n     * &lt;blockquote>&lt;pre>\n     * (this.codePointAt(&lt;i>k&lt;/i>) == ch) &#123;@code &amp;&amp;&#125; (&lt;i>k&lt;/i> &amp;gt;= fromIndex)\n     * &lt;/pre>&lt;/blockquote>\n     * is true. In either case, if no such character occurs in this\n     * string at or after position &#123;@code fromIndex&#125;, then\n     * &#123;@code -1&#125; is returned.\n     *\n     * &lt;p>\n     * There is no restriction on the value of &#123;@code fromIndex&#125;. If it\n     * is negative, it has the same effect as if it were zero: this entire\n     * string may be searched. If it is greater than the length of this\n     * string, it has the same effect as if it were equal to the length of\n     * this string: &#123;@code -1&#125; is returned.\n     *\n     * &lt;p>All indices are specified in &#123;@code char&#125; values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object that is greater\n     *          than or equal to &#123;@code fromIndex&#125;, or &#123;@code -1&#125;\n     *          if the character does not occur.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fromIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            fromIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fromIndex <span class=\"token operator\">>=</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// Note: fromIndex might be near -1>>>1.</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MIN_SUPPLEMENTARY_CODE_POINT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// handle most cases here (ch is a BMP code point or a</span>\n            <span class=\"token comment\">// negative value (invalid code point))</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> fromIndex<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">indexOfSupplementary</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> fromIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Handles (rare) calls of indexOf with a supplementary character.\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">indexOfSupplementary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">isValidCodePoint</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span> hi <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">highSurrogate</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span> lo <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">lowSurrogate</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> fromIndex<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> hi <span class=\"token operator\">&amp;&amp;</span> value<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> lo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the index within this string of the last occurrence of\n     * the specified character. For values of &#123;@code ch&#125; in the\n     * range from 0 to 0xFFFF (inclusive), the index (in Unicode code\n     * units) returned is the largest value &lt;i>k&lt;/i> such that:\n     * &lt;blockquote>&lt;pre>\n     * this.charAt(&lt;i>k&lt;/i>) == ch\n     * &lt;/pre>&lt;/blockquote>\n     * is true. For other values of &#123;@code ch&#125;, it is the\n     * largest value &lt;i>k&lt;/i> such that:\n     * &lt;blockquote>&lt;pre>\n     * this.codePointAt(&lt;i>k&lt;/i>) == ch\n     * &lt;/pre>&lt;/blockquote>\n     * is true.  In either case, if no such character occurs in this\n     * string, then &#123;@code -1&#125; is returned.  The\n     * &#123;@code String&#125; is searched backwards starting at the last\n     * character.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          &#123;@code -1&#125; if the character does not occur.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the index within this string of the last occurrence of\n     * the specified character, searching backward starting at the\n     * specified index. For values of &#123;@code ch&#125; in the range\n     * from 0 to 0xFFFF (inclusive), the index returned is the largest\n     * value &lt;i>k&lt;/i> such that:\n     * &lt;blockquote>&lt;pre>\n     * (this.charAt(&lt;i>k&lt;/i>) == ch) &#123;@code &amp;&amp;&#125; (&lt;i>k&lt;/i> &amp;lt;= fromIndex)\n     * &lt;/pre>&lt;/blockquote>\n     * is true. For other values of &#123;@code ch&#125;, it is the\n     * largest value &lt;i>k&lt;/i> such that:\n     * &lt;blockquote>&lt;pre>\n     * (this.codePointAt(&lt;i>k&lt;/i>) == ch) &#123;@code &amp;&amp;&#125; (&lt;i>k&lt;/i> &amp;lt;= fromIndex)\n     * &lt;/pre>&lt;/blockquote>\n     * is true. In either case, if no such character occurs in this\n     * string at or before position &#123;@code fromIndex&#125;, then\n     * &#123;@code -1&#125; is returned.\n     *\n     * &lt;p>All indices are specified in &#123;@code char&#125; values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from. There is no\n     *          restriction on the value of &#123;@code fromIndex&#125;. If it is\n     *          greater than or equal to the length of this string, it has\n     *          the same effect as if it were equal to one less than the\n     *          length of this string: this entire string may be searched.\n     *          If it is negative, it has the same effect as if it were -1:\n     *          -1 is returned.\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object that is less\n     *          than or equal to &#123;@code fromIndex&#125;, or &#123;@code -1&#125;\n     *          if the character does not occur before that point.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MIN_SUPPLEMENTARY_CODE_POINT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// handle most cases here (ch is a BMP code point or a</span>\n            <span class=\"token comment\">// negative value (invalid code point))</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>fromIndex<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">lastIndexOfSupplementary</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> fromIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Handles (rare) calls of lastIndexOf with a supplementary character.\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lastIndexOfSupplementary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">isValidCodePoint</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">char</span> hi <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">highSurrogate</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">char</span> lo <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">lowSurrogate</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>fromIndex<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> hi <span class=\"token operator\">&amp;&amp;</span> value<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> lo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring.\n     *\n     * &lt;p>The returned index is the smallest value &lt;i>k&lt;/i> for which:\n     * &lt;blockquote>&lt;pre>\n     * this.startsWith(str, &lt;i>k&lt;/i>)\n     * &lt;/pre>&lt;/blockquote>\n     * If no such value of &lt;i>k&lt;/i> exists, then &#123;@code -1&#125; is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the first occurrence of the specified substring,\n     *          or &#123;@code -1&#125; if there is no such occurrence.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring, starting at the specified index.\n     *\n     * &lt;p>The returned index is the smallest value &lt;i>k&lt;/i> for which:\n     * &lt;blockquote>&lt;pre>\n     * &lt;i>k&lt;/i> &amp;gt;= fromIndex &#123;@code &amp;&amp;&#125; this.startsWith(str, &lt;i>k&lt;/i>)\n     * &lt;/pre>&lt;/blockquote>\n     * If no such value of &lt;i>k&lt;/i> exists, then &#123;@code -1&#125; is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index from which to start the search.\n     * @return  the index of the first occurrence of the specified substring,\n     *          starting at the specified index,\n     *          or &#123;@code -1&#125; if there is no such occurrence.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n                str<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> fromIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   source       the characters being searched.\n     * @param   sourceOffset offset of the source string.\n     * @param   sourceCount  count of the source string.\n     * @param   target       the characters being searched for.\n     * @param   fromIndex    the index to begin searching from.\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sourceOffset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sourceCount<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> sourceOffset<span class=\"token punctuation\">,</span> sourceCount<span class=\"token punctuation\">,</span>\n                       target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n                       fromIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Code shared by String and StringBuffer to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   source       the characters being searched.\n     * @param   sourceOffset offset of the source string.\n     * @param   sourceCount  count of the source string.\n     * @param   target       the characters being searched for.\n     * @param   targetOffset offset of the target string.\n     * @param   targetCount  count of the target string.\n     * @param   fromIndex    the index to begin searching from.\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sourceOffset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sourceCount<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> targetOffset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> targetCount<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fromIndex <span class=\"token operator\">>=</span> sourceCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>targetCount <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> sourceCount <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fromIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            fromIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetCount <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> fromIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">char</span> first <span class=\"token operator\">=</span> target<span class=\"token punctuation\">[</span>targetOffset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> sourceOffset <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>sourceCount <span class=\"token operator\">-</span> targetCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> sourceOffset <span class=\"token operator\">+</span> fromIndex<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> max<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">/* Look for first character. */</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> first<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>i <span class=\"token operator\">&lt;=</span> max <span class=\"token operator\">&amp;&amp;</span> source<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token comment\">/* Found first character, now look at the rest of v2 */</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> targetCount <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> targetOffset <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> end <span class=\"token operator\">&amp;&amp;</span> source<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n                        <span class=\"token operator\">==</span> target<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">/* Found whole string. */</span>\n                    <span class=\"token keyword\">return</span> i <span class=\"token operator\">-</span> sourceOffset<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring.  The last occurrence of the empty string \"\"\n     * is considered to occur at the index value &#123;@code this.length()&#125;.\n     *\n     * &lt;p>The returned index is the largest value &lt;i>k&lt;/i> for which:\n     * &lt;blockquote>&lt;pre>\n     * this.startsWith(str, &lt;i>k&lt;/i>)\n     * &lt;/pre>&lt;/blockquote>\n     * If no such value of &lt;i>k&lt;/i> exists, then &#123;@code -1&#125; is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the last occurrence of the specified substring,\n     *          or &#123;@code -1&#125; if there is no such occurrence.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring, searching backward starting at the specified index.\n     *\n     * &lt;p>The returned index is the largest value &lt;i>k&lt;/i> for which:\n     * &lt;blockquote>&lt;pre>\n     * &lt;i>k&lt;/i> &#123;@code &lt;=&#125; fromIndex &#123;@code &amp;&amp;&#125; this.startsWith(str, &lt;i>k&lt;/i>)\n     * &lt;/pre>&lt;/blockquote>\n     * If no such value of &lt;i>k&lt;/i> exists, then &#123;@code -1&#125; is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the last occurrence of the specified substring,\n     *          searching backward from the specified index,\n     *          or &#123;@code -1&#125; if there is no such occurrence.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n                str<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> fromIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   source       the characters being searched.\n     * @param   sourceOffset offset of the source string.\n     * @param   sourceCount  count of the source string.\n     * @param   target       the characters being searched for.\n     * @param   fromIndex    the index to begin searching from.\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sourceOffset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sourceCount<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> sourceOffset<span class=\"token punctuation\">,</span> sourceCount<span class=\"token punctuation\">,</span>\n                       target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n                       fromIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Code shared by String and StringBuffer to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   source       the characters being searched.\n     * @param   sourceOffset offset of the source string.\n     * @param   sourceCount  count of the source string.\n     * @param   target       the characters being searched for.\n     * @param   targetOffset offset of the target string.\n     * @param   targetCount  count of the target string.\n     * @param   fromIndex    the index to begin searching from.\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sourceOffset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sourceCount<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> targetOffset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> targetCount<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">/*\n         * Check arguments; return immediately where possible. For\n         * consistency, don't check for null str.\n         */</span>\n        <span class=\"token keyword\">int</span> rightIndex <span class=\"token operator\">=</span> sourceCount <span class=\"token operator\">-</span> targetCount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fromIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fromIndex <span class=\"token operator\">></span> rightIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            fromIndex <span class=\"token operator\">=</span> rightIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">/* Empty string always matches. */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetCount <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> fromIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> strLastIndex <span class=\"token operator\">=</span> targetOffset <span class=\"token operator\">+</span> targetCount <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> strLastChar <span class=\"token operator\">=</span> target<span class=\"token punctuation\">[</span>strLastIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> sourceOffset <span class=\"token operator\">+</span> targetCount <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> min <span class=\"token operator\">+</span> fromIndex<span class=\"token punctuation\">;</span>\n\n    startSearchForLastChar<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> min <span class=\"token operator\">&amp;&amp;</span> source<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> strLastChar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> j <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>targetCount <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> strLastIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> target<span class=\"token punctuation\">[</span>k<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">continue</span> startSearchForLastChar<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> start <span class=\"token operator\">-</span> sourceOffset <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a string that is a substring of this string. The\n     * substring begins with the character at the specified index and\n     * extends to the end of this string. &lt;p>\n     * Examples:\n     * &lt;blockquote>&lt;pre>\n     * \"unhappy\".substring(2) returns \"happy\"\n     * \"Harbison\".substring(3) returns \"bison\"\n     * \"emptiness\".substring(9) returns \"\" (an empty string)\n     * &lt;/pre>&lt;/blockquote>\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if\n     *             &#123;@code beginIndex&#125; is negative or larger than the\n     *             length of this &#123;@code String&#125; object.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> beginIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beginIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>beginIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> subLen <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> beginIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subLen <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>subLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>beginIndex <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> beginIndex<span class=\"token punctuation\">,</span> subLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a string that is a substring of this string. The\n     * substring begins at the specified &#123;@code beginIndex&#125; and\n     * extends to the character at index &#123;@code endIndex - 1&#125;.\n     * Thus the length of the substring is &#123;@code endIndex-beginIndex&#125;.\n     * &lt;p>\n     * Examples:\n     * &lt;blockquote>&lt;pre>\n     * \"hamburger\".substring(4, 8) returns \"urge\"\n     * \"smiles\".substring(1, 5) returns \"mile\"\n     * &lt;/pre>&lt;/blockquote>\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @param      endIndex     the ending index, exclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if the\n     *             &#123;@code beginIndex&#125; is negative, or\n     *             &#123;@code endIndex&#125; is larger than the length of\n     *             this &#123;@code String&#125; object, or\n     *             &#123;@code beginIndex&#125; is larger than\n     *             &#123;@code endIndex&#125;.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> beginIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> endIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beginIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>beginIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>endIndex <span class=\"token operator\">></span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>endIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> subLen <span class=\"token operator\">=</span> endIndex <span class=\"token operator\">-</span> beginIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subLen <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>subLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>beginIndex <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>endIndex <span class=\"token operator\">==</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span>\n                <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> beginIndex<span class=\"token punctuation\">,</span> subLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a character sequence that is a subsequence of this sequence.\n     *\n     * &lt;p> An invocation of this method of the form\n     *\n     * &lt;blockquote>&lt;pre>\n     * str.subSequence(begin,&amp;nbsp;end)&lt;/pre>&lt;/blockquote>\n     *\n     * behaves in exactly the same way as the invocation\n     *\n     * &lt;blockquote>&lt;pre>\n     * str.substring(begin,&amp;nbsp;end)&lt;/pre>&lt;/blockquote>\n     *\n     * @apiNote\n     * This method is defined so that the &#123;@code String&#125; class can implement\n     * the &#123;@link CharSequence&#125; interface.\n     *\n     * @param   beginIndex   the begin index, inclusive.\n     * @param   endIndex     the end index, exclusive.\n     * @return  the specified subsequence.\n     *\n     * @throws  IndexOutOfBoundsException\n     *          if &#123;@code beginIndex&#125; or &#123;@code endIndex&#125; is negative,\n     *          if &#123;@code endIndex&#125; is greater than &#123;@code length()&#125;,\n     *          or if &#123;@code beginIndex&#125; is greater than &#123;@code endIndex&#125;\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CharSequence</span> <span class=\"token function\">subSequence</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> beginIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> endIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>beginIndex<span class=\"token punctuation\">,</span> endIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Concatenates the specified string to the end of this string.\n     * &lt;p>\n     * If the length of the argument string is &#123;@code 0&#125;, then this\n     * &#123;@code String&#125; object is returned. Otherwise, a\n     * &#123;@code String&#125; object is returned that represents a character\n     * sequence that is the concatenation of the character sequence\n     * represented by this &#123;@code String&#125; object and the character\n     * sequence represented by the argument string.&lt;p>\n     * Examples:\n     * &lt;blockquote>&lt;pre>\n     * \"cares\".concat(\"s\") returns \"caress\"\n     * \"to\".concat(\"get\").concat(\"her\") returns \"together\"\n     * &lt;/pre>&lt;/blockquote>\n     *\n     * @param   str   the &#123;@code String&#125; that is concatenated to the end\n     *                of this &#123;@code String&#125;.\n     * @return  a string that represents the concatenation of this object's\n     *          characters followed by the string argument's characters.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> otherLen <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>otherLen <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> len <span class=\"token operator\">+</span> otherLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        str<span class=\"token punctuation\">.</span><span class=\"token function\">getChars</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a string resulting from replacing all occurrences of\n     * &#123;@code oldChar&#125; in this string with &#123;@code newChar&#125;.\n     * &lt;p>\n     * If the character &#123;@code oldChar&#125; does not occur in the\n     * character sequence represented by this &#123;@code String&#125; object,\n     * then a reference to this &#123;@code String&#125; object is returned.\n     * Otherwise, a &#123;@code String&#125; object is returned that\n     * represents a character sequence identical to the character sequence\n     * represented by this &#123;@code String&#125; object, except that every\n     * occurrence of &#123;@code oldChar&#125; is replaced by an occurrence\n     * of &#123;@code newChar&#125;.\n     * &lt;p>\n     * Examples:\n     * &lt;blockquote>&lt;pre>\n     * \"mesquite in your cellar\".replace('e', 'o')\n     *         returns \"mosquito in your collar\"\n     * \"the war of baronets\".replace('r', 'y')\n     *         returns \"the way of bayonets\"\n     * \"sparring with a purple porpoise\".replace('p', 't')\n     *         returns \"starring with a turtle tortoise\"\n     * \"JonL\".replace('q', 'x') returns \"JonL\" (no change)\n     * &lt;/pre>&lt;/blockquote>\n     *\n     * @param   oldChar   the old character.\n     * @param   newChar   the new character.\n     * @return  a string derived from this string by replacing every\n     *          occurrence of &#123;@code oldChar&#125; with &#123;@code newChar&#125;.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> oldChar<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> newChar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldChar <span class=\"token operator\">!=</span> newChar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> val <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* avoid getfield opcode */</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> oldChar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    buf<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> oldChar<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> newChar <span class=\"token operator\">:</span> c<span class=\"token punctuation\">;</span>\n                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Tells whether or not this string matches the given &lt;a\n     * href=\"../util/regex/Pattern.html#sum\">regular expression&lt;/a>.\n     *\n     * &lt;p> An invocation of this method of the form\n     * &lt;i>str&lt;/i>&#123;@code .matches(&#125;&lt;i>regex&lt;/i>&#123;@code )&#125; yields exactly the\n     * same result as the expression\n     *\n     * &lt;blockquote>\n     * &#123;@link java.util.regex.Pattern&#125;.&#123;@link java.util.regex.Pattern#matches(String,CharSequence)\n     * matches(&lt;i>regex&lt;/i>, &lt;i>str&lt;/i>)&#125;\n     * &lt;/blockquote>\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     *\n     * @return  &#123;@code true&#125; if, and only if, this string matches the\n     *          given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression's syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> regex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns true if and only if this string contains the specified\n     * sequence of char values.\n     *\n     * @param s the sequence to search for\n     * @return true if this string contains &#123;@code s&#125;, false otherwise\n     * @since 1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Replaces the first substring of this string that matches the given &lt;a\n     * href=\"../util/regex/Pattern.html#sum\">regular expression&lt;/a> with the\n     * given replacement.\n     *\n     * &lt;p> An invocation of this method of the form\n     * &lt;i>str&lt;/i>&#123;@code .replaceFirst(&#125;&lt;i>regex&lt;/i>&#123;@code ,&#125; &lt;i>repl&lt;/i>&#123;@code )&#125;\n     * yields exactly the same result as the expression\n     *\n     * &lt;blockquote>\n     * &lt;code>\n     * &#123;@link java.util.regex.Pattern&#125;.&#123;@link\n     * java.util.regex.Pattern#compile compile&#125;(&lt;i>regex&lt;/i>).&#123;@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher&#125;(&lt;i>str&lt;/i>).&#123;@link\n     * java.util.regex.Matcher#replaceFirst replaceFirst&#125;(&lt;i>repl&lt;/i>)\n     * &lt;/code>\n     * &lt;/blockquote>\n     *\n     *&lt;p>\n     * Note that backslashes (&#123;@code \\&#125;) and dollar signs (&#123;@code $&#125;) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * &#123;@link java.util.regex.Matcher#replaceFirst&#125;.\n     * Use &#123;@link java.util.regex.Matcher#quoteReplacement&#125; to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for the first match\n     *\n     * @return  The resulting &#123;@code String&#125;\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression's syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">replaceFirst</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> regex<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> replacement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceFirst</span><span class=\"token punctuation\">(</span>replacement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Replaces each substring of this string that matches the given &lt;a\n     * href=\"../util/regex/Pattern.html#sum\">regular expression&lt;/a> with the\n     * given replacement.\n     *\n     * &lt;p> An invocation of this method of the form\n     * &lt;i>str&lt;/i>&#123;@code .replaceAll(&#125;&lt;i>regex&lt;/i>&#123;@code ,&#125; &lt;i>repl&lt;/i>&#123;@code )&#125;\n     * yields exactly the same result as the expression\n     *\n     * &lt;blockquote>\n     * &lt;code>\n     * &#123;@link java.util.regex.Pattern&#125;.&#123;@link\n     * java.util.regex.Pattern#compile compile&#125;(&lt;i>regex&lt;/i>).&#123;@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher&#125;(&lt;i>str&lt;/i>).&#123;@link\n     * java.util.regex.Matcher#replaceAll replaceAll&#125;(&lt;i>repl&lt;/i>)\n     * &lt;/code>\n     * &lt;/blockquote>\n     *\n     *&lt;p>\n     * Note that backslashes (&#123;@code \\&#125;) and dollar signs (&#123;@code $&#125;) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * &#123;@link java.util.regex.Matcher#replaceAll Matcher.replaceAll&#125;.\n     * Use &#123;@link java.util.regex.Matcher#quoteReplacement&#125; to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for each match\n     *\n     * @return  The resulting &#123;@code String&#125;\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression's syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> regex<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> replacement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span>replacement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Replaces each substring of this string that matches the literal target\n     * sequence with the specified literal replacement sequence. The\n     * replacement proceeds from the beginning of the string to the end, for\n     * example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in\n     * \"ba\" rather than \"ab\".\n     *\n     * @param  target The sequence of char values to be replaced\n     * @param  replacement The replacement sequence of char values\n     * @return  The resulting string\n     * @since 1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CharSequence</span> replacement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span>LITERAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Matcher</span><span class=\"token punctuation\">.</span><span class=\"token function\">quoteReplacement</span><span class=\"token punctuation\">(</span>replacement<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Splits this string around matches of the given\n     * &lt;a href=\"../util/regex/Pattern.html#sum\">regular expression&lt;/a>.\n     *\n     * &lt;p> The array returned by this method contains each substring of this\n     * string that is terminated by another substring that matches the given\n     * expression or is terminated by the end of the string.  The substrings in\n     * the array are in the order in which they occur in this string.  If the\n     * expression does not match any part of the input then the resulting array\n     * has just one element, namely this string.\n     *\n     * &lt;p> When there is a positive-width match at the beginning of this\n     * string then an empty leading substring is included at the beginning\n     * of the resulting array. A zero-width match at the beginning however\n     * never produces such empty leading substring.\n     *\n     * &lt;p> The &#123;@code limit&#125; parameter controls the number of times the\n     * pattern is applied and therefore affects the length of the resulting\n     * array.  If the limit &lt;i>n&lt;/i> is greater than zero then the pattern\n     * will be applied at most &lt;i>n&lt;/i>&amp;nbsp;-&amp;nbsp;1 times, the array's\n     * length will be no greater than &lt;i>n&lt;/i>, and the array's last entry\n     * will contain all input beyond the last matched delimiter.  If &lt;i>n&lt;/i>\n     * is non-positive then the pattern will be applied as many times as\n     * possible and the array can have any length.  If &lt;i>n&lt;/i> is zero then\n     * the pattern will be applied as many times as possible, the array can\n     * have any length, and trailing empty strings will be discarded.\n     *\n     * &lt;p> The string &#123;@code \"boo:and:foo\"&#125;, for example, yields the\n     * following results with these parameters:\n     *\n     * &lt;blockquote>&lt;table cellpadding=1 cellspacing=0 summary=\"Split example showing regex, limit, and result\">\n     * &lt;tr>\n     *     &lt;th>Regex&lt;/th>\n     *     &lt;th>Limit&lt;/th>\n     *     &lt;th>Result&lt;/th>\n     * &lt;/tr>\n     * &lt;tr>&lt;td align=center>:&lt;/td>\n     *     &lt;td align=center>2&lt;/td>\n     *     &lt;td>&#123;@code &#123; \"boo\", \"and:foo\" &#125;&#125;&lt;/td>&lt;/tr>\n     * &lt;tr>&lt;td align=center>:&lt;/td>\n     *     &lt;td align=center>5&lt;/td>\n     *     &lt;td>&#123;@code &#123; \"boo\", \"and\", \"foo\" &#125;&#125;&lt;/td>&lt;/tr>\n     * &lt;tr>&lt;td align=center>:&lt;/td>\n     *     &lt;td align=center>-2&lt;/td>\n     *     &lt;td>&#123;@code &#123; \"boo\", \"and\", \"foo\" &#125;&#125;&lt;/td>&lt;/tr>\n     * &lt;tr>&lt;td align=center>o&lt;/td>\n     *     &lt;td align=center>5&lt;/td>\n     *     &lt;td>&#123;@code &#123; \"b\", \"\", \":and:f\", \"\", \"\" &#125;&#125;&lt;/td>&lt;/tr>\n     * &lt;tr>&lt;td align=center>o&lt;/td>\n     *     &lt;td align=center>-2&lt;/td>\n     *     &lt;td>&#123;@code &#123; \"b\", \"\", \":and:f\", \"\", \"\" &#125;&#125;&lt;/td>&lt;/tr>\n     * &lt;tr>&lt;td align=center>o&lt;/td>\n     *     &lt;td align=center>0&lt;/td>\n     *     &lt;td>&#123;@code &#123; \"b\", \"\", \":and:f\" &#125;&#125;&lt;/td>&lt;/tr>\n     * &lt;/table>&lt;/blockquote>\n     *\n     * &lt;p> An invocation of this method of the form\n     * &lt;i>str.&lt;/i>&#123;@code split(&#125;&lt;i>regex&lt;/i>&#123;@code ,&#125;&amp;nbsp;&lt;i>n&lt;/i>&#123;@code )&#125;\n     * yields the same result as the expression\n     *\n     * &lt;blockquote>\n     * &lt;code>\n     * &#123;@link java.util.regex.Pattern&#125;.&#123;@link\n     * java.util.regex.Pattern#compile compile&#125;(&lt;i>regex&lt;/i>).&#123;@link\n     * java.util.regex.Pattern#split(java.lang.CharSequence,int) split&#125;(&lt;i>str&lt;/i>,&amp;nbsp;&lt;i>n&lt;/i>)\n     * &lt;/code>\n     * &lt;/blockquote>\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @param  limit\n     *         the result threshold, as described above\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression's syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> regex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">/* fastpath if the regex is a\n         (1)one-char String and this character is not one of the\n            RegEx's meta characters \".$|()[&#123;^?*+\\\\\", or\n         (2)two-char String and the first char is the backslash and\n            the second is not the ascii digit or ascii letter.\n         */</span>\n        <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span>\n             <span class=\"token string\">\".$|()[&#123;^?*+\\\\\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n             <span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span>\n              regex<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'\\\\'</span> <span class=\"token operator\">&amp;&amp;</span>\n              <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token punctuation\">(</span><span class=\"token string\">'9'</span><span class=\"token operator\">-</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\n              <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">-</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token punctuation\">(</span><span class=\"token string\">'z'</span><span class=\"token operator\">-</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\n              <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">-</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Z'</span><span class=\"token operator\">-</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n            <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MIN_HIGH_SURROGATE <span class=\"token operator\">||</span>\n             ch <span class=\"token operator\">></span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MAX_LOW_SURROGATE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> off <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">boolean</span> limited <span class=\"token operator\">=</span> limit <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>next <span class=\"token operator\">=</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> off<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>limited <span class=\"token operator\">||</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> limit <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>off<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    off <span class=\"token operator\">=</span> next <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// last one</span>\n                    <span class=\"token comment\">//assert (list.size() == limit - 1);</span>\n                    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>off<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    off <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">// If no match was found, return this</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>off <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Add remaining segment</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>limited <span class=\"token operator\">||</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> limit<span class=\"token punctuation\">)</span>\n                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>off<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Construct result</span>\n            <span class=\"token keyword\">int</span> resultSize <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>limit <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>resultSize <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>resultSize <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    resultSize<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>resultSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">subList</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> resultSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Splits this string around matches of the given &lt;a\n     * href=\"../util/regex/Pattern.html#sum\">regular expression&lt;/a>.\n     *\n     * &lt;p> This method works as if by invoking the two-argument &#123;@link\n     * #split(String, int) split&#125; method with the given expression and a limit\n     * argument of zero.  Trailing empty strings are therefore not included in\n     * the resulting array.\n     *\n     * &lt;p> The string &#123;@code \"boo:and:foo\"&#125;, for example, yields the following\n     * results with these expressions:\n     *\n     * &lt;blockquote>&lt;table cellpadding=1 cellspacing=0 summary=\"Split examples showing regex and result\">\n     * &lt;tr>\n     *  &lt;th>Regex&lt;/th>\n     *  &lt;th>Result&lt;/th>\n     * &lt;/tr>\n     * &lt;tr>&lt;td align=center>:&lt;/td>\n     *     &lt;td>&#123;@code &#123; \"boo\", \"and\", \"foo\" &#125;&#125;&lt;/td>&lt;/tr>\n     * &lt;tr>&lt;td align=center>o&lt;/td>\n     *     &lt;td>&#123;@code &#123; \"b\", \"\", \":and:f\" &#125;&#125;&lt;/td>&lt;/tr>\n     * &lt;/table>&lt;/blockquote>\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression's syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> regex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a new String composed of copies of the\n     * &#123;@code CharSequence elements&#125; joined together with a copy of\n     * the specified &#123;@code delimiter&#125;.\n     *\n     * &lt;blockquote>For example,\n     * &lt;pre>&#123;@code\n     *     String message = String.join(\"-\", \"Java\", \"is\", \"cool\");\n     *     // message returned is: \"Java-is-cool\"\n     * &#125;&lt;/pre>&lt;/blockquote>\n     *\n     * Note that if an element is null, then &#123;@code \"null\"&#125; is added.\n     *\n     * @param  delimiter the delimiter that separates each element\n     * @param  elements the elements to join together.\n     *\n     * @return a new &#123;@code String&#125; that is composed of the &#123;@code elements&#125;\n     *         separated by the &#123;@code delimiter&#125;\n     *\n     * @throws NullPointerException If &#123;@code delimiter&#125; or &#123;@code elements&#125;\n     *         is &#123;@code null&#125;\n     *\n     * @see java.util.StringJoiner\n     * @since 1.8\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> delimiter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CharSequence</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Number of elements not likely worth Arrays.stream overhead.</span>\n        <span class=\"token class-name\">StringJoiner</span> joiner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringJoiner</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> cs<span class=\"token operator\">:</span> elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            joiner<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> joiner<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a new &#123;@code String&#125; composed of copies of the\n     * &#123;@code CharSequence elements&#125; joined together with a copy of the\n     * specified &#123;@code delimiter&#125;.\n     *\n     * &lt;blockquote>For example,\n     * &lt;pre>&#123;@code\n     *     List&lt;String> strings = new LinkedList&lt;>();\n     *     strings.add(\"Java\");strings.add(\"is\");\n     *     strings.add(\"cool\");\n     *     String message = String.join(\" \", strings);\n     *     //message returned is: \"Java is cool\"\n     *\n     *     Set&lt;String> strings = new LinkedHashSet&lt;>();\n     *     strings.add(\"Java\"); strings.add(\"is\");\n     *     strings.add(\"very\"); strings.add(\"cool\");\n     *     String message = String.join(\"-\", strings);\n     *     //message returned is: \"Java-is-very-cool\"\n     * &#125;&lt;/pre>&lt;/blockquote>\n     *\n     * Note that if an individual element is &#123;@code null&#125;, then &#123;@code \"null\"&#125; is added.\n     *\n     * @param  delimiter a sequence of characters that is used to separate each\n     *         of the &#123;@code elements&#125; in the resulting &#123;@code String&#125;\n     * @param  elements an &#123;@code Iterable&#125; that will have its &#123;@code elements&#125;\n     *         joined together.\n     *\n     * @return a new &#123;@code String&#125; that is composed from the &#123;@code elements&#125;\n     *         argument\n     *\n     * @throws NullPointerException If &#123;@code delimiter&#125; or &#123;@code elements&#125;\n     *         is &#123;@code null&#125;\n     *\n     * @see    #join(CharSequence,CharSequence...)\n     * @see    java.util.StringJoiner\n     * @since 1.8\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> delimiter<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CharSequence</span><span class=\"token punctuation\">></span></span> elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringJoiner</span> joiner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringJoiner</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> cs<span class=\"token operator\">:</span> elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            joiner<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> joiner<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Converts all of the characters in this &#123;@code String&#125; to lower\n     * case using the rules of the given &#123;@code Locale&#125;.  Case mapping is based\n     * on the Unicode Standard version specified by the &#123;@link java.lang.Character Character&#125;\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * &#123;@code String&#125; may be a different length than the original &#123;@code String&#125;.\n     * &lt;p>\n     * Examples of lowercase  mappings are in the following table:\n     * &lt;table border=\"1\" summary=\"Lowercase mapping examples showing language code of locale, upper case, lower case, and description\">\n     * &lt;tr>\n     *   &lt;th>Language Code of Locale&lt;/th>\n     *   &lt;th>Upper Case&lt;/th>\n     *   &lt;th>Lower Case&lt;/th>\n     *   &lt;th>Description&lt;/th>\n     * &lt;/tr>\n     * &lt;tr>\n     *   &lt;td>tr (Turkish)&lt;/td>\n     *   &lt;td>&amp;#92;u0130&lt;/td>\n     *   &lt;td>&amp;#92;u0069&lt;/td>\n     *   &lt;td>capital letter I with dot above -&amp;gt; small letter i&lt;/td>\n     * &lt;/tr>\n     * &lt;tr>\n     *   &lt;td>tr (Turkish)&lt;/td>\n     *   &lt;td>&amp;#92;u0049&lt;/td>\n     *   &lt;td>&amp;#92;u0131&lt;/td>\n     *   &lt;td>capital letter I -&amp;gt; small letter dotless i &lt;/td>\n     * &lt;/tr>\n     * &lt;tr>\n     *   &lt;td>(all)&lt;/td>\n     *   &lt;td>French Fries&lt;/td>\n     *   &lt;td>french fries&lt;/td>\n     *   &lt;td>lowercased all chars in String&lt;/td>\n     * &lt;/tr>\n     * &lt;tr>\n     *   &lt;td>(all)&lt;/td>\n     *   &lt;td>&lt;img src=\"doc-files/capiota.gif\" alt=\"capiota\">&lt;img src=\"doc-files/capchi.gif\" alt=\"capchi\">\n     *       &lt;img src=\"doc-files/captheta.gif\" alt=\"captheta\">&lt;img src=\"doc-files/capupsil.gif\" alt=\"capupsil\">\n     *       &lt;img src=\"doc-files/capsigma.gif\" alt=\"capsigma\">&lt;/td>\n     *   &lt;td>&lt;img src=\"doc-files/iota.gif\" alt=\"iota\">&lt;img src=\"doc-files/chi.gif\" alt=\"chi\">\n     *       &lt;img src=\"doc-files/theta.gif\" alt=\"theta\">&lt;img src=\"doc-files/upsilon.gif\" alt=\"upsilon\">\n     *       &lt;img src=\"doc-files/sigma1.gif\" alt=\"sigma\">&lt;/td>\n     *   &lt;td>lowercased all chars in String&lt;/td>\n     * &lt;/tr>\n     * &lt;/table>\n     *\n     * @param locale use the case transformation rules for this locale\n     * @return the &#123;@code String&#125;, converted to lowercase.\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toUpperCase(Locale)\n     * @since   1.1\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span> locale<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>locale <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> firstUpper<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/* Now check if there are any characters that need to be changed. */</span>\n        scan<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>firstUpper <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> firstUpper <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> value<span class=\"token punctuation\">[</span>firstUpper<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MIN_HIGH_SURROGATE<span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MAX_HIGH_SURROGATE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">int</span> supplChar <span class=\"token operator\">=</span> <span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span>firstUpper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>supplChar <span class=\"token operator\">!=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span>supplChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">break</span> scan<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    firstUpper <span class=\"token operator\">+=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCount</span><span class=\"token punctuation\">(</span>supplChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">break</span> scan<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    firstUpper<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> resultOffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* result may grow, so i+resultOffset\n                                * is the write location in result */</span>\n\n        <span class=\"token comment\">/* Just copy the first few lowerCase characters. */</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> firstUpper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> lang <span class=\"token operator\">=</span> locale<span class=\"token punctuation\">.</span><span class=\"token function\">getLanguage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> localeDependent <span class=\"token operator\">=</span>\n                <span class=\"token punctuation\">(</span>lang <span class=\"token operator\">==</span> <span class=\"token string\">\"tr\"</span> <span class=\"token operator\">||</span> lang <span class=\"token operator\">==</span> <span class=\"token string\">\"az\"</span> <span class=\"token operator\">||</span> lang <span class=\"token operator\">==</span> <span class=\"token string\">\"lt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lowerCharArray<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> lowerChar<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> srcChar<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> srcCount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> firstUpper<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> srcCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            srcChar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>srcChar <span class=\"token operator\">>=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MIN_HIGH_SURROGATE\n                    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>srcChar <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MAX_HIGH_SURROGATE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                srcChar <span class=\"token operator\">=</span> <span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                srcCount <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCount</span><span class=\"token punctuation\">(</span>srcChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                srcCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>localeDependent <span class=\"token operator\">||</span>\n                srcChar <span class=\"token operator\">==</span> <span class=\"token string\">'\\u03A3'</span> <span class=\"token operator\">||</span> <span class=\"token comment\">// GREEK CAPITAL LETTER SIGMA</span>\n                srcChar <span class=\"token operator\">==</span> <span class=\"token string\">'\\u0130'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// LATIN CAPITAL LETTER I WITH DOT ABOVE</span>\n                lowerChar <span class=\"token operator\">=</span> <span class=\"token class-name\">ConditionalSpecialCasing</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCaseEx</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> locale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                lowerChar <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span>srcChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>lowerChar <span class=\"token operator\">==</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>lowerChar <span class=\"token operator\">>=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MIN_SUPPLEMENTARY_CODE_POINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lowerChar <span class=\"token operator\">==</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    lowerCharArray <span class=\"token operator\">=</span>\n                            <span class=\"token class-name\">ConditionalSpecialCasing</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCaseCharArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> locale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>srcCount <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    resultOffset <span class=\"token operator\">+=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toChars</span><span class=\"token punctuation\">(</span>lowerChar<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> resultOffset<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> srcCount<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    lowerCharArray <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toChars</span><span class=\"token punctuation\">(</span>lowerChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token comment\">/* Grow result if needed */</span>\n                <span class=\"token keyword\">int</span> mapLen <span class=\"token operator\">=</span> lowerCharArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mapLen <span class=\"token operator\">></span> srcCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> mapLen <span class=\"token operator\">-</span> srcCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> result2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> resultOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    result <span class=\"token operator\">=</span> result2<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> mapLen<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> resultOffset <span class=\"token operator\">+</span> x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lowerCharArray<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                resultOffset <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>mapLen <span class=\"token operator\">-</span> srcCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> resultOffset<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>lowerChar<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">+</span> resultOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Converts all of the characters in this &#123;@code String&#125; to lower\n     * case using the rules of the default locale. This is equivalent to calling\n     * &#123;@code toLowerCase(Locale.getDefault())&#125;.\n     * &lt;p>\n     * &lt;b>Note:&lt;/b> This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, &#123;@code \"TITLE\".toLowerCase()&#125; in a Turkish locale\n     * returns &#123;@code \"t\\u005Cu0131tle\"&#125;, where '\\u005Cu0131' is the\n     * LATIN SMALL LETTER DOTLESS I character.\n     * To obtain correct results for locale insensitive strings, use\n     * &#123;@code toLowerCase(Locale.ROOT)&#125;.\n     * &lt;p>\n     * @return  the &#123;@code String&#125;, converted to lowercase.\n     * @see     java.lang.String#toLowerCase(Locale)\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Converts all of the characters in this &#123;@code String&#125; to upper\n     * case using the rules of the given &#123;@code Locale&#125;. Case mapping is based\n     * on the Unicode Standard version specified by the &#123;@link java.lang.Character Character&#125;\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * &#123;@code String&#125; may be a different length than the original &#123;@code String&#125;.\n     * &lt;p>\n     * Examples of locale-sensitive and 1:M case mappings are in the following table.\n     *\n     * &lt;table border=\"1\" summary=\"Examples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.\">\n     * &lt;tr>\n     *   &lt;th>Language Code of Locale&lt;/th>\n     *   &lt;th>Lower Case&lt;/th>\n     *   &lt;th>Upper Case&lt;/th>\n     *   &lt;th>Description&lt;/th>\n     * &lt;/tr>\n     * &lt;tr>\n     *   &lt;td>tr (Turkish)&lt;/td>\n     *   &lt;td>&amp;#92;u0069&lt;/td>\n     *   &lt;td>&amp;#92;u0130&lt;/td>\n     *   &lt;td>small letter i -&amp;gt; capital letter I with dot above&lt;/td>\n     * &lt;/tr>\n     * &lt;tr>\n     *   &lt;td>tr (Turkish)&lt;/td>\n     *   &lt;td>&amp;#92;u0131&lt;/td>\n     *   &lt;td>&amp;#92;u0049&lt;/td>\n     *   &lt;td>small letter dotless i -&amp;gt; capital letter I&lt;/td>\n     * &lt;/tr>\n     * &lt;tr>\n     *   &lt;td>(all)&lt;/td>\n     *   &lt;td>&amp;#92;u00df&lt;/td>\n     *   &lt;td>&amp;#92;u0053 &amp;#92;u0053&lt;/td>\n     *   &lt;td>small letter sharp s -&amp;gt; two letters: SS&lt;/td>\n     * &lt;/tr>\n     * &lt;tr>\n     *   &lt;td>(all)&lt;/td>\n     *   &lt;td>Fahrvergn&amp;uuml;gen&lt;/td>\n     *   &lt;td>FAHRVERGN&amp;Uuml;GEN&lt;/td>\n     *   &lt;td>&lt;/td>\n     * &lt;/tr>\n     * &lt;/table>\n     * @param locale use the case transformation rules for this locale\n     * @return the &#123;@code String&#125;, converted to uppercase.\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toLowerCase(Locale)\n     * @since   1.1\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span> locale<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>locale <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> firstLower<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/* Now check if there are any characters that need to be changed. */</span>\n        scan<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>firstLower <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> firstLower <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>value<span class=\"token punctuation\">[</span>firstLower<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> srcCount<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MIN_HIGH_SURROGATE<span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MAX_HIGH_SURROGATE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    c <span class=\"token operator\">=</span> <span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span>firstLower<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    srcCount <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCount</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    srcCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">int</span> upperCaseChar <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCaseEx</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>upperCaseChar <span class=\"token operator\">==</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> upperCaseChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">break</span> scan<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                firstLower <span class=\"token operator\">+=</span> srcCount<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">/* result may grow, so i+resultOffset is the write location in result */</span>\n        <span class=\"token keyword\">int</span> resultOffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* may grow */</span>\n\n        <span class=\"token comment\">/* Just copy the first few upperCase characters. */</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> firstLower<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> lang <span class=\"token operator\">=</span> locale<span class=\"token punctuation\">.</span><span class=\"token function\">getLanguage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> localeDependent <span class=\"token operator\">=</span>\n                <span class=\"token punctuation\">(</span>lang <span class=\"token operator\">==</span> <span class=\"token string\">\"tr\"</span> <span class=\"token operator\">||</span> lang <span class=\"token operator\">==</span> <span class=\"token string\">\"az\"</span> <span class=\"token operator\">||</span> lang <span class=\"token operator\">==</span> <span class=\"token string\">\"lt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> upperCharArray<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> upperChar<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> srcChar<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> srcCount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> firstLower<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> srcCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            srcChar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>srcChar <span class=\"token operator\">>=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MIN_HIGH_SURROGATE <span class=\"token operator\">&amp;&amp;</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>srcChar <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MAX_HIGH_SURROGATE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                srcChar <span class=\"token operator\">=</span> <span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                srcCount <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCount</span><span class=\"token punctuation\">(</span>srcChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                srcCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>localeDependent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                upperChar <span class=\"token operator\">=</span> <span class=\"token class-name\">ConditionalSpecialCasing</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCaseEx</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> locale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                upperChar <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCaseEx</span><span class=\"token punctuation\">(</span>srcChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>upperChar <span class=\"token operator\">==</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>upperChar <span class=\"token operator\">>=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MIN_SUPPLEMENTARY_CODE_POINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>upperChar <span class=\"token operator\">==</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>localeDependent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        upperCharArray <span class=\"token operator\">=</span>\n                                <span class=\"token class-name\">ConditionalSpecialCasing</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCaseCharArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> locale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                        upperCharArray <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCaseCharArray</span><span class=\"token punctuation\">(</span>srcChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>srcCount <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    resultOffset <span class=\"token operator\">+=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toChars</span><span class=\"token punctuation\">(</span>upperChar<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> resultOffset<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> srcCount<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    upperCharArray <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toChars</span><span class=\"token punctuation\">(</span>upperChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token comment\">/* Grow result if needed */</span>\n                <span class=\"token keyword\">int</span> mapLen <span class=\"token operator\">=</span> upperCharArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mapLen <span class=\"token operator\">></span> srcCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> mapLen <span class=\"token operator\">-</span> srcCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> result2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> resultOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    result <span class=\"token operator\">=</span> result2<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> mapLen<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> resultOffset <span class=\"token operator\">+</span> x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> upperCharArray<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                resultOffset <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>mapLen <span class=\"token operator\">-</span> srcCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> resultOffset<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>upperChar<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">+</span> resultOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Converts all of the characters in this &#123;@code String&#125; to upper\n     * case using the rules of the default locale. This method is equivalent to\n     * &#123;@code toUpperCase(Locale.getDefault())&#125;.\n     * &lt;p>\n     * &lt;b>Note:&lt;/b> This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, &#123;@code \"title\".toUpperCase()&#125; in a Turkish locale\n     * returns &#123;@code \"T\\u005Cu0130TLE\"&#125;, where '\\u005Cu0130' is the\n     * LATIN CAPITAL LETTER I WITH DOT ABOVE character.\n     * To obtain correct results for locale insensitive strings, use\n     * &#123;@code toUpperCase(Locale.ROOT)&#125;.\n     * &lt;p>\n     * @return  the &#123;@code String&#125;, converted to uppercase.\n     * @see     java.lang.String#toUpperCase(Locale)\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a string whose value is this string, with any leading and trailing\n     * whitespace removed.\n     * &lt;p>\n     * If this &#123;@code String&#125; object represents an empty character\n     * sequence, or the first and last characters of character sequence\n     * represented by this &#123;@code String&#125; object both have codes\n     * greater than &#123;@code '\\u005Cu0020'&#125; (the space character), then a\n     * reference to this &#123;@code String&#125; object is returned.\n     * &lt;p>\n     * Otherwise, if there is no character with a code greater than\n     * &#123;@code '\\u005Cu0020'&#125; in the string, then a\n     * &#123;@code String&#125; object representing an empty string is\n     * returned.\n     * &lt;p>\n     * Otherwise, let &lt;i>k&lt;/i> be the index of the first character in the\n     * string whose code is greater than &#123;@code '\\u005Cu0020'&#125;, and let\n     * &lt;i>m&lt;/i> be the index of the last character in the string whose code\n     * is greater than &#123;@code '\\u005Cu0020'&#125;. A &#123;@code String&#125;\n     * object is returned, representing the substring of this string that\n     * begins with the character at index &lt;i>k&lt;/i> and ends with the\n     * character at index &lt;i>m&lt;/i>-that is, the result of\n     * &#123;@code this.substring(k, m + 1)&#125;.\n     * &lt;p>\n     * This method may be used to trim whitespace (as defined above) from\n     * the beginning and end of a string.\n     *\n     * @return  A string whose value is this string, with any leading and trailing white\n     *          space removed, or this string if it has no leading or\n     *          trailing white space.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> st <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> val <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* avoid getfield opcode */</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>st <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">[</span>st<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            st<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>st <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            len<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>st <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * This object (which is already a string!) is itself returned.\n     *\n     * @return  the string itself.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Converts this string to a new character array.\n     *\n     * @return  a newly allocated character array whose length is the length\n     *          of this string and whose contents are initialized to contain\n     *          the character sequence represented by this string.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Cannot use Arrays.copyOf because of class initialization order issues</span>\n        <span class=\"token keyword\">char</span> result<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a formatted string using the specified format string and\n     * arguments.\n     *\n     * &lt;p> The locale always used is the one returned by &#123;@link\n     * java.util.Locale#getDefault() Locale.getDefault()&#125;.\n     *\n     * @param  format\n     *         A &lt;a href=\"../util/Formatter.html#syntax\">format string&lt;/a>\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         &lt;cite>The Java&amp;trade; Virtual Machine Specification&lt;/cite>.\n     *         The behaviour on a\n     *         &#123;@code null&#125; argument depends on the &lt;a\n     *         href=\"../util/Formatter.html#syntax\">conversion&lt;/a>.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the &lt;a\n     *          href=\"../util/Formatter.html#detail\">Details&lt;/a> section of the\n     *          formatter class specification.\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> format<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Formatter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a formatted string using the specified locale, format string,\n     * and arguments.\n     *\n     * @param  l\n     *         The &#123;@linkplain java.util.Locale locale&#125; to apply during\n     *         formatting.  If &#123;@code l&#125; is &#123;@code null&#125; then no localization\n     *         is applied.\n     *\n     * @param  format\n     *         A &lt;a href=\"../util/Formatter.html#syntax\">format string&lt;/a>\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         &lt;cite>The Java&amp;trade; Virtual Machine Specification&lt;/cite>.\n     *         The behaviour on a\n     *         &#123;@code null&#125; argument depends on the\n     *         &lt;a href=\"../util/Formatter.html#syntax\">conversion&lt;/a>.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the &lt;a\n     *          href=\"../util/Formatter.html#detail\">Details&lt;/a> section of the\n     *          formatter class specification\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span> l<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> format<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Formatter</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the string representation of the &#123;@code Object&#125; argument.\n     *\n     * @param   obj   an &#123;@code Object&#125;.\n     * @return  if the argument is &#123;@code null&#125;, then a string equal to\n     *          &#123;@code \"null\"&#125;; otherwise, the value of\n     *          &#123;@code obj.toString()&#125; is returned.\n     * @see     java.lang.Object#toString()\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>obj <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"null\"</span> <span class=\"token operator\">:</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the string representation of the &#123;@code char&#125; array\n     * argument. The contents of the character array are copied; subsequent\n     * modification of the character array does not affect the returned\n     * string.\n     *\n     * @param   data     the character array.\n     * @return  a &#123;@code String&#125; that contains the characters of the\n     *          character array.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the string representation of a specific subarray of the\n     * &#123;@code char&#125; array argument.\n     * &lt;p>\n     * The &#123;@code offset&#125; argument is the index of the first\n     * character of the subarray. The &#123;@code count&#125; argument\n     * specifies the length of the subarray. The contents of the subarray\n     * are copied; subsequent modification of the character array does not\n     * affect the returned string.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a &#123;@code String&#125; that contains the characters of the\n     *          specified subarray of the character array.\n     * @exception IndexOutOfBoundsException if &#123;@code offset&#125; is\n     *          negative, or &#123;@code count&#125; is negative, or\n     *          &#123;@code offset+count&#125; is larger than\n     *          &#123;@code data.length&#125;.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Equivalent to &#123;@link #valueOf(char[], int, int)&#125;.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a &#123;@code String&#125; that contains the characters of the\n     *          specified subarray of the character array.\n     * @exception IndexOutOfBoundsException if &#123;@code offset&#125; is\n     *          negative, or &#123;@code count&#125; is negative, or\n     *          &#123;@code offset+count&#125; is larger than\n     *          &#123;@code data.length&#125;.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">copyValueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Equivalent to &#123;@link #valueOf(char[])&#125;.\n     *\n     * @param   data   the character array.\n     * @return  a &#123;@code String&#125; that contains the characters of the\n     *          character array.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">copyValueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the string representation of the &#123;@code boolean&#125; argument.\n     *\n     * @param   b   a &#123;@code boolean&#125;.\n     * @return  if the argument is &#123;@code true&#125;, a string equal to\n     *          &#123;@code \"true\"&#125; is returned; otherwise, a string equal to\n     *          &#123;@code \"false\"&#125; is returned.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> b <span class=\"token operator\">?</span> <span class=\"token string\">\"true\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the string representation of the &#123;@code char&#125;\n     * argument.\n     *\n     * @param   c   a &#123;@code char&#125;.\n     * @return  a string of length &#123;@code 1&#125; containing\n     *          as its single character the argument &#123;@code c&#125;.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>c<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the string representation of the &#123;@code int&#125; argument.\n     * &lt;p>\n     * The representation is exactly the one returned by the\n     * &#123;@code Integer.toString&#125; method of one argument.\n     *\n     * @param   i   an &#123;@code int&#125;.\n     * @return  a string representation of the &#123;@code int&#125; argument.\n     * @see     java.lang.Integer#toString(int, int)\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the string representation of the &#123;@code long&#125; argument.\n     * &lt;p>\n     * The representation is exactly the one returned by the\n     * &#123;@code Long.toString&#125; method of one argument.\n     *\n     * @param   l   a &#123;@code long&#125;.\n     * @return  a string representation of the &#123;@code long&#125; argument.\n     * @see     java.lang.Long#toString(long)\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the string representation of the &#123;@code float&#125; argument.\n     * &lt;p>\n     * The representation is exactly the one returned by the\n     * &#123;@code Float.toString&#125; method of one argument.\n     *\n     * @param   f   a &#123;@code float&#125;.\n     * @return  a string representation of the &#123;@code float&#125; argument.\n     * @see     java.lang.Float#toString(float)\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the string representation of the &#123;@code double&#125; argument.\n     * &lt;p>\n     * The representation is exactly the one returned by the\n     * &#123;@code Double.toString&#125; method of one argument.\n     *\n     * @param   d   a &#123;@code double&#125;.\n     * @return  a  string representation of the &#123;@code double&#125; argument.\n     * @see     java.lang.Double#toString(double)\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a canonical representation for the string object.\n     * &lt;p>\n     * A pool of strings, initially empty, is maintained privately by the\n     * class &#123;@code String&#125;.\n     * &lt;p>\n     * When the intern method is invoked, if the pool already contains a\n     * string equal to this &#123;@code String&#125; object as determined by\n     * the &#123;@link #equals(Object)&#125; method, then the string from the pool is\n     * returned. Otherwise, this &#123;@code String&#125; object is added to the\n     * pool and a reference to this &#123;@code String&#125; object is returned.\n     * &lt;p>\n     * It follows that for any two strings &#123;@code s&#125; and &#123;@code t&#125;,\n     * &#123;@code s.intern() == t.intern()&#125; is &#123;@code true&#125;\n     * if and only if &#123;@code s.equals(t)&#125; is &#123;@code true&#125;.\n     * &lt;p>\n     * All literal strings and string-valued constant expressions are\n     * interned. String literals are defined in section 3.10.5 of the\n     * &lt;cite>The Java&amp;trade; Language Specification&lt;/cite>.\n     *\n     * @return  a string that has the same contents as this string, but is\n     *          guaranteed to be from a pool of unique strings.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token class-name\">String</span> <span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"1-2-4以下这段代码会打印出什么？\"><a href=\"#1-2-4以下这段代码会打印出什么？\" class=\"headerlink\" title=\"1.2.4以下这段代码会打印出什么？\"></a><strong>1.2.4以下这段代码会打印出什么？</strong></h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> string1 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> string2 <span class=\"token operator\">=</span> string1<span class=\"token punctuation\">;</span>\n        string1 <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StdOut</span><span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>string1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StdOut</span><span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>string2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>打印结果：</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">world\nhello</code></pre>\n<h3 id=\"1-2-5以下这段代码会打印出什么？\"><a href=\"#1-2-5以下这段代码会打印出什么？\" class=\"headerlink\" title=\"1.2.5以下这段代码会打印出什么？\"></a>1.2.5以下这段代码会打印出什么？</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">StdOut</span><span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li><p>分析 </p>\n<p>只是截取了String类型的s，但是s本身没有改变哦 所以还是打印本来的值</p>\n</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">Hello World</code></pre>\n<h2 id=\"附录：String方法常用API\"><a href=\"#附录：String方法常用API\" class=\"headerlink\" title=\"附录：String方法常用API\"></a>附录：String方法常用API</h2><p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/d98257d1697a3e7e8ed0c0f7ffacfd95.png\" alt=\"img\"></p>\n<p>附上String源码：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n * Copyright (c) 1994, 2013, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */</span>\n\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectStreamField</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UnsupportedEncodingException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span>charset<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Charset</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Formatter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Locale</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringJoiner</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>regex<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Matcher</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>regex<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>regex<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PatternSyntaxException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * The &#123;@code String&#125; class represents character strings. All\n * string literals in Java programs, such as &#123;@code \"abc\"&#125;, are\n * implemented as instances of this class.\n * &lt;p>\n * Strings are constant; their values cannot be changed after they\n * are created. String buffers support mutable strings.\n * Because String objects are immutable they can be shared. For example:\n * &lt;blockquote>&lt;pre>\n *     String str = \"abc\";\n * &lt;/pre>&lt;/blockquote>&lt;p>\n * is equivalent to:\n * &lt;blockquote>&lt;pre>\n *     char data[] = &#123;'a', 'b', 'c'&#125;;\n *     String str = new String(data);\n * &lt;/pre>&lt;/blockquote>&lt;p>\n * Here are some more examples of how strings can be used:\n * &lt;blockquote>&lt;pre>\n *     System.out.println(\"abc\");\n *     String cde = \"cde\";\n *     System.out.println(\"abc\" + cde);\n *     String c = \"abc\".substring(2,3);\n *     String d = cde.substring(1, 2);\n * &lt;/pre>&lt;/blockquote>\n * &lt;p>\n * The class &#123;@code String&#125; includes methods for examining\n * individual characters of the sequence, for comparing strings, for\n * searching strings, for extracting substrings, and for creating a\n * copy of a string with all characters translated to uppercase or to\n * lowercase. Case mapping is based on the Unicode Standard version\n * specified by the &#123;@link java.lang.Character Character&#125; class.\n * &lt;p>\n * The Java language provides special support for the string\n * concatenation operator (&amp;nbsp;+&amp;nbsp;), and for conversion of\n * other objects to strings. String concatenation is implemented\n * through the &#123;@code StringBuilder&#125;(or &#123;@code StringBuffer&#125;)\n * class and its &#123;@code append&#125; method.\n * String conversions are implemented through the method\n * &#123;@code toString&#125;, defined by &#123;@code Object&#125; and\n * inherited by all classes in Java. For additional information on\n * string concatenation and conversion, see Gosling, Joy, and Steele,\n * &lt;i>The Java Language Specification&lt;/i>.\n *\n * &lt;p> Unless otherwise noted, passing a &lt;tt>null&lt;/tt> argument to a constructor\n * or method in this class will cause a &#123;@link NullPointerException&#125; to be\n * thrown.\n *\n * &lt;p>A &#123;@code String&#125; represents a string in the UTF-16 format\n * in which &lt;em>supplementary characters&lt;/em> are represented by &lt;em>surrogate\n * pairs&lt;/em> (see the section &lt;a href=\"Character.html#unicode\">Unicode\n * Character Representations&lt;/a> in the &#123;@code Character&#125; class for\n * more information).\n * Index values refer to &#123;@code char&#125; code units, so a supplementary\n * character uses two positions in a &#123;@code String&#125;.\n * &lt;p>The &#123;@code String&#125; class provides methods for dealing with\n * Unicode code points (i.e., characters), in addition to those for\n * dealing with Unicode code units (i.e., &#123;@code char&#125; values).\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Martin Buchholz\n * @author  Ulf Zibis\n * @see     java.lang.Object#toString()\n * @see     java.lang.StringBuffer\n * @see     java.lang.StringBuilder\n * @see     java.nio.charset.Charset\n * @since   JDK1.0\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CharSequence</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/** The value is used for character storage. */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span> value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/** Cache the hash code for the string */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Default to 0</span>\n\n    <span class=\"token comment\">/** use serialVersionUID from JDK 1.0.2 for interoperability */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">6849794470754667710L</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Class String is special cased within the Serialization Stream Protocol.\n     *\n     * A String instance is written into an ObjectOutputStream according to\n     * &lt;a href=\"&#123;@docRoot&#125;/../platform/serialization/spec/output.html\">\n     * Object Serialization Specification, Section 6.2, \"Stream Elements\"&lt;/a>\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ObjectStreamField</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> serialPersistentFields <span class=\"token operator\">=</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectStreamField</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Initializes a newly created &#123;@code String&#125; object so that it represents\n     * an empty character sequence.  Note that use of this constructor is\n     * unnecessary since Strings are immutable.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Initializes a newly created &#123;@code String&#125; object so that it represents\n     * the same sequence of characters as the argument; in other words, the\n     * newly created string is a copy of the argument string. Unless an\n     * explicit copy of &#123;@code original&#125; is needed, use of this constructor is\n     * unnecessary since Strings are immutable.\n     *\n     * @param  original\n     *         A &#123;@code String&#125;\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> original<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> original<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hash <span class=\"token operator\">=</span> original<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Allocates a new &#123;@code String&#125; so that it represents the sequence of\n     * characters currently contained in the character array argument. The\n     * contents of the character array are copied; subsequent modification of\n     * the character array does not affect the newly created string.\n     *\n     * @param  value\n     *         The initial value of the string\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Allocates a new &#123;@code String&#125; that contains characters from a subarray\n     * of the character array argument. The &#123;@code offset&#125; argument is the\n     * index of the first character of the subarray and the &#123;@code count&#125;\n     * argument specifies the length of the subarray. The contents of the\n     * subarray are copied; subsequent modification of the character array does\n     * not affect the newly created string.\n     *\n     * @param  value\n     *         Array that is the source of characters\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the &#123;@code offset&#125; and &#123;@code count&#125; arguments index\n     *          characters outside the bounds of the &#123;@code value&#125; array\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">&lt;=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// Note: offset or count might be near -1>>>1.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">></span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>offset <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> offset<span class=\"token operator\">+</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Allocates a new &#123;@code String&#125; that contains characters from a subarray\n     * of the &lt;a href=\"Character.html#unicode\">Unicode code point&lt;/a> array\n     * argument.  The &#123;@code offset&#125; argument is the index of the first code\n     * point of the subarray and the &#123;@code count&#125; argument specifies the\n     * length of the subarray.  The contents of the subarray are converted to\n     * &#123;@code char&#125;s; subsequent modification of the &#123;@code int&#125; array does not\n     * affect the newly created string.\n     *\n     * @param  codePoints\n     *         Array that is the source of Unicode code points\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IllegalArgumentException\n     *          If any invalid Unicode code point is found in &#123;@code\n     *          codePoints&#125;\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the &#123;@code offset&#125; and &#123;@code count&#125; arguments index\n     *          characters outside the bounds of the &#123;@code codePoints&#125; array\n     *\n     * @since  1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> codePoints<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">&lt;=</span> codePoints<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// Note: offset or count might be near -1>>>1.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">></span> codePoints<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>offset <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> offset <span class=\"token operator\">+</span> count<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Pass 1: Compute precise size of char[]</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> offset<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> codePoints<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBmpCodePoint</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">isValidCodePoint</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// Pass 2: Allocate and fill in char[]</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> v <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> offset<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> codePoints<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBmpCodePoint</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                v<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>c<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSurrogates</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Allocates a new &#123;@code String&#125; constructed from a subarray of an array\n     * of 8-bit integer values.\n     *\n     * &lt;p> The &#123;@code offset&#125; argument is the index of the first byte of the\n     * subarray, and the &#123;@code count&#125; argument specifies the length of the\n     * subarray.\n     *\n     * &lt;p> Each &#123;@code byte&#125; in the subarray is converted to a &#123;@code char&#125; as\n     * specified in the method above.\n     *\n     * @deprecated This method does not properly convert bytes into characters.\n     * As of JDK&amp;nbsp;1.1, the preferred way to do this is via the\n     * &#123;@code String&#125; constructors that take a &#123;@link\n     * java.nio.charset.Charset&#125;, charset name, or that use the platform's\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @param  offset\n     *         The initial offset\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the &#123;@code offset&#125; or &#123;@code count&#125; argument is invalid\n     *\n     * @see  #String(byte[], int)\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */</span>\n    <span class=\"token annotation punctuation\">@Deprecated</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> ascii<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hibyte<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">checkBounds</span><span class=\"token punctuation\">(</span>ascii<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hibyte <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ascii<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            hibyte <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>hibyte <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>ascii<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Allocates a new &#123;@code String&#125; containing characters constructed from\n     * an array of 8-bit integer values. Each character &lt;i>c&lt;/i>in the\n     * resulting string is constructed from the corresponding component\n     * &lt;i>b&lt;/i> in the byte array such that:\n     *\n     * &lt;blockquote>&lt;pre>\n     *     &lt;b>&lt;i>c&lt;/i>&lt;/b> == (char)(((hibyte &amp;amp; 0xff) &amp;lt;&amp;lt; 8)\n     *                         | (&lt;b>&lt;i>b&lt;/i>&lt;/b> &amp;amp; 0xff))\n     * &lt;/pre>&lt;/blockquote>\n     *\n     * @deprecated  This method does not properly convert bytes into\n     * characters.  As of JDK&amp;nbsp;1.1, the preferred way to do this is via the\n     * &#123;@code String&#125; constructors that take a &#123;@link\n     * java.nio.charset.Charset&#125;, charset name, or that use the platform's\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */</span>\n    <span class=\"token annotation punctuation\">@Deprecated</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> ascii<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hibyte<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>ascii<span class=\"token punctuation\">,</span> hibyte<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ascii<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/* Common private utility method used to bounds check the byte array\n     * and requested offset &amp; length values used by the String(byte[],..)\n     * constructors.\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkBounds</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">></span> bytes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> length<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>offset <span class=\"token operator\">+</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Constructs a new &#123;@code String&#125; by decoding the specified subarray of\n     * bytes using the specified charset.  The length of the new &#123;@code String&#125;\n     * is a function of the charset, and hence may not be equal to the length\n     * of the subarray.\n     *\n     * &lt;p> The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The &#123;@link\n     * java.nio.charset.CharsetDecoder&#125; class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n\n     * @param  charsetName\n     *         The name of a supported &#123;@linkplain java.nio.charset.Charset\n     *         charset&#125;\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the &#123;@code offset&#125; and &#123;@code length&#125; arguments index\n     *          characters outside the bounds of the &#123;@code bytes&#125; array\n     *\n     * @since  JDK1.1\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> bytes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> charsetName<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnsupportedEncodingException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>charsetName <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"charsetName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">checkBounds</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">StringCoding</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>charsetName<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Constructs a new &#123;@code String&#125; by decoding the specified subarray of\n     * bytes using the specified &#123;@linkplain java.nio.charset.Charset charset&#125;.\n     * The length of the new &#123;@code String&#125; is a function of the charset, and\n     * hence may not be equal to the length of the subarray.\n     *\n     * &lt;p> This method always replaces malformed-input and unmappable-character\n     * sequences with this charset's default replacement string.  The &#123;@link\n     * java.nio.charset.CharsetDecoder&#125; class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @param  charset\n     *         The &#123;@linkplain java.nio.charset.Charset charset&#125; to be used to\n     *         decode the &#123;@code bytes&#125;\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the &#123;@code offset&#125; and &#123;@code length&#125; arguments index\n     *          characters outside the bounds of the &#123;@code bytes&#125; array\n     *\n     * @since  1.6\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> bytes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Charset</span> charset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>charset <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"charset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">checkBounds</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span>  <span class=\"token class-name\">StringCoding</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>charset<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Constructs a new &#123;@code String&#125; by decoding the specified array of bytes\n     * using the specified &#123;@linkplain java.nio.charset.Charset charset&#125;.  The\n     * length of the new &#123;@code String&#125; is a function of the charset, and hence\n     * may not be equal to the length of the byte array.\n     *\n     * &lt;p> The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The &#123;@link\n     * java.nio.charset.CharsetDecoder&#125; class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charsetName\n     *         The name of a supported &#123;@linkplain java.nio.charset.Charset\n     *         charset&#125;\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  JDK1.1\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> bytes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> charsetName<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnsupportedEncodingException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> charsetName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Constructs a new &#123;@code String&#125; by decoding the specified array of\n     * bytes using the specified &#123;@linkplain java.nio.charset.Charset charset&#125;.\n     * The length of the new &#123;@code String&#125; is a function of the charset, and\n     * hence may not be equal to the length of the byte array.\n     *\n     * &lt;p> This method always replaces malformed-input and unmappable-character\n     * sequences with this charset's default replacement string.  The &#123;@link\n     * java.nio.charset.CharsetDecoder&#125; class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charset\n     *         The &#123;@linkplain java.nio.charset.Charset charset&#125; to be used to\n     *         decode the &#123;@code bytes&#125;\n     *\n     * @since  1.6\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> bytes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Charset</span> charset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> charset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Constructs a new &#123;@code String&#125; by decoding the specified subarray of\n     * bytes using the platform's default charset.  The length of the new\n     * &#123;@code String&#125; is a function of the charset, and hence may not be equal\n     * to the length of the subarray.\n     *\n     * &lt;p> The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The &#123;@link\n     * java.nio.charset.CharsetDecoder&#125; class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the &#123;@code offset&#125; and the &#123;@code length&#125; arguments index\n     *          characters outside the bounds of the &#123;@code bytes&#125; array\n     *\n     * @since  JDK1.1\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> bytes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">checkBounds</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">StringCoding</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Constructs a new &#123;@code String&#125; by decoding the specified array of bytes\n     * using the platform's default charset.  The length of the new &#123;@code\n     * String&#125; is a function of the charset, and hence may not be equal to the\n     * length of the byte array.\n     *\n     * &lt;p> The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The &#123;@link\n     * java.nio.charset.CharsetDecoder&#125; class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @since  JDK1.1\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> bytes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string buffer argument. The contents of the\n     * string buffer are copied; subsequent modification of the string buffer\n     * does not affect the newly created string.\n     *\n     * @param  buffer\n     *         A &#123;@code StringBuffer&#125;\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringBuffer</span> buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string builder argument. The contents of the\n     * string builder are copied; subsequent modification of the string builder\n     * does not affect the newly created string.\n     *\n     * &lt;p> This constructor is provided to ease migration to &#123;@code\n     * StringBuilder&#125;. Obtaining a string from a string builder via the &#123;@code\n     * toString&#125; method is likely to run faster and is generally preferred.\n     *\n     * @param   builder\n     *          A &#123;@code StringBuilder&#125;\n     *\n     * @since  1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringBuilder</span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/*\n    * Package private constructor which shares value array for speed.\n    * this constructor is always expected to be called with share==true.\n    * a separate constructor is needed because we already have a public\n    * String(char[]) constructor that makes a copy of the given char[].\n    */</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> share<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// assert share : \"unshared not supported\";</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the length of this string.\n     * The length is equal to the number of &lt;a href=\"Character.html#unicode\">Unicode\n     * code units&lt;/a> in the string.\n     *\n     * @return  the length of the sequence of characters represented by this\n     *          object.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns &#123;@code true&#125; if, and only if, &#123;@link #length()&#125; is &#123;@code 0&#125;.\n     *\n     * @return &#123;@code true&#125; if &#123;@link #length()&#125; is &#123;@code 0&#125;, otherwise\n     * &#123;@code false&#125;\n     *\n     * @since 1.6\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the &#123;@code char&#125; value at the\n     * specified index. An index ranges from &#123;@code 0&#125; to\n     * &#123;@code length() - 1&#125;. The first &#123;@code char&#125; value of the sequence\n     * is at index &#123;@code 0&#125;, the next at index &#123;@code 1&#125;,\n     * and so on, as for array indexing.\n     *\n     * &lt;p>If the &#123;@code char&#125; value specified by the index is a\n     * &lt;a href=\"Character.html#unicode\">surrogate&lt;/a>, the surrogate\n     * value is returned.\n     *\n     * @param      index   the index of the &#123;@code char&#125; value.\n     * @return     the &#123;@code char&#125; value at the specified index of this string.\n     *             The first &#123;@code char&#125; value is at index &#123;@code 0&#125;.\n     * @exception  IndexOutOfBoundsException  if the &#123;@code index&#125;\n     *             argument is negative or not less than the length of this\n     *             string.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">char</span> <span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the character (Unicode code point) at the specified\n     * index. The index refers to &#123;@code char&#125; values\n     * (Unicode code units) and ranges from &#123;@code 0&#125; to\n     * &#123;@link #length()&#125;&#123;@code  - 1&#125;.\n     *\n     * &lt;p> If the &#123;@code char&#125; value specified at the given index\n     * is in the high-surrogate range, the following index is less\n     * than the length of this &#123;@code String&#125;, and the\n     * &#123;@code char&#125; value at the following index is in the\n     * low-surrogate range, then the supplementary code point\n     * corresponding to this surrogate pair is returned. Otherwise,\n     * the &#123;@code char&#125; value at the given index is returned.\n     *\n     * @param      index the index to the &#123;@code char&#125; values\n     * @return     the code point value of the character at the\n     *             &#123;@code index&#125;\n     * @exception  IndexOutOfBoundsException  if the &#123;@code index&#125;\n     *             argument is negative or not less than the length of this\n     *             string.\n     * @since      1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">codePointAtImpl</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the character (Unicode code point) before the specified\n     * index. The index refers to &#123;@code char&#125; values\n     * (Unicode code units) and ranges from &#123;@code 1&#125; to &#123;@link\n     * CharSequence#length() length&#125;.\n     *\n     * &lt;p> If the &#123;@code char&#125; value at &#123;@code (index - 1)&#125;\n     * is in the low-surrogate range, &#123;@code (index - 2)&#125; is not\n     * negative, and the &#123;@code char&#125; value at &#123;@code (index -\n     * 2)&#125; is in the high-surrogate range, then the\n     * supplementary code point value of the surrogate pair is\n     * returned. If the &#123;@code char&#125; value at &#123;@code index -\n     * 1&#125; is an unpaired low-surrogate or a high-surrogate, the\n     * surrogate value is returned.\n     *\n     * @param     index the index following the code point that should be returned\n     * @return    the Unicode code point value before the given index.\n     * @exception IndexOutOfBoundsException if the &#123;@code index&#125;\n     *            argument is less than 1 or greater than the length\n     *            of this string.\n     * @since     1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">codePointBefore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">codePointBeforeImpl</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the number of Unicode code points in the specified text\n     * range of this &#123;@code String&#125;. The text range begins at the\n     * specified &#123;@code beginIndex&#125; and extends to the\n     * &#123;@code char&#125; at index &#123;@code endIndex - 1&#125;. Thus the\n     * length (in &#123;@code char&#125;s) of the text range is\n     * &#123;@code endIndex-beginIndex&#125;. Unpaired surrogates within\n     * the text range count as one code point each.\n     *\n     * @param beginIndex the index to the first &#123;@code char&#125; of\n     * the text range.\n     * @param endIndex the index after the last &#123;@code char&#125; of\n     * the text range.\n     * @return the number of Unicode code points in the specified text\n     * range\n     * @exception IndexOutOfBoundsException if the\n     * &#123;@code beginIndex&#125; is negative, or &#123;@code endIndex&#125;\n     * is larger than the length of this &#123;@code String&#125;, or\n     * &#123;@code beginIndex&#125; is larger than &#123;@code endIndex&#125;.\n     * @since  1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">codePointCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> beginIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> endIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beginIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> endIndex <span class=\"token operator\">></span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> beginIndex <span class=\"token operator\">></span> endIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexOutOfBoundsException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">codePointCountImpl</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> beginIndex<span class=\"token punctuation\">,</span> endIndex <span class=\"token operator\">-</span> beginIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the index within this &#123;@code String&#125; that is\n     * offset from the given &#123;@code index&#125; by\n     * &#123;@code codePointOffset&#125; code points. Unpaired surrogates\n     * within the text range given by &#123;@code index&#125; and\n     * &#123;@code codePointOffset&#125; count as one code point each.\n     *\n     * @param index the index to be offset\n     * @param codePointOffset the offset in code points\n     * @return the index within this &#123;@code String&#125;\n     * @exception IndexOutOfBoundsException if &#123;@code index&#125;\n     *   is negative or larger then the length of this\n     *   &#123;@code String&#125;, or if &#123;@code codePointOffset&#125; is positive\n     *   and the substring starting with &#123;@code index&#125; has fewer\n     *   than &#123;@code codePointOffset&#125; code points,\n     *   or if &#123;@code codePointOffset&#125; is negative and the substring\n     *   before &#123;@code index&#125; has fewer than the absolute value\n     *   of &#123;@code codePointOffset&#125; code points.\n     * @since 1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">offsetByCodePoints</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> codePointOffset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">></span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexOutOfBoundsException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">offsetByCodePointsImpl</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n                index<span class=\"token punctuation\">,</span> codePointOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Copy characters from this string into dst starting at dstBegin.\n     * This method doesn't perform any range checking.\n     */</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">getChars</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> dst<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dstBegin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">,</span> dstBegin<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Copies characters from this string into the destination character\n     * array.\n     * &lt;p>\n     * The first character to be copied is at index &#123;@code srcBegin&#125;;\n     * the last character to be copied is at index &#123;@code srcEnd-1&#125;\n     * (thus the total number of characters to be copied is\n     * &#123;@code srcEnd-srcBegin&#125;). The characters are copied into the\n     * subarray of &#123;@code dst&#125; starting at index &#123;@code dstBegin&#125;\n     * and ending at index:\n     * &lt;blockquote>&lt;pre>\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * &lt;/pre>&lt;/blockquote>\n     *\n     * @param      srcBegin   index of the first character in the string\n     *                        to copy.\n     * @param      srcEnd     index after the last character in the string\n     *                        to copy.\n     * @param      dst        the destination array.\n     * @param      dstBegin   the start offset in the destination array.\n     * @exception IndexOutOfBoundsException If any of the following\n     *            is true:\n     *            &lt;ul>&lt;li>&#123;@code srcBegin&#125; is negative.\n     *            &lt;li>&#123;@code srcBegin&#125; is greater than &#123;@code srcEnd&#125;\n     *            &lt;li>&#123;@code srcEnd&#125; is greater than the length of this\n     *                string\n     *            &lt;li>&#123;@code dstBegin&#125; is negative\n     *            &lt;li>&#123;@code dstBegin+(srcEnd-srcBegin)&#125; is larger than\n     *                &#123;@code dst.length&#125;&lt;/ul>\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getChars</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> srcBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> srcEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> dst<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dstBegin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>srcBegin <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>srcBegin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>srcEnd <span class=\"token operator\">></span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>srcEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>srcBegin <span class=\"token operator\">></span> srcEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>srcEnd <span class=\"token operator\">-</span> srcBegin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> srcBegin<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">,</span> dstBegin<span class=\"token punctuation\">,</span> srcEnd <span class=\"token operator\">-</span> srcBegin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Copies characters from this string into the destination byte array. Each\n     * byte receives the 8 low-order bits of the corresponding character. The\n     * eight high-order bits of each character are not copied and do not\n     * participate in the transfer in any way.\n     *\n     * &lt;p> The first character to be copied is at index &#123;@code srcBegin&#125;; the\n     * last character to be copied is at index &#123;@code srcEnd-1&#125;.  The total\n     * number of characters to be copied is &#123;@code srcEnd-srcBegin&#125;. The\n     * characters, converted to bytes, are copied into the subarray of &#123;@code\n     * dst&#125; starting at index &#123;@code dstBegin&#125; and ending at index:\n     *\n     * &lt;blockquote>&lt;pre>\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * &lt;/pre>&lt;/blockquote>\n     *\n     * @deprecated  This method does not properly convert characters into\n     * bytes.  As of JDK&amp;nbsp;1.1, the preferred way to do this is via the\n     * &#123;@link #getBytes()&#125; method, which uses the platform's default charset.\n     *\n     * @param  srcBegin\n     *         Index of the first character in the string to copy\n     *\n     * @param  srcEnd\n     *         Index after the last character in the string to copy\n     *\n     * @param  dst\n     *         The destination array\n     *\n     * @param  dstBegin\n     *         The start offset in the destination array\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If any of the following is true:\n     *          &lt;ul>\n     *            &lt;li> &#123;@code srcBegin&#125; is negative\n     *            &lt;li> &#123;@code srcBegin&#125; is greater than &#123;@code srcEnd&#125;\n     *            &lt;li> &#123;@code srcEnd&#125; is greater than the length of this String\n     *            &lt;li> &#123;@code dstBegin&#125; is negative\n     *            &lt;li> &#123;@code dstBegin+(srcEnd-srcBegin)&#125; is larger than &#123;@code\n     *                 dst.length&#125;\n     *          &lt;/ul>\n     */</span>\n    <span class=\"token annotation punctuation\">@Deprecated</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> srcBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> srcEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span> dst<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dstBegin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>srcBegin <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>srcBegin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>srcEnd <span class=\"token operator\">></span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>srcEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>srcBegin <span class=\"token operator\">></span> srcEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>srcEnd <span class=\"token operator\">-</span> srcBegin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> dstBegin<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> srcEnd<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> srcBegin<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> val <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* avoid getfield opcode */</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            dst<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span>val<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Encodes this &#123;@code String&#125; into a sequence of bytes using the named\n     * charset, storing the result into a new byte array.\n     *\n     * &lt;p> The behavior of this method when this string cannot be encoded in\n     * the given charset is unspecified.  The &#123;@link\n     * java.nio.charset.CharsetEncoder&#125; class should be used when more control\n     * over the encoding process is required.\n     *\n     * @param  charsetName\n     *         The name of a supported &#123;@linkplain java.nio.charset.Charset\n     *         charset&#125;\n     *\n     * @return  The resultant byte array\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  JDK1.1\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> charsetName<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnsupportedEncodingException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>charsetName <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">StringCoding</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>charsetName<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Encodes this &#123;@code String&#125; into a sequence of bytes using the given\n     * &#123;@linkplain java.nio.charset.Charset charset&#125;, storing the result into a\n     * new byte array.\n     *\n     * &lt;p> This method always replaces malformed-input and unmappable-character\n     * sequences with this charset's default replacement byte array.  The\n     * &#123;@link java.nio.charset.CharsetEncoder&#125; class should be used when more\n     * control over the encoding process is required.\n     *\n     * @param  charset\n     *         The &#123;@linkplain java.nio.charset.Charset&#125; to be used to encode\n     *         the &#123;@code String&#125;\n     *\n     * @return  The resultant byte array\n     *\n     * @since  1.6\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Charset</span> charset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>charset <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">StringCoding</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>charset<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Encodes this &#123;@code String&#125; into a sequence of bytes using the\n     * platform's default charset, storing the result into a new byte array.\n     *\n     * &lt;p> The behavior of this method when this string cannot be encoded in\n     * the default charset is unspecified.  The &#123;@link\n     * java.nio.charset.CharsetEncoder&#125; class should be used when more control\n     * over the encoding process is required.\n     *\n     * @return  The resultant byte array\n     *\n     * @since      JDK1.1\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">StringCoding</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Compares this string to the specified object.  The result is &#123;@code\n     * true&#125; if and only if the argument is not &#123;@code null&#125; and is a &#123;@code\n     * String&#125; object that represents the same sequence of characters as this\n     * object.\n     *\n     * @param  anObject\n     *         The object to compare this &#123;@code String&#125; against\n     *\n     * @return  &#123;@code true&#125; if the given object represents a &#123;@code String&#125;\n     *          equivalent to this string, &#123;@code false&#125; otherwise\n     *\n     * @see  #compareTo(String)\n     * @see  #equalsIgnoreCase(String)\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> anObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> anObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>anObject <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">String</span> anotherString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>anObject<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> anotherString<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">char</span> v1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">char</span> v2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> anotherString<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> v2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Compares this string to the specified &#123;@code StringBuffer&#125;.  The result\n     * is &#123;@code true&#125; if and only if this &#123;@code String&#125; represents the same\n     * sequence of characters as the specified &#123;@code StringBuffer&#125;. This method\n     * synchronizes on the &#123;@code StringBuffer&#125;.\n     *\n     * @param  sb\n     *         The &#123;@code StringBuffer&#125; to compare this &#123;@code String&#125; against\n     *\n     * @return  &#123;@code true&#125; if this &#123;@code String&#125; represents the same\n     *          sequence of characters as the specified &#123;@code StringBuffer&#125;,\n     *          &#123;@code false&#125; otherwise\n     *\n     * @since  1.4\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">contentEquals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringBuffer</span> sb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">contentEquals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span><span class=\"token punctuation\">)</span>sb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">nonSyncContentEquals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractStringBuilder</span> sb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span> v1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> v2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> v2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Compares this string to the specified &#123;@code CharSequence&#125;.  The\n     * result is &#123;@code true&#125; if and only if this &#123;@code String&#125; represents the\n     * same sequence of char values as the specified sequence. Note that if the\n     * &#123;@code CharSequence&#125; is a &#123;@code StringBuffer&#125; then the method\n     * synchronizes on it.\n     *\n     * @param  cs\n     *         The sequence to compare this &#123;@code String&#125; against\n     *\n     * @return  &#123;@code true&#125; if this &#123;@code String&#125; represents the same\n     *          sequence of char values as the specified sequence, &#123;@code\n     *          false&#125; otherwise\n     *\n     * @since  1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">contentEquals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> cs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Argument is a StringBuffer, StringBuilder</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cs <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">AbstractStringBuilder</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cs <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                   <span class=\"token keyword\">return</span> <span class=\"token function\">nonSyncContentEquals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractStringBuilder</span><span class=\"token punctuation\">)</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">nonSyncContentEquals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractStringBuilder</span><span class=\"token punctuation\">)</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// Argument is a String</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cs <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// Argument is a generic CharSequence</span>\n        <span class=\"token keyword\">char</span> v1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> cs<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> cs<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Compares this &#123;@code String&#125; to another &#123;@code String&#125;, ignoring case\n     * considerations.  Two strings are considered equal ignoring case if they\n     * are of the same length and corresponding characters in the two strings\n     * are equal ignoring case.\n     *\n     * &lt;p> Two characters &#123;@code c1&#125; and &#123;@code c2&#125; are considered the same\n     * ignoring case if at least one of the following is true:\n     * &lt;ul>\n     *   &lt;li> The two characters are the same (as compared by the\n     *        &#123;@code ==&#125; operator)\n     *   &lt;li> Applying the method &#123;@link\n     *        java.lang.Character#toUpperCase(char)&#125; to each character\n     *        produces the same result\n     *   &lt;li> Applying the method &#123;@link\n     *        java.lang.Character#toLowerCase(char)&#125; to each character\n     *        produces the same result\n     * &lt;/ul>\n     *\n     * @param  anotherString\n     *         The &#123;@code String&#125; to compare this &#123;@code String&#125; against\n     *\n     * @return  &#123;@code true&#125; if the argument is not &#123;@code null&#125; and it\n     *          represents an equivalent &#123;@code String&#125; ignoring case; &#123;@code\n     *          false&#125; otherwise\n     *\n     * @see  #equals(Object)\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> anotherString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> anotherString<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span>\n                <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>anotherString <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>anotherString<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">regionMatches</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> anotherString<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Compares two strings lexicographically.\n     * The comparison is based on the Unicode value of each character in\n     * the strings. The character sequence represented by this\n     * &#123;@code String&#125; object is compared lexicographically to the\n     * character sequence represented by the argument string. The result is\n     * a negative integer if this &#123;@code String&#125; object\n     * lexicographically precedes the argument string. The result is a\n     * positive integer if this &#123;@code String&#125; object lexicographically\n     * follows the argument string. The result is zero if the strings\n     * are equal; &#123;@code compareTo&#125; returns &#123;@code 0&#125; exactly when\n     * the &#123;@link #equals(Object)&#125; method would return &#123;@code true&#125;.\n     * &lt;p>\n     * This is the definition of lexicographic ordering. If two strings are\n     * different, then either they have different characters at some index\n     * that is a valid index for both strings, or their lengths are different,\n     * or both. If they have different characters at one or more index\n     * positions, let &lt;i>k&lt;/i> be the smallest such index; then the string\n     * whose character at position &lt;i>k&lt;/i> has the smaller value, as\n     * determined by using the &amp;lt; operator, lexicographically precedes the\n     * other string. In this case, &#123;@code compareTo&#125; returns the\n     * difference of the two character values at position &#123;@code k&#125; in\n     * the two string -- that is, the value:\n     * &lt;blockquote>&lt;pre>\n     * this.charAt(k)-anotherString.charAt(k)\n     * &lt;/pre>&lt;/blockquote>\n     * If there is no index position at which they differ, then the shorter\n     * string lexicographically precedes the longer string. In this case,\n     * &#123;@code compareTo&#125; returns the difference of the lengths of the\n     * strings -- that is, the value:\n     * &lt;blockquote>&lt;pre>\n     * this.length()-anotherString.length()\n     * &lt;/pre>&lt;/blockquote>\n     *\n     * @param   anotherString   the &#123;@code String&#125; to be compared.\n     * @return  the value &#123;@code 0&#125; if the argument string is equal to\n     *          this string; a value less than &#123;@code 0&#125; if this string\n     *          is lexicographically less than the string argument; and a\n     *          value greater than &#123;@code 0&#125; if this string is\n     *          lexicographically greater than the string argument.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> anotherString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> len1 <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> len2 <span class=\"token operator\">=</span> anotherString<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> lim <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>len1<span class=\"token punctuation\">,</span> len2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> v1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> v2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> anotherString<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&lt;</span> lim<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">char</span> c1 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">char</span> c2 <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">!=</span> c2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> c1 <span class=\"token operator\">-</span> c2<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> len1 <span class=\"token operator\">-</span> len2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * A Comparator that orders &#123;@code String&#125; objects as by\n     * &#123;@code compareToIgnoreCase&#125;. This comparator is serializable.\n     * &lt;p>\n     * Note that this Comparator does &lt;em>not&lt;/em> take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The java.text package provides &lt;em>Collators&lt;/em> to allow\n     * locale-sensitive ordering.\n     *\n     * @see     java.text.Collator#compare(String, String)\n     * @since   1.2\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> CASE_INSENSITIVE_ORDER\n                                         <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CaseInsensitiveComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CaseInsensitiveComparator</span>\n            <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// use serialVersionUID from JDK 1.2.2 for interoperability</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">8575799808933029326L</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> n2 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">char</span> c1 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">char</span> c2 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">!=</span> c2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    c1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    c2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">!=</span> c2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        c1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        c2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">!=</span> c2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token comment\">// No overflow because of numeric promotion</span>\n                            <span class=\"token keyword\">return</span> c1 <span class=\"token operator\">-</span> c2<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">-</span> n2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">/** Replaces the de-serialized object. */</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">readResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> CASE_INSENSITIVE_ORDER<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Compares two strings lexicographically, ignoring case\n     * differences. This method returns an integer whose sign is that of\n     * calling &#123;@code compareTo&#125; with normalized versions of the strings\n     * where case differences have been eliminated by calling\n     * &#123;@code Character.toLowerCase(Character.toUpperCase(character))&#125; on\n     * each character.\n     * &lt;p>\n     * Note that this method does &lt;em>not&lt;/em> take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The java.text package provides &lt;em>collators&lt;/em> to allow\n     * locale-sensitive ordering.\n     *\n     * @param   str   the &#123;@code String&#125; to be compared.\n     * @return  a negative integer, zero, or a positive integer as the\n     *          specified String is greater than, equal to, or less\n     *          than this String, ignoring case considerations.\n     * @see     java.text.Collator#compare(String, String)\n     * @since   1.2\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareToIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> CASE_INSENSITIVE_ORDER<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Tests if two string regions are equal.\n     * &lt;p>\n     * A substring of this &#123;@code String&#125; object is compared to a substring\n     * of the argument other. The result is true if these substrings\n     * represent identical character sequences. The substring of this\n     * &#123;@code String&#125; object to be compared begins at index &#123;@code toffset&#125;\n     * and has length &#123;@code len&#125;. The substring of other to be compared\n     * begins at index &#123;@code ooffset&#125; and has length &#123;@code len&#125;. The\n     * result is &#123;@code false&#125; if and only if at least one of the following\n     * is true:\n     * &lt;ul>&lt;li>&#123;@code toffset&#125; is negative.\n     * &lt;li>&#123;@code ooffset&#125; is negative.\n     * &lt;li>&#123;@code toffset+len&#125; is greater than the length of this\n     * &#123;@code String&#125; object.\n     * &lt;li>&#123;@code ooffset+len&#125; is greater than the length of the other\n     * argument.\n     * &lt;li>There is some nonnegative integer &lt;i>k&lt;/i> less than &#123;@code len&#125;\n     * such that:\n     * &#123;@code this.charAt(toffset + &#125;&lt;i>k&lt;/i>&#123;@code ) != other.charAt(ooffset + &#125;\n     * &lt;i>k&lt;/i>&#123;@code )&#125;\n     * &lt;/ul>\n     *\n     * @param   toffset   the starting offset of the subregion in this string.\n     * @param   other     the string argument.\n     * @param   ooffset   the starting offset of the subregion in the string\n     *                    argument.\n     * @param   len       the number of characters to compare.\n     * @return  &#123;@code true&#125; if the specified subregion of this string\n     *          exactly matches the specified subregion of the string argument;\n     *          &#123;@code false&#125; otherwise.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">regionMatches</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> toffset<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> other<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ooffset<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span> ta<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span> <span class=\"token operator\">=</span> toffset<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> pa<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> po <span class=\"token operator\">=</span> ooffset<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Note: toffset, ooffset, or len might be near -1>>>1.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ooffset <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>toffset <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>toffset <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> len<span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>ooffset <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>other<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>len<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ta<span class=\"token punctuation\">[</span><span class=\"token keyword\">to</span><span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> pa<span class=\"token punctuation\">[</span>po<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Tests if two string regions are equal.\n     * &lt;p>\n     * A substring of this &#123;@code String&#125; object is compared to a substring\n     * of the argument &#123;@code other&#125;. The result is &#123;@code true&#125; if these\n     * substrings represent character sequences that are the same, ignoring\n     * case if and only if &#123;@code ignoreCase&#125; is true. The substring of\n     * this &#123;@code String&#125; object to be compared begins at index\n     * &#123;@code toffset&#125; and has length &#123;@code len&#125;. The substring of\n     * &#123;@code other&#125; to be compared begins at index &#123;@code ooffset&#125; and\n     * has length &#123;@code len&#125;. The result is &#123;@code false&#125; if and only if\n     * at least one of the following is true:\n     * &lt;ul>&lt;li>&#123;@code toffset&#125; is negative.\n     * &lt;li>&#123;@code ooffset&#125; is negative.\n     * &lt;li>&#123;@code toffset+len&#125; is greater than the length of this\n     * &#123;@code String&#125; object.\n     * &lt;li>&#123;@code ooffset+len&#125; is greater than the length of the other\n     * argument.\n     * &lt;li>&#123;@code ignoreCase&#125; is &#123;@code false&#125; and there is some nonnegative\n     * integer &lt;i>k&lt;/i> less than &#123;@code len&#125; such that:\n     * &lt;blockquote>&lt;pre>\n     * this.charAt(toffset+k) != other.charAt(ooffset+k)\n     * &lt;/pre>&lt;/blockquote>\n     * &lt;li>&#123;@code ignoreCase&#125; is &#123;@code true&#125; and there is some nonnegative\n     * integer &lt;i>k&lt;/i> less than &#123;@code len&#125; such that:\n     * &lt;blockquote>&lt;pre>\n     * Character.toLowerCase(this.charAt(toffset+k)) !=\n     Character.toLowerCase(other.charAt(ooffset+k))\n     * &lt;/pre>&lt;/blockquote>\n     * and:\n     * &lt;blockquote>&lt;pre>\n     * Character.toUpperCase(this.charAt(toffset+k)) !=\n     *         Character.toUpperCase(other.charAt(ooffset+k))\n     * &lt;/pre>&lt;/blockquote>\n     * &lt;/ul>\n     *\n     * @param   ignoreCase   if &#123;@code true&#125;, ignore case when comparing\n     *                       characters.\n     * @param   toffset      the starting offset of the subregion in this\n     *                       string.\n     * @param   other        the string argument.\n     * @param   ooffset      the starting offset of the subregion in the string\n     *                       argument.\n     * @param   len          the number of characters to compare.\n     * @return  &#123;@code true&#125; if the specified subregion of this string\n     *          matches the specified subregion of the string argument;\n     *          &#123;@code false&#125; otherwise. Whether the matching is exact\n     *          or case insensitive depends on the &#123;@code ignoreCase&#125;\n     *          argument.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">regionMatches</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> ignoreCase<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> toffset<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span> other<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ooffset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span> ta<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span> <span class=\"token operator\">=</span> toffset<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> pa<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> po <span class=\"token operator\">=</span> ooffset<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Note: toffset, ooffset, or len might be near -1>>>1.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ooffset <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>toffset <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>toffset <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> len<span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>ooffset <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>other<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>len<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">char</span> c1 <span class=\"token operator\">=</span> ta<span class=\"token punctuation\">[</span><span class=\"token keyword\">to</span><span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">char</span> c2 <span class=\"token operator\">=</span> pa<span class=\"token punctuation\">[</span>po<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ignoreCase<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// If characters don't match but case may be ignored,</span>\n                <span class=\"token comment\">// try converting both characters to uppercase.</span>\n                <span class=\"token comment\">// If the results match, then the comparison scan should</span>\n                <span class=\"token comment\">// continue.</span>\n                <span class=\"token keyword\">char</span> u1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">char</span> u2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>u1 <span class=\"token operator\">==</span> u2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token comment\">// Unfortunately, conversion to uppercase does not work properly</span>\n                <span class=\"token comment\">// for the Georgian alphabet, which has strange rules about case</span>\n                <span class=\"token comment\">// conversion.  So we need to make one last check before</span>\n                <span class=\"token comment\">// exiting.</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span>u1<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span>u2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Tests if the substring of this string beginning at the\n     * specified index starts with the specified prefix.\n     *\n     * @param   prefix    the prefix.\n     * @param   toffset   where to begin looking in this string.\n     * @return  &#123;@code true&#125; if the character sequence represented by the\n     *          argument is a prefix of the substring of this object starting\n     *          at index &#123;@code toffset&#125;; &#123;@code false&#125; otherwise.\n     *          The result is &#123;@code false&#125; if &#123;@code toffset&#125; is\n     *          negative or greater than the length of this\n     *          &#123;@code String&#125; object; otherwise the result is the same\n     *          as the result of the expression\n     *          &lt;pre>\n     *          this.substring(toffset).startsWith(prefix)\n     *          &lt;/pre>\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> prefix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> toffset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span> ta<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span> <span class=\"token operator\">=</span> toffset<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> pa<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> prefix<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> po <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> pc <span class=\"token operator\">=</span> prefix<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Note: toffset might be near -1>>>1.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>toffset <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>toffset <span class=\"token operator\">></span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>pc <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ta<span class=\"token punctuation\">[</span><span class=\"token keyword\">to</span><span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> pa<span class=\"token punctuation\">[</span>po<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Tests if this string starts with the specified prefix.\n     *\n     * @param   prefix   the prefix.\n     * @return  &#123;@code true&#125; if the character sequence represented by the\n     *          argument is a prefix of the character sequence represented by\n     *          this string; &#123;@code false&#125; otherwise.\n     *          Note also that &#123;@code true&#125; will be returned if the\n     *          argument is an empty string or is equal to this\n     *          &#123;@code String&#125; object as determined by the\n     *          &#123;@link #equals(Object)&#125; method.\n     * @since   1. 0\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> prefix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Tests if this string ends with the specified suffix.\n     *\n     * @param   suffix   the suffix.\n     * @return  &#123;@code true&#125; if the character sequence represented by the\n     *          argument is a suffix of the character sequence represented by\n     *          this object; &#123;@code false&#125; otherwise. Note that the\n     *          result will be &#123;@code true&#125; if the argument is the\n     *          empty string or is equal to this &#123;@code String&#125; object\n     *          as determined by the &#123;@link #equals(Object)&#125; method.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> suffix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>suffix<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> suffix<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a hash code for this string. The hash code for a\n     * &#123;@code String&#125; object is computed as\n     * &lt;blockquote>&lt;pre>\n     * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n     * &lt;/pre>&lt;/blockquote>\n     * using &#123;@code int&#125; arithmetic, where &#123;@code s[i]&#125; is the\n     * &lt;i>i&lt;/i>th character of the string, &#123;@code n&#125; is the length of\n     * the string, and &#123;@code ^&#125; indicates exponentiation.\n     * (The hash value of the empty string is zero.)\n     *\n     * @return  a hash code value for this object.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">char</span> val<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                h <span class=\"token operator\">=</span> <span class=\"token number\">31</span> <span class=\"token operator\">*</span> h <span class=\"token operator\">+</span> val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            hash <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> h<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the index within this string of the first occurrence of\n     * the specified character. If a character with value\n     * &#123;@code ch&#125; occurs in the character sequence represented by\n     * this &#123;@code String&#125; object, then the index (in Unicode\n     * code units) of the first such occurrence is returned. For\n     * values of &#123;@code ch&#125; in the range from 0 to 0xFFFF\n     * (inclusive), this is the smallest value &lt;i>k&lt;/i> such that:\n     * &lt;blockquote>&lt;pre>\n     * this.charAt(&lt;i>k&lt;/i>) == ch\n     * &lt;/pre>&lt;/blockquote>\n     * is true. For other values of &#123;@code ch&#125;, it is the\n     * smallest value &lt;i>k&lt;/i> such that:\n     * &lt;blockquote>&lt;pre>\n     * this.codePointAt(&lt;i>k&lt;/i>) == ch\n     * &lt;/pre>&lt;/blockquote>\n     * is true. In either case, if no such character occurs in this\n     * string, then &#123;@code -1&#125; is returned.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          &#123;@code -1&#125; if the character does not occur.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the index within this string of the first occurrence of the\n     * specified character, starting the search at the specified index.\n     * &lt;p>\n     * If a character with value &#123;@code ch&#125; occurs in the\n     * character sequence represented by this &#123;@code String&#125;\n     * object at an index no smaller than &#123;@code fromIndex&#125;, then\n     * the index of the first such occurrence is returned. For values\n     * of &#123;@code ch&#125; in the range from 0 to 0xFFFF (inclusive),\n     * this is the smallest value &lt;i>k&lt;/i> such that:\n     * &lt;blockquote>&lt;pre>\n     * (this.charAt(&lt;i>k&lt;/i>) == ch) &#123;@code &amp;&amp;&#125; (&lt;i>k&lt;/i> &amp;gt;= fromIndex)\n     * &lt;/pre>&lt;/blockquote>\n     * is true. For other values of &#123;@code ch&#125;, it is the\n     * smallest value &lt;i>k&lt;/i> such that:\n     * &lt;blockquote>&lt;pre>\n     * (this.codePointAt(&lt;i>k&lt;/i>) == ch) &#123;@code &amp;&amp;&#125; (&lt;i>k&lt;/i> &amp;gt;= fromIndex)\n     * &lt;/pre>&lt;/blockquote>\n     * is true. In either case, if no such character occurs in this\n     * string at or after position &#123;@code fromIndex&#125;, then\n     * &#123;@code -1&#125; is returned.\n     *\n     * &lt;p>\n     * There is no restriction on the value of &#123;@code fromIndex&#125;. If it\n     * is negative, it has the same effect as if it were zero: this entire\n     * string may be searched. If it is greater than the length of this\n     * string, it has the same effect as if it were equal to the length of\n     * this string: &#123;@code -1&#125; is returned.\n     *\n     * &lt;p>All indices are specified in &#123;@code char&#125; values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object that is greater\n     *          than or equal to &#123;@code fromIndex&#125;, or &#123;@code -1&#125;\n     *          if the character does not occur.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fromIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            fromIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fromIndex <span class=\"token operator\">>=</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// Note: fromIndex might be near -1>>>1.</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MIN_SUPPLEMENTARY_CODE_POINT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// handle most cases here (ch is a BMP code point or a</span>\n            <span class=\"token comment\">// negative value (invalid code point))</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> fromIndex<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">indexOfSupplementary</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> fromIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Handles (rare) calls of indexOf with a supplementary character.\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">indexOfSupplementary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">isValidCodePoint</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span> hi <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">highSurrogate</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span> lo <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">lowSurrogate</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> fromIndex<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> hi <span class=\"token operator\">&amp;&amp;</span> value<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> lo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the index within this string of the last occurrence of\n     * the specified character. For values of &#123;@code ch&#125; in the\n     * range from 0 to 0xFFFF (inclusive), the index (in Unicode code\n     * units) returned is the largest value &lt;i>k&lt;/i> such that:\n     * &lt;blockquote>&lt;pre>\n     * this.charAt(&lt;i>k&lt;/i>) == ch\n     * &lt;/pre>&lt;/blockquote>\n     * is true. For other values of &#123;@code ch&#125;, it is the\n     * largest value &lt;i>k&lt;/i> such that:\n     * &lt;blockquote>&lt;pre>\n     * this.codePointAt(&lt;i>k&lt;/i>) == ch\n     * &lt;/pre>&lt;/blockquote>\n     * is true.  In either case, if no such character occurs in this\n     * string, then &#123;@code -1&#125; is returned.  The\n     * &#123;@code String&#125; is searched backwards starting at the last\n     * character.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          &#123;@code -1&#125; if the character does not occur.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the index within this string of the last occurrence of\n     * the specified character, searching backward starting at the\n     * specified index. For values of &#123;@code ch&#125; in the range\n     * from 0 to 0xFFFF (inclusive), the index returned is the largest\n     * value &lt;i>k&lt;/i> such that:\n     * &lt;blockquote>&lt;pre>\n     * (this.charAt(&lt;i>k&lt;/i>) == ch) &#123;@code &amp;&amp;&#125; (&lt;i>k&lt;/i> &amp;lt;= fromIndex)\n     * &lt;/pre>&lt;/blockquote>\n     * is true. For other values of &#123;@code ch&#125;, it is the\n     * largest value &lt;i>k&lt;/i> such that:\n     * &lt;blockquote>&lt;pre>\n     * (this.codePointAt(&lt;i>k&lt;/i>) == ch) &#123;@code &amp;&amp;&#125; (&lt;i>k&lt;/i> &amp;lt;= fromIndex)\n     * &lt;/pre>&lt;/blockquote>\n     * is true. In either case, if no such character occurs in this\n     * string at or before position &#123;@code fromIndex&#125;, then\n     * &#123;@code -1&#125; is returned.\n     *\n     * &lt;p>All indices are specified in &#123;@code char&#125; values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from. There is no\n     *          restriction on the value of &#123;@code fromIndex&#125;. If it is\n     *          greater than or equal to the length of this string, it has\n     *          the same effect as if it were equal to one less than the\n     *          length of this string: this entire string may be searched.\n     *          If it is negative, it has the same effect as if it were -1:\n     *          -1 is returned.\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object that is less\n     *          than or equal to &#123;@code fromIndex&#125;, or &#123;@code -1&#125;\n     *          if the character does not occur before that point.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MIN_SUPPLEMENTARY_CODE_POINT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// handle most cases here (ch is a BMP code point or a</span>\n            <span class=\"token comment\">// negative value (invalid code point))</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>fromIndex<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">lastIndexOfSupplementary</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> fromIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Handles (rare) calls of lastIndexOf with a supplementary character.\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lastIndexOfSupplementary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">isValidCodePoint</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">char</span> hi <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">highSurrogate</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">char</span> lo <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">lowSurrogate</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>fromIndex<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> hi <span class=\"token operator\">&amp;&amp;</span> value<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> lo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring.\n     *\n     * &lt;p>The returned index is the smallest value &lt;i>k&lt;/i> for which:\n     * &lt;blockquote>&lt;pre>\n     * this.startsWith(str, &lt;i>k&lt;/i>)\n     * &lt;/pre>&lt;/blockquote>\n     * If no such value of &lt;i>k&lt;/i> exists, then &#123;@code -1&#125; is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the first occurrence of the specified substring,\n     *          or &#123;@code -1&#125; if there is no such occurrence.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring, starting at the specified index.\n     *\n     * &lt;p>The returned index is the smallest value &lt;i>k&lt;/i> for which:\n     * &lt;blockquote>&lt;pre>\n     * &lt;i>k&lt;/i> &amp;gt;= fromIndex &#123;@code &amp;&amp;&#125; this.startsWith(str, &lt;i>k&lt;/i>)\n     * &lt;/pre>&lt;/blockquote>\n     * If no such value of &lt;i>k&lt;/i> exists, then &#123;@code -1&#125; is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index from which to start the search.\n     * @return  the index of the first occurrence of the specified substring,\n     *          starting at the specified index,\n     *          or &#123;@code -1&#125; if there is no such occurrence.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n                str<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> fromIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   source       the characters being searched.\n     * @param   sourceOffset offset of the source string.\n     * @param   sourceCount  count of the source string.\n     * @param   target       the characters being searched for.\n     * @param   fromIndex    the index to begin searching from.\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sourceOffset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sourceCount<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> sourceOffset<span class=\"token punctuation\">,</span> sourceCount<span class=\"token punctuation\">,</span>\n                       target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n                       fromIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Code shared by String and StringBuffer to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   source       the characters being searched.\n     * @param   sourceOffset offset of the source string.\n     * @param   sourceCount  count of the source string.\n     * @param   target       the characters being searched for.\n     * @param   targetOffset offset of the target string.\n     * @param   targetCount  count of the target string.\n     * @param   fromIndex    the index to begin searching from.\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sourceOffset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sourceCount<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> targetOffset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> targetCount<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fromIndex <span class=\"token operator\">>=</span> sourceCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>targetCount <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> sourceCount <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fromIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            fromIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetCount <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> fromIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">char</span> first <span class=\"token operator\">=</span> target<span class=\"token punctuation\">[</span>targetOffset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> sourceOffset <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>sourceCount <span class=\"token operator\">-</span> targetCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> sourceOffset <span class=\"token operator\">+</span> fromIndex<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> max<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">/* Look for first character. */</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> first<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>i <span class=\"token operator\">&lt;=</span> max <span class=\"token operator\">&amp;&amp;</span> source<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token comment\">/* Found first character, now look at the rest of v2 */</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> targetCount <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> targetOffset <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> end <span class=\"token operator\">&amp;&amp;</span> source<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n                        <span class=\"token operator\">==</span> target<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">/* Found whole string. */</span>\n                    <span class=\"token keyword\">return</span> i <span class=\"token operator\">-</span> sourceOffset<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring.  The last occurrence of the empty string \"\"\n     * is considered to occur at the index value &#123;@code this.length()&#125;.\n     *\n     * &lt;p>The returned index is the largest value &lt;i>k&lt;/i> for which:\n     * &lt;blockquote>&lt;pre>\n     * this.startsWith(str, &lt;i>k&lt;/i>)\n     * &lt;/pre>&lt;/blockquote>\n     * If no such value of &lt;i>k&lt;/i> exists, then &#123;@code -1&#125; is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the last occurrence of the specified substring,\n     *          or &#123;@code -1&#125; if there is no such occurrence.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring, searching backward starting at the specified index.\n     *\n     * &lt;p>The returned index is the largest value &lt;i>k&lt;/i> for which:\n     * &lt;blockquote>&lt;pre>\n     * &lt;i>k&lt;/i> &#123;@code &lt;=&#125; fromIndex &#123;@code &amp;&amp;&#125; this.startsWith(str, &lt;i>k&lt;/i>)\n     * &lt;/pre>&lt;/blockquote>\n     * If no such value of &lt;i>k&lt;/i> exists, then &#123;@code -1&#125; is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the last occurrence of the specified substring,\n     *          searching backward from the specified index,\n     *          or &#123;@code -1&#125; if there is no such occurrence.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n                str<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> fromIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   source       the characters being searched.\n     * @param   sourceOffset offset of the source string.\n     * @param   sourceCount  count of the source string.\n     * @param   target       the characters being searched for.\n     * @param   fromIndex    the index to begin searching from.\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sourceOffset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sourceCount<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> sourceOffset<span class=\"token punctuation\">,</span> sourceCount<span class=\"token punctuation\">,</span>\n                       target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n                       fromIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Code shared by String and StringBuffer to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   source       the characters being searched.\n     * @param   sourceOffset offset of the source string.\n     * @param   sourceCount  count of the source string.\n     * @param   target       the characters being searched for.\n     * @param   targetOffset offset of the target string.\n     * @param   targetCount  count of the target string.\n     * @param   fromIndex    the index to begin searching from.\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sourceOffset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sourceCount<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> targetOffset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> targetCount<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">/*\n         * Check arguments; return immediately where possible. For\n         * consistency, don't check for null str.\n         */</span>\n        <span class=\"token keyword\">int</span> rightIndex <span class=\"token operator\">=</span> sourceCount <span class=\"token operator\">-</span> targetCount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fromIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fromIndex <span class=\"token operator\">></span> rightIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            fromIndex <span class=\"token operator\">=</span> rightIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">/* Empty string always matches. */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetCount <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> fromIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> strLastIndex <span class=\"token operator\">=</span> targetOffset <span class=\"token operator\">+</span> targetCount <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> strLastChar <span class=\"token operator\">=</span> target<span class=\"token punctuation\">[</span>strLastIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> sourceOffset <span class=\"token operator\">+</span> targetCount <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> min <span class=\"token operator\">+</span> fromIndex<span class=\"token punctuation\">;</span>\n\n    startSearchForLastChar<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> min <span class=\"token operator\">&amp;&amp;</span> source<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> strLastChar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> j <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>targetCount <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> strLastIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> target<span class=\"token punctuation\">[</span>k<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">continue</span> startSearchForLastChar<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> start <span class=\"token operator\">-</span> sourceOffset <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a string that is a substring of this string. The\n     * substring begins with the character at the specified index and\n     * extends to the end of this string. &lt;p>\n     * Examples:\n     * &lt;blockquote>&lt;pre>\n     * \"unhappy\".substring(2) returns \"happy\"\n     * \"Harbison\".substring(3) returns \"bison\"\n     * \"emptiness\".substring(9) returns \"\" (an empty string)\n     * &lt;/pre>&lt;/blockquote>\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if\n     *             &#123;@code beginIndex&#125; is negative or larger than the\n     *             length of this &#123;@code String&#125; object.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> beginIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beginIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>beginIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> subLen <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> beginIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subLen <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>subLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>beginIndex <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> beginIndex<span class=\"token punctuation\">,</span> subLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a string that is a substring of this string. The\n     * substring begins at the specified &#123;@code beginIndex&#125; and\n     * extends to the character at index &#123;@code endIndex - 1&#125;.\n     * Thus the length of the substring is &#123;@code endIndex-beginIndex&#125;.\n     * &lt;p>\n     * Examples:\n     * &lt;blockquote>&lt;pre>\n     * \"hamburger\".substring(4, 8) returns \"urge\"\n     * \"smiles\".substring(1, 5) returns \"mile\"\n     * &lt;/pre>&lt;/blockquote>\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @param      endIndex     the ending index, exclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if the\n     *             &#123;@code beginIndex&#125; is negative, or\n     *             &#123;@code endIndex&#125; is larger than the length of\n     *             this &#123;@code String&#125; object, or\n     *             &#123;@code beginIndex&#125; is larger than\n     *             &#123;@code endIndex&#125;.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> beginIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> endIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beginIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>beginIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>endIndex <span class=\"token operator\">></span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>endIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> subLen <span class=\"token operator\">=</span> endIndex <span class=\"token operator\">-</span> beginIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subLen <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>subLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>beginIndex <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>endIndex <span class=\"token operator\">==</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span>\n                <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> beginIndex<span class=\"token punctuation\">,</span> subLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a character sequence that is a subsequence of this sequence.\n     *\n     * &lt;p> An invocation of this method of the form\n     *\n     * &lt;blockquote>&lt;pre>\n     * str.subSequence(begin,&amp;nbsp;end)&lt;/pre>&lt;/blockquote>\n     *\n     * behaves in exactly the same way as the invocation\n     *\n     * &lt;blockquote>&lt;pre>\n     * str.substring(begin,&amp;nbsp;end)&lt;/pre>&lt;/blockquote>\n     *\n     * @apiNote\n     * This method is defined so that the &#123;@code String&#125; class can implement\n     * the &#123;@link CharSequence&#125; interface.\n     *\n     * @param   beginIndex   the begin index, inclusive.\n     * @param   endIndex     the end index, exclusive.\n     * @return  the specified subsequence.\n     *\n     * @throws  IndexOutOfBoundsException\n     *          if &#123;@code beginIndex&#125; or &#123;@code endIndex&#125; is negative,\n     *          if &#123;@code endIndex&#125; is greater than &#123;@code length()&#125;,\n     *          or if &#123;@code beginIndex&#125; is greater than &#123;@code endIndex&#125;\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CharSequence</span> <span class=\"token function\">subSequence</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> beginIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> endIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>beginIndex<span class=\"token punctuation\">,</span> endIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Concatenates the specified string to the end of this string.\n     * &lt;p>\n     * If the length of the argument string is &#123;@code 0&#125;, then this\n     * &#123;@code String&#125; object is returned. Otherwise, a\n     * &#123;@code String&#125; object is returned that represents a character\n     * sequence that is the concatenation of the character sequence\n     * represented by this &#123;@code String&#125; object and the character\n     * sequence represented by the argument string.&lt;p>\n     * Examples:\n     * &lt;blockquote>&lt;pre>\n     * \"cares\".concat(\"s\") returns \"caress\"\n     * \"to\".concat(\"get\").concat(\"her\") returns \"together\"\n     * &lt;/pre>&lt;/blockquote>\n     *\n     * @param   str   the &#123;@code String&#125; that is concatenated to the end\n     *                of this &#123;@code String&#125;.\n     * @return  a string that represents the concatenation of this object's\n     *          characters followed by the string argument's characters.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> otherLen <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>otherLen <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> len <span class=\"token operator\">+</span> otherLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        str<span class=\"token punctuation\">.</span><span class=\"token function\">getChars</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a string resulting from replacing all occurrences of\n     * &#123;@code oldChar&#125; in this string with &#123;@code newChar&#125;.\n     * &lt;p>\n     * If the character &#123;@code oldChar&#125; does not occur in the\n     * character sequence represented by this &#123;@code String&#125; object,\n     * then a reference to this &#123;@code String&#125; object is returned.\n     * Otherwise, a &#123;@code String&#125; object is returned that\n     * represents a character sequence identical to the character sequence\n     * represented by this &#123;@code String&#125; object, except that every\n     * occurrence of &#123;@code oldChar&#125; is replaced by an occurrence\n     * of &#123;@code newChar&#125;.\n     * &lt;p>\n     * Examples:\n     * &lt;blockquote>&lt;pre>\n     * \"mesquite in your cellar\".replace('e', 'o')\n     *         returns \"mosquito in your collar\"\n     * \"the war of baronets\".replace('r', 'y')\n     *         returns \"the way of bayonets\"\n     * \"sparring with a purple porpoise\".replace('p', 't')\n     *         returns \"starring with a turtle tortoise\"\n     * \"JonL\".replace('q', 'x') returns \"JonL\" (no change)\n     * &lt;/pre>&lt;/blockquote>\n     *\n     * @param   oldChar   the old character.\n     * @param   newChar   the new character.\n     * @return  a string derived from this string by replacing every\n     *          occurrence of &#123;@code oldChar&#125; with &#123;@code newChar&#125;.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> oldChar<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> newChar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldChar <span class=\"token operator\">!=</span> newChar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> val <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* avoid getfield opcode */</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> oldChar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    buf<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> oldChar<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> newChar <span class=\"token operator\">:</span> c<span class=\"token punctuation\">;</span>\n                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Tells whether or not this string matches the given &lt;a\n     * href=\"../util/regex/Pattern.html#sum\">regular expression&lt;/a>.\n     *\n     * &lt;p> An invocation of this method of the form\n     * &lt;i>str&lt;/i>&#123;@code .matches(&#125;&lt;i>regex&lt;/i>&#123;@code )&#125; yields exactly the\n     * same result as the expression\n     *\n     * &lt;blockquote>\n     * &#123;@link java.util.regex.Pattern&#125;.&#123;@link java.util.regex.Pattern#matches(String,CharSequence)\n     * matches(&lt;i>regex&lt;/i>, &lt;i>str&lt;/i>)&#125;\n     * &lt;/blockquote>\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     *\n     * @return  &#123;@code true&#125; if, and only if, this string matches the\n     *          given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression's syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> regex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns true if and only if this string contains the specified\n     * sequence of char values.\n     *\n     * @param s the sequence to search for\n     * @return true if this string contains &#123;@code s&#125;, false otherwise\n     * @since 1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Replaces the first substring of this string that matches the given &lt;a\n     * href=\"../util/regex/Pattern.html#sum\">regular expression&lt;/a> with the\n     * given replacement.\n     *\n     * &lt;p> An invocation of this method of the form\n     * &lt;i>str&lt;/i>&#123;@code .replaceFirst(&#125;&lt;i>regex&lt;/i>&#123;@code ,&#125; &lt;i>repl&lt;/i>&#123;@code )&#125;\n     * yields exactly the same result as the expression\n     *\n     * &lt;blockquote>\n     * &lt;code>\n     * &#123;@link java.util.regex.Pattern&#125;.&#123;@link\n     * java.util.regex.Pattern#compile compile&#125;(&lt;i>regex&lt;/i>).&#123;@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher&#125;(&lt;i>str&lt;/i>).&#123;@link\n     * java.util.regex.Matcher#replaceFirst replaceFirst&#125;(&lt;i>repl&lt;/i>)\n     * &lt;/code>\n     * &lt;/blockquote>\n     *\n     *&lt;p>\n     * Note that backslashes (&#123;@code \\&#125;) and dollar signs (&#123;@code $&#125;) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * &#123;@link java.util.regex.Matcher#replaceFirst&#125;.\n     * Use &#123;@link java.util.regex.Matcher#quoteReplacement&#125; to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for the first match\n     *\n     * @return  The resulting &#123;@code String&#125;\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression's syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">replaceFirst</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> regex<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> replacement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceFirst</span><span class=\"token punctuation\">(</span>replacement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Replaces each substring of this string that matches the given &lt;a\n     * href=\"../util/regex/Pattern.html#sum\">regular expression&lt;/a> with the\n     * given replacement.\n     *\n     * &lt;p> An invocation of this method of the form\n     * &lt;i>str&lt;/i>&#123;@code .replaceAll(&#125;&lt;i>regex&lt;/i>&#123;@code ,&#125; &lt;i>repl&lt;/i>&#123;@code )&#125;\n     * yields exactly the same result as the expression\n     *\n     * &lt;blockquote>\n     * &lt;code>\n     * &#123;@link java.util.regex.Pattern&#125;.&#123;@link\n     * java.util.regex.Pattern#compile compile&#125;(&lt;i>regex&lt;/i>).&#123;@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher&#125;(&lt;i>str&lt;/i>).&#123;@link\n     * java.util.regex.Matcher#replaceAll replaceAll&#125;(&lt;i>repl&lt;/i>)\n     * &lt;/code>\n     * &lt;/blockquote>\n     *\n     *&lt;p>\n     * Note that backslashes (&#123;@code \\&#125;) and dollar signs (&#123;@code $&#125;) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * &#123;@link java.util.regex.Matcher#replaceAll Matcher.replaceAll&#125;.\n     * Use &#123;@link java.util.regex.Matcher#quoteReplacement&#125; to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for each match\n     *\n     * @return  The resulting &#123;@code String&#125;\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression's syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> regex<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> replacement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span>replacement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Replaces each substring of this string that matches the literal target\n     * sequence with the specified literal replacement sequence. The\n     * replacement proceeds from the beginning of the string to the end, for\n     * example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in\n     * \"ba\" rather than \"ab\".\n     *\n     * @param  target The sequence of char values to be replaced\n     * @param  replacement The replacement sequence of char values\n     * @return  The resulting string\n     * @since 1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CharSequence</span> replacement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span>LITERAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Matcher</span><span class=\"token punctuation\">.</span><span class=\"token function\">quoteReplacement</span><span class=\"token punctuation\">(</span>replacement<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Splits this string around matches of the given\n     * &lt;a href=\"../util/regex/Pattern.html#sum\">regular expression&lt;/a>.\n     *\n     * &lt;p> The array returned by this method contains each substring of this\n     * string that is terminated by another substring that matches the given\n     * expression or is terminated by the end of the string.  The substrings in\n     * the array are in the order in which they occur in this string.  If the\n     * expression does not match any part of the input then the resulting array\n     * has just one element, namely this string.\n     *\n     * &lt;p> When there is a positive-width match at the beginning of this\n     * string then an empty leading substring is included at the beginning\n     * of the resulting array. A zero-width match at the beginning however\n     * never produces such empty leading substring.\n     *\n     * &lt;p> The &#123;@code limit&#125; parameter controls the number of times the\n     * pattern is applied and therefore affects the length of the resulting\n     * array.  If the limit &lt;i>n&lt;/i> is greater than zero then the pattern\n     * will be applied at most &lt;i>n&lt;/i>&amp;nbsp;-&amp;nbsp;1 times, the array's\n     * length will be no greater than &lt;i>n&lt;/i>, and the array's last entry\n     * will contain all input beyond the last matched delimiter.  If &lt;i>n&lt;/i>\n     * is non-positive then the pattern will be applied as many times as\n     * possible and the array can have any length.  If &lt;i>n&lt;/i> is zero then\n     * the pattern will be applied as many times as possible, the array can\n     * have any length, and trailing empty strings will be discarded.\n     *\n     * &lt;p> The string &#123;@code \"boo:and:foo\"&#125;, for example, yields the\n     * following results with these parameters:\n     *\n     * &lt;blockquote>&lt;table cellpadding=1 cellspacing=0 summary=\"Split example showing regex, limit, and result\">\n     * &lt;tr>\n     *     &lt;th>Regex&lt;/th>\n     *     &lt;th>Limit&lt;/th>\n     *     &lt;th>Result&lt;/th>\n     * &lt;/tr>\n     * &lt;tr>&lt;td align=center>:&lt;/td>\n     *     &lt;td align=center>2&lt;/td>\n     *     &lt;td>&#123;@code &#123; \"boo\", \"and:foo\" &#125;&#125;&lt;/td>&lt;/tr>\n     * &lt;tr>&lt;td align=center>:&lt;/td>\n     *     &lt;td align=center>5&lt;/td>\n     *     &lt;td>&#123;@code &#123; \"boo\", \"and\", \"foo\" &#125;&#125;&lt;/td>&lt;/tr>\n     * &lt;tr>&lt;td align=center>:&lt;/td>\n     *     &lt;td align=center>-2&lt;/td>\n     *     &lt;td>&#123;@code &#123; \"boo\", \"and\", \"foo\" &#125;&#125;&lt;/td>&lt;/tr>\n     * &lt;tr>&lt;td align=center>o&lt;/td>\n     *     &lt;td align=center>5&lt;/td>\n     *     &lt;td>&#123;@code &#123; \"b\", \"\", \":and:f\", \"\", \"\" &#125;&#125;&lt;/td>&lt;/tr>\n     * &lt;tr>&lt;td align=center>o&lt;/td>\n     *     &lt;td align=center>-2&lt;/td>\n     *     &lt;td>&#123;@code &#123; \"b\", \"\", \":and:f\", \"\", \"\" &#125;&#125;&lt;/td>&lt;/tr>\n     * &lt;tr>&lt;td align=center>o&lt;/td>\n     *     &lt;td align=center>0&lt;/td>\n     *     &lt;td>&#123;@code &#123; \"b\", \"\", \":and:f\" &#125;&#125;&lt;/td>&lt;/tr>\n     * &lt;/table>&lt;/blockquote>\n     *\n     * &lt;p> An invocation of this method of the form\n     * &lt;i>str.&lt;/i>&#123;@code split(&#125;&lt;i>regex&lt;/i>&#123;@code ,&#125;&amp;nbsp;&lt;i>n&lt;/i>&#123;@code )&#125;\n     * yields the same result as the expression\n     *\n     * &lt;blockquote>\n     * &lt;code>\n     * &#123;@link java.util.regex.Pattern&#125;.&#123;@link\n     * java.util.regex.Pattern#compile compile&#125;(&lt;i>regex&lt;/i>).&#123;@link\n     * java.util.regex.Pattern#split(java.lang.CharSequence,int) split&#125;(&lt;i>str&lt;/i>,&amp;nbsp;&lt;i>n&lt;/i>)\n     * &lt;/code>\n     * &lt;/blockquote>\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @param  limit\n     *         the result threshold, as described above\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression's syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> regex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">/* fastpath if the regex is a\n         (1)one-char String and this character is not one of the\n            RegEx's meta characters \".$|()[&#123;^?*+\\\\\", or\n         (2)two-char String and the first char is the backslash and\n            the second is not the ascii digit or ascii letter.\n         */</span>\n        <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span>\n             <span class=\"token string\">\".$|()[&#123;^?*+\\\\\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n             <span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span>\n              regex<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'\\\\'</span> <span class=\"token operator\">&amp;&amp;</span>\n              <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token punctuation\">(</span><span class=\"token string\">'9'</span><span class=\"token operator\">-</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\n              <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">-</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token punctuation\">(</span><span class=\"token string\">'z'</span><span class=\"token operator\">-</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\n              <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">-</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Z'</span><span class=\"token operator\">-</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n            <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MIN_HIGH_SURROGATE <span class=\"token operator\">||</span>\n             ch <span class=\"token operator\">></span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MAX_LOW_SURROGATE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> off <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">boolean</span> limited <span class=\"token operator\">=</span> limit <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>next <span class=\"token operator\">=</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> off<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>limited <span class=\"token operator\">||</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> limit <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>off<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    off <span class=\"token operator\">=</span> next <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// last one</span>\n                    <span class=\"token comment\">//assert (list.size() == limit - 1);</span>\n                    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>off<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    off <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">// If no match was found, return this</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>off <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Add remaining segment</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>limited <span class=\"token operator\">||</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> limit<span class=\"token punctuation\">)</span>\n                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>off<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Construct result</span>\n            <span class=\"token keyword\">int</span> resultSize <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>limit <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>resultSize <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>resultSize <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    resultSize<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>resultSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">subList</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> resultSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Splits this string around matches of the given &lt;a\n     * href=\"../util/regex/Pattern.html#sum\">regular expression&lt;/a>.\n     *\n     * &lt;p> This method works as if by invoking the two-argument &#123;@link\n     * #split(String, int) split&#125; method with the given expression and a limit\n     * argument of zero.  Trailing empty strings are therefore not included in\n     * the resulting array.\n     *\n     * &lt;p> The string &#123;@code \"boo:and:foo\"&#125;, for example, yields the following\n     * results with these expressions:\n     *\n     * &lt;blockquote>&lt;table cellpadding=1 cellspacing=0 summary=\"Split examples showing regex and result\">\n     * &lt;tr>\n     *  &lt;th>Regex&lt;/th>\n     *  &lt;th>Result&lt;/th>\n     * &lt;/tr>\n     * &lt;tr>&lt;td align=center>:&lt;/td>\n     *     &lt;td>&#123;@code &#123; \"boo\", \"and\", \"foo\" &#125;&#125;&lt;/td>&lt;/tr>\n     * &lt;tr>&lt;td align=center>o&lt;/td>\n     *     &lt;td>&#123;@code &#123; \"b\", \"\", \":and:f\" &#125;&#125;&lt;/td>&lt;/tr>\n     * &lt;/table>&lt;/blockquote>\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression's syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> regex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a new String composed of copies of the\n     * &#123;@code CharSequence elements&#125; joined together with a copy of\n     * the specified &#123;@code delimiter&#125;.\n     *\n     * &lt;blockquote>For example,\n     * &lt;pre>&#123;@code\n     *     String message = String.join(\"-\", \"Java\", \"is\", \"cool\");\n     *     // message returned is: \"Java-is-cool\"\n     * &#125;&lt;/pre>&lt;/blockquote>\n     *\n     * Note that if an element is null, then &#123;@code \"null\"&#125; is added.\n     *\n     * @param  delimiter the delimiter that separates each element\n     * @param  elements the elements to join together.\n     *\n     * @return a new &#123;@code String&#125; that is composed of the &#123;@code elements&#125;\n     *         separated by the &#123;@code delimiter&#125;\n     *\n     * @throws NullPointerException If &#123;@code delimiter&#125; or &#123;@code elements&#125;\n     *         is &#123;@code null&#125;\n     *\n     * @see java.util.StringJoiner\n     * @since 1.8\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> delimiter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CharSequence</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Number of elements not likely worth Arrays.stream overhead.</span>\n        <span class=\"token class-name\">StringJoiner</span> joiner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringJoiner</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> cs<span class=\"token operator\">:</span> elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            joiner<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> joiner<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a new &#123;@code String&#125; composed of copies of the\n     * &#123;@code CharSequence elements&#125; joined together with a copy of the\n     * specified &#123;@code delimiter&#125;.\n     *\n     * &lt;blockquote>For example,\n     * &lt;pre>&#123;@code\n     *     List&lt;String> strings = new LinkedList&lt;>();\n     *     strings.add(\"Java\");strings.add(\"is\");\n     *     strings.add(\"cool\");\n     *     String message = String.join(\" \", strings);\n     *     //message returned is: \"Java is cool\"\n     *\n     *     Set&lt;String> strings = new LinkedHashSet&lt;>();\n     *     strings.add(\"Java\"); strings.add(\"is\");\n     *     strings.add(\"very\"); strings.add(\"cool\");\n     *     String message = String.join(\"-\", strings);\n     *     //message returned is: \"Java-is-very-cool\"\n     * &#125;&lt;/pre>&lt;/blockquote>\n     *\n     * Note that if an individual element is &#123;@code null&#125;, then &#123;@code \"null\"&#125; is added.\n     *\n     * @param  delimiter a sequence of characters that is used to separate each\n     *         of the &#123;@code elements&#125; in the resulting &#123;@code String&#125;\n     * @param  elements an &#123;@code Iterable&#125; that will have its &#123;@code elements&#125;\n     *         joined together.\n     *\n     * @return a new &#123;@code String&#125; that is composed from the &#123;@code elements&#125;\n     *         argument\n     *\n     * @throws NullPointerException If &#123;@code delimiter&#125; or &#123;@code elements&#125;\n     *         is &#123;@code null&#125;\n     *\n     * @see    #join(CharSequence,CharSequence...)\n     * @see    java.util.StringJoiner\n     * @since 1.8\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> delimiter<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CharSequence</span><span class=\"token punctuation\">></span></span> elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringJoiner</span> joiner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringJoiner</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> cs<span class=\"token operator\">:</span> elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            joiner<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> joiner<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Converts all of the characters in this &#123;@code String&#125; to lower\n     * case using the rules of the given &#123;@code Locale&#125;.  Case mapping is based\n     * on the Unicode Standard version specified by the &#123;@link java.lang.Character Character&#125;\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * &#123;@code String&#125; may be a different length than the original &#123;@code String&#125;.\n     * &lt;p>\n     * Examples of lowercase  mappings are in the following table:\n     * &lt;table border=\"1\" summary=\"Lowercase mapping examples showing language code of locale, upper case, lower case, and description\">\n     * &lt;tr>\n     *   &lt;th>Language Code of Locale&lt;/th>\n     *   &lt;th>Upper Case&lt;/th>\n     *   &lt;th>Lower Case&lt;/th>\n     *   &lt;th>Description&lt;/th>\n     * &lt;/tr>\n     * &lt;tr>\n     *   &lt;td>tr (Turkish)&lt;/td>\n     *   &lt;td>&amp;#92;u0130&lt;/td>\n     *   &lt;td>&amp;#92;u0069&lt;/td>\n     *   &lt;td>capital letter I with dot above -&amp;gt; small letter i&lt;/td>\n     * &lt;/tr>\n     * &lt;tr>\n     *   &lt;td>tr (Turkish)&lt;/td>\n     *   &lt;td>&amp;#92;u0049&lt;/td>\n     *   &lt;td>&amp;#92;u0131&lt;/td>\n     *   &lt;td>capital letter I -&amp;gt; small letter dotless i &lt;/td>\n     * &lt;/tr>\n     * &lt;tr>\n     *   &lt;td>(all)&lt;/td>\n     *   &lt;td>French Fries&lt;/td>\n     *   &lt;td>french fries&lt;/td>\n     *   &lt;td>lowercased all chars in String&lt;/td>\n     * &lt;/tr>\n     * &lt;tr>\n     *   &lt;td>(all)&lt;/td>\n     *   &lt;td>&lt;img src=\"doc-files/capiota.gif\" alt=\"capiota\">&lt;img src=\"doc-files/capchi.gif\" alt=\"capchi\">\n     *       &lt;img src=\"doc-files/captheta.gif\" alt=\"captheta\">&lt;img src=\"doc-files/capupsil.gif\" alt=\"capupsil\">\n     *       &lt;img src=\"doc-files/capsigma.gif\" alt=\"capsigma\">&lt;/td>\n     *   &lt;td>&lt;img src=\"doc-files/iota.gif\" alt=\"iota\">&lt;img src=\"doc-files/chi.gif\" alt=\"chi\">\n     *       &lt;img src=\"doc-files/theta.gif\" alt=\"theta\">&lt;img src=\"doc-files/upsilon.gif\" alt=\"upsilon\">\n     *       &lt;img src=\"doc-files/sigma1.gif\" alt=\"sigma\">&lt;/td>\n     *   &lt;td>lowercased all chars in String&lt;/td>\n     * &lt;/tr>\n     * &lt;/table>\n     *\n     * @param locale use the case transformation rules for this locale\n     * @return the &#123;@code String&#125;, converted to lowercase.\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toUpperCase(Locale)\n     * @since   1.1\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span> locale<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>locale <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> firstUpper<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/* Now check if there are any characters that need to be changed. */</span>\n        scan<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>firstUpper <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> firstUpper <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> value<span class=\"token punctuation\">[</span>firstUpper<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MIN_HIGH_SURROGATE<span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MAX_HIGH_SURROGATE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">int</span> supplChar <span class=\"token operator\">=</span> <span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span>firstUpper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>supplChar <span class=\"token operator\">!=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span>supplChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">break</span> scan<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    firstUpper <span class=\"token operator\">+=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCount</span><span class=\"token punctuation\">(</span>supplChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">break</span> scan<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    firstUpper<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> resultOffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* result may grow, so i+resultOffset\n                                * is the write location in result */</span>\n\n        <span class=\"token comment\">/* Just copy the first few lowerCase characters. */</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> firstUpper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> lang <span class=\"token operator\">=</span> locale<span class=\"token punctuation\">.</span><span class=\"token function\">getLanguage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> localeDependent <span class=\"token operator\">=</span>\n                <span class=\"token punctuation\">(</span>lang <span class=\"token operator\">==</span> <span class=\"token string\">\"tr\"</span> <span class=\"token operator\">||</span> lang <span class=\"token operator\">==</span> <span class=\"token string\">\"az\"</span> <span class=\"token operator\">||</span> lang <span class=\"token operator\">==</span> <span class=\"token string\">\"lt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lowerCharArray<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> lowerChar<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> srcChar<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> srcCount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> firstUpper<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> srcCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            srcChar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>srcChar <span class=\"token operator\">>=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MIN_HIGH_SURROGATE\n                    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>srcChar <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MAX_HIGH_SURROGATE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                srcChar <span class=\"token operator\">=</span> <span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                srcCount <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCount</span><span class=\"token punctuation\">(</span>srcChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                srcCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>localeDependent <span class=\"token operator\">||</span>\n                srcChar <span class=\"token operator\">==</span> <span class=\"token string\">'\\u03A3'</span> <span class=\"token operator\">||</span> <span class=\"token comment\">// GREEK CAPITAL LETTER SIGMA</span>\n                srcChar <span class=\"token operator\">==</span> <span class=\"token string\">'\\u0130'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// LATIN CAPITAL LETTER I WITH DOT ABOVE</span>\n                lowerChar <span class=\"token operator\">=</span> <span class=\"token class-name\">ConditionalSpecialCasing</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCaseEx</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> locale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                lowerChar <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span>srcChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>lowerChar <span class=\"token operator\">==</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>lowerChar <span class=\"token operator\">>=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MIN_SUPPLEMENTARY_CODE_POINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lowerChar <span class=\"token operator\">==</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    lowerCharArray <span class=\"token operator\">=</span>\n                            <span class=\"token class-name\">ConditionalSpecialCasing</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCaseCharArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> locale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>srcCount <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    resultOffset <span class=\"token operator\">+=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toChars</span><span class=\"token punctuation\">(</span>lowerChar<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> resultOffset<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> srcCount<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    lowerCharArray <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toChars</span><span class=\"token punctuation\">(</span>lowerChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token comment\">/* Grow result if needed */</span>\n                <span class=\"token keyword\">int</span> mapLen <span class=\"token operator\">=</span> lowerCharArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mapLen <span class=\"token operator\">></span> srcCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> mapLen <span class=\"token operator\">-</span> srcCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> result2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> resultOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    result <span class=\"token operator\">=</span> result2<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> mapLen<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> resultOffset <span class=\"token operator\">+</span> x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lowerCharArray<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                resultOffset <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>mapLen <span class=\"token operator\">-</span> srcCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> resultOffset<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>lowerChar<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">+</span> resultOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Converts all of the characters in this &#123;@code String&#125; to lower\n     * case using the rules of the default locale. This is equivalent to calling\n     * &#123;@code toLowerCase(Locale.getDefault())&#125;.\n     * &lt;p>\n     * &lt;b>Note:&lt;/b> This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, &#123;@code \"TITLE\".toLowerCase()&#125; in a Turkish locale\n     * returns &#123;@code \"t\\u005Cu0131tle\"&#125;, where '\\u005Cu0131' is the\n     * LATIN SMALL LETTER DOTLESS I character.\n     * To obtain correct results for locale insensitive strings, use\n     * &#123;@code toLowerCase(Locale.ROOT)&#125;.\n     * &lt;p>\n     * @return  the &#123;@code String&#125;, converted to lowercase.\n     * @see     java.lang.String#toLowerCase(Locale)\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Converts all of the characters in this &#123;@code String&#125; to upper\n     * case using the rules of the given &#123;@code Locale&#125;. Case mapping is based\n     * on the Unicode Standard version specified by the &#123;@link java.lang.Character Character&#125;\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * &#123;@code String&#125; may be a different length than the original &#123;@code String&#125;.\n     * &lt;p>\n     * Examples of locale-sensitive and 1:M case mappings are in the following table.\n     *\n     * &lt;table border=\"1\" summary=\"Examples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.\">\n     * &lt;tr>\n     *   &lt;th>Language Code of Locale&lt;/th>\n     *   &lt;th>Lower Case&lt;/th>\n     *   &lt;th>Upper Case&lt;/th>\n     *   &lt;th>Description&lt;/th>\n     * &lt;/tr>\n     * &lt;tr>\n     *   &lt;td>tr (Turkish)&lt;/td>\n     *   &lt;td>&amp;#92;u0069&lt;/td>\n     *   &lt;td>&amp;#92;u0130&lt;/td>\n     *   &lt;td>small letter i -&amp;gt; capital letter I with dot above&lt;/td>\n     * &lt;/tr>\n     * &lt;tr>\n     *   &lt;td>tr (Turkish)&lt;/td>\n     *   &lt;td>&amp;#92;u0131&lt;/td>\n     *   &lt;td>&amp;#92;u0049&lt;/td>\n     *   &lt;td>small letter dotless i -&amp;gt; capital letter I&lt;/td>\n     * &lt;/tr>\n     * &lt;tr>\n     *   &lt;td>(all)&lt;/td>\n     *   &lt;td>&amp;#92;u00df&lt;/td>\n     *   &lt;td>&amp;#92;u0053 &amp;#92;u0053&lt;/td>\n     *   &lt;td>small letter sharp s -&amp;gt; two letters: SS&lt;/td>\n     * &lt;/tr>\n     * &lt;tr>\n     *   &lt;td>(all)&lt;/td>\n     *   &lt;td>Fahrvergn&amp;uuml;gen&lt;/td>\n     *   &lt;td>FAHRVERGN&amp;Uuml;GEN&lt;/td>\n     *   &lt;td>&lt;/td>\n     * &lt;/tr>\n     * &lt;/table>\n     * @param locale use the case transformation rules for this locale\n     * @return the &#123;@code String&#125;, converted to uppercase.\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toLowerCase(Locale)\n     * @since   1.1\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span> locale<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>locale <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> firstLower<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/* Now check if there are any characters that need to be changed. */</span>\n        scan<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>firstLower <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> firstLower <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>value<span class=\"token punctuation\">[</span>firstLower<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> srcCount<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MIN_HIGH_SURROGATE<span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MAX_HIGH_SURROGATE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    c <span class=\"token operator\">=</span> <span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span>firstLower<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    srcCount <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCount</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    srcCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">int</span> upperCaseChar <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCaseEx</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>upperCaseChar <span class=\"token operator\">==</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> upperCaseChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">break</span> scan<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                firstLower <span class=\"token operator\">+=</span> srcCount<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">/* result may grow, so i+resultOffset is the write location in result */</span>\n        <span class=\"token keyword\">int</span> resultOffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* may grow */</span>\n\n        <span class=\"token comment\">/* Just copy the first few upperCase characters. */</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> firstLower<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> lang <span class=\"token operator\">=</span> locale<span class=\"token punctuation\">.</span><span class=\"token function\">getLanguage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> localeDependent <span class=\"token operator\">=</span>\n                <span class=\"token punctuation\">(</span>lang <span class=\"token operator\">==</span> <span class=\"token string\">\"tr\"</span> <span class=\"token operator\">||</span> lang <span class=\"token operator\">==</span> <span class=\"token string\">\"az\"</span> <span class=\"token operator\">||</span> lang <span class=\"token operator\">==</span> <span class=\"token string\">\"lt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> upperCharArray<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> upperChar<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> srcChar<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> srcCount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> firstLower<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> srcCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            srcChar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>srcChar <span class=\"token operator\">>=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MIN_HIGH_SURROGATE <span class=\"token operator\">&amp;&amp;</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>srcChar <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MAX_HIGH_SURROGATE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                srcChar <span class=\"token operator\">=</span> <span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                srcCount <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCount</span><span class=\"token punctuation\">(</span>srcChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                srcCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>localeDependent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                upperChar <span class=\"token operator\">=</span> <span class=\"token class-name\">ConditionalSpecialCasing</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCaseEx</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> locale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                upperChar <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCaseEx</span><span class=\"token punctuation\">(</span>srcChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>upperChar <span class=\"token operator\">==</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>upperChar <span class=\"token operator\">>=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>MIN_SUPPLEMENTARY_CODE_POINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>upperChar <span class=\"token operator\">==</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>localeDependent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        upperCharArray <span class=\"token operator\">=</span>\n                                <span class=\"token class-name\">ConditionalSpecialCasing</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCaseCharArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> locale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                        upperCharArray <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCaseCharArray</span><span class=\"token punctuation\">(</span>srcChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>srcCount <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    resultOffset <span class=\"token operator\">+=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toChars</span><span class=\"token punctuation\">(</span>upperChar<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> resultOffset<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> srcCount<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    upperCharArray <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toChars</span><span class=\"token punctuation\">(</span>upperChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token comment\">/* Grow result if needed */</span>\n                <span class=\"token keyword\">int</span> mapLen <span class=\"token operator\">=</span> upperCharArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mapLen <span class=\"token operator\">></span> srcCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> mapLen <span class=\"token operator\">-</span> srcCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> result2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> resultOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    result <span class=\"token operator\">=</span> result2<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> mapLen<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> resultOffset <span class=\"token operator\">+</span> x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> upperCharArray<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                resultOffset <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>mapLen <span class=\"token operator\">-</span> srcCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> resultOffset<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>upperChar<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">+</span> resultOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Converts all of the characters in this &#123;@code String&#125; to upper\n     * case using the rules of the default locale. This method is equivalent to\n     * &#123;@code toUpperCase(Locale.getDefault())&#125;.\n     * &lt;p>\n     * &lt;b>Note:&lt;/b> This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, &#123;@code \"title\".toUpperCase()&#125; in a Turkish locale\n     * returns &#123;@code \"T\\u005Cu0130TLE\"&#125;, where '\\u005Cu0130' is the\n     * LATIN CAPITAL LETTER I WITH DOT ABOVE character.\n     * To obtain correct results for locale insensitive strings, use\n     * &#123;@code toUpperCase(Locale.ROOT)&#125;.\n     * &lt;p>\n     * @return  the &#123;@code String&#125;, converted to uppercase.\n     * @see     java.lang.String#toUpperCase(Locale)\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a string whose value is this string, with any leading and trailing\n     * whitespace removed.\n     * &lt;p>\n     * If this &#123;@code String&#125; object represents an empty character\n     * sequence, or the first and last characters of character sequence\n     * represented by this &#123;@code String&#125; object both have codes\n     * greater than &#123;@code '\\u005Cu0020'&#125; (the space character), then a\n     * reference to this &#123;@code String&#125; object is returned.\n     * &lt;p>\n     * Otherwise, if there is no character with a code greater than\n     * &#123;@code '\\u005Cu0020'&#125; in the string, then a\n     * &#123;@code String&#125; object representing an empty string is\n     * returned.\n     * &lt;p>\n     * Otherwise, let &lt;i>k&lt;/i> be the index of the first character in the\n     * string whose code is greater than &#123;@code '\\u005Cu0020'&#125;, and let\n     * &lt;i>m&lt;/i> be the index of the last character in the string whose code\n     * is greater than &#123;@code '\\u005Cu0020'&#125;. A &#123;@code String&#125;\n     * object is returned, representing the substring of this string that\n     * begins with the character at index &lt;i>k&lt;/i> and ends with the\n     * character at index &lt;i>m&lt;/i>-that is, the result of\n     * &#123;@code this.substring(k, m + 1)&#125;.\n     * &lt;p>\n     * This method may be used to trim whitespace (as defined above) from\n     * the beginning and end of a string.\n     *\n     * @return  A string whose value is this string, with any leading and trailing white\n     *          space removed, or this string if it has no leading or\n     *          trailing white space.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> st <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> val <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* avoid getfield opcode */</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>st <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">[</span>st<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            st<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>st <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            len<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>st <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * This object (which is already a string!) is itself returned.\n     *\n     * @return  the string itself.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Converts this string to a new character array.\n     *\n     * @return  a newly allocated character array whose length is the length\n     *          of this string and whose contents are initialized to contain\n     *          the character sequence represented by this string.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Cannot use Arrays.copyOf because of class initialization order issues</span>\n        <span class=\"token keyword\">char</span> result<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a formatted string using the specified format string and\n     * arguments.\n     *\n     * &lt;p> The locale always used is the one returned by &#123;@link\n     * java.util.Locale#getDefault() Locale.getDefault()&#125;.\n     *\n     * @param  format\n     *         A &lt;a href=\"../util/Formatter.html#syntax\">format string&lt;/a>\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         &lt;cite>The Java&amp;trade; Virtual Machine Specification&lt;/cite>.\n     *         The behaviour on a\n     *         &#123;@code null&#125; argument depends on the &lt;a\n     *         href=\"../util/Formatter.html#syntax\">conversion&lt;/a>.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the &lt;a\n     *          href=\"../util/Formatter.html#detail\">Details&lt;/a> section of the\n     *          formatter class specification.\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> format<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Formatter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a formatted string using the specified locale, format string,\n     * and arguments.\n     *\n     * @param  l\n     *         The &#123;@linkplain java.util.Locale locale&#125; to apply during\n     *         formatting.  If &#123;@code l&#125; is &#123;@code null&#125; then no localization\n     *         is applied.\n     *\n     * @param  format\n     *         A &lt;a href=\"../util/Formatter.html#syntax\">format string&lt;/a>\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         &lt;cite>The Java&amp;trade; Virtual Machine Specification&lt;/cite>.\n     *         The behaviour on a\n     *         &#123;@code null&#125; argument depends on the\n     *         &lt;a href=\"../util/Formatter.html#syntax\">conversion&lt;/a>.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the &lt;a\n     *          href=\"../util/Formatter.html#detail\">Details&lt;/a> section of the\n     *          formatter class specification\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span> l<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> format<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Formatter</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the string representation of the &#123;@code Object&#125; argument.\n     *\n     * @param   obj   an &#123;@code Object&#125;.\n     * @return  if the argument is &#123;@code null&#125;, then a string equal to\n     *          &#123;@code \"null\"&#125;; otherwise, the value of\n     *          &#123;@code obj.toString()&#125; is returned.\n     * @see     java.lang.Object#toString()\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>obj <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"null\"</span> <span class=\"token operator\">:</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the string representation of the &#123;@code char&#125; array\n     * argument. The contents of the character array are copied; subsequent\n     * modification of the character array does not affect the returned\n     * string.\n     *\n     * @param   data     the character array.\n     * @return  a &#123;@code String&#125; that contains the characters of the\n     *          character array.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the string representation of a specific subarray of the\n     * &#123;@code char&#125; array argument.\n     * &lt;p>\n     * The &#123;@code offset&#125; argument is the index of the first\n     * character of the subarray. The &#123;@code count&#125; argument\n     * specifies the length of the subarray. The contents of the subarray\n     * are copied; subsequent modification of the character array does not\n     * affect the returned string.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a &#123;@code String&#125; that contains the characters of the\n     *          specified subarray of the character array.\n     * @exception IndexOutOfBoundsException if &#123;@code offset&#125; is\n     *          negative, or &#123;@code count&#125; is negative, or\n     *          &#123;@code offset+count&#125; is larger than\n     *          &#123;@code data.length&#125;.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Equivalent to &#123;@link #valueOf(char[], int, int)&#125;.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a &#123;@code String&#125; that contains the characters of the\n     *          specified subarray of the character array.\n     * @exception IndexOutOfBoundsException if &#123;@code offset&#125; is\n     *          negative, or &#123;@code count&#125; is negative, or\n     *          &#123;@code offset+count&#125; is larger than\n     *          &#123;@code data.length&#125;.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">copyValueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Equivalent to &#123;@link #valueOf(char[])&#125;.\n     *\n     * @param   data   the character array.\n     * @return  a &#123;@code String&#125; that contains the characters of the\n     *          character array.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">copyValueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the string representation of the &#123;@code boolean&#125; argument.\n     *\n     * @param   b   a &#123;@code boolean&#125;.\n     * @return  if the argument is &#123;@code true&#125;, a string equal to\n     *          &#123;@code \"true\"&#125; is returned; otherwise, a string equal to\n     *          &#123;@code \"false\"&#125; is returned.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> b <span class=\"token operator\">?</span> <span class=\"token string\">\"true\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the string representation of the &#123;@code char&#125;\n     * argument.\n     *\n     * @param   c   a &#123;@code char&#125;.\n     * @return  a string of length &#123;@code 1&#125; containing\n     *          as its single character the argument &#123;@code c&#125;.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>c<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the string representation of the &#123;@code int&#125; argument.\n     * &lt;p>\n     * The representation is exactly the one returned by the\n     * &#123;@code Integer.toString&#125; method of one argument.\n     *\n     * @param   i   an &#123;@code int&#125;.\n     * @return  a string representation of the &#123;@code int&#125; argument.\n     * @see     java.lang.Integer#toString(int, int)\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the string representation of the &#123;@code long&#125; argument.\n     * &lt;p>\n     * The representation is exactly the one returned by the\n     * &#123;@code Long.toString&#125; method of one argument.\n     *\n     * @param   l   a &#123;@code long&#125;.\n     * @return  a string representation of the &#123;@code long&#125; argument.\n     * @see     java.lang.Long#toString(long)\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the string representation of the &#123;@code float&#125; argument.\n     * &lt;p>\n     * The representation is exactly the one returned by the\n     * &#123;@code Float.toString&#125; method of one argument.\n     *\n     * @param   f   a &#123;@code float&#125;.\n     * @return  a string representation of the &#123;@code float&#125; argument.\n     * @see     java.lang.Float#toString(float)\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns the string representation of the &#123;@code double&#125; argument.\n     * &lt;p>\n     * The representation is exactly the one returned by the\n     * &#123;@code Double.toString&#125; method of one argument.\n     *\n     * @param   d   a &#123;@code double&#125;.\n     * @return  a  string representation of the &#123;@code double&#125; argument.\n     * @see     java.lang.Double#toString(double)\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Returns a canonical representation for the string object.\n     * &lt;p>\n     * A pool of strings, initially empty, is maintained privately by the\n     * class &#123;@code String&#125;.\n     * &lt;p>\n     * When the intern method is invoked, if the pool already contains a\n     * string equal to this &#123;@code String&#125; object as determined by\n     * the &#123;@link #equals(Object)&#125; method, then the string from the pool is\n     * returned. Otherwise, this &#123;@code String&#125; object is added to the\n     * pool and a reference to this &#123;@code String&#125; object is returned.\n     * &lt;p>\n     * It follows that for any two strings &#123;@code s&#125; and &#123;@code t&#125;,\n     * &#123;@code s.intern() == t.intern()&#125; is &#123;@code true&#125;\n     * if and only if &#123;@code s.equals(t)&#125; is &#123;@code true&#125;.\n     * &lt;p>\n     * All literal strings and string-valued constant expressions are\n     * interned. String literals are defined in section 3.10.5 of the\n     * &lt;cite>The Java&amp;trade; Language Specification&lt;/cite>.\n     *\n     * @return  a string that has the same contents as this string, but is\n     *          guaranteed to be from a pool of unique strings.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token class-name\">String</span> <span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>","categories":[],"tags":[{"name":"算法","path":"api/tags/算法.json"}]}