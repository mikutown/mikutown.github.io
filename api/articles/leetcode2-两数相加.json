{"title":"leetcode2.两数相加","slug":"leetcode2-两数相加","date":"2024-01-09T10:03:25.000Z","updated":"2024-01-09T10:05:08.392Z","comments":true,"path":"api/articles/leetcode2-两数相加.json","excerpt":"题目给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。请必须使用时间复杂度为 O(log n) 的算法。","covers":null,"content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>\n<p>请必须使用时间复杂度为 <code>O(log n)</code> 的算法。</p>\n <span id=\"more\"></span>\n\n<p><strong>示例 1:</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入: nums &#x3D; [1,3,5,6], target &#x3D; 5\n输出: 2</code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入: nums &#x3D; [1,3,5,6], target &#x3D; 2\n输出: 1</code></pre>\n\n<p><strong>示例 3:</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入: nums &#x3D; [1,3,5,6], target &#x3D; 7\n输出: 4</code></pre>\n\n<p><strong>提示:</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 104</code></li>\n<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>\n<li><code>nums</code> 为 <strong>无重复元素</strong> 的 <strong>升序</strong> 排列数组</li>\n<li><code>-104 &lt;= target &lt;= 104</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ol>\n<li>折半查找</li>\n</ol>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    int searchInsert(vector&lt;int&gt;&amp; nums, int target) &#123;\n        int n &#x3D; nums.size(); &#x2F;&#x2F; 获取数组的大小\n        int left &#x3D; 0; &#x2F;&#x2F; 初始化左指针\n        int right &#x3D; n - 1; &#x2F;&#x2F; 初始化右指针\n        \n        while (left &lt;&#x3D; right) &#123; &#x2F;&#x2F; 当左指针不大于右指针时循环\n            int mid &#x3D; left + (right - left) &#x2F; 2; &#x2F;&#x2F; 计算中间位置，防止溢出\n\n            if (nums[mid] &#x3D;&#x3D; target) &#123; &#x2F;&#x2F; 如果中间的元素等于目标值\n                return mid; &#x2F;&#x2F; 返回中间位置\n            &#125; else if (nums[mid] &lt; target) &#123; &#x2F;&#x2F; 如果中间元素小于目标值\n                left &#x3D; mid + 1; &#x2F;&#x2F; 将左指针移动到中间位置的右侧，加1以避免循环\n            &#125; else &#123; &#x2F;&#x2F; 如果中间元素大于目标值\n                right &#x3D; mid - 1; &#x2F;&#x2F; 将右指针移动到中间位置的左侧，减1以避免循环\n            &#125;\n        &#125;\n\n        return left; &#x2F;&#x2F; 如果没有找到目标值，返回应该插入的位置\n    &#125;\n&#125;;</code></pre>\n\n","more":"<p><strong>示例 1:</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入: nums &#x3D; [1,3,5,6], target &#x3D; 5\n输出: 2</code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入: nums &#x3D; [1,3,5,6], target &#x3D; 2\n输出: 1</code></pre>\n\n<p><strong>示例 3:</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入: nums &#x3D; [1,3,5,6], target &#x3D; 7\n输出: 4</code></pre>\n\n<p><strong>提示:</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 104</code></li>\n<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>\n<li><code>nums</code> 为 <strong>无重复元素</strong> 的 <strong>升序</strong> 排列数组</li>\n<li><code>-104 &lt;= target &lt;= 104</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ol>\n<li>折半查找</li>\n</ol>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    int searchInsert(vector&lt;int&gt;&amp; nums, int target) &#123;\n        int n &#x3D; nums.size(); &#x2F;&#x2F; 获取数组的大小\n        int left &#x3D; 0; &#x2F;&#x2F; 初始化左指针\n        int right &#x3D; n - 1; &#x2F;&#x2F; 初始化右指针\n        \n        while (left &lt;&#x3D; right) &#123; &#x2F;&#x2F; 当左指针不大于右指针时循环\n            int mid &#x3D; left + (right - left) &#x2F; 2; &#x2F;&#x2F; 计算中间位置，防止溢出\n\n            if (nums[mid] &#x3D;&#x3D; target) &#123; &#x2F;&#x2F; 如果中间的元素等于目标值\n                return mid; &#x2F;&#x2F; 返回中间位置\n            &#125; else if (nums[mid] &lt; target) &#123; &#x2F;&#x2F; 如果中间元素小于目标值\n                left &#x3D; mid + 1; &#x2F;&#x2F; 将左指针移动到中间位置的右侧，加1以避免循环\n            &#125; else &#123; &#x2F;&#x2F; 如果中间元素大于目标值\n                right &#x3D; mid - 1; &#x2F;&#x2F; 将右指针移动到中间位置的左侧，减1以避免循环\n            &#125;\n        &#125;\n\n        return left; &#x2F;&#x2F; 如果没有找到目标值，返回应该插入的位置\n    &#125;\n&#125;;</code></pre>","categories":[],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"}]}