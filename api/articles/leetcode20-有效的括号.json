{"title":"leetcode20.有效的括号","slug":"leetcode20-有效的括号","date":"2023-12-13T13:13:46.000Z","updated":"2023-12-13T13:15:22.474Z","comments":true,"path":"api/articles/leetcode20-有效的括号.json","excerpt":"题目给定一个只包括 &#39;(&#39;，&#39;)&#39;，&#39;&#123;&#39;，&#39;&#125;&#39;，&#39;[&#39;，&#39;]&#39; 的字符串 s ，判断字符串是否有效。有效字符串需满足：左括号必须用相同类型的右括号闭合。左括号必须以正确的顺序闭合。每个右括号都有一个对应的相同类型的左括号。","covers":null,"content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<ol>\n<li>左括号必须用相同类型的右括号闭合。</li>\n<li>左括号必须以正确的顺序闭合。</li>\n<li>每个右括号都有一个对应的相同类型的左括号。</li>\n</ol>\n<span id=\"more\"></span> \n\n<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;()&quot;\n输出：true</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;()[]&#123;&#125;&quot;\n输出：true</code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;(]&quot;\n输出：false</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= s.length &lt;= 104</code></li>\n<li><code>s</code> 仅由括号 <code>&#39;()[]&#123;&#125;&#39;</code> 组成</li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    bool isValid(string s) &#123;\n        if (s.size() % 2 !&#x3D; 0) return false;\n        stack&lt;char&gt; charStack;\n        for (char c : s) &#123;\n            bool willPush &#x3D; true;\n            if (!charStack.empty()) &#123;\n                char temp &#x3D; charStack.top();\n                switch (temp) &#123;\n                    case &#39;(&#39;:\n                        if (c &#x3D;&#x3D; &#39;)&#39;) &#123;\n                            charStack.pop();\n                            willPush &#x3D; false;\n                        &#125;\n                        break;\n                    case &#39;&#123;&#39;:\n                        if (c &#x3D;&#x3D; &#39;&#125;&#39;) &#123;\n                            charStack.pop();\n                            willPush &#x3D; false;\n                        &#125;\n                        break;\n                    case &#39;[&#39;:\n                        if (c &#x3D;&#x3D; &#39;]&#39;) &#123;\n                            charStack.pop();\n                            willPush &#x3D; false;\n                        &#125;\n                        break;\n                &#125;\n            &#125;\n            if (willPush) &#123;\n                charStack.push(c);\n            &#125;\n        &#125;\n        return charStack.empty(); &#x2F;&#x2F; 可以直接返回栈是否为空，无需使用 if 判断\n    &#125;\n&#125;;</code></pre>\n\n","more":"<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;()&quot;\n输出：true</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;()[]&#123;&#125;&quot;\n输出：true</code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;(]&quot;\n输出：false</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= s.length &lt;= 104</code></li>\n<li><code>s</code> 仅由括号 <code>&#39;()[]&#123;&#125;&#39;</code> 组成</li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    bool isValid(string s) &#123;\n        if (s.size() % 2 !&#x3D; 0) return false;\n        stack&lt;char&gt; charStack;\n        for (char c : s) &#123;\n            bool willPush &#x3D; true;\n            if (!charStack.empty()) &#123;\n                char temp &#x3D; charStack.top();\n                switch (temp) &#123;\n                    case &#39;(&#39;:\n                        if (c &#x3D;&#x3D; &#39;)&#39;) &#123;\n                            charStack.pop();\n                            willPush &#x3D; false;\n                        &#125;\n                        break;\n                    case &#39;&#123;&#39;:\n                        if (c &#x3D;&#x3D; &#39;&#125;&#39;) &#123;\n                            charStack.pop();\n                            willPush &#x3D; false;\n                        &#125;\n                        break;\n                    case &#39;[&#39;:\n                        if (c &#x3D;&#x3D; &#39;]&#39;) &#123;\n                            charStack.pop();\n                            willPush &#x3D; false;\n                        &#125;\n                        break;\n                &#125;\n            &#125;\n            if (willPush) &#123;\n                charStack.push(c);\n            &#125;\n        &#125;\n        return charStack.empty(); &#x2F;&#x2F; 可以直接返回栈是否为空，无需使用 if 判断\n    &#125;\n&#125;;</code></pre>","categories":[],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"}]}