{"title":"Pandas数据处理","slug":"Pandas数据处理","date":"2022-06-08T14:14:08.000Z","updated":"2022-06-09T14:44:26.084Z","comments":true,"path":"api/articles/Pandas数据处理.json","excerpt":"Pandas数据处理​        本文主要写Pandas在数据处理时需要掌握的方法。","covers":null,"content":"<h1 id=\"Pandas数据处理\"><a href=\"#Pandas数据处理\" class=\"headerlink\" title=\"Pandas数据处理\"></a>Pandas数据处理</h1><p>​        本文主要写Pandas在数据处理时需要掌握的方法。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"运算方法\"><a href=\"#运算方法\" class=\"headerlink\" title=\"运算方法\"></a>运算方法</h2><p>​        我们已经提过如何用Pandas有效地筛选数据，也知道一些基本的统计学运算方法，而在这一节中，我们想要关注的是在Pandas中如何运算。</p>\n<h3 id=\"筛选赋值运算\"><a href=\"#筛选赋值运算\" class=\"headerlink\" title=\"筛选赋值运算\"></a>筛选赋值运算</h3><p>​        在之前筛选数据的教学中，我们能成功找出数据中的某个部分，那么针对这个找出的部分，我们对它进行操作也是没问题的。比如下面我们先生成一组数据，然后再对这组数据进行筛选运算。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>\n  data<span class=\"token punctuation\">,</span>\n  index<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcdef\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  columns<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ABCD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">    A   B   C   D\na -12 -11 -10  -9\nb  -8  -7  -6  -5\nc  -4  -3  -2  -1\nd   0   1   2   3\ne   4   5   6   7\nf   8   9  10  11</code></pre>\n\n<p>​        筛选出<code>A</code>的column出来，对<code>A</code>的内容进行乘0的运算。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> <span class=\"token number\">0</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">   A   B   C   D\na  0 -11 -10  -9\nb  0  -7  -6  -5\nc  0  -3  -2  -1\nd  0   1   2   3\ne  0   5   6   7\nf  0   9  10  11</code></pre>\n\n<p>​        同样，在筛选数据教学中我们提到的<code>iloc</code>,<code>loc</code>功能也是可以用来对某数据进行运算的。<code>iloc</code>找的是index，<code>loc</code>找的是标签。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\ndf<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">     A   B   C   D\na  100 -11 -10  -9\nb  200  -7  -6  -5\nc    0  -3  -2  -1\nd    0   1   2   3\ne    0   5   6   7\nf    0   9  10  11</code></pre>\n\n<p>​        这只是赋值，现在你拿这些赋值的方法进行运算试试：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">     A   B   C   D\na  200 -22 -20 -18\nb  200  -7  -6  -5\nc    0  -3  -2  -1\nd    0   1   2   3\ne    0   5   6   7\nf    0   9  10  11</code></pre>\n\n<p>​        试一试条件运算，下面做的就是对于<code>df[&quot;A&quot;]</code>，我要找出<code>df[&quot;A&quot;]</code>中等于0的数，把这些数赋值成-1.</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">     A   B   C   D\na  200 -22 -20 -18\nb  200  -7  -6  -5\nc   -1  -3  -2  -1\nd   -1   1   2   3\ne   -1   5   6   7\nf   -1   9  10  11</code></pre>\n\n<p>​        基本上，pandas 中可以用于筛选数据的方法都可以用来进一步把筛选出来的数据赋予新的值。</p>\n<h3 id=\"Apply方法\"><a href=\"#Apply方法\" class=\"headerlink\" title=\"Apply方法\"></a>Apply方法</h3><p>​        另一种比较方便的批处理数据的方法，我比较喜欢用的是 <code>apply</code>。这是一种可以针对数据做自定义功能的运算。意味着可以简化数据做复杂的功能运算。 上面我们提到的筛选运算，其实是一种简单的运算方式，如果当运算变得复杂，甚至还需要很多局部变量来缓存运算结果，我们就可以尝试把运算过程放置在一个 <code>func</code> 中， 模块化。</p>\n<p>​        比如我定义下面这批数据：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">   A  B\n0  4  9\n1  4  9\n2  4  9</code></pre>\n\n<p>​        如果对<code>df</code>做全量的平方根计算，一般的方法是这样：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        但是如果用<code>apply</code>，就会变成</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">     A    B\n0  2.0  3.0\n1  2.0  3.0\n2  2.0  3.0</code></pre>\n\n<p>​        我们把<code>np.sqrt</code>这个函数当成一个参数传入了<code>apply</code>，看起来好像没什么用，还不如直接使用<code>np.sqrt(df)</code>来的方便。的确这个case写成<code>np.sqrt(df)</code>是要简单点。但是下面这种case呢？</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\ndf<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> result_type<span class=\"token operator\">=</span><span class=\"token string\">'expand'</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">   0  1\n0  8 -9\n1  8 -9\n2  8 -9</code></pre>\n\n<p>​        在这个自定义的函数中，对 <code>df</code> 中的每一行，每行第 0 位乘以 2，第 1 位乘以 -1，我们原本的 col0，就都乘了 2，而 col1 就都乘了-1。提示一下，<code>apply</code> 里面还有不同的参数项可以选，我使用了一个 <code>result_type=&quot;expand&quot;</code> 的配置，让输出的结果可以生成多 column，要不然， 会只生成一个 column，所有的结果都写在这一个 column 里。要不你试试删除刚才写的 <code>result_type</code>，观察一下生成结果的变化。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#df.apply(func, axis=1)</span>\n<span class=\"token number\">0</span>    <span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span>    <span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">2</span>    <span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\ndtype<span class=\"token punctuation\">:</span> <span class=\"token builtin\">object</span></code></pre>\n\n<p>​        顺带提一下，如果 <code>reult_type=&quot;broadcast&quot;</code>，那么原 column 和 index 名会继承到新生成的数据中。仔细对比上下两次的运行，你就能发现不同的表现了。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\ndf<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> result_type<span class=\"token operator\">=</span><span class=\"token string\">'broadcast'</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">   A  B\n0  8 -9\n1  8 -9\n2  8 -9</code></pre>\n\n<p>​        如果只想改一个column：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span>\n  \ndf<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">0    16\n1    16\n2    16</code></pre>\n\n<p>​        想要返回原df，但只修改一个column：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span>\n\ndf<span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">    A  B\n0  16  9\n1  16  9\n2  16  9</code></pre>\n\n<p>​        想对row进行操作时，修改axis的值为0，并且修改func中对应的运算规则:</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span>\n\nlast_row <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"last_row:\\n\"</span><span class=\"token punctuation\">,</span> last_row<span class=\"token punctuation\">)</span>\n\ndf<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> last_row\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\ndf:\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">last_row:\n A    64\nB    36\ndtype: int64\n\ndf:\n     A   B\n0  16   9\n1  16   9\n2  64  36</code></pre>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        想对数据做特殊的运算，甚至想自定义功能，对数据做批量处理，我们今天就介绍了两大类方法，一种是直接索引-运算，一种是利用 pandas 的 apply 来做更为丰富的运算模式。</p>\n<h2 id=\"文字处理\"><a href=\"#文字处理\" class=\"headerlink\" title=\"文字处理\"></a>文字处理</h2><p>​        相比 Python 的科学运算神器 Numpy，Pandas 还有一个特别优势的地方，那就是处理数据库当中的文字信息。 对比 Numpy，Numpy 是一个纯数据处理的库，在数据处理的速度上， 是要优于 Pandas 的。但是在处理数据的丰富度上，比如要处理文字，日期型数据的时候，Pandas 还是有很大优势的。 今天我们就来看看处理文本数据时，Pandas 可以怎么用。</p>\n","more":"<h2 id=\"运算方法\"><a href=\"#运算方法\" class=\"headerlink\" title=\"运算方法\"></a>运算方法</h2><p>​        我们已经提过如何用Pandas有效地筛选数据，也知道一些基本的统计学运算方法，而在这一节中，我们想要关注的是在Pandas中如何运算。</p>\n<h3 id=\"筛选赋值运算\"><a href=\"#筛选赋值运算\" class=\"headerlink\" title=\"筛选赋值运算\"></a>筛选赋值运算</h3><p>​        在之前筛选数据的教学中，我们能成功找出数据中的某个部分，那么针对这个找出的部分，我们对它进行操作也是没问题的。比如下面我们先生成一组数据，然后再对这组数据进行筛选运算。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>\n  data<span class=\"token punctuation\">,</span>\n  index<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcdef\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  columns<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ABCD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">    A   B   C   D\na -12 -11 -10  -9\nb  -8  -7  -6  -5\nc  -4  -3  -2  -1\nd   0   1   2   3\ne   4   5   6   7\nf   8   9  10  11</code></pre>\n\n<p>​        筛选出<code>A</code>的column出来，对<code>A</code>的内容进行乘0的运算。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> <span class=\"token number\">0</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">   A   B   C   D\na  0 -11 -10  -9\nb  0  -7  -6  -5\nc  0  -3  -2  -1\nd  0   1   2   3\ne  0   5   6   7\nf  0   9  10  11</code></pre>\n\n<p>​        同样，在筛选数据教学中我们提到的<code>iloc</code>,<code>loc</code>功能也是可以用来对某数据进行运算的。<code>iloc</code>找的是index，<code>loc</code>找的是标签。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\ndf<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">     A   B   C   D\na  100 -11 -10  -9\nb  200  -7  -6  -5\nc    0  -3  -2  -1\nd    0   1   2   3\ne    0   5   6   7\nf    0   9  10  11</code></pre>\n\n<p>​        这只是赋值，现在你拿这些赋值的方法进行运算试试：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">     A   B   C   D\na  200 -22 -20 -18\nb  200  -7  -6  -5\nc    0  -3  -2  -1\nd    0   1   2   3\ne    0   5   6   7\nf    0   9  10  11</code></pre>\n\n<p>​        试一试条件运算，下面做的就是对于<code>df[&quot;A&quot;]</code>，我要找出<code>df[&quot;A&quot;]</code>中等于0的数，把这些数赋值成-1.</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">     A   B   C   D\na  200 -22 -20 -18\nb  200  -7  -6  -5\nc   -1  -3  -2  -1\nd   -1   1   2   3\ne   -1   5   6   7\nf   -1   9  10  11</code></pre>\n\n<p>​        基本上，pandas 中可以用于筛选数据的方法都可以用来进一步把筛选出来的数据赋予新的值。</p>\n<h3 id=\"Apply方法\"><a href=\"#Apply方法\" class=\"headerlink\" title=\"Apply方法\"></a>Apply方法</h3><p>​        另一种比较方便的批处理数据的方法，我比较喜欢用的是 <code>apply</code>。这是一种可以针对数据做自定义功能的运算。意味着可以简化数据做复杂的功能运算。 上面我们提到的筛选运算，其实是一种简单的运算方式，如果当运算变得复杂，甚至还需要很多局部变量来缓存运算结果，我们就可以尝试把运算过程放置在一个 <code>func</code> 中， 模块化。</p>\n<p>​        比如我定义下面这批数据：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">   A  B\n0  4  9\n1  4  9\n2  4  9</code></pre>\n\n<p>​        如果对<code>df</code>做全量的平方根计算，一般的方法是这样：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        但是如果用<code>apply</code>，就会变成</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">     A    B\n0  2.0  3.0\n1  2.0  3.0\n2  2.0  3.0</code></pre>\n\n<p>​        我们把<code>np.sqrt</code>这个函数当成一个参数传入了<code>apply</code>，看起来好像没什么用，还不如直接使用<code>np.sqrt(df)</code>来的方便。的确这个case写成<code>np.sqrt(df)</code>是要简单点。但是下面这种case呢？</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\ndf<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> result_type<span class=\"token operator\">=</span><span class=\"token string\">'expand'</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">   0  1\n0  8 -9\n1  8 -9\n2  8 -9</code></pre>\n\n<p>​        在这个自定义的函数中，对 <code>df</code> 中的每一行，每行第 0 位乘以 2，第 1 位乘以 -1，我们原本的 col0，就都乘了 2，而 col1 就都乘了-1。提示一下，<code>apply</code> 里面还有不同的参数项可以选，我使用了一个 <code>result_type=&quot;expand&quot;</code> 的配置，让输出的结果可以生成多 column，要不然， 会只生成一个 column，所有的结果都写在这一个 column 里。要不你试试删除刚才写的 <code>result_type</code>，观察一下生成结果的变化。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#df.apply(func, axis=1)</span>\n<span class=\"token number\">0</span>    <span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span>    <span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">2</span>    <span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\ndtype<span class=\"token punctuation\">:</span> <span class=\"token builtin\">object</span></code></pre>\n\n<p>​        顺带提一下，如果 <code>reult_type=&quot;broadcast&quot;</code>，那么原 column 和 index 名会继承到新生成的数据中。仔细对比上下两次的运行，你就能发现不同的表现了。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\ndf<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> result_type<span class=\"token operator\">=</span><span class=\"token string\">'broadcast'</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">   A  B\n0  8 -9\n1  8 -9\n2  8 -9</code></pre>\n\n<p>​        如果只想改一个column：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span>\n  \ndf<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">0    16\n1    16\n2    16</code></pre>\n\n<p>​        想要返回原df，但只修改一个column：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span>\n\ndf<span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">    A  B\n0  16  9\n1  16  9\n2  16  9</code></pre>\n\n<p>​        想对row进行操作时，修改axis的值为0，并且修改func中对应的运算规则:</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span>\n\nlast_row <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"last_row:\\n\"</span><span class=\"token punctuation\">,</span> last_row<span class=\"token punctuation\">)</span>\n\ndf<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> last_row\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\ndf:\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">last_row:\n A    64\nB    36\ndtype: int64\n\ndf:\n     A   B\n0  16   9\n1  16   9\n2  64  36</code></pre>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        想对数据做特殊的运算，甚至想自定义功能，对数据做批量处理，我们今天就介绍了两大类方法，一种是直接索引-运算，一种是利用 pandas 的 apply 来做更为丰富的运算模式。</p>\n<h2 id=\"文字处理\"><a href=\"#文字处理\" class=\"headerlink\" title=\"文字处理\"></a>文字处理</h2><p>​        相比 Python 的科学运算神器 Numpy，Pandas 还有一个特别优势的地方，那就是处理数据库当中的文字信息。 对比 Numpy，Numpy 是一个纯数据处理的库，在数据处理的速度上， 是要优于 Pandas 的。但是在处理数据的丰富度上，比如要处理文字，日期型数据的时候，Pandas 还是有很大优势的。 今天我们就来看看处理文本数据时，Pandas 可以怎么用。</p>","categories":[],"tags":[{"name":"python","path":"api/tags/python.json"},{"name":"机器学习基础","path":"api/tags/机器学习基础.json"}]}