{"title":"leetcode1291.顺次数","slug":"leetcode1291-顺次数","date":"2023-05-17T05:24:23.000Z","updated":"2023-05-17T05:26:05.938Z","comments":true,"path":"api/articles/leetcode1291-顺次数.json","excerpt":"题目我们定义「顺次数」为：每一位上的数字都比前一位上的数字大 1 的整数。请你返回由 [low, high] 范围内所有顺次数组成的 有序 列表（从小到大排序）。","covers":null,"content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>我们定义「顺次数」为：每一位上的数字都比前一位上的数字大 <code>1</code> 的整数。</p>\n<p>请你返回由 <code>[low, high]</code> 范围内所有顺次数组成的 <strong>有序</strong> 列表（从小到大排序）。</p>\n <span id=\"more\"></span>\n\n<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输出：low &#x3D; 100, high &#x3D; 300\n输出：[123,234]</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输出：low &#x3D; 1000, high &#x3D; 13000\n输出：[1234,2345,3456,4567,5678,6789,12345]</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>10 &lt;= low &lt;= high &lt;= 10^9</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ul>\n<li>直接生成符合条件的数字</li>\n</ul>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    vector&lt;int&gt; sequentialDigits(int low, int high) &#123;\n        vector&lt;int&gt; result; &#x2F;&#x2F; 存储符合条件的顺次数结果的向量\n        for (int i &#x3D; 1; i &lt;&#x3D; 9; i++) &#123;\n            int num &#x3D; i; &#x2F;&#x2F; 初始化当前数字为起始位\n            for (int j &#x3D; i + 1; j &lt;&#x3D; 9; j++) &#123;\n                num &#x3D; num * 10 + j; &#x2F;&#x2F; 逐位增加数字\n                if (num &gt;&#x3D; low &amp;&amp; num &lt;&#x3D; high) &#123;\n                    result.push_back(num); &#x2F;&#x2F; 如果生成的数字在给定范围内，则添加到结果向量中\n                &#125;\n            &#125;\n        &#125;\n        sort(result.begin(), result.end()); &#x2F;&#x2F; 对结果向量进行排序\n        return result; &#x2F;&#x2F; 返回最终的结果向量\n    &#125;\n&#125;;</code></pre>\n\n","more":"<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输出：low &#x3D; 100, high &#x3D; 300\n输出：[123,234]</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输出：low &#x3D; 1000, high &#x3D; 13000\n输出：[1234,2345,3456,4567,5678,6789,12345]</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>10 &lt;= low &lt;= high &lt;= 10^9</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ul>\n<li>直接生成符合条件的数字</li>\n</ul>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    vector&lt;int&gt; sequentialDigits(int low, int high) &#123;\n        vector&lt;int&gt; result; &#x2F;&#x2F; 存储符合条件的顺次数结果的向量\n        for (int i &#x3D; 1; i &lt;&#x3D; 9; i++) &#123;\n            int num &#x3D; i; &#x2F;&#x2F; 初始化当前数字为起始位\n            for (int j &#x3D; i + 1; j &lt;&#x3D; 9; j++) &#123;\n                num &#x3D; num * 10 + j; &#x2F;&#x2F; 逐位增加数字\n                if (num &gt;&#x3D; low &amp;&amp; num &lt;&#x3D; high) &#123;\n                    result.push_back(num); &#x2F;&#x2F; 如果生成的数字在给定范围内，则添加到结果向量中\n                &#125;\n            &#125;\n        &#125;\n        sort(result.begin(), result.end()); &#x2F;&#x2F; 对结果向量进行排序\n        return result; &#x2F;&#x2F; 返回最终的结果向量\n    &#125;\n&#125;;</code></pre>","categories":[],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"}]}