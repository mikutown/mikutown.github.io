{"title":"记录Javaの一次考试","slug":"记录Javaの一次考试","date":"2020-04-10T17:39:39.000Z","updated":"2021-01-02T19:24:32.000Z","comments":true,"path":"api/articles/记录Javaの一次考试.json","excerpt":"记录Javaの一次考试今天 考试了<br>试卷以及答案","covers":null,"content":"<h1 id=\"记录Javaの一次考试\"><a href=\"#记录Javaの一次考试\" class=\"headerlink\" title=\"记录Javaの一次考试\"></a>记录Javaの一次考试</h1><p>今天 考试了<br>试卷以及答案</p>\n<span id=\"more\"></span>\n\n<p>不定选择题（30分）<br>1．下面程序哪个语句是正确的(   )<br>A.  byte a&#x3D;0,b&#x3D;3; byte c &#x3D;a+b;  默认int<br>B.  short s &#x3D;23; s&#x3D;s+12; 默认int<br>✅C.  short s&#x3D;23; s+&#x3D;12; 默认（short)(s &#x3D; s+12)<br>D.  float f &#x3D; 23+23.23;缺少f后缀</p>\n<ol start=\"2\">\n<li>下面程序的运行后,结果正确的是：（）<br>int a&#x3D;1,b&#x3D;2;<br>int c&#x3D;(a+b&gt;3?a++:++b);     a+b&#x3D;3 执行++b语句 b &#x3D; b+1 -&gt;b &#x3D; 3    a保持不变  c &#x3D; 3<br>A.  a&#x3D;2,b&#x3D;3    ✅B.  a&#x3D;1,b&#x3D;3       C.  a&#x3D;1,b&#x3D;2           D.  c&#x3D;2<br>3.下面程序执行的结果<br>for(int  i&#x3D;1;i&lt;&#x3D;10;i++){<br>if (i%3&#x3D;&#x3D;0) {<br>   continue; }<br>System.out.println(“java基础”);<br>}<br>在屏幕上打印几次“java基础”?(  )<br>3 6 9不打印 1，2，4，5，7，8，10 共七次打印<br>A. 5  B. 6    ✅C. 7    D. 8</li>\n<li>阅读下面代码段：<br>classDemo{<br>　　public static void main (String[] args){<br>   int[] arr &#x3D; new int[10];<br>　　  System.out.println(arr[1]);<br>　　}}<br>执行结果正确的说法是( )            数组未初始化 默认为0<br>A.  编译时将产生错误               B.  编译时正确，运行时将产生错误<br>C.✅  输出零                         D.  输出空</li>\n<li>和下面代码能完成相同的选项是（）<br>int i&#x3D;1;<br>intsum&#x3D;0;<br>while(i&lt;&#x3D;100){<br>if(i%2&#x3D;&#x3D;0){<br>   sum&#x3D;sum+i;<br>}<br>i++;<br>}     此代码为1到100所有的偶数求和<br>A.  for (int x&#x3D;1; x&lt;&#x3D;100;x++){ sum&#x3D;sum+x;}              B✅.  for (int x &#x3D;0; x&lt;&#x3D;100;x+&#x3D;2){ sum&#x3D;sum+x;}<br>C.  for (int x &#x3D;1; x&lt;&#x3D;100;x+&#x3D;2){ sum&#x3D;sum+x;}             D.上述全对</li>\n<li>以下对继承的描述错误的是（）<br>A)✅ Java中的继承允许一个子类继承多个父类    java不允许多继承<br>B) 父类更具有通用性，子类更具体        正确<br>C) Java中的继承存在着传递性     正确<br>D) 当实例化子类时会递归调用父类中的构造方法    正确<br>&#x2F;&#x2F;对象创建的过程<br>&#x2F;&#x2F; 0.按照1~5顺序构造父类，但依次先类加载所有类型<br>&#x2F;&#x2F; 1.类加载:静态代码块<br>&#x2F;&#x2F; 2.默认初始化成员变量<br>&#x2F;&#x2F; 3.显式初始化成员变量<br>&#x2F;&#x2F; 4.实例代码块<br>&#x2F;&#x2F; 5.构造方法</li>\n<li>下面哪些是合法的标志符（）<br>A.  2variable（数字不能做开头）    B✅.  variable2     C✅.  what$     D✅.  <em>3</em></li>\n<li>下列方法中能和方法int max(int  a, int  b, double  c)构成重载关系的是(  )<br>函数的重载就是在同一个类中允许同时存在一个以上的同名函数，只要它们的参数个数或类型不同即可。<br>在同一个类中可以定义多个同名方法—方法名重载(overload)。<br>A.  double max(int  a, int  b, double c)                  B✅.  void max(int  a, double  c, int b)<br>C✅.  int max(double a, int  b)                           D.  int max(int  x, int  y, double z)</li>\n<li>下面关于循环描述正确的是（）<br>A✅.  while循环先判断循环条件，后执行循环操作         B.  while 至少会执行一次<br>C.  do-while先进行循环条件判断，后执行循环操作       D.✅ do-while循环至少执行一次，后进行循环判断</li>\n<li>以下关于final关键字说法错误的是（）<br>A✅) final是java中的修饰符，可以修饰类、接口、抽象类、方法和属性<br>final关键字不能用来抽象类和接口。<br>B) final修饰的类肯定不能被继承<br>C✅) final修饰的方法不能被重载<br>方法可以被重载 不能被重写<br>D) final修饰的变量不允许被再次赋值</li>\n<li>根据下面的代码，<br>String s &#x3D; null;会抛出NullPointerException异常的有（）<br>A✅) if( (s!&#x3D;null) &amp; (s.length()&gt;0) )                          B) if( (s!&#x3D;null) &amp; &amp; (s.length()&gt;0) )<br>C✅) if( (s&#x3D;&#x3D;null) | (s.length()&#x3D;&#x3D;0) )                         D) if( (s&#x3D;&#x3D;null) || (s.length()&#x3D;&#x3D;0) )<br>考察短路</li>\n<li>以下关于对象序列化描述正确的是（  ）<br>A) 使用FileOutputStream可以将对象进行传输<br>不行！</li>\n</ol>\n<p>B✅) 使用PrintWriter可以将对象进行传输<br>C✅) 使用ObjectOutputStream类完成对象存储，使用ObjectInputStream类完成对象读取<br>D✅) 对象序列化的所属类需要实现Serializable接口</p>\n<ol start=\"13\">\n<li>下面是有关子类继承父类构造函数的描述，其中正确的是：(  )<br>A. 创建子类的对象时，先调用子类自己的构造函数，然后调用父类的构造函数。  错误<br>&#x2F;&#x2F;对象创建的过程<br>&#x2F;&#x2F; 0.按照1~5顺序构造父类，但依次先类加载所有类型<br>&#x2F;&#x2F; 1.类加载:静态代码块<br>&#x2F;&#x2F; 2.默认初始化成员变量<br>&#x2F;&#x2F; 3.显式初始化成员变量<br>&#x2F;&#x2F; 4.实例代码块<br>&#x2F;&#x2F; 5.构造方法</li>\n</ol>\n<p>B. 子类可以不调用父类的构造函数  错误<br>C✅. 子类必须通过super()关键字调用父类的构造函数<br>D. 子类可以继承父类的构造函数。 错误</p>\n<ol start=\"14\">\n<li>构造函数何时被调用(    )<br>A、类定义时               B✅.创建对象时<br>C.调用对象方法时           D.使用对象的变量时 </li>\n<li>函数重载是指 (    )<br> A✅、两个或两个以上的函数取相同的函数名，但形参的个数或类型不同<br> B、两个以上的函数取相同的名字和具有相同的参数个数，但形参的类型可以不同<br> C、两个以上的函数名字不同，但形参的个数或类型相同<br> D、两个以上的函数取相同的函数名，并且函数的返回类型相同</li>\n</ol>\n<p>判断题（T&#x2F;F）（10分）</p>\n<ol>\n<li>HashMap集合不允许存储重复键.           ✅</li>\n<li>在Java中声明变量时可以不指定一个类型。      ❎ java是强语言</li>\n<li>数组有length（）这个方法。    ❎ 数组只有length属性</li>\n<li>Object是Java中所有类的共同父类。   ✅</li>\n<li>一个数组可以存放不同类型的数值。   ❎ 只能存放同一个类型的数值</li>\n<li>对象是类的实例.     ✅</li>\n<li>被final修饰后的类，只能指向一个对象，地址不能再更改，对象内部的成员也不能修改。  ❎ 对象内部的成员可以修改</li>\n<li>静态变量是被同一个类的所有实例所共享的。     ✅</li>\n<li>Java中所有的I&#x2F;O都是通过流来实现的。   ✅</li>\n<li>static关键字可以修饰成员变量，也可以修饰局部变量。   ❎ static不能修饰局部变量<br>填空题（10分）</li>\n<li>一个long型数据在内存占( 8 )个字节。  </li>\n<li>表达式19&#x2F;3*3+19%3的值是( 19 )。   18+1&#x3D;19</li>\n<li>若a和b都是整数，则生成[a, b]范围内随机整数的表达式是(          Math.Random()*(b-a+1)+a       )</li>\n<li>若char型变量c存储的是一个大写字母，则输出其对应小写字母的语句是(   System.out.println(c+32)       )</li>\n<li>面向对象特点是（ 封装 ）、（ 继承  ）、（  多态  ）。</li>\n<li>JVM运行java分为（ 编译  ）、（ 运行 ）两个阶段。</li>\n<li>使用继承关键字是（ extends  ）。</li>\n<li>Exception分为（ 运行时异常 ）、（ 编译时异常  ）两大类。</li>\n<li>所有字节输出流的超类是（ InputStream ），所有字节输入流的超类是（  OutputStream  ）。</li>\n<li>所有集合的父接口是（ Collections ）。<br>解答题（20分）<br>1.”&#x3D;&#x3D;”和”equals”的区别。<br>&#x3D;&#x3D; 比较的是变量(栈)内存中存放的对象的(堆)内存地址，用来判断两个对象的地址是否相同，即是否是指相同一个对象。比较的是真正意义上的指针操作。<br>equals用来比较的是两个对象的内容是否相等，由于所有的类都是继承自java.lang.Object类的，所以适用于所有对象，如果没有对该方法进行覆盖的话，调用的仍然是Object类中的方法，而Object中的equals方法返回的却是&#x3D;&#x3D;的判断。<br>2.简单说明函数重载和函数重写。<br>Override是覆盖的意思，也就是重写，它与返回值类型无关，只看参数列表;<br>Overload是重载的意思，表示在同一个类中，允许存在一个以上的同名函数，只要他们的参数个数或者参数类型不同即可;<br>两者不同主要体现在：目的不同、范围不同、参数要求不同、返回类型不同。</li>\n</ol>\n<ul>\n<li>同:overload用于增加程序的可读性(做法不同,但是做的同一事情)。 override用于提供其超级类已经提供的方法的特定实现。</li>\n<li>同:overload 在相同的类范围内内执行。 override发生在两类具有继承（继承）的关系。</li>\n<li>参数要求不同:overload参数必须不同。 override参数必须相同。</li>\n<li>返回类型不同:overload中可以相同或不同。 override必须是相同的或协变的。<br>3.请说出作用域public，private，protected，以及不写时的区别<br>1、public： 所修饰的类、变量、方法，在内外包均具有访问权限；<br>2、protected： 这种权限是为继承而设计的，protected所修饰的成员，对所有子类是可访问的，但只对同包的类是可访问的，对外包的非子类是不可以访问；<br>3、包访问权限（default）： 只对同包的类具有访问的权限，外包的所有类都不能访问；  不写的时候<br>4、private： 私有的权限，只对本类的方法可以使用；</li>\n</ul>\n<ol start=\"4\">\n<li>String s &#x3D; “Hello”;s &#x3D; s + “ world!”;这两行代码执行后，原始的String对象中的内容到底变了没有？String s1&#x3D;new String(“java”)创建了几个对象？<br>1）原始的内容没有改变 JVM在堆内存中创建了一个新的“Helloworld”对象，原来的“Hello”对象成为废弃对象<br>2）如果之前的代码没有新建内容为“java”的对象在堆内存中，则创建了两个对象，否则创建了一个对象。<br>5.java的基本数据类型有哪些？<br>byte,short,int,long,float,double,boolean,char</li>\n<li>final, finally, finalize的区别。<br>final：Java中关键字，修饰符。<br> 如果一个类被声明为final，则意味着该类不能被继承，无法派生出新的子类。所以，一个类不能同时被abstract和final修饰。<br>如果将变量或者方法声明为final，可以保证变量和方法在以后的使用中，不会被修改。被final修饰的变量必须在声明时赋初值，在以后的引用中只能读取，不能修改。被final修饰的方法只能使用，不能被重写。<br>finally：表示一种异常处理机制。<br> finally是对Java异常处理模型的最佳补充。finally结构使代码总会执行，而不管无异常发生。使用finally可以维护对象的内部状态，并可以清理非内存资源。特别是在关闭数据库连接这方面，如果程序员把数据库连接的close()方法放到finally中，就会大大降低程序出错的几率。</li>\n</ol>\n<p>finalize: Java中的Object类的一个方法名。<br>    Java中，垃圾收集器在将对象从内存中清除出去前，需要使用finalize()方法做一些必要的清理工作。这个方法是由垃圾收集器在确定该对象没有被引用时，对该对象调用**finalize()**方法。因为该方法是在Object类中定义的，因此所有的类都继承了该方法。子类可以覆盖该方法来整理系统资源或者执行其他的清理工作。</p>\n<ol start=\"7\">\n<li><p>实现一个线程的两种方式；调用start()方法和run()方法有什么区别？<br>1)1.通过继承Thread类实现线程<br> 2.通过实现Runnable接口实现线程<br>2）start()方法是开启了一个线程，会自动调用run()方法，此时程序会自动往下执行，此时不等start()方法执行完。<br>如果线程直接调用run()方法，则程序会等run()方法执行完再往下执行。</p>\n</li>\n<li><p>说出ArrayList,Vector, LinkedList的存储性能和特性<br>1）ArrayList和Vector都是数组作为底层，查找比较方便，不擅长大量的添加和删除。Vector与ArrayList相比线程安全<br>2）LinkedList是以链表作为底层，添加删除比较方便，查找效率较低。</p>\n</li>\n<li><p>什么是java序列化，如何实现java序列化？<br>1）序列化：把对象转换为字节序列的过程称为对象的序列化。<br>2）实现Serializable接口，再使用ObjectOutputStream类 即可序列化java类</p>\n</li>\n<li><p>说说&amp;和&amp;&amp;的区别。<br>1.&amp;和&amp;&amp;都可以用作逻辑与的运算符，表示逻辑与（and），当运算符两边的表达式的结果都为true时，整个运算结果才为true，否则，只要有一方为false，则结果为false。<br>2.&amp;&amp;还具有短路的功能，即如果第一个表达式为false，则不再计算第二个表达式，例如，对于if(str !&#x3D; null &amp;&amp; !str.equals(“”))表达式，当str为null时，后面的表达式不会执行，所以不会出现NullPointerException如果将&amp;&amp;改为&amp;，则会抛出NullPointerException异常。If(x&#x3D;&#x3D;33 &amp; ++y&gt;0) y会增长，If(x&#x3D;&#x3D;33 &amp;&amp; ++y&gt;0)不会增长<br>3.&amp;还可以用作位运算符，当&amp;操作符两边的表达式不是boolean类型时，&amp;表示按位与操作，我们通常使用0x0f来与一个整数进行&amp;运算，来获取该整数的最低4个bit位，例如，0x31 &amp; 0x0f的结果为0x01。<br>编程题（30分）<br>1.Account.java文件中定义了一个银行帐户类Account，其中包括了帐户名属性accountName、存款余额属性amount、存款方法deposit（double money）。阅读并理解这个类，并为其增加一个“取款”方法withdraw()：当存款余额大于取款金额时，执行取款修改余额；当存款余额小于取款金额时，不执行取款；以返回值0表示取款成功，返回值1表示取款不成功。<br>public class Account {<br>private String accountName;<br>private double amount;<br>public void deposit(double money){<br>if(money&gt;0){<br>    this.amount+&#x3D;money;<br>}<br>}</p>\n<p>public int withdraw(double money){<br>if(money&lt;amount){<br>    amount&#x3D;amount-money;<br>    return 0;<br>}<br>else{<br>    return 1;<br>}<br>}</p>\n<p>public Account(String accountName, double amount) {<br>this.accountName &#x3D; accountName;<br>this.amount &#x3D; amount;<br>}</p>\n<p>public Account() {<br>}<br>}<br>2.复制一个文件到另一个目录。<br>public class Copy {<br>public static void main(String[] args) throws IOException {<br>&#x2F;&#x2F; 1.创建流对象<br>&#x2F;&#x2F; 1.1 指定数据源<br>FileInputStream fis &#x3D; new FileInputStream(“D:\\test.jpg”);<br>&#x2F;&#x2F; 1.2 指定目的地<br>FileOutputStream fos &#x3D; new FileOutputStream(“test_copy.jpg”);<br>&#x2F;&#x2F; 2.读写数据<br>&#x2F;&#x2F; 2.1 定义数组<br>byte[] b &#x3D; new byte[1024];<br>&#x2F;&#x2F; 2.2 定义长度<br>int len;<br>&#x2F;&#x2F; 2.3 循环读取<br>while ((len &#x3D; fis.read(b))!&#x3D;‐1) {<br>    &#x2F;&#x2F; 2.4 写出数据<br>    fos.write(b, 0 , len);<br>}<br>&#x2F;&#x2F; 3.关闭资源<br>fos.close();<br>fis.close();<br>}<br>}<br>3.键入一个字符串，求其中每个字符出现的次数，并按顺序打印，打印格式如下：<br>a:5<br>b:1<br>f:3<br>…<br>public class Test1 {<br>public static void main(String[] args) {<br>Scanner sc &#x3D; new Scanner(System.in);<br>String s;<br>System.out.print(“请输入字符串”);<br>s &#x3D; sc.nextLine();<br>Map&lt;Character,Integer&gt; map&#x3D;new TreeMap&lt;&gt;();<br>char[] chars &#x3D; s.toCharArray();<br>for(int i&#x3D;0;i&lt;chars.length;i++){<br>    if(map.get(chars[i])&#x3D;&#x3D;null){<br>        map.put(chars[i],1);<br>    }else{<br>        map.put(chars[i],map.get(chars[i])+1);<br>    }<br>}<br>Set&lt;Map.Entry&lt;Character, Integer&gt;&gt; entries &#x3D; map.entrySet();<br>Iterator&lt;Map.Entry&lt;Character, Integer&gt;&gt; iterator &#x3D; entries.iterator();<br>while (iterator.hasNext()){<br>    Map.Entry&lt;Character,Integer&gt; entry&#x3D;iterator.next();<br>    System.out.println(entry.getKey()+”:”+entry.getValue());<br>}<br>}<br>}</p>\n</li>\n</ol>\n<h3 id=\"1-作业评讲：\"><a href=\"#1-作业评讲：\" class=\"headerlink\" title=\"1. 作业评讲：\"></a>1. 作业评讲：</h3><pre><code>* 数组的第一项是a[0]\n* if(b=true) 太繁琐 直接写成 if(b)\n* 求平均分要记得将sum设置成double 求的时候\n</code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">double</span> avg <span class=\"token operator\">=</span> sum <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length<span class=\"token operator\">/</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<hr>\n<h3 id=\"2-讲解了课堂练习：\"><a href=\"#2-讲解了课堂练习：\" class=\"headerlink\" title=\"2. 讲解了课堂练习：\"></a>2. 讲解了课堂练习：</h3><p>   1)输入一串字符串，输出里面有多少个a，多少个b，多少个c…<br>先用了测试类 junit4是不支持Scanner的 所以不能用test，要用main方法<br>可以通过’c’-‘a’的差值 得到索引值，通过int数组进行获取</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//System.in默认的关联就是键盘</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入一串小写字母：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//以回车符号作为结束的标志</span>\n       <span class=\"token comment\">//可以为了测试方便 先把str的值写死，省去输入字符串的时间</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> a <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span>\n           arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">char</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n               <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">+</span> <span class=\"token string\">\"的个数：\"</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span></code></pre>\n\n<hr>\n<p>2）输入1<del>200的整数，5个奇数，5个偶数 不能重复 奇数偶数不能超过5个的上限 最后打印结果 A</del>Z a~z<br>提示信息：<br>    继续输入<br>结果例子：<br>您输入结果：<br>奇数： 1 5 7 65（A） 17*  素数<br>自己写的版本：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test2</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSu</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span> isSuSu <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">%</span>i<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    isSuSu <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">&#123;</span>isSuSu <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> isSuSu<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> <span class=\"token function\">isChar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span> ss <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ss<span class=\"token operator\">></span><span class=\"token char\">'a'</span><span class=\"token operator\">&amp;&amp;</span>ss<span class=\"token operator\">&lt;</span><span class=\"token char\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>ss<span class=\"token operator\">></span><span class=\"token char\">'A'</span><span class=\"token operator\">&amp;&amp;</span>ss<span class=\"token operator\">&lt;</span><span class=\"token char\">'Z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> ss<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            ss <span class=\"token operator\">=</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ss<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isJi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span> isJiJi <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            isJiJi <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">&#123;</span>\n            isJiJi <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> isJiJi<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isContain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span> isContains <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> aa<span class=\"token operator\">:</span>\n             arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>aa<span class=\"token operator\">==</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                isContains <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> isContains<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printNum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">:</span>\n                arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> a<span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isSu</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                str <span class=\"token operator\">+=</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isChar</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token char\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                str <span class=\"token operator\">+=</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token function\">isChar</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> jiShu<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> ouShu<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> indexJi <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> indexOu <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入1~200的数字:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> input <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>input<span class=\"token operator\">&lt;=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>indexOu<span class=\"token operator\">>=</span><span class=\"token number\">5</span><span class=\"token operator\">||</span><span class=\"token function\">isContain</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span>ouShu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"偶数数量已满5个或者有重复数字!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                       <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token punctuation\">&#125;</span>\n                    ouShu<span class=\"token punctuation\">[</span>indexOu<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">;</span>\n                    indexOu<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>indexJi<span class=\"token operator\">>=</span><span class=\"token number\">5</span><span class=\"token operator\">||</span><span class=\"token function\">isContain</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span>jiShu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"奇数数量已满5个或者有重复数字!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    jiShu<span class=\"token punctuation\">[</span>indexJi<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">;</span>\n                    indexJi<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你不认识字吗？\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>indexJi<span class=\"token operator\">>=</span><span class=\"token number\">5</span><span class=\"token operator\">&amp;&amp;</span>indexOu<span class=\"token operator\">>=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//输入部分</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您输入结果：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"奇数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printNum</span><span class=\"token punctuation\">(</span>jiShu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"偶数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printNum</span><span class=\"token punctuation\">(</span>ouShu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><strong>写代码之前一定要分析好需求和设计好写法 多用模块化</strong></p>\n<h2 id=\"面试题：\"><a href=\"#面试题：\" class=\"headerlink\" title=\"面试题：\"></a>面试题：</h2><ol>\n<li>一个类与它的对象之间是什么关系？<br>答：类是对象的抽象，是一个拥有静态属性（如姓名，年龄）和动态属性（如睡觉跑步）的一个模板</li>\n<li>如何定义一个类，由哪些部分组成，各个部分的作用是什么？<br>答：语法格式：<br>[&lt; 修饰符&gt;] class &lt; 类名&gt;<br>{<br> [&lt;属性声明&gt;]<br> [&lt;构造器声明&gt;]<br> [&lt;方法声明&gt;]<br>}<br>修饰符是用来做访问控制，类名就是类的名字，属性声明是类的静态属性，方法声明是类的动态属性。<br>说明：修饰符public：类可以被任意访问，类的正文要用{  }括起来</li>\n<li>如何创建一个对象，如何使用该对象？<br>答：&lt; 类名&gt; [对象名] &#x3D; new &lt;类名&gt; [&lt;构造方法&gt;]<br>通过【对象名】.[属性名] 或者 [对象名].[方法名]进行使用</li>\n<li>局部变量和成员变量的区别？<br>答：A:在类中的位置不同<br>成员变量：在类中方法外<br>局部变量：在方法定义中或者方法声明上<br>B:在内存中的位置不同<br>成员变量：在堆内存<br>局部变量：在栈内存<br>C:生命周期不同<br>成员变量：随着对象的创建而存在，随着对象的消失而消失<br>局部变量：随着方法的调用而存在，随着方法的调用完毕而消失<br>D:初始化值不同<br>成员变量：有默认初始化值<br>局部变量：没有默认初始化值，必须定义，赋值，然后才能使用。<br>注意事项：<br>局部变量名称可以和成员变量名称一样，在方法中使用的时候，采用的是就近原则。</li>\n<li>构造方法和成员方法的区别？<br>答：构造方法是初始化一个类的对象时候调用的，它没有返回值，而且名字必须与类的名字一样，而成员函数是由类对象主动调用的，使用点操作符，它有返回值<br>构造函数是赋予对象”生命特征”的,成员方法则是对象所具有的”行为,能力”<br>构造函数只有在建立对象时由系统调用的,其他任何时候你都别指望用他.</li>\n</ol>\n","more":"<p>不定选择题（30分）<br>1．下面程序哪个语句是正确的(   )<br>A.  byte a&#x3D;0,b&#x3D;3; byte c &#x3D;a+b;  默认int<br>B.  short s &#x3D;23; s&#x3D;s+12; 默认int<br>✅C.  short s&#x3D;23; s+&#x3D;12; 默认（short)(s &#x3D; s+12)<br>D.  float f &#x3D; 23+23.23;缺少f后缀</p>\n<ol start=\"2\">\n<li>下面程序的运行后,结果正确的是：（）<br>int a&#x3D;1,b&#x3D;2;<br>int c&#x3D;(a+b&gt;3?a++:++b);     a+b&#x3D;3 执行++b语句 b &#x3D; b+1 -&gt;b &#x3D; 3    a保持不变  c &#x3D; 3<br>A.  a&#x3D;2,b&#x3D;3    ✅B.  a&#x3D;1,b&#x3D;3       C.  a&#x3D;1,b&#x3D;2           D.  c&#x3D;2<br>3.下面程序执行的结果<br>for(int  i&#x3D;1;i&lt;&#x3D;10;i++){<br>if (i%3&#x3D;&#x3D;0) {<br>   continue; }<br>System.out.println(“java基础”);<br>}<br>在屏幕上打印几次“java基础”?(  )<br>3 6 9不打印 1，2，4，5，7，8，10 共七次打印<br>A. 5  B. 6    ✅C. 7    D. 8</li>\n<li>阅读下面代码段：<br>classDemo{<br>　　public static void main (String[] args){<br>   int[] arr &#x3D; new int[10];<br>　　  System.out.println(arr[1]);<br>　　}}<br>执行结果正确的说法是( )            数组未初始化 默认为0<br>A.  编译时将产生错误               B.  编译时正确，运行时将产生错误<br>C.✅  输出零                         D.  输出空</li>\n<li>和下面代码能完成相同的选项是（）<br>int i&#x3D;1;<br>intsum&#x3D;0;<br>while(i&lt;&#x3D;100){<br>if(i%2&#x3D;&#x3D;0){<br>   sum&#x3D;sum+i;<br>}<br>i++;<br>}     此代码为1到100所有的偶数求和<br>A.  for (int x&#x3D;1; x&lt;&#x3D;100;x++){ sum&#x3D;sum+x;}              B✅.  for (int x &#x3D;0; x&lt;&#x3D;100;x+&#x3D;2){ sum&#x3D;sum+x;}<br>C.  for (int x &#x3D;1; x&lt;&#x3D;100;x+&#x3D;2){ sum&#x3D;sum+x;}             D.上述全对</li>\n<li>以下对继承的描述错误的是（）<br>A)✅ Java中的继承允许一个子类继承多个父类    java不允许多继承<br>B) 父类更具有通用性，子类更具体        正确<br>C) Java中的继承存在着传递性     正确<br>D) 当实例化子类时会递归调用父类中的构造方法    正确<br>&#x2F;&#x2F;对象创建的过程<br>&#x2F;&#x2F; 0.按照1~5顺序构造父类，但依次先类加载所有类型<br>&#x2F;&#x2F; 1.类加载:静态代码块<br>&#x2F;&#x2F; 2.默认初始化成员变量<br>&#x2F;&#x2F; 3.显式初始化成员变量<br>&#x2F;&#x2F; 4.实例代码块<br>&#x2F;&#x2F; 5.构造方法</li>\n<li>下面哪些是合法的标志符（）<br>A.  2variable（数字不能做开头）    B✅.  variable2     C✅.  what$     D✅.  <em>3</em></li>\n<li>下列方法中能和方法int max(int  a, int  b, double  c)构成重载关系的是(  )<br>函数的重载就是在同一个类中允许同时存在一个以上的同名函数，只要它们的参数个数或类型不同即可。<br>在同一个类中可以定义多个同名方法—方法名重载(overload)。<br>A.  double max(int  a, int  b, double c)                  B✅.  void max(int  a, double  c, int b)<br>C✅.  int max(double a, int  b)                           D.  int max(int  x, int  y, double z)</li>\n<li>下面关于循环描述正确的是（）<br>A✅.  while循环先判断循环条件，后执行循环操作         B.  while 至少会执行一次<br>C.  do-while先进行循环条件判断，后执行循环操作       D.✅ do-while循环至少执行一次，后进行循环判断</li>\n<li>以下关于final关键字说法错误的是（）<br>A✅) final是java中的修饰符，可以修饰类、接口、抽象类、方法和属性<br>final关键字不能用来抽象类和接口。<br>B) final修饰的类肯定不能被继承<br>C✅) final修饰的方法不能被重载<br>方法可以被重载 不能被重写<br>D) final修饰的变量不允许被再次赋值</li>\n<li>根据下面的代码，<br>String s &#x3D; null;会抛出NullPointerException异常的有（）<br>A✅) if( (s!&#x3D;null) &amp; (s.length()&gt;0) )                          B) if( (s!&#x3D;null) &amp; &amp; (s.length()&gt;0) )<br>C✅) if( (s&#x3D;&#x3D;null) | (s.length()&#x3D;&#x3D;0) )                         D) if( (s&#x3D;&#x3D;null) || (s.length()&#x3D;&#x3D;0) )<br>考察短路</li>\n<li>以下关于对象序列化描述正确的是（  ）<br>A) 使用FileOutputStream可以将对象进行传输<br>不行！</li>\n</ol>\n<p>B✅) 使用PrintWriter可以将对象进行传输<br>C✅) 使用ObjectOutputStream类完成对象存储，使用ObjectInputStream类完成对象读取<br>D✅) 对象序列化的所属类需要实现Serializable接口</p>\n<ol start=\"13\">\n<li>下面是有关子类继承父类构造函数的描述，其中正确的是：(  )<br>A. 创建子类的对象时，先调用子类自己的构造函数，然后调用父类的构造函数。  错误<br>&#x2F;&#x2F;对象创建的过程<br>&#x2F;&#x2F; 0.按照1~5顺序构造父类，但依次先类加载所有类型<br>&#x2F;&#x2F; 1.类加载:静态代码块<br>&#x2F;&#x2F; 2.默认初始化成员变量<br>&#x2F;&#x2F; 3.显式初始化成员变量<br>&#x2F;&#x2F; 4.实例代码块<br>&#x2F;&#x2F; 5.构造方法</li>\n</ol>\n<p>B. 子类可以不调用父类的构造函数  错误<br>C✅. 子类必须通过super()关键字调用父类的构造函数<br>D. 子类可以继承父类的构造函数。 错误</p>\n<ol start=\"14\">\n<li>构造函数何时被调用(    )<br>A、类定义时               B✅.创建对象时<br>C.调用对象方法时           D.使用对象的变量时 </li>\n<li>函数重载是指 (    )<br> A✅、两个或两个以上的函数取相同的函数名，但形参的个数或类型不同<br> B、两个以上的函数取相同的名字和具有相同的参数个数，但形参的类型可以不同<br> C、两个以上的函数名字不同，但形参的个数或类型相同<br> D、两个以上的函数取相同的函数名，并且函数的返回类型相同</li>\n</ol>\n<p>判断题（T&#x2F;F）（10分）</p>\n<ol>\n<li>HashMap集合不允许存储重复键.           ✅</li>\n<li>在Java中声明变量时可以不指定一个类型。      ❎ java是强语言</li>\n<li>数组有length（）这个方法。    ❎ 数组只有length属性</li>\n<li>Object是Java中所有类的共同父类。   ✅</li>\n<li>一个数组可以存放不同类型的数值。   ❎ 只能存放同一个类型的数值</li>\n<li>对象是类的实例.     ✅</li>\n<li>被final修饰后的类，只能指向一个对象，地址不能再更改，对象内部的成员也不能修改。  ❎ 对象内部的成员可以修改</li>\n<li>静态变量是被同一个类的所有实例所共享的。     ✅</li>\n<li>Java中所有的I&#x2F;O都是通过流来实现的。   ✅</li>\n<li>static关键字可以修饰成员变量，也可以修饰局部变量。   ❎ static不能修饰局部变量<br>填空题（10分）</li>\n<li>一个long型数据在内存占( 8 )个字节。  </li>\n<li>表达式19&#x2F;3*3+19%3的值是( 19 )。   18+1&#x3D;19</li>\n<li>若a和b都是整数，则生成[a, b]范围内随机整数的表达式是(          Math.Random()*(b-a+1)+a       )</li>\n<li>若char型变量c存储的是一个大写字母，则输出其对应小写字母的语句是(   System.out.println(c+32)       )</li>\n<li>面向对象特点是（ 封装 ）、（ 继承  ）、（  多态  ）。</li>\n<li>JVM运行java分为（ 编译  ）、（ 运行 ）两个阶段。</li>\n<li>使用继承关键字是（ extends  ）。</li>\n<li>Exception分为（ 运行时异常 ）、（ 编译时异常  ）两大类。</li>\n<li>所有字节输出流的超类是（ InputStream ），所有字节输入流的超类是（  OutputStream  ）。</li>\n<li>所有集合的父接口是（ Collections ）。<br>解答题（20分）<br>1.”&#x3D;&#x3D;”和”equals”的区别。<br>&#x3D;&#x3D; 比较的是变量(栈)内存中存放的对象的(堆)内存地址，用来判断两个对象的地址是否相同，即是否是指相同一个对象。比较的是真正意义上的指针操作。<br>equals用来比较的是两个对象的内容是否相等，由于所有的类都是继承自java.lang.Object类的，所以适用于所有对象，如果没有对该方法进行覆盖的话，调用的仍然是Object类中的方法，而Object中的equals方法返回的却是&#x3D;&#x3D;的判断。<br>2.简单说明函数重载和函数重写。<br>Override是覆盖的意思，也就是重写，它与返回值类型无关，只看参数列表;<br>Overload是重载的意思，表示在同一个类中，允许存在一个以上的同名函数，只要他们的参数个数或者参数类型不同即可;<br>两者不同主要体现在：目的不同、范围不同、参数要求不同、返回类型不同。</li>\n</ol>\n<ul>\n<li>同:overload用于增加程序的可读性(做法不同,但是做的同一事情)。 override用于提供其超级类已经提供的方法的特定实现。</li>\n<li>同:overload 在相同的类范围内内执行。 override发生在两类具有继承（继承）的关系。</li>\n<li>参数要求不同:overload参数必须不同。 override参数必须相同。</li>\n<li>返回类型不同:overload中可以相同或不同。 override必须是相同的或协变的。<br>3.请说出作用域public，private，protected，以及不写时的区别<br>1、public： 所修饰的类、变量、方法，在内外包均具有访问权限；<br>2、protected： 这种权限是为继承而设计的，protected所修饰的成员，对所有子类是可访问的，但只对同包的类是可访问的，对外包的非子类是不可以访问；<br>3、包访问权限（default）： 只对同包的类具有访问的权限，外包的所有类都不能访问；  不写的时候<br>4、private： 私有的权限，只对本类的方法可以使用；</li>\n</ul>\n<ol start=\"4\">\n<li>String s &#x3D; “Hello”;s &#x3D; s + “ world!”;这两行代码执行后，原始的String对象中的内容到底变了没有？String s1&#x3D;new String(“java”)创建了几个对象？<br>1）原始的内容没有改变 JVM在堆内存中创建了一个新的“Helloworld”对象，原来的“Hello”对象成为废弃对象<br>2）如果之前的代码没有新建内容为“java”的对象在堆内存中，则创建了两个对象，否则创建了一个对象。<br>5.java的基本数据类型有哪些？<br>byte,short,int,long,float,double,boolean,char</li>\n<li>final, finally, finalize的区别。<br>final：Java中关键字，修饰符。<br> 如果一个类被声明为final，则意味着该类不能被继承，无法派生出新的子类。所以，一个类不能同时被abstract和final修饰。<br>如果将变量或者方法声明为final，可以保证变量和方法在以后的使用中，不会被修改。被final修饰的变量必须在声明时赋初值，在以后的引用中只能读取，不能修改。被final修饰的方法只能使用，不能被重写。<br>finally：表示一种异常处理机制。<br> finally是对Java异常处理模型的最佳补充。finally结构使代码总会执行，而不管无异常发生。使用finally可以维护对象的内部状态，并可以清理非内存资源。特别是在关闭数据库连接这方面，如果程序员把数据库连接的close()方法放到finally中，就会大大降低程序出错的几率。</li>\n</ol>\n<p>finalize: Java中的Object类的一个方法名。<br>    Java中，垃圾收集器在将对象从内存中清除出去前，需要使用finalize()方法做一些必要的清理工作。这个方法是由垃圾收集器在确定该对象没有被引用时，对该对象调用**finalize()**方法。因为该方法是在Object类中定义的，因此所有的类都继承了该方法。子类可以覆盖该方法来整理系统资源或者执行其他的清理工作。</p>\n<ol start=\"7\">\n<li><p>实现一个线程的两种方式；调用start()方法和run()方法有什么区别？<br>1)1.通过继承Thread类实现线程<br> 2.通过实现Runnable接口实现线程<br>2）start()方法是开启了一个线程，会自动调用run()方法，此时程序会自动往下执行，此时不等start()方法执行完。<br>如果线程直接调用run()方法，则程序会等run()方法执行完再往下执行。</p>\n</li>\n<li><p>说出ArrayList,Vector, LinkedList的存储性能和特性<br>1）ArrayList和Vector都是数组作为底层，查找比较方便，不擅长大量的添加和删除。Vector与ArrayList相比线程安全<br>2）LinkedList是以链表作为底层，添加删除比较方便，查找效率较低。</p>\n</li>\n<li><p>什么是java序列化，如何实现java序列化？<br>1）序列化：把对象转换为字节序列的过程称为对象的序列化。<br>2）实现Serializable接口，再使用ObjectOutputStream类 即可序列化java类</p>\n</li>\n<li><p>说说&amp;和&amp;&amp;的区别。<br>1.&amp;和&amp;&amp;都可以用作逻辑与的运算符，表示逻辑与（and），当运算符两边的表达式的结果都为true时，整个运算结果才为true，否则，只要有一方为false，则结果为false。<br>2.&amp;&amp;还具有短路的功能，即如果第一个表达式为false，则不再计算第二个表达式，例如，对于if(str !&#x3D; null &amp;&amp; !str.equals(“”))表达式，当str为null时，后面的表达式不会执行，所以不会出现NullPointerException如果将&amp;&amp;改为&amp;，则会抛出NullPointerException异常。If(x&#x3D;&#x3D;33 &amp; ++y&gt;0) y会增长，If(x&#x3D;&#x3D;33 &amp;&amp; ++y&gt;0)不会增长<br>3.&amp;还可以用作位运算符，当&amp;操作符两边的表达式不是boolean类型时，&amp;表示按位与操作，我们通常使用0x0f来与一个整数进行&amp;运算，来获取该整数的最低4个bit位，例如，0x31 &amp; 0x0f的结果为0x01。<br>编程题（30分）<br>1.Account.java文件中定义了一个银行帐户类Account，其中包括了帐户名属性accountName、存款余额属性amount、存款方法deposit（double money）。阅读并理解这个类，并为其增加一个“取款”方法withdraw()：当存款余额大于取款金额时，执行取款修改余额；当存款余额小于取款金额时，不执行取款；以返回值0表示取款成功，返回值1表示取款不成功。<br>public class Account {<br>private String accountName;<br>private double amount;<br>public void deposit(double money){<br>if(money&gt;0){<br>    this.amount+&#x3D;money;<br>}<br>}</p>\n<p>public int withdraw(double money){<br>if(money&lt;amount){<br>    amount&#x3D;amount-money;<br>    return 0;<br>}<br>else{<br>    return 1;<br>}<br>}</p>\n<p>public Account(String accountName, double amount) {<br>this.accountName &#x3D; accountName;<br>this.amount &#x3D; amount;<br>}</p>\n<p>public Account() {<br>}<br>}<br>2.复制一个文件到另一个目录。<br>public class Copy {<br>public static void main(String[] args) throws IOException {<br>&#x2F;&#x2F; 1.创建流对象<br>&#x2F;&#x2F; 1.1 指定数据源<br>FileInputStream fis &#x3D; new FileInputStream(“D:\\test.jpg”);<br>&#x2F;&#x2F; 1.2 指定目的地<br>FileOutputStream fos &#x3D; new FileOutputStream(“test_copy.jpg”);<br>&#x2F;&#x2F; 2.读写数据<br>&#x2F;&#x2F; 2.1 定义数组<br>byte[] b &#x3D; new byte[1024];<br>&#x2F;&#x2F; 2.2 定义长度<br>int len;<br>&#x2F;&#x2F; 2.3 循环读取<br>while ((len &#x3D; fis.read(b))!&#x3D;‐1) {<br>    &#x2F;&#x2F; 2.4 写出数据<br>    fos.write(b, 0 , len);<br>}<br>&#x2F;&#x2F; 3.关闭资源<br>fos.close();<br>fis.close();<br>}<br>}<br>3.键入一个字符串，求其中每个字符出现的次数，并按顺序打印，打印格式如下：<br>a:5<br>b:1<br>f:3<br>…<br>public class Test1 {<br>public static void main(String[] args) {<br>Scanner sc &#x3D; new Scanner(System.in);<br>String s;<br>System.out.print(“请输入字符串”);<br>s &#x3D; sc.nextLine();<br>Map&lt;Character,Integer&gt; map&#x3D;new TreeMap&lt;&gt;();<br>char[] chars &#x3D; s.toCharArray();<br>for(int i&#x3D;0;i&lt;chars.length;i++){<br>    if(map.get(chars[i])&#x3D;&#x3D;null){<br>        map.put(chars[i],1);<br>    }else{<br>        map.put(chars[i],map.get(chars[i])+1);<br>    }<br>}<br>Set&lt;Map.Entry&lt;Character, Integer&gt;&gt; entries &#x3D; map.entrySet();<br>Iterator&lt;Map.Entry&lt;Character, Integer&gt;&gt; iterator &#x3D; entries.iterator();<br>while (iterator.hasNext()){<br>    Map.Entry&lt;Character,Integer&gt; entry&#x3D;iterator.next();<br>    System.out.println(entry.getKey()+”:”+entry.getValue());<br>}<br>}<br>}</p>\n</li>\n</ol>\n<h3 id=\"1-作业评讲：\"><a href=\"#1-作业评讲：\" class=\"headerlink\" title=\"1. 作业评讲：\"></a>1. 作业评讲：</h3><pre><code>* 数组的第一项是a[0]\n* if(b=true) 太繁琐 直接写成 if(b)\n* 求平均分要记得将sum设置成double 求的时候\n</code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">double</span> avg <span class=\"token operator\">=</span> sum <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length<span class=\"token operator\">/</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<hr>\n<h3 id=\"2-讲解了课堂练习：\"><a href=\"#2-讲解了课堂练习：\" class=\"headerlink\" title=\"2. 讲解了课堂练习：\"></a>2. 讲解了课堂练习：</h3><p>   1)输入一串字符串，输出里面有多少个a，多少个b，多少个c…<br>先用了测试类 junit4是不支持Scanner的 所以不能用test，要用main方法<br>可以通过’c’-‘a’的差值 得到索引值，通过int数组进行获取</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//System.in默认的关联就是键盘</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入一串小写字母：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//以回车符号作为结束的标志</span>\n       <span class=\"token comment\">//可以为了测试方便 先把str的值写死，省去输入字符串的时间</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> a <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span>\n           arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">char</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n               <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">+</span> <span class=\"token string\">\"的个数：\"</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span></code></pre>\n\n<hr>\n<p>2）输入1<del>200的整数，5个奇数，5个偶数 不能重复 奇数偶数不能超过5个的上限 最后打印结果 A</del>Z a~z<br>提示信息：<br>    继续输入<br>结果例子：<br>您输入结果：<br>奇数： 1 5 7 65（A） 17*  素数<br>自己写的版本：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test2</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSu</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span> isSuSu <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">%</span>i<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    isSuSu <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">&#123;</span>isSuSu <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> isSuSu<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> <span class=\"token function\">isChar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span> ss <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ss<span class=\"token operator\">></span><span class=\"token char\">'a'</span><span class=\"token operator\">&amp;&amp;</span>ss<span class=\"token operator\">&lt;</span><span class=\"token char\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>ss<span class=\"token operator\">></span><span class=\"token char\">'A'</span><span class=\"token operator\">&amp;&amp;</span>ss<span class=\"token operator\">&lt;</span><span class=\"token char\">'Z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> ss<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            ss <span class=\"token operator\">=</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ss<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isJi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span> isJiJi <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            isJiJi <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">&#123;</span>\n            isJiJi <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> isJiJi<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isContain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span> isContains <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> aa<span class=\"token operator\">:</span>\n             arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>aa<span class=\"token operator\">==</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                isContains <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> isContains<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printNum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">:</span>\n                arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> a<span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isSu</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                str <span class=\"token operator\">+=</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isChar</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token char\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                str <span class=\"token operator\">+=</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token function\">isChar</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> jiShu<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> ouShu<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> indexJi <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> indexOu <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入1~200的数字:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> input <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>input<span class=\"token operator\">&lt;=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>indexOu<span class=\"token operator\">>=</span><span class=\"token number\">5</span><span class=\"token operator\">||</span><span class=\"token function\">isContain</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span>ouShu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"偶数数量已满5个或者有重复数字!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                       <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token punctuation\">&#125;</span>\n                    ouShu<span class=\"token punctuation\">[</span>indexOu<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">;</span>\n                    indexOu<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>indexJi<span class=\"token operator\">>=</span><span class=\"token number\">5</span><span class=\"token operator\">||</span><span class=\"token function\">isContain</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span>jiShu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"奇数数量已满5个或者有重复数字!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    jiShu<span class=\"token punctuation\">[</span>indexJi<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">;</span>\n                    indexJi<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你不认识字吗？\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>indexJi<span class=\"token operator\">>=</span><span class=\"token number\">5</span><span class=\"token operator\">&amp;&amp;</span>indexOu<span class=\"token operator\">>=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//输入部分</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您输入结果：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"奇数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printNum</span><span class=\"token punctuation\">(</span>jiShu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"偶数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printNum</span><span class=\"token punctuation\">(</span>ouShu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><strong>写代码之前一定要分析好需求和设计好写法 多用模块化</strong></p>\n<h2 id=\"面试题：\"><a href=\"#面试题：\" class=\"headerlink\" title=\"面试题：\"></a>面试题：</h2><ol>\n<li>一个类与它的对象之间是什么关系？<br>答：类是对象的抽象，是一个拥有静态属性（如姓名，年龄）和动态属性（如睡觉跑步）的一个模板</li>\n<li>如何定义一个类，由哪些部分组成，各个部分的作用是什么？<br>答：语法格式：<br>[&lt; 修饰符&gt;] class &lt; 类名&gt;<br>{<br> [&lt;属性声明&gt;]<br> [&lt;构造器声明&gt;]<br> [&lt;方法声明&gt;]<br>}<br>修饰符是用来做访问控制，类名就是类的名字，属性声明是类的静态属性，方法声明是类的动态属性。<br>说明：修饰符public：类可以被任意访问，类的正文要用{  }括起来</li>\n<li>如何创建一个对象，如何使用该对象？<br>答：&lt; 类名&gt; [对象名] &#x3D; new &lt;类名&gt; [&lt;构造方法&gt;]<br>通过【对象名】.[属性名] 或者 [对象名].[方法名]进行使用</li>\n<li>局部变量和成员变量的区别？<br>答：A:在类中的位置不同<br>成员变量：在类中方法外<br>局部变量：在方法定义中或者方法声明上<br>B:在内存中的位置不同<br>成员变量：在堆内存<br>局部变量：在栈内存<br>C:生命周期不同<br>成员变量：随着对象的创建而存在，随着对象的消失而消失<br>局部变量：随着方法的调用而存在，随着方法的调用完毕而消失<br>D:初始化值不同<br>成员变量：有默认初始化值<br>局部变量：没有默认初始化值，必须定义，赋值，然后才能使用。<br>注意事项：<br>局部变量名称可以和成员变量名称一样，在方法中使用的时候，采用的是就近原则。</li>\n<li>构造方法和成员方法的区别？<br>答：构造方法是初始化一个类的对象时候调用的，它没有返回值，而且名字必须与类的名字一样，而成员函数是由类对象主动调用的，使用点操作符，它有返回值<br>构造函数是赋予对象”生命特征”的,成员方法则是对象所具有的”行为,能力”<br>构造函数只有在建立对象时由系统调用的,其他任何时候你都别指望用他.</li>\n</ol>","categories":[],"tags":[{"name":"Java","path":"api/tags/Java.json"}]}