{"title":"算法练习-30-小试牛刀（二）：有理数类的设计-(1.2.15-1.2.17)","slug":"算法练习-30-小试牛刀（二）：有理数类的设计-(1.2.15-1.2.17)","date":"2021-02-03T19:38:04.000Z","updated":"2021-02-04T06:21:45.340Z","comments":true,"path":"api/articles/算法练习-30-小试牛刀（二）：有理数类的设计-(1.2.15-1.2.17).json","excerpt":"算法练习-30-小试牛刀（二）：有理数类的设计-(1.2.15-1.2.17)知识点有理数概念正则表达式","covers":["https://gitee.com/mikutown/pic/raw/master/img/4c6090c3bea46a839d7dd2c11e2778e2.png"],"content":"<h1 id=\"算法练习-30-小试牛刀（二）：有理数类的设计-1-2-15-1-2-17\"><a href=\"#算法练习-30-小试牛刀（二）：有理数类的设计-1-2-15-1-2-17\" class=\"headerlink\" title=\"算法练习-30-小试牛刀（二）：有理数类的设计-(1.2.15-1.2.17)\"></a>算法练习-30-小试牛刀（二）：有理数类的设计-(1.2.15-1.2.17)</h1><ul>\n<li>知识点<ul>\n<li>有理数概念</li>\n<li>正则表达式</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><strong>1.2.15文件输入。基于String的split()方法实现In中的静态方法readInts()。我们会在1.3节中学习另一个不同的实现。</strong></p>\n<hr>\n<p><strong>1.2.15 File input. Develop a possible implementation of the static readInts() method from In (which we use for various test clients, such as binary search on page 47) that is based on the split() method in String.</strong></p>\n<p><strong>We will consider a different implementation in Section 1.3 (see page 126).</strong></p>\n<ul>\n<li>分析</li>\n</ul>\n<p>想要实现readInts方法，如果需要接受多个数字，那么需要你用空格作为分隔符，readInts()方法的作用是接受一系列整形数。正则表达式的空格分隔符表示:<code>\\\\s+</code></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">readInts</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">In</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">In</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//表示接受一个文件路径为name的数据</span>\n  <span class=\"token class-name\">String</span> input <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> words <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\s+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ints <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>words<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> words<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    ints<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ints<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><strong>1.2.16 有理数。为有理数实现一个不可变数据类型Rational，支持加减乘除操作。无需测试溢出（请见练习1.2.17），只需使用两个long型实例变量表示分子和分母来控制溢出的可能性。使用欧几里得算法来保证分子和分母没有公因子。编写一个测试用例检测你实现的所有方法。</strong></p>\n<p><strong>1.2.16 Rational numbers. Implement an immutable data type Rational for rational numbers that supports addition, subtraction, multiplication, and division.</strong></p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/4c6090c3bea46a839d7dd2c11e2778e2.png\" alt=\"img\" loading=\"lazy\"></p>\n<p><strong>You do not have to worry about testing for overflow (see Exercise 1.2.17), but use as instance variables two long values that represent the numerator and denominator to limit the possibility of overflow. Use Euclid’s algorithm (see page 4) to ensure that the numerator and denominator never have any common factors. Include a test client that exercises all of your methods.</strong></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>leafii<span class=\"token punctuation\">.</span>practice<span class=\"token punctuation\">.</span>charpter01</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rational</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> numerator<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//分子</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> denominator<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//分母</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Rational</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numerator<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> denominator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> gcd <span class=\"token operator\">=</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>numerator<span class=\"token punctuation\">,</span> denominator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>gcd <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numerator <span class=\"token operator\">=</span> numerator<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>denominator <span class=\"token operator\">=</span> denominator<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numerator <span class=\"token operator\">=</span> numerator<span class=\"token operator\">/</span>gcd<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>denominator <span class=\"token operator\">=</span> denominator<span class=\"token operator\">/</span>gcd<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> numerator<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setNumerator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numerator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numerator <span class=\"token operator\">=</span> numerator<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> denominator<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDenominator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> denominator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>denominator <span class=\"token operator\">=</span> denominator<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Rational</span> <span class=\"token function\">simplification</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rational</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a <span class=\"token operator\">=</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//最大公约数为a</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rational</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>numerator<span class=\"token operator\">/</span>a<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">.</span>denominator<span class=\"token operator\">/</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>a<span class=\"token operator\">%</span>b<span class=\"token punctuation\">;</span>\n            a<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>\n            b<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> numerator <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> denominator <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Rational</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rational</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> numerator<span class=\"token punctuation\">,</span>denominator<span class=\"token punctuation\">;</span>\n        denominator <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        numerator <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rational</span><span class=\"token punctuation\">(</span>numerator<span class=\"token punctuation\">,</span>denominator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Rational</span> <span class=\"token function\">minus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rational</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> numerator<span class=\"token punctuation\">,</span>denominator<span class=\"token punctuation\">;</span>\n        denominator <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        numerator <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rational</span><span class=\"token punctuation\">(</span>numerator<span class=\"token punctuation\">,</span>denominator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Rational</span> <span class=\"token function\">times</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rational</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> numerator<span class=\"token punctuation\">,</span>denominator<span class=\"token punctuation\">;</span>\n        denominator <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        numerator <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rational</span><span class=\"token punctuation\">(</span>numerator<span class=\"token punctuation\">,</span>denominator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Rational</span> <span class=\"token function\">divides</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rational</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> numerator<span class=\"token punctuation\">,</span>denominator<span class=\"token punctuation\">;</span>\n        denominator <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        numerator <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rational</span><span class=\"token punctuation\">(</span>numerator<span class=\"token punctuation\">,</span>denominator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rational</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Rational</span> simplification <span class=\"token operator\">=</span> <span class=\"token function\">simplification</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>simplification<span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>simplification<span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> den <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Rational</span> rational <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rational</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span>den<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> den2 <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Rational</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rational</span><span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">,</span>den2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Rational</span> plus <span class=\"token operator\">=</span> rational<span class=\"token punctuation\">.</span><span class=\"token function\">plus</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Rational</span> minus <span class=\"token operator\">=</span> rational<span class=\"token punctuation\">.</span><span class=\"token function\">minus</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Rational</span> times <span class=\"token operator\">=</span> rational<span class=\"token punctuation\">.</span><span class=\"token function\">times</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Rational</span> divides <span class=\"token operator\">=</span> rational<span class=\"token punctuation\">.</span><span class=\"token function\">divides</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>rational <span class=\"token operator\">+</span> <span class=\"token string\">\"+\"</span> <span class=\"token operator\">+</span> that <span class=\"token operator\">+</span><span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> plus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>rational <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> that <span class=\"token operator\">+</span><span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> minus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>rational <span class=\"token operator\">+</span> <span class=\"token string\">\"*\"</span> <span class=\"token operator\">+</span> that <span class=\"token operator\">+</span><span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> times<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>rational <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> that <span class=\"token operator\">+</span><span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> divides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> equals <span class=\"token operator\">=</span> rational<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>equals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>rational <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>rational <span class=\"token operator\">+</span> <span class=\"token string\">\"!=\"</span> <span class=\"token operator\">+</span> that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"题目-2\"><a href=\"#题目-2\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><strong>1.2.17 有理数实现的健壮性。在Rational的开发中使用断言来防止溢出。</strong></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Rational</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rational</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>den <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE <span class=\"token operator\">&amp;&amp;</span> den <span class=\"token operator\">></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>den <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE <span class=\"token operator\">&amp;&amp;</span> b<span class=\"token punctuation\">.</span>den <span class=\"token operator\">></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">long</span> d <span class=\"token operator\">=</span> den <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span>den<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">long</span> n <span class=\"token operator\">=</span> num <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span>den <span class=\"token operator\">+</span> den <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rational</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//其他方法同上 添加断言，在溢出的时候可以报错啦</span></code></pre>\n","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><strong>1.2.15文件输入。基于String的split()方法实现In中的静态方法readInts()。我们会在1.3节中学习另一个不同的实现。</strong></p>\n<hr>\n<p><strong>1.2.15 File input. Develop a possible implementation of the static readInts() method from In (which we use for various test clients, such as binary search on page 47) that is based on the split() method in String.</strong></p>\n<p><strong>We will consider a different implementation in Section 1.3 (see page 126).</strong></p>\n<ul>\n<li>分析</li>\n</ul>\n<p>想要实现readInts方法，如果需要接受多个数字，那么需要你用空格作为分隔符，readInts()方法的作用是接受一系列整形数。正则表达式的空格分隔符表示:<code>\\\\s+</code></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">readInts</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">In</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">In</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//表示接受一个文件路径为name的数据</span>\n  <span class=\"token class-name\">String</span> input <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> words <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\s+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ints <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>words<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> words<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    ints<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ints<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><strong>1.2.16 有理数。为有理数实现一个不可变数据类型Rational，支持加减乘除操作。无需测试溢出（请见练习1.2.17），只需使用两个long型实例变量表示分子和分母来控制溢出的可能性。使用欧几里得算法来保证分子和分母没有公因子。编写一个测试用例检测你实现的所有方法。</strong></p>\n<p><strong>1.2.16 Rational numbers. Implement an immutable data type Rational for rational numbers that supports addition, subtraction, multiplication, and division.</strong></p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/4c6090c3bea46a839d7dd2c11e2778e2.png\" alt=\"img\"></p>\n<p><strong>You do not have to worry about testing for overflow (see Exercise 1.2.17), but use as instance variables two long values that represent the numerator and denominator to limit the possibility of overflow. Use Euclid’s algorithm (see page 4) to ensure that the numerator and denominator never have any common factors. Include a test client that exercises all of your methods.</strong></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>leafii<span class=\"token punctuation\">.</span>practice<span class=\"token punctuation\">.</span>charpter01</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rational</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> numerator<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//分子</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> denominator<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//分母</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Rational</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numerator<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> denominator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> gcd <span class=\"token operator\">=</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>numerator<span class=\"token punctuation\">,</span> denominator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>gcd <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numerator <span class=\"token operator\">=</span> numerator<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>denominator <span class=\"token operator\">=</span> denominator<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numerator <span class=\"token operator\">=</span> numerator<span class=\"token operator\">/</span>gcd<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>denominator <span class=\"token operator\">=</span> denominator<span class=\"token operator\">/</span>gcd<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> numerator<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setNumerator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numerator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numerator <span class=\"token operator\">=</span> numerator<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> denominator<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDenominator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> denominator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>denominator <span class=\"token operator\">=</span> denominator<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Rational</span> <span class=\"token function\">simplification</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rational</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a <span class=\"token operator\">=</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//最大公约数为a</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rational</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>numerator<span class=\"token operator\">/</span>a<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">.</span>denominator<span class=\"token operator\">/</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>a<span class=\"token operator\">%</span>b<span class=\"token punctuation\">;</span>\n            a<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>\n            b<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> numerator <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> denominator <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Rational</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rational</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> numerator<span class=\"token punctuation\">,</span>denominator<span class=\"token punctuation\">;</span>\n        denominator <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        numerator <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rational</span><span class=\"token punctuation\">(</span>numerator<span class=\"token punctuation\">,</span>denominator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Rational</span> <span class=\"token function\">minus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rational</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> numerator<span class=\"token punctuation\">,</span>denominator<span class=\"token punctuation\">;</span>\n        denominator <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        numerator <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rational</span><span class=\"token punctuation\">(</span>numerator<span class=\"token punctuation\">,</span>denominator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Rational</span> <span class=\"token function\">times</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rational</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> numerator<span class=\"token punctuation\">,</span>denominator<span class=\"token punctuation\">;</span>\n        denominator <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        numerator <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rational</span><span class=\"token punctuation\">(</span>numerator<span class=\"token punctuation\">,</span>denominator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Rational</span> <span class=\"token function\">divides</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rational</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> numerator<span class=\"token punctuation\">,</span>denominator<span class=\"token punctuation\">;</span>\n        denominator <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        numerator <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rational</span><span class=\"token punctuation\">(</span>numerator<span class=\"token punctuation\">,</span>denominator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rational</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Rational</span> simplification <span class=\"token operator\">=</span> <span class=\"token function\">simplification</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>simplification<span class=\"token punctuation\">.</span><span class=\"token function\">getDenominator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>simplification<span class=\"token punctuation\">.</span><span class=\"token function\">getNumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> den <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Rational</span> rational <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rational</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span>den<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> den2 <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Rational</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rational</span><span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">,</span>den2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Rational</span> plus <span class=\"token operator\">=</span> rational<span class=\"token punctuation\">.</span><span class=\"token function\">plus</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Rational</span> minus <span class=\"token operator\">=</span> rational<span class=\"token punctuation\">.</span><span class=\"token function\">minus</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Rational</span> times <span class=\"token operator\">=</span> rational<span class=\"token punctuation\">.</span><span class=\"token function\">times</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Rational</span> divides <span class=\"token operator\">=</span> rational<span class=\"token punctuation\">.</span><span class=\"token function\">divides</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>rational <span class=\"token operator\">+</span> <span class=\"token string\">\"+\"</span> <span class=\"token operator\">+</span> that <span class=\"token operator\">+</span><span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> plus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>rational <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> that <span class=\"token operator\">+</span><span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> minus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>rational <span class=\"token operator\">+</span> <span class=\"token string\">\"*\"</span> <span class=\"token operator\">+</span> that <span class=\"token operator\">+</span><span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> times<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>rational <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> that <span class=\"token operator\">+</span><span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> divides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> equals <span class=\"token operator\">=</span> rational<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>equals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>rational <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>rational <span class=\"token operator\">+</span> <span class=\"token string\">\"!=\"</span> <span class=\"token operator\">+</span> that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"题目-2\"><a href=\"#题目-2\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><strong>1.2.17 有理数实现的健壮性。在Rational的开发中使用断言来防止溢出。</strong></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Rational</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rational</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>den <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE <span class=\"token operator\">&amp;&amp;</span> den <span class=\"token operator\">></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>den <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE <span class=\"token operator\">&amp;&amp;</span> b<span class=\"token punctuation\">.</span>den <span class=\"token operator\">></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">long</span> d <span class=\"token operator\">=</span> den <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span>den<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">long</span> n <span class=\"token operator\">=</span> num <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span>den <span class=\"token operator\">+</span> den <span class=\"token operator\">*</span> b<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rational</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//其他方法同上 添加断言，在溢出的时候可以报错啦</span></code></pre>","categories":[],"tags":[{"name":"算法","path":"api/tags/算法.json"}]}