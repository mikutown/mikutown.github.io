{"title":"Javaの部分常用类","slug":"Javaの部分常用类","date":"2020-04-03T12:57:18.000Z","updated":"2021-01-02T19:03:44.000Z","comments":true,"path":"api/articles/Javaの部分常用类.json","excerpt":"Javaの部分常用类回顾equals方法在Object对象中的源码就是return(this==obj)基本数值类型不能调用方法所以不能使用equals进行比较没有重写equals方法，==与equals方法没有区别==一般用于基本数据类型比较，如果用于比较引用数据类型，就比较地址值多使用ctrl+鼠标左键查看源代码","covers":null,"content":"<h1 id=\"Javaの部分常用类\"><a href=\"#Javaの部分常用类\" class=\"headerlink\" title=\"Javaの部分常用类\"></a>Javaの部分常用类</h1><h3 id=\"回顾\"><a href=\"#回顾\" class=\"headerlink\" title=\"回顾\"></a>回顾</h3><ol>\n<li>equals方法在Object对象中的源码就是return(this==obj)</li>\n<li>基本数值类型不能调用方法所以不能使用equals进行比较</li>\n<li>没有重写equals方法，==与equals方法没有区别</li>\n<li>==一般用于基本数据类型比较，如果用于比较引用数据类型，就比较地址值</li>\n<li>多使用ctrl+鼠标左键查看源代码<a id=\"more\"></a></li>\n</ol>\n<h3 id=\"常用类\"><a href=\"#常用类\" class=\"headerlink\" title=\"常用类\"></a>常用类</h3><h4 id=\"1-String类\"><a href=\"#1-String类\" class=\"headerlink\" title=\"1. String类\"></a>1. String类</h4><ol>\n<li>String看源码 发现String是无法修改的</li>\n<li>String的构造方法<ul>\n<li>无参构造 构造出值为””的字符串 （不是null）</li>\n<li>可以用字节数组构造String</li>\n<li>可以用String的getBytes将String转为字节数组</li>\n<li>可以用字符数组构造String</li>\n<li>可以用String的toCharArray方法将其转换为字符数组</li>\n</ul>\n</li>\n<li>String的常用方法<ol>\n<li>public boolean equals(Object obj):                              比较字符串的内容是否相同,区分大小写</li>\n<li>public boolean equalsIgnoreCase(String str):              比较字符串的内容是否相同,忽略大小写</li>\n<li>public boolean contains(String str):                            判断字符串中是否包含传递进来的字符串</li>\n<li>public boolean startsWith(String str):                         判断字符串是否以传递进来的字符串开头</li>\n<li>public boolean endsWith(String str):                          判断字符串是否以传递进来的字符串结尾</li>\n<li>public boolean isEmpty():                                           判断字符串的内容是否为空。</li>\n<li>public int length():                                                      获取字符串的长度。</li>\n<li>public char charAt(int index):                                      获取指定索引位置的字符</li>\n<li>public int indexOf(int ch):                                            返回指定字符在此字符串中第一次出现处的索引。</li>\n<li>public int indexOf(String str):                                       返回指定字符串在此字符串中第一次出现处的索引。</li>\n<li>public int indexOf(int ch,int fromIndex):                       返回指定字符在此字符串中从指定位置后第一次出现处的索引。</li>\n<li>public int indexOf(String str,int fromIndex):                 返回指定字符串在此字符串中从指定位置后第一次出现处的索引。</li>\n<li>public String substring(int start):                                 从指定位置开始截取字符串,默认到末尾。</li>\n<li>public String substring(int start,int end):                     从指定位置开始到指定位置结束截取字符串。</li>\n<li>public String replace(char old,char new)                      将指定字符进行替换</li>\n<li>public String replace(String old,String new)                 将指定字符串进行替换</li>\n<li>public String trim()                                                     去除两端空格</li>\n<li>public String split(String regex)                                将此字符串分割为给定的 regular expression的匹配。返回String[]</li>\n</ol>\n</li>\n</ol>\n<p> <strong>注意:“String对象一旦被创建就是固定不变的了，对String对象的任何改变都不影响到原对象，相关的任何change操作都会生成新的对象”</strong></p>\n<p><strong>数组有length属性，String有length方法</strong></p>\n<ol start=\"4\">\n<li>字符串常量池<br>我们知道字符串的分配和其他对象分配一样，是需要消耗高昂的时间和空间的，而且字符串我们使用的非常多。JVM为了提高性能和减少内存的开销，在实例化字符串的时候进行了一些优化：使用字符串常量池。每当我们创建字符串常量时，JVM会首先检查字符串常量池，如果该字符串已经存在常量池中，那么就直接返回常量池中的实例引用。如果字符串不存在常量池中，就会实例化该字符串并且将其放到常量池中。</li>\n<li>String类的深度理解<br>例1：</li>\n</ol>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 采用字面值的方式赋值\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> str1<span class=\"token operator\">=</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> str2<span class=\"token operator\">=</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========test1============\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1<span class=\"token operator\">==</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true 可以看出str1跟str2是指向同一个对象</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>分析：当执行String str1=”aaa”时，JVM首先会去字符串池中查找是否存在”aaa”这个对象，如果不存在，则在字符串池中创建”aaa”这个对象，然后将池中”aaa”这个对象的引用地址返回给字符串常量str1，这样str1会指向池中”aaa”这个字符串对象；如果存在，则不创建任何对象，直接将池中”aaa”这个对象的地址返回，赋给字符串常量。当创建字符串对象str2时，字符串池中已经存在”aaa”这个对象，直接把对象”aaa”的引用地址返回给str2，这样str2指向了池中”aaa”这个对象，也就是说str1和str2指向了同一个对象，因此语句System.out.println(str1 == str2)输出：true。<br>例2：</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 采用new关键字新建一个字符串对象\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> str3<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> str4<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========test2============\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str3<span class=\"token operator\">==</span>str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false 可以看出用new的方式是生成不同的对象</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>分析： 采用new关键字新建一个字符串对象时，JVM首先在字符串池中查找有没有”aaa”这个字符串对象，如果有，则不在池中再去创建”aaa”这个对象了，直接在堆中创建一个”aaa”字符串对象，然后将堆中的这个”aaa”对象的地址返回赋给引用str3，这样，str3就指向了堆中创建的这个”aaa”字符串对象；如果没有，则首先在字符串池中创建一个”aaa”字符串对象，然后再在堆中创建一个”aaa”字符串对象，然后将堆中这个”aaa”字符串对象的地址返回赋给str3引用，这样，str3指向了堆中创建的这个”aaa”字符串对象。当执行String str4=new String(“aaa”)时， 因为采用new关键字创建对象时，每次new出来的都是一个新的对象，也即是说引用str3和str4指向的是两个不同的对象，因此语句System.out.println(str3 == str4)输出：false。<br>例3：</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 编译期确定\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> s0<span class=\"token operator\">=</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> s1<span class=\"token operator\">=</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> s2<span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========test3============\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s0<span class=\"token operator\">==</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true 可以看出s0跟s1是指向同一个对象</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s0<span class=\"token operator\">==</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true 可以看出s0跟s2是指向同一个对象</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>分析：因为例子中的s0和s1中的”helloworld”都是字符串常量，它们在编译期就被确定了，所以s0==s1为true；而”hello”和”world”也都是字符串常量，当一个字符串由多个字符串常量连接而成时，它自己肯定也是字符串常量，所以s2也同样在编译期就被解析为一个字符串常量，所以s2也是常量池中”helloworld”的一个引用。所以我们得出s0==s1==s2。<br>例4：</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 编译期无法确定\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> s0<span class=\"token operator\">=</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> s1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> s2<span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========test4============\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> s0<span class=\"token operator\">==</span>s1 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false </span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> s0<span class=\"token operator\">==</span>s2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> s1<span class=\"token operator\">==</span>s2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>分析：用new String() 创建的字符串不是常量，不能在编译期就确定，所以new String() 创建的字符串不放入常量池中，它们有自己的地址空间。s0还是常量池中”helloworld”的引用，s1因为无法在编译期确定，所以是运行时创建的新对象”helloworld”的引用，s2因为有后半部分new String(”world”)所以也无法在编译期确定，所以也是一个新创建对象”helloworld”的引用。<br>例5：</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 继续-编译期无法确定\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> str1<span class=\"token operator\">=</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">String</span> str2<span class=\"token operator\">=</span><span class=\"token string\">\"def\"</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">String</span> str3<span class=\"token operator\">=</span>str1<span class=\"token operator\">+</span>str2<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========test5============\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str3<span class=\"token operator\">==</span><span class=\"token string\">\"abcdef\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>分析：因为str3指向堆中的”abcdef”对象，而”abcdef”是字符串池中的对象，所以结果为false。JVM对String str=”abc”对象放在常量池中是在编译时做的，而String str3=str1+str2是在运行时刻才能知道的。new对象也是在运行时才做的。而这段代码总共创建了5个对象，字符串池中两个、堆中三个。+运算符会在堆中建立来两个String对象，这两个对象的值分别是”abc”和”def”，也就是说从字符串池中复制这两个值，然后在堆中创建两个对象，然后再建立对象str3,然后将”abcdef”的堆地址赋给str3。<br>例6：</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 编译期优化\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> s0 <span class=\"token operator\">=</span> <span class=\"token string\">\"a1\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========test6============\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s0 <span class=\"token operator\">==</span> s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//result = true </span>\n    <span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"atrue\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> s3<span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s2 <span class=\"token operator\">==</span> s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//result = true </span>\n    <span class=\"token class-name\">String</span> s4 <span class=\"token operator\">=</span> <span class=\"token string\">\"a3.4\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> s5 <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">3.4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s4 <span class=\"token operator\">==</span> s5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//result = true</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>分析：在程序编译期，JVM就将常量字符串的”+”连接优化为连接后的值，拿”a” + 1来说，经编译器优化后在class中就已经是a1。在编译期其字符串常量的值就确定下来，故上面程序最终的结果都为true。<br>例7：</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 编译期无法确定\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test7</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> s0 <span class=\"token operator\">=</span> <span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">+</span> s1<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========test7============\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s0 <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//result = false</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>分析：JVM对于字符串引用，由于在字符串的”+”连接中，有字符串引用存在，而引用的值在程序编译期是无法确定的，即”a” + s1无法被编译器优化，只有在程序运行期来动态分配并将连接后的新地址赋给s2。所以上面程序的结果也就为false。<br>例8：</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 比较字符串常量的“+”和字符串引用的“+”的区别\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> test<span class=\"token operator\">=</span><span class=\"token string\">\"javalanguagespecification\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> str<span class=\"token operator\">=</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> str1<span class=\"token operator\">=</span><span class=\"token string\">\"language\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> str2<span class=\"token operator\">=</span><span class=\"token string\">\"specification\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========test8============\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>test <span class=\"token operator\">==</span> <span class=\"token string\">\"java\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"language\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"specification\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>test <span class=\"token operator\">==</span> str <span class=\"token operator\">+</span> str1 <span class=\"token operator\">+</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>分析：为什么出现上面的结果呢？这是因为，字符串字面量拼接操作是在Java编译器编译期间就执行了，也就是说编译器编译时，直接把”java”、”language”和”specification”这三个字面量进行”+”操作得到一个”javalanguagespecification” 常量，并且直接将这个常量放入字符串池中，这样做实际上是一种优化，将3个字面量合成一个，避免了创建多余的字符串对象。而字符串引用的”+”运算是在Java运行期间执行的，即str + str2 + str3在程序执行期间才会进行计算，它会在堆内存中重新创建一个拼接后的字符串对象。总结来说就是：字面量”+”拼接是在编译期间进行的，拼接后的字符串存放在字符串池中；而字符串引用的”+”拼接运算实在运行时进行的，新创建的字符串存放在堆中。对于直接相加字符串，效率很高，因为在编译器便确定了它的值，也就是说形如”I”+”love”+”java”; 的字符串相加，在编译期间便被优化成了”Ilovejava”。对于间接相加（即包含字符串引用），形如s1+s2+s3; 效率要比直接相加低，因为在编译器不会对引用变量进行优化。</li>\n</ul>\n<h5 id=\"记录一个字符在字符串中出现的次数\"><a href=\"#记录一个字符在字符串中出现的次数\" class=\"headerlink\" title=\"记录一个字符在字符串中出现的次数\"></a>记录一个字符在字符串中出现的次数</h5><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入第一个字符串:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入第二个字符：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> c2 <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chars <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token operator\">:</span>chars\n             <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">)</span>\n                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">+</span> <span class=\"token string\">\"字符出现了\"</span> <span class=\"token operator\">+</span> count <span class=\"token operator\">+</span> <span class=\"token string\">\"次\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span></code></pre>\n<h5 id=\"记录一个子串在整串中出现的次数\"><a href=\"#记录一个子串在整串中出现的次数\" class=\"headerlink\" title=\"记录一个子串在整串中出现的次数\"></a>记录一个子串在整串中出现的次数</h5><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//输入一个字符串，并再输入一个字符串，输出该字符串出现的次数</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Scanner</span> s<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入1：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> str1<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入2：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> str2<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span>str2<span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n｝\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str1<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> str2<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//如果能在总字符串里找到子字符串</span>\n            <span class=\"token comment\">//就进行截取字符串,从查到索引位置起数子字符串长度个开始截取，到最后结束</span>\n            <span class=\"token class-name\">String</span> news <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> str2<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>news<span class=\"token punctuation\">,</span>str2<span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n \n    <span class=\"token punctuation\">&#125;</span></code></pre>\n<hr>\n<h4 id=\"2-StringBuffer类\"><a href=\"#2-StringBuffer类\" class=\"headerlink\" title=\"2.StringBuffer类\"></a>2.StringBuffer类</h4><p>   1).StringBuffer类概述<br>    StringBuffer是线程安全的可变字符序列.我们如果对字符串进行拼接操作，每次拼接，都会构建一个新的String对象，既耗时，又浪费空间。而StringBuffer就可以解决这个问题.<br>    2).StringBuffer构造方法<br>    public StringBuffer():                                    无参构造方法,构建一个不带字符的字符串缓冲区,大小为16个字符<br>    public StringBuffer(int capacity):                  指定容量的字符串缓冲区对象<br>    public StringBuffer(String str):                     指定字符串内容的字符串缓冲区对象<br>3).StringBuffer常用方法<br>    public int capacity()：                                                   返回当前容量的理论值<br>    public int length():                                                        返回长度（字符数）。 实际值<br>    public StringBuffer append(String str):                          可以把任意类型数据添加到字符串缓冲区里面,并返回字符串缓冲区本身<br>    public StringBuffer insert(int offset,String str):               在指定位置把任意类型的数据插入到字符串缓冲区里面,并返回字符串缓冲区本身<br>    public StringBuffer deleteCharAt(int index):                   删除指定位置的字符并返回本身<br>    public StringBuffer delete(int start,int end):                   删除从指定位置开始指定位置结束的内容，并返回本身<br>    public StringBuffer replace(int start,int end,String str):   从start开始到end用str替换<br>    public StringBuffer reverse():                                         字符串反转<br>    public String substring(int start):                                   从指定位置截取到末尾(返回值类型不再是StringBuffer本身)<br>    public String substring(int start,int end):                       截取从指定位置开始到结束位置，包括开始位置，不包括结束位置(返回值类型不再是StringBuffer本身)</p>\n<p>4).String和StringBuffer互相转化<br>    A::String –&gt; StringBuffer<br>        a:通过构造方法<br>        b:通过append()方法<br>    B:StringBuffer – &gt; String<br>        a: 使用substring方法<br>        b:通过构造方法<br>        c:通过toString()方法</p>\n<h4 id=\"3-StringBuilder方法\"><a href=\"#3-StringBuilder方法\" class=\"headerlink\" title=\"3.StringBuilder方法\"></a>3.StringBuilder方法</h4><p><strong>与StringBuffer操作一致,效率更快,但是线程不安全。</strong></p>\n<h4 id=\"4-包装类\"><a href=\"#4-包装类\" class=\"headerlink\" title=\"4.包装类\"></a>4.包装类</h4><ol>\n<li>什么是包装类？<ul>\n<li>Java是一个面向对象的编程语言，但是Java中的八种基本数据类型却是不面向对象的，为了使用方便和解决这个不足，在设计类时为每个基本数据类型设计了一个对应的类进行代表，这样八种基本数据类型对应的类统称为包装类(Wrapper Class)，包装类均位于java.lang包。 </li>\n</ul>\n</li>\n<li>基本数据的包装类<ol>\n<li></li>\n</ol>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>基本数据类型</th>\n<th>包装类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte</td>\n<td>Byte</td>\n</tr>\n<tr>\n<td>short</td>\n<td>Short</td>\n</tr>\n<tr>\n<td>int</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>long</td>\n<td>Long</td>\n</tr>\n<tr>\n<td>char</td>\n<td>Character</td>\n</tr>\n<tr>\n<td>float</td>\n<td>Float</td>\n</tr>\n<tr>\n<td>double</td>\n<td>Double</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>Boolean</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li>包装类的实际使用<ol>\n<li>基本数据和包装类的转换</li>\n</ol>\n</li>\n</ol>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Integer</span> n1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"int类型转换为integer类：\"</span><span class=\"token operator\">+</span>n1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Integer</span> i<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i1 <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"integer类转换为int类型：\"</span><span class=\"token operator\">+</span>i1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre><code>2. 数值字符串和整型互转</code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//parseInt方法： 数字字符串类型转成int类型</span>\n<span class=\"token class-name\">String</span> ss<span class=\"token operator\">=</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> ii <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字符类型转成整型：\"</span><span class=\"token operator\">+</span>ii<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//toString方法：int类型转成数字字符串类型</span>\n<span class=\"token keyword\">int</span> ii2<span class=\"token operator\">=</span><span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> ss2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>ii2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"int类型转成数字字符串类型:\"</span><span class=\"token operator\">+</span>ss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<ol start=\"4\">\n<li>拆箱和装箱<ul>\n<li>基本数据类型和对应的包装类可以相互转换，由基本数据类型向包装类转换称为装箱，反之为拆箱！<br>注：* 此特性在jdk1.5之后被逐渐淡化<ul>\n<li>包装类用于集合 集合只能用包装类，不能用基本数据类型</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"5-Date和Calendar类\"><a href=\"#5-Date和Calendar类\" class=\"headerlink\" title=\"5. Date和Calendar类\"></a>5. Date和Calendar类</h4><ol>\n<li>Date类<ol>\n<li>使用Date类的无参构造方法创建的对象可以获取本地当前时间</li>\n</ol>\n</li>\n</ol>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Date</span> date<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre><code>2. 时间戳：\n指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总毫秒数。\n3. 获取时间戳</code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">date<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>；\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>；</code></pre>\n<pre><code>4. 格式化日期\n    SimpleDateFormat(格式化日期)：日期和时间格式由 日期和时间模式字符串 指定。在 日期和时间模式字符串 中，未加引号的字母 ‘A’ 到 ‘Z’ 和 ‘a’ 到 ‘z’ 被解释为模式字母，用来表示日期或时间字符串元素。\n    注：在此类中如果想格式化为yyyyyear 需要将year用单引号括起来\n例子：</code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"> <span class=\"token comment\">//日期类转字符串：</span>\n<span class=\"token class-name\">Date</span> ss <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一般日期输出：\"</span> <span class=\"token operator\">+</span> ss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"时间戳：\"</span> <span class=\"token operator\">+</span> ss<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SimpleDateFormat</span>  format <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span>“yyyy<span class=\"token operator\">-</span>MM<span class=\"token operator\">-</span>dd HH<span class=\"token operator\">:</span>mm<span class=\"token operator\">:</span>ss”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将目标格式传入构造方法</span>\n<span class=\"token class-name\">String</span> time <span class=\"token operator\">=</span> format<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>字符串转日期类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"2019-03-15\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SimpleDateFormat</span> format <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> format<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>Date类实现了Comparable接口 可以直接进行比较操作 实用compareto方法，返回int 相等为0，第一个大返回整数，否则返回负数</strong></p>\n<p>   5.Calendar<br>        用于代替Date类的绝大多数功能。在实际项目当中，我们经常会涉及到对时间的处理，例如登陆网站，我们会看到网站首页显示XXX，欢迎您！今天是XXXX年。。。。某些网站会记录下用户登陆的时间，比如银行的一些网站，仅需要获取当前时间的某部分，比如年份月份邓，对于这些经常需要处理的问题，Java中提供了Calendar这个专门用于对日期进行操作的类（Date类在jdk1.1中也行，但后来都被淘汰掉了）。<br>        * Calendar为抽象类，得用静态方法      </p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Calendar</span> rightNow <span class=\"token operator\">=</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre><code>* 获取时间</code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 获取年</span>\n <span class=\"token keyword\">int</span> year <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>YEAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 获取月，这里需要需要月份的范围为0~11，因此获取月份的时候需要+1才是当前月份值</span>\n <span class=\"token keyword\">int</span> month <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>MONTH<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取日</span>\n <span class=\"token keyword\">int</span> day <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>DAY_OF_MONTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取时</span>\n<span class=\"token keyword\">int</span> hour <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>HOUR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// int hour = calendar.get(Calendar.HOUR_OF_DAY);// 24小时表示</span>\n <span class=\"token comment\">// 获取分</span>\n<span class=\"token keyword\">int</span> minute <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>MINUTE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取秒</span>\n<span class=\"token keyword\">int</span> second <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>SECOND<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre><code>* 设置时间</code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 时</span>\ncalendar<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>HOUR_OF_DAY<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 分</span>\ncalendar<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>MINUTE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 秒</span>\ncalendar<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>SECOND<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 毫秒</span>\ncalendar<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>MILLISECOND<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Calendar和Data转化</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Calendar转化为Data</span>\n<span class=\"token class-name\">Calendar</span> calendar <span class=\"token operator\">=</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//日历类的实例化</span>\ncalendar<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">,</span> month <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置日历时间，月份必须减一</span>\n<span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从一个 Calendar 对象中获取 Date 对象</span>\n \n<span class=\"token comment\">//Data转化为Calendar</span>\n<span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//直接new对象，获取的是当前时间</span>\n<span class=\"token class-name\">Calendar</span> calendar <span class=\"token operator\">=</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncalendar<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>例：<br>    1. 算算自己活了多少天</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//算算自己活了多少天</span>\n        <span class=\"token class-name\">Date</span> date<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> now<span class=\"token operator\">=</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//现在的时间戳</span>\n        <span class=\"token class-name\">Calendar</span> c<span class=\"token operator\">=</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置出生时间</span>\n        <span class=\"token class-name\">Date</span> date1<span class=\"token operator\">=</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取出生时间戳</span>\n        <span class=\"token keyword\">long</span> birth<span class=\"token operator\">=</span>date1<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>now<span class=\"token operator\">-</span>birth<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token operator\">/</span><span class=\"token number\">60</span><span class=\"token operator\">/</span><span class=\"token number\">60</span><span class=\"token operator\">/</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n｝</code></pre>\n<pre><code>2. 求下个月的今天的倒数3天</code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Calendar</span> c<span class=\"token operator\">=</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>MONTH<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>MONTH<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>DAY_OF_MONTH<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>DAY_OF_MONTH<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n｝</code></pre>\n<h4 id=\"6-Math类\"><a href=\"#6-Math类\" class=\"headerlink\" title=\"6. Math类\"></a>6. Math类</h4><p>   Math 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。<br>    1).Math类中常用方法<br>        Math类中所有方法都为静态方法.<br>        Math.floor():         向下取整<br>        Math.round():      四舍五入<br>        Math.ceil():          取不小于num的最小整数<br>        Math.abs():         取绝对值<br>        Math.random():  生成[0,1)之间的随机小数<br>        Math.pow(a,b):   a的b次方<br>        Math.sqrt(num): num的平方根<br>        Math.max():        返回参数中的最大值<br>    2).Math类中的成员变量<br>        Math类中所有成员变量都是静态成员变量.<br>        Math.E:    自然对数的底数e<br>        Math.PI:   圆周率π<br>例：猜数字游戏</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//随机生成[1,100]一个数字，由键盘输入数字进行猜测，如果猜测小了则提示小了，猜测7次不中，提示笨蛋并程序结束</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"恭喜\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">>=</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"笨蛋\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n｝</code></pre>\n<h4 id=\"7-Scanner类\"><a href=\"#7-Scanner类\" class=\"headerlink\" title=\"7.Scanner类\"></a>7.Scanner类</h4><pre><code>  1. Scanner概述\n     * 用于获取用户的键盘输入.\n  2. Scanner常用方法\n     * hasNextXxx():                          判断下一个是否是某种类型的元素,其中Xxx可以是Int,Double等。            * public int nextInt():                  获取一个int类型的值\n     * public String nextLine():           获取一个String类型的值</code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo01_Scanner</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    \n<span class=\"token comment\">//2. 创建键盘录入数据的对象        </span>\n<span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n        \n<span class=\"token comment\">//3. 接收数据        </span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请录入一个整数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n        \n<span class=\"token comment\">//4. 输出数据        </span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n<span class=\"token punctuation\">&#125;</span>    \n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n<p> **注：Scanner的next方法和nextline方法不要一起用 会出bug</p>\n<h4 id=\"8-System类\"><a href=\"#8-System类\" class=\"headerlink\" title=\"8.System类\"></a>8.System类</h4><pre><code>  1. 概述  \n     System 类中提供了大量的静态方法，可以获取与系统相关的信息或系统级操作。\n  2. 常用方法\n     * currentTimeMillis() ：返回以毫秒为单位的当前时间（时间戳）–获取当前系统时间与1970年01月01日00:00点之间的毫秒差值；\n     * arraycopy(Object src, int srcPos, Object dest, int destPos, int length) ：将数组中指定的数据拷贝到另一个数组中\n     * gc()： 垃圾回收\n     * exit(int status)   终止当前正在运行的 Java 虚拟机；（int status:状态码,给JVM看，0:正常终止，其他数字:异常终止）</code></pre>\n<p>​<br>​     </p>\n","more":"</li>\n</ol>\n<h3 id=\"常用类\"><a href=\"#常用类\" class=\"headerlink\" title=\"常用类\"></a>常用类</h3><h4 id=\"1-String类\"><a href=\"#1-String类\" class=\"headerlink\" title=\"1. String类\"></a>1. String类</h4><ol>\n<li>String看源码 发现String是无法修改的</li>\n<li>String的构造方法<ul>\n<li>无参构造 构造出值为””的字符串 （不是null）</li>\n<li>可以用字节数组构造String</li>\n<li>可以用String的getBytes将String转为字节数组</li>\n<li>可以用字符数组构造String</li>\n<li>可以用String的toCharArray方法将其转换为字符数组</li>\n</ul>\n</li>\n<li>String的常用方法<ol>\n<li>public boolean equals(Object obj):                              比较字符串的内容是否相同,区分大小写</li>\n<li>public boolean equalsIgnoreCase(String str):              比较字符串的内容是否相同,忽略大小写</li>\n<li>public boolean contains(String str):                            判断字符串中是否包含传递进来的字符串</li>\n<li>public boolean startsWith(String str):                         判断字符串是否以传递进来的字符串开头</li>\n<li>public boolean endsWith(String str):                          判断字符串是否以传递进来的字符串结尾</li>\n<li>public boolean isEmpty():                                           判断字符串的内容是否为空。</li>\n<li>public int length():                                                      获取字符串的长度。</li>\n<li>public char charAt(int index):                                      获取指定索引位置的字符</li>\n<li>public int indexOf(int ch):                                            返回指定字符在此字符串中第一次出现处的索引。</li>\n<li>public int indexOf(String str):                                       返回指定字符串在此字符串中第一次出现处的索引。</li>\n<li>public int indexOf(int ch,int fromIndex):                       返回指定字符在此字符串中从指定位置后第一次出现处的索引。</li>\n<li>public int indexOf(String str,int fromIndex):                 返回指定字符串在此字符串中从指定位置后第一次出现处的索引。</li>\n<li>public String substring(int start):                                 从指定位置开始截取字符串,默认到末尾。</li>\n<li>public String substring(int start,int end):                     从指定位置开始到指定位置结束截取字符串。</li>\n<li>public String replace(char old,char new)                      将指定字符进行替换</li>\n<li>public String replace(String old,String new)                 将指定字符串进行替换</li>\n<li>public String trim()                                                     去除两端空格</li>\n<li>public String split(String regex)                                将此字符串分割为给定的 regular expression的匹配。返回String[]</li>\n</ol>\n</li>\n</ol>\n<p> <strong>注意:“String对象一旦被创建就是固定不变的了，对String对象的任何改变都不影响到原对象，相关的任何change操作都会生成新的对象”</strong></p>\n<p><strong>数组有length属性，String有length方法</strong></p>\n<ol start=\"4\">\n<li>字符串常量池<br>我们知道字符串的分配和其他对象分配一样，是需要消耗高昂的时间和空间的，而且字符串我们使用的非常多。JVM为了提高性能和减少内存的开销，在实例化字符串的时候进行了一些优化：使用字符串常量池。每当我们创建字符串常量时，JVM会首先检查字符串常量池，如果该字符串已经存在常量池中，那么就直接返回常量池中的实例引用。如果字符串不存在常量池中，就会实例化该字符串并且将其放到常量池中。</li>\n<li>String类的深度理解<br>例1：</li>\n</ol>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 采用字面值的方式赋值\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> str1<span class=\"token operator\">=</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> str2<span class=\"token operator\">=</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========test1============\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1<span class=\"token operator\">==</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true 可以看出str1跟str2是指向同一个对象</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>分析：当执行String str1=”aaa”时，JVM首先会去字符串池中查找是否存在”aaa”这个对象，如果不存在，则在字符串池中创建”aaa”这个对象，然后将池中”aaa”这个对象的引用地址返回给字符串常量str1，这样str1会指向池中”aaa”这个字符串对象；如果存在，则不创建任何对象，直接将池中”aaa”这个对象的地址返回，赋给字符串常量。当创建字符串对象str2时，字符串池中已经存在”aaa”这个对象，直接把对象”aaa”的引用地址返回给str2，这样str2指向了池中”aaa”这个对象，也就是说str1和str2指向了同一个对象，因此语句System.out.println(str1 == str2)输出：true。<br>例2：</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 采用new关键字新建一个字符串对象\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> str3<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> str4<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========test2============\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str3<span class=\"token operator\">==</span>str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false 可以看出用new的方式是生成不同的对象</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>分析： 采用new关键字新建一个字符串对象时，JVM首先在字符串池中查找有没有”aaa”这个字符串对象，如果有，则不在池中再去创建”aaa”这个对象了，直接在堆中创建一个”aaa”字符串对象，然后将堆中的这个”aaa”对象的地址返回赋给引用str3，这样，str3就指向了堆中创建的这个”aaa”字符串对象；如果没有，则首先在字符串池中创建一个”aaa”字符串对象，然后再在堆中创建一个”aaa”字符串对象，然后将堆中这个”aaa”字符串对象的地址返回赋给str3引用，这样，str3指向了堆中创建的这个”aaa”字符串对象。当执行String str4=new String(“aaa”)时， 因为采用new关键字创建对象时，每次new出来的都是一个新的对象，也即是说引用str3和str4指向的是两个不同的对象，因此语句System.out.println(str3 == str4)输出：false。<br>例3：</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 编译期确定\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> s0<span class=\"token operator\">=</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> s1<span class=\"token operator\">=</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> s2<span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========test3============\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s0<span class=\"token operator\">==</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true 可以看出s0跟s1是指向同一个对象</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s0<span class=\"token operator\">==</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true 可以看出s0跟s2是指向同一个对象</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>分析：因为例子中的s0和s1中的”helloworld”都是字符串常量，它们在编译期就被确定了，所以s0==s1为true；而”hello”和”world”也都是字符串常量，当一个字符串由多个字符串常量连接而成时，它自己肯定也是字符串常量，所以s2也同样在编译期就被解析为一个字符串常量，所以s2也是常量池中”helloworld”的一个引用。所以我们得出s0==s1==s2。<br>例4：</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 编译期无法确定\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> s0<span class=\"token operator\">=</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> s1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> s2<span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========test4============\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> s0<span class=\"token operator\">==</span>s1 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false </span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> s0<span class=\"token operator\">==</span>s2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> s1<span class=\"token operator\">==</span>s2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>分析：用new String() 创建的字符串不是常量，不能在编译期就确定，所以new String() 创建的字符串不放入常量池中，它们有自己的地址空间。s0还是常量池中”helloworld”的引用，s1因为无法在编译期确定，所以是运行时创建的新对象”helloworld”的引用，s2因为有后半部分new String(”world”)所以也无法在编译期确定，所以也是一个新创建对象”helloworld”的引用。<br>例5：</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 继续-编译期无法确定\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> str1<span class=\"token operator\">=</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">String</span> str2<span class=\"token operator\">=</span><span class=\"token string\">\"def\"</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">String</span> str3<span class=\"token operator\">=</span>str1<span class=\"token operator\">+</span>str2<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========test5============\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str3<span class=\"token operator\">==</span><span class=\"token string\">\"abcdef\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>分析：因为str3指向堆中的”abcdef”对象，而”abcdef”是字符串池中的对象，所以结果为false。JVM对String str=”abc”对象放在常量池中是在编译时做的，而String str3=str1+str2是在运行时刻才能知道的。new对象也是在运行时才做的。而这段代码总共创建了5个对象，字符串池中两个、堆中三个。+运算符会在堆中建立来两个String对象，这两个对象的值分别是”abc”和”def”，也就是说从字符串池中复制这两个值，然后在堆中创建两个对象，然后再建立对象str3,然后将”abcdef”的堆地址赋给str3。<br>例6：</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 编译期优化\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> s0 <span class=\"token operator\">=</span> <span class=\"token string\">\"a1\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========test6============\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s0 <span class=\"token operator\">==</span> s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//result = true </span>\n    <span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"atrue\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> s3<span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s2 <span class=\"token operator\">==</span> s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//result = true </span>\n    <span class=\"token class-name\">String</span> s4 <span class=\"token operator\">=</span> <span class=\"token string\">\"a3.4\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> s5 <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">3.4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s4 <span class=\"token operator\">==</span> s5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//result = true</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>分析：在程序编译期，JVM就将常量字符串的”+”连接优化为连接后的值，拿”a” + 1来说，经编译器优化后在class中就已经是a1。在编译期其字符串常量的值就确定下来，故上面程序最终的结果都为true。<br>例7：</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 编译期无法确定\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test7</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> s0 <span class=\"token operator\">=</span> <span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">+</span> s1<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========test7============\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s0 <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//result = false</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>分析：JVM对于字符串引用，由于在字符串的”+”连接中，有字符串引用存在，而引用的值在程序编译期是无法确定的，即”a” + s1无法被编译器优化，只有在程序运行期来动态分配并将连接后的新地址赋给s2。所以上面程序的结果也就为false。<br>例8：</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 比较字符串常量的“+”和字符串引用的“+”的区别\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> test<span class=\"token operator\">=</span><span class=\"token string\">\"javalanguagespecification\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> str<span class=\"token operator\">=</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> str1<span class=\"token operator\">=</span><span class=\"token string\">\"language\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> str2<span class=\"token operator\">=</span><span class=\"token string\">\"specification\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========test8============\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>test <span class=\"token operator\">==</span> <span class=\"token string\">\"java\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"language\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"specification\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>test <span class=\"token operator\">==</span> str <span class=\"token operator\">+</span> str1 <span class=\"token operator\">+</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>分析：为什么出现上面的结果呢？这是因为，字符串字面量拼接操作是在Java编译器编译期间就执行了，也就是说编译器编译时，直接把”java”、”language”和”specification”这三个字面量进行”+”操作得到一个”javalanguagespecification” 常量，并且直接将这个常量放入字符串池中，这样做实际上是一种优化，将3个字面量合成一个，避免了创建多余的字符串对象。而字符串引用的”+”运算是在Java运行期间执行的，即str + str2 + str3在程序执行期间才会进行计算，它会在堆内存中重新创建一个拼接后的字符串对象。总结来说就是：字面量”+”拼接是在编译期间进行的，拼接后的字符串存放在字符串池中；而字符串引用的”+”拼接运算实在运行时进行的，新创建的字符串存放在堆中。对于直接相加字符串，效率很高，因为在编译器便确定了它的值，也就是说形如”I”+”love”+”java”; 的字符串相加，在编译期间便被优化成了”Ilovejava”。对于间接相加（即包含字符串引用），形如s1+s2+s3; 效率要比直接相加低，因为在编译器不会对引用变量进行优化。</li>\n</ul>\n<h5 id=\"记录一个字符在字符串中出现的次数\"><a href=\"#记录一个字符在字符串中出现的次数\" class=\"headerlink\" title=\"记录一个字符在字符串中出现的次数\"></a>记录一个字符在字符串中出现的次数</h5><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入第一个字符串:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入第二个字符：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> c2 <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chars <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token operator\">:</span>chars\n             <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">)</span>\n                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">+</span> <span class=\"token string\">\"字符出现了\"</span> <span class=\"token operator\">+</span> count <span class=\"token operator\">+</span> <span class=\"token string\">\"次\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span></code></pre>\n<h5 id=\"记录一个子串在整串中出现的次数\"><a href=\"#记录一个子串在整串中出现的次数\" class=\"headerlink\" title=\"记录一个子串在整串中出现的次数\"></a>记录一个子串在整串中出现的次数</h5><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//输入一个字符串，并再输入一个字符串，输出该字符串出现的次数</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Scanner</span> s<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入1：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> str1<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入2：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> str2<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span>str2<span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n｝\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str1<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> str2<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//如果能在总字符串里找到子字符串</span>\n            <span class=\"token comment\">//就进行截取字符串,从查到索引位置起数子字符串长度个开始截取，到最后结束</span>\n            <span class=\"token class-name\">String</span> news <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> str2<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>news<span class=\"token punctuation\">,</span>str2<span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n \n    <span class=\"token punctuation\">&#125;</span></code></pre>\n<hr>\n<h4 id=\"2-StringBuffer类\"><a href=\"#2-StringBuffer类\" class=\"headerlink\" title=\"2.StringBuffer类\"></a>2.StringBuffer类</h4><p>   1).StringBuffer类概述<br>    StringBuffer是线程安全的可变字符序列.我们如果对字符串进行拼接操作，每次拼接，都会构建一个新的String对象，既耗时，又浪费空间。而StringBuffer就可以解决这个问题.<br>    2).StringBuffer构造方法<br>    public StringBuffer():                                    无参构造方法,构建一个不带字符的字符串缓冲区,大小为16个字符<br>    public StringBuffer(int capacity):                  指定容量的字符串缓冲区对象<br>    public StringBuffer(String str):                     指定字符串内容的字符串缓冲区对象<br>3).StringBuffer常用方法<br>    public int capacity()：                                                   返回当前容量的理论值<br>    public int length():                                                        返回长度（字符数）。 实际值<br>    public StringBuffer append(String str):                          可以把任意类型数据添加到字符串缓冲区里面,并返回字符串缓冲区本身<br>    public StringBuffer insert(int offset,String str):               在指定位置把任意类型的数据插入到字符串缓冲区里面,并返回字符串缓冲区本身<br>    public StringBuffer deleteCharAt(int index):                   删除指定位置的字符并返回本身<br>    public StringBuffer delete(int start,int end):                   删除从指定位置开始指定位置结束的内容，并返回本身<br>    public StringBuffer replace(int start,int end,String str):   从start开始到end用str替换<br>    public StringBuffer reverse():                                         字符串反转<br>    public String substring(int start):                                   从指定位置截取到末尾(返回值类型不再是StringBuffer本身)<br>    public String substring(int start,int end):                       截取从指定位置开始到结束位置，包括开始位置，不包括结束位置(返回值类型不再是StringBuffer本身)</p>\n<p>4).String和StringBuffer互相转化<br>    A::String –&gt; StringBuffer<br>        a:通过构造方法<br>        b:通过append()方法<br>    B:StringBuffer – &gt; String<br>        a: 使用substring方法<br>        b:通过构造方法<br>        c:通过toString()方法</p>\n<h4 id=\"3-StringBuilder方法\"><a href=\"#3-StringBuilder方法\" class=\"headerlink\" title=\"3.StringBuilder方法\"></a>3.StringBuilder方法</h4><p><strong>与StringBuffer操作一致,效率更快,但是线程不安全。</strong></p>\n<h4 id=\"4-包装类\"><a href=\"#4-包装类\" class=\"headerlink\" title=\"4.包装类\"></a>4.包装类</h4><ol>\n<li>什么是包装类？<ul>\n<li>Java是一个面向对象的编程语言，但是Java中的八种基本数据类型却是不面向对象的，为了使用方便和解决这个不足，在设计类时为每个基本数据类型设计了一个对应的类进行代表，这样八种基本数据类型对应的类统称为包装类(Wrapper Class)，包装类均位于java.lang包。 </li>\n</ul>\n</li>\n<li>基本数据的包装类<ol>\n<li></li>\n</ol>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>基本数据类型</th>\n<th>包装类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte</td>\n<td>Byte</td>\n</tr>\n<tr>\n<td>short</td>\n<td>Short</td>\n</tr>\n<tr>\n<td>int</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>long</td>\n<td>Long</td>\n</tr>\n<tr>\n<td>char</td>\n<td>Character</td>\n</tr>\n<tr>\n<td>float</td>\n<td>Float</td>\n</tr>\n<tr>\n<td>double</td>\n<td>Double</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>Boolean</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li>包装类的实际使用<ol>\n<li>基本数据和包装类的转换</li>\n</ol>\n</li>\n</ol>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Integer</span> n1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"int类型转换为integer类：\"</span><span class=\"token operator\">+</span>n1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Integer</span> i<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i1 <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"integer类转换为int类型：\"</span><span class=\"token operator\">+</span>i1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre><code>2. 数值字符串和整型互转</code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//parseInt方法： 数字字符串类型转成int类型</span>\n<span class=\"token class-name\">String</span> ss<span class=\"token operator\">=</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> ii <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字符类型转成整型：\"</span><span class=\"token operator\">+</span>ii<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//toString方法：int类型转成数字字符串类型</span>\n<span class=\"token keyword\">int</span> ii2<span class=\"token operator\">=</span><span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> ss2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>ii2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"int类型转成数字字符串类型:\"</span><span class=\"token operator\">+</span>ss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<ol start=\"4\">\n<li>拆箱和装箱<ul>\n<li>基本数据类型和对应的包装类可以相互转换，由基本数据类型向包装类转换称为装箱，反之为拆箱！<br>注：* 此特性在jdk1.5之后被逐渐淡化<ul>\n<li>包装类用于集合 集合只能用包装类，不能用基本数据类型</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"5-Date和Calendar类\"><a href=\"#5-Date和Calendar类\" class=\"headerlink\" title=\"5. Date和Calendar类\"></a>5. Date和Calendar类</h4><ol>\n<li>Date类<ol>\n<li>使用Date类的无参构造方法创建的对象可以获取本地当前时间</li>\n</ol>\n</li>\n</ol>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Date</span> date<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre><code>2. 时间戳：\n指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总毫秒数。\n3. 获取时间戳</code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">date<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>；\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>；</code></pre>\n<pre><code>4. 格式化日期\n    SimpleDateFormat(格式化日期)：日期和时间格式由 日期和时间模式字符串 指定。在 日期和时间模式字符串 中，未加引号的字母 ‘A’ 到 ‘Z’ 和 ‘a’ 到 ‘z’ 被解释为模式字母，用来表示日期或时间字符串元素。\n    注：在此类中如果想格式化为yyyyyear 需要将year用单引号括起来\n例子：</code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"> <span class=\"token comment\">//日期类转字符串：</span>\n<span class=\"token class-name\">Date</span> ss <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一般日期输出：\"</span> <span class=\"token operator\">+</span> ss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"时间戳：\"</span> <span class=\"token operator\">+</span> ss<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SimpleDateFormat</span>  format <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span>“yyyy<span class=\"token operator\">-</span>MM<span class=\"token operator\">-</span>dd HH<span class=\"token operator\">:</span>mm<span class=\"token operator\">:</span>ss”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将目标格式传入构造方法</span>\n<span class=\"token class-name\">String</span> time <span class=\"token operator\">=</span> format<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>字符串转日期类：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"2019-03-15\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SimpleDateFormat</span> format <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> format<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>Date类实现了Comparable接口 可以直接进行比较操作 实用compareto方法，返回int 相等为0，第一个大返回整数，否则返回负数</strong></p>\n<p>   5.Calendar<br>        用于代替Date类的绝大多数功能。在实际项目当中，我们经常会涉及到对时间的处理，例如登陆网站，我们会看到网站首页显示XXX，欢迎您！今天是XXXX年。。。。某些网站会记录下用户登陆的时间，比如银行的一些网站，仅需要获取当前时间的某部分，比如年份月份邓，对于这些经常需要处理的问题，Java中提供了Calendar这个专门用于对日期进行操作的类（Date类在jdk1.1中也行，但后来都被淘汰掉了）。<br>        * Calendar为抽象类，得用静态方法      </p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Calendar</span> rightNow <span class=\"token operator\">=</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre><code>* 获取时间</code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 获取年</span>\n <span class=\"token keyword\">int</span> year <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>YEAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 获取月，这里需要需要月份的范围为0~11，因此获取月份的时候需要+1才是当前月份值</span>\n <span class=\"token keyword\">int</span> month <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>MONTH<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取日</span>\n <span class=\"token keyword\">int</span> day <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>DAY_OF_MONTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取时</span>\n<span class=\"token keyword\">int</span> hour <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>HOUR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// int hour = calendar.get(Calendar.HOUR_OF_DAY);// 24小时表示</span>\n <span class=\"token comment\">// 获取分</span>\n<span class=\"token keyword\">int</span> minute <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>MINUTE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取秒</span>\n<span class=\"token keyword\">int</span> second <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>SECOND<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre><code>* 设置时间</code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 时</span>\ncalendar<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>HOUR_OF_DAY<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 分</span>\ncalendar<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>MINUTE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 秒</span>\ncalendar<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>SECOND<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 毫秒</span>\ncalendar<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>MILLISECOND<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Calendar和Data转化</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Calendar转化为Data</span>\n<span class=\"token class-name\">Calendar</span> calendar <span class=\"token operator\">=</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//日历类的实例化</span>\ncalendar<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">,</span> month <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置日历时间，月份必须减一</span>\n<span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从一个 Calendar 对象中获取 Date 对象</span>\n \n<span class=\"token comment\">//Data转化为Calendar</span>\n<span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//直接new对象，获取的是当前时间</span>\n<span class=\"token class-name\">Calendar</span> calendar <span class=\"token operator\">=</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncalendar<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>例：<br>    1. 算算自己活了多少天</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//算算自己活了多少天</span>\n        <span class=\"token class-name\">Date</span> date<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> now<span class=\"token operator\">=</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//现在的时间戳</span>\n        <span class=\"token class-name\">Calendar</span> c<span class=\"token operator\">=</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置出生时间</span>\n        <span class=\"token class-name\">Date</span> date1<span class=\"token operator\">=</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取出生时间戳</span>\n        <span class=\"token keyword\">long</span> birth<span class=\"token operator\">=</span>date1<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>now<span class=\"token operator\">-</span>birth<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token operator\">/</span><span class=\"token number\">60</span><span class=\"token operator\">/</span><span class=\"token number\">60</span><span class=\"token operator\">/</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n｝</code></pre>\n<pre><code>2. 求下个月的今天的倒数3天</code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Calendar</span> c<span class=\"token operator\">=</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>MONTH<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>MONTH<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>DAY_OF_MONTH<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>DAY_OF_MONTH<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n｝</code></pre>\n<h4 id=\"6-Math类\"><a href=\"#6-Math类\" class=\"headerlink\" title=\"6. Math类\"></a>6. Math类</h4><p>   Math 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。<br>    1).Math类中常用方法<br>        Math类中所有方法都为静态方法.<br>        Math.floor():         向下取整<br>        Math.round():      四舍五入<br>        Math.ceil():          取不小于num的最小整数<br>        Math.abs():         取绝对值<br>        Math.random():  生成[0,1)之间的随机小数<br>        Math.pow(a,b):   a的b次方<br>        Math.sqrt(num): num的平方根<br>        Math.max():        返回参数中的最大值<br>    2).Math类中的成员变量<br>        Math类中所有成员变量都是静态成员变量.<br>        Math.E:    自然对数的底数e<br>        Math.PI:   圆周率π<br>例：猜数字游戏</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//随机生成[1,100]一个数字，由键盘输入数字进行猜测，如果猜测小了则提示小了，猜测7次不中，提示笨蛋并程序结束</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"恭喜\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">>=</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"笨蛋\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n｝</code></pre>\n<h4 id=\"7-Scanner类\"><a href=\"#7-Scanner类\" class=\"headerlink\" title=\"7.Scanner类\"></a>7.Scanner类</h4><pre><code>  1. Scanner概述\n     * 用于获取用户的键盘输入.\n  2. Scanner常用方法\n     * hasNextXxx():                          判断下一个是否是某种类型的元素,其中Xxx可以是Int,Double等。            * public int nextInt():                  获取一个int类型的值\n     * public String nextLine():           获取一个String类型的值</code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo01_Scanner</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    \n<span class=\"token comment\">//2. 创建键盘录入数据的对象        </span>\n<span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n        \n<span class=\"token comment\">//3. 接收数据        </span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请录入一个整数：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n        \n<span class=\"token comment\">//4. 输出数据        </span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n<span class=\"token punctuation\">&#125;</span>    \n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n<p> **注：Scanner的next方法和nextline方法不要一起用 会出bug</p>\n<h4 id=\"8-System类\"><a href=\"#8-System类\" class=\"headerlink\" title=\"8.System类\"></a>8.System类</h4><pre><code>  1. 概述  \n     System 类中提供了大量的静态方法，可以获取与系统相关的信息或系统级操作。\n  2. 常用方法\n     * currentTimeMillis() ：返回以毫秒为单位的当前时间（时间戳）–获取当前系统时间与1970年01月01日00:00点之间的毫秒差值；\n     * arraycopy(Object src, int srcPos, Object dest, int destPos, int length) ：将数组中指定的数据拷贝到另一个数组中\n     * gc()： 垃圾回收\n     * exit(int status)   终止当前正在运行的 Java 虚拟机；（int status:状态码,给JVM看，0:正常终止，其他数字:异常终止）</code></pre>\n<p>​<br>​     </p>","categories":[],"tags":[{"name":"Java","path":"api/tags/Java.json"}]}