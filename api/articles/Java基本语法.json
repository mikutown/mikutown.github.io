{"title":"Java基本语法","slug":"Java基本语法","date":"2020-04-01T13:15:01.000Z","updated":"2022-05-20T07:54:07.515Z","comments":true,"path":"api/articles/Java基本语法.json","excerpt":"Java基本语法Java基础知识1.idea中一个项目中可以包含多个module2.建类需要先建包 包的名字是公司域名的反向 ","covers":null,"content":"<h1 id=\"Java基本语法\"><a href=\"#Java基本语法\" class=\"headerlink\" title=\"Java基本语法\"></a>Java基本语法</h1><h2 id=\"Java基础知识\"><a href=\"#Java基础知识\" class=\"headerlink\" title=\"Java基础知识\"></a>Java基础知识</h2><hr>\n<p>1.idea中一个项目中可以包含多个module</p>\n<hr>\n<p>2.建类需要先建包 包的名字是公司域名的反向 </p>\n<span id=\"more\"></span>\n\n<hr>\n<p>例：</p>\n<pre class=\"language-none\"><code class=\"language-none\">net.suncaper</code></pre>\n\n<p>3.建立测试类 按ctrl+shift+T alt+Enter下载需要的东西</p>\n<hr>\n<p>在测试类中的方法之前加上@Test注解</p>\n<hr>\n<p>4.在测试类中可以添加@Before注解 使被标记的方法在所有测试方法在测试之前运行</p>\n<hr>\n<p>5.在测试类中可以添加@After注解 使被标记的方法在所有测试方法在测试之后运行</p>\n<hr>\n<h2 id=\"Java基础知识-1\"><a href=\"#Java基础知识-1\" class=\"headerlink\" title=\"Java基础知识\"></a>Java基础知识</h2><p>1.Java中的注释类型：<br>单行注释：  &#x2F;&#x2F;<br>多行注释： &#x2F;<em>xxx</em>&#x2F;<br>文档注释（java 特有）: &#x2F;**  xxx*&#x2F;在开始的 &#x2F;** 之后，第一行或几行是关于类、变量和方法的主要描述。之后，你可以包含一个或多个何种各样的 @ 标签。每一个 @ 标签必须在一个新行的开始或者在一行的开始紧跟星号(*).<br>如：</p>\n<pre class=\"language-/***\" data-language=\"/***\"><code class=\"language-/***\">基础类\n* @author xx\n* @version v1.2 \n*&#x2F;</code></pre>\n\n<p>注释是一个程序员必须要具有的良好编程习惯。将自己的思想通过注释先整理出来，再用代码去体现。</p>\n<p>文档注释：<br>例：</p>\n<pre class=\"language-none\"><code class=\"language-none\">&#x2F;**\n*注释实例\n*@author yys\n*@date 2019.9.6\n*&#x2F;</code></pre>\n\n<p>例:</p>\n<pre class=\"language-none\"><code class=\"language-none\">&#x2F;**\n*注释实例\n*@param a 整数a\n*@param b 整数b\n@return a与b中的最大值\n*@author yys\n*@date 2019.9.6\n*&#x2F;</code></pre>\n\n<p>文档注释-&gt;Tools generateJavaDoc<br>可以用这个工具 将自己的文档注释生成网页 在二次开发等都有一定的依赖<br>在Other。。。的那一栏写参数： -encoding UTF-8 -charset UTF-8 不然会因为字符编码报错</p>\n<hr>\n<p>2.Java变量<br>Java中的变量和方法命名的基本规范：</p>\n<p>  变量和方法名首字母小写,驼峰式<br>  类名首字母大写，驼峰式<br>  常量全大写，划线式<br>例子：</p>\n<pre class=\"language-none\"><code class=\"language-none\">public class TestJavaBasic&#123;\n    public static final String STUDENT_NUMBER &#x3D; &quot;2345&quot;;\n    public void getMax()&#123;\n    int myAge &#x3D; 0;\n    &#x2F;&#x2F;int my_age &#x3D; 0； 不要使用这种划线式 要使用驼峰式 \n    &#x2F;&#x2F;当一门语言如果不支持大小写的情况下，比如VB\n&#125;\n&#125;</code></pre>\n\n<p>Java 对各种变量、方法和类等要素命名时使用的字符序列称为标识符，凡是自己可以起名字的地方都叫标识符。</p>\n<p>定义合法标识符规则</p>\n<p>由26个英文字母大小写，数字：0-9 ，_或 $ 组成 </p>\n<p>数字不可以开头。</p>\n<p>不可以使用关键字和保留字，但能包含关键字和保留字。</p>\n<p>Java中严格区分大小写，长度无限制。</p>\n<p>标识符不能包含空格。</p>\n<p>注意：在起名字的时，为了提高阅读性，要尽量有意义，“见名知意”。</p>\n<p>关键字：</p>\n<p>定义：被Java语言赋予了特殊含义，用做专门用途的字符串（单词）特点：关键字中所有字母都为小写<br>常用关键字：</p>\n<pre class=\"language-none\"><code class=\"language-none\">用于定义数据类型的关键字:class,interface,enum,byte,short,int,long,float,double,char,boolean,void\n\n用于定义数据类型值的关键字:true,false,null\n\n用于定义流程控制的关键字：if，else，switch，case，default，while，do，for，break，continue，return\n\n用于定义访问权限修饰符的关键字：private，protected，public\n\n用于定义类，函数，变量修饰符的关键字：\nabstract，final，static，synchronized\n\n用于定义类与类之间关系的关键字：extends，implements\n\n用于定义建立实例及引用实例，判断实例的关键字：new，this，super，instanceof\n\n用于异常处理的关键字：try，catch，finally，throw，throws\n\n用于包的关键字：package，import\n\n\n其他修饰符关键字：native，strictfp，transient，volatile，assert</code></pre>\n\n<p>注：java中的常量所谓常量可以理解成一种特殊的变量，它的值被设定后，在程序运行过程中不允许被改变。</p>\n<h2 id=\"Java中的变量\"><a href=\"#Java中的变量\" class=\"headerlink\" title=\"Java中的变量\"></a>Java中的变量</h2><p>1).变量的定义</p>\n<p>变量的概念：</p>\n<p>内存中的一个存储区域。该区域有自己的名称（变量名）和类型（数据类型）。Java中每个变量必须先声明，后使用。该区域的数据可以在同一类型范围内不断变化。</p>\n<p>定义变量的格式：</p>\n<p>数据类型    变量名  &#x3D;  初始化值</p>\n<p>使用变量注意：</p>\n<p>变量是通过使用变量名来访问这块区域的，变量的作用域：一对{ }之间有效</p>\n<p>2).变量的数据类型</p>\n<p>对于每一种数据都定义了明确的具体数据类型，在内存中分配了不同大小的内存空间。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>占用存储空间</th>\n<th>表数范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte</td>\n<td>1字节</td>\n<td>-128~127</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2字节</td>\n<td>-215~215-1</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4字节</td>\n<td>-231~231-1</td>\n</tr>\n<tr>\n<td>long</td>\n<td>8字节</td>\n<td>-263~263-1</td>\n</tr>\n</tbody></table>\n<p>浮点类型：float、double</p>\n<p>与整数类型类似，Java 浮点类型也有固定的表数范围和字段长度。</p>\n<p>Java 的浮点型常量默认为 double 型，声明 float 型常量，须后加 ‘f’ 或 ‘F’。</p>\n<p>字符类型：char</p>\n<p>char 型数据用来表示通常意义上”字符”。</p>\n<p>字符型常量的三种表现形式：</p>\n<p>字符常量是用单引号(‘ ’)括起来的单个字符，涵盖世界上所有书面语的字符。例如：char c1 &#x3D; ‘a’;   char c2 &#x3D; ‘中’; char c3 &#x3D;  ‘9’;</p>\n<p>Java中还允许使用转义字符‘\\’来将其后的字符转变为特殊字符型常量。例如：char c3 &#x3D; ‘\\n’;  – ‘\\n’表示换行符</p>\n<p>直接使用 Unicode 值来表示字符型常量：‘\\uXXXX’。其中，XXXX代表一个十六进制整数。如：\\u000a 表示 \\n。</p>\n<p>char 类型是可以进行运算的。因为它都对应有 Unicode 值。</p>\n<p>布尔类型：boolean</p>\n<p>boolean 类型适于逻辑运算，一般用于程序流程控制：</p>\n<p>if条件控制语句；while循环控制语句；do-while循环控制语句；for循环控制语句；</p>\n<p>boolean类型数据只允许取值true和false，不可以0或非 0 的整数替代true和false，这点和C语言不同。</p>\n<hr>\n<p>基本数据类型转换</p>\n<p>自动类型转换</p>\n<p>容量小的类型自动转换为容量大的数据类型。数据类型按容量大小排序为：<br>byte-&gt;short-&gt;int-&gt;long-&gt;float-&gt;double<br>           char-&gt;int</p>\n<hr>\n<p>强制类型转换</p>\n<p>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符（()），()中写转换的目标类型，但可能造成精度降低或溢出,格外要注意。</p>\n<p>如将3.14转化为int类型：(int)3.14.<br>boolean类型不可以转换为其它的数据类型。 </p>\n<hr>\n<p>结论<br>&#x2F;&#x2F; byte short int long float doubl<br>a . 从左至右称为扩宽类型，把左边类型直接赋值给右边类型，称为自动转换，反之需要强转<br>b. 表达式运算结果的最低级别是int 类型</p>\n<hr>\n<p>变量的作用域<br>变量的作用域：一对{ }之间有效</p>\n<hr>\n<p>double小数取后三位  并四舍五入</p>\n<pre class=\"language-none\"><code class=\"language-none\">@Test\npublic void change2()&#123;    \n    double a &#x3D; 3.2343543345;\n    a &#x3D; (int)(a * 1000 + 0.5)&#x2F;1000.0;  \n    System.out.println(a);\n    &#125;</code></pre>\n\n<p>简单的对称加密（使用了^运算符）^-^</p>\n<pre class=\"language-none\"><code class=\"language-none\">@Test\n    public void testYiHuo()&#123;&#x2F;&#x2F;用于简单的对称加密\n        int old &#x3D; 5201314;\n        int pwd &#x3D; 6110;&#x2F;&#x2F;密钥\n        int b &#x3D; old^pwd;&#x2F;&#x2F;加密后的值\n        System.out.println(b);\n        int New &#x3D; b^pwd;\n        System.out.println(New);&#x2F;&#x2F;解密后的值\n        System.out.println(New &#x3D;&#x3D; old);\n    &#125;</code></pre>\n\n<hr>\n<p> java运算符<br> 算术运算符：a++是先使用a的值 再自增<br>                a–是先自增 再使用a的值<br>                例</p>\n  <pre class=\"language-none\"><code class=\"language-none\">@Test\npublic void change2()&#123;\n    int a &#x3D; 3;\n    int b &#x3D; a++   &#x2F;&#x2F;a&#x3D;4 b&#x3D;3\n            + a++ &#x2F;&#x2F;a&#x3D;5 b&#x3D;3+4\n            + ++a&#x2F;&#x2F;a&#x3D;6 b&#x3D;7+6\n            + a++&#x2F;&#x2F;a&#x3D;7 b&#x3D;13+6\n            + ++a&#x2F;&#x2F;a&#x3D;8 b&#x3D;19+8\n            + a++;&#x2F;&#x2F;a&#x3D;9 b&#x3D;27+8&#x3D;35\n    System.out.println(a);&#x2F;&#x2F;9\n    System.out.println(b);&#x2F;&#x2F;35\n&#125;</code></pre>\n\n<p>比较运算符 结果都是boolean型<br>instanceof是检查是否是类的对象<br>实例：</p>\n<pre class=\"language-none\"><code class=\"language-none\">&quot;Hello&quot; instanceof String\n&#x2F;&#x2F;结果为True</code></pre>\n\n<p> 逻辑运算符中<br>“&amp;”和“&amp;&amp;”的区别：<br>单&amp;时，左边无论真假，右边都进行运算；<br>双&amp;时，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算。<br>和“||”的区别同理，双或时，左边为真，右边不参与运算。<br>异或( ^ )与或( | )的不同之处是：对于 ^ 而言，当左右都为true时，结果为false。</p>\n<hr>\n<p>三目运算符<br>格式:     (条件表达式)?表达式1：表达式2；</p>\n<p>如果条件为true，运算后的结果是表达式1；</p>\n<p>如果条件为false，运算后的结果是表达式2；<br>例：</p>\n<pre class=\"language-none\"><code class=\"language-none\">@Test\n    public int Demo(int a,int b)&#123;\n        return (a&gt;b)?a:b;\n    &#125;\n    </code></pre>\n\n<hr>\n<h2 id=\"选择结构语句\"><a href=\"#选择结构语句\" class=\"headerlink\" title=\"选择结构语句\"></a>选择结构语句</h2><p>if语句<br>if-else语句<br>if-else if-else语句<br>switch语句<br>例：</p>\n<pre class=\"language-none\"><code class=\"language-none\">switch(expression)&#123;\n       case value1 : &#x2F;&#x2F;语句\n                 break; &#x2F;&#x2F;可选\n       case value2 : &#x2F;&#x2F;语句\n                 break; &#x2F;&#x2F;可选\n       case value3 : &#x2F;&#x2F;语句\n                 break; &#x2F;&#x2F;可选\n       default : &#x2F;&#x2F;可选 &#x2F;&#x2F;语句\n&#125;</code></pre>\n\n<h2 id=\"逻辑语句结构\"><a href=\"#逻辑语句结构\" class=\"headerlink\" title=\"逻辑语句结构\"></a>逻辑语句结构</h2><p>while循环<br>注：要先写i++等语句<br>do while循环 至少执行一次<br>break 语句：<br>break语句用于终止某个语句块的执行</p>\n<p>break循环默认只能跳出属于break自己的内循环<br>再jdk1.6之前 若想跳出循环 需要在原有的循环代码</p>\n<pre class=\"language-none\"><code class=\"language-none\">@Test\n public void Demo()&#123;\n     for (int i &#x3D; 1; i &lt;&#x3D;5; i++) &#123;\n         for (int j &#x3D; 1; j &lt;&#x3D;10 ; j++) &#123;\n             System.out.println(&quot;你好&quot;);\n             if(j&#x3D;&#x3D;3)&#123;\n                 break;\n             &#125;\n         &#125;\n     &#125;\n &#125;</code></pre>\n\n<p>修改为</p>\n<pre class=\"language-none\"><code class=\"language-none\">@Test\n    public void Demo()&#123;\n        boolean isBr &#x3D; true;\n        for (int i &#x3D; 1; i &lt;&#x3D;5&amp;&amp;isBr; i++) &#123;\n            for (int j &#x3D; 1; j &lt;&#x3D;10 ; j++) &#123;\n                System.out.println(&quot;你好&quot;);\n                if(j&#x3D;&#x3D;3)&#123;\n                    isBr&#x3D;false;\n                    break;\n                &#125;\n            &#125;\n        &#125;\n    &#125;</code></pre>\n\n<p> 如果是在jdk1.6之后的版本 可以选择给每一个循环起一个别名</p>\n <pre class=\"language-none\"><code class=\"language-none\"> @Test\npublic void Demo()&#123;\n    forA:for (int i &#x3D; 1; i &lt;&#x3D;5; i++) &#123;\n        forB:for (int j &#x3D; 1; j &lt;&#x3D;10 ; j++) &#123;\n            System.out.println(&quot;你好&quot;);\n            if(j&#x3D;&#x3D;3)&#123;\n                break forA;\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p> continue语句:<br>continue语句用于跳过某个循环语句块的一次执行<br>continue语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环</p>\n<p>–</p>\n<h2 id=\"函数（方法）\"><a href=\"#函数（方法）\" class=\"headerlink\" title=\"函数（方法）\"></a>函数（方法）</h2><p>什么是函数<br>函数声明：<br>访问权限  返回值类型 函数名（参数类型 形式参数1，参数类型 形式参数2，….）｛<br>          程序代码<br>     return 返回值；<br>｝<br>其中：<br>形式参数：在方法被调用时用于接收外部传入的数据的变量。<br>参数类型：就是该形式参数的数据类型。<br>返回值：方法在执行完毕后返还给调用它的程序的数据。<br>返回值类型：函数要返回的结果的数据类型。<br>实参：调用函数时实际传给函数形式参数的数据。<br>2).函数的重载<br>函数的重载就是在同一个类中允许同时存在一个以上的同名函数，只要它们的参数个数或类型不同即可。<br>在同一个类中可以定义多个同名方法—方法名重载(overload)。<br>例子：</p>\n<pre class=\"language-none\"><code class=\"language-none\">public class Test&#123;\n       public static void main(String [] args)&#123;\n        int isum;\n        double fsum;\n        isum&#x3D;add(3,5);\n        isum&#x3D;add(3,5,6);\n        fsum&#x3D;add(3.2,6.5);\n       &#125;\n      public static int add(int x,int y)         &#123;  reutrn x+y; &#125;\n      public static int add(int x,int y,int z)   &#123; return x+y+z; &#125;\n      public static double add(double x,double y)&#123;  return x+y; &#125;\n    &#125;</code></pre>\n\n<p>注：<br>重载方法的参数列表必须不同<br>重载方法的返回值类型可以相同，也可以不同<br>调用时根据方法的参数类型来区别。</p>\n","more":"<hr>\n<p>例：</p>\n<pre class=\"language-none\"><code class=\"language-none\">net.suncaper</code></pre>\n\n<p>3.建立测试类 按ctrl+shift+T alt+Enter下载需要的东西</p>\n<hr>\n<p>在测试类中的方法之前加上@Test注解</p>\n<hr>\n<p>4.在测试类中可以添加@Before注解 使被标记的方法在所有测试方法在测试之前运行</p>\n<hr>\n<p>5.在测试类中可以添加@After注解 使被标记的方法在所有测试方法在测试之后运行</p>\n<hr>\n<h2 id=\"Java基础知识-1\"><a href=\"#Java基础知识-1\" class=\"headerlink\" title=\"Java基础知识\"></a>Java基础知识</h2><p>1.Java中的注释类型：<br>单行注释：  &#x2F;&#x2F;<br>多行注释： &#x2F;<em>xxx</em>&#x2F;<br>文档注释（java 特有）: &#x2F;**  xxx*&#x2F;在开始的 &#x2F;** 之后，第一行或几行是关于类、变量和方法的主要描述。之后，你可以包含一个或多个何种各样的 @ 标签。每一个 @ 标签必须在一个新行的开始或者在一行的开始紧跟星号(*).<br>如：</p>\n<pre class=\"language-/***\" data-language=\"/***\"><code class=\"language-/***\">基础类\n* @author xx\n* @version v1.2 \n*&#x2F;</code></pre>\n\n<p>注释是一个程序员必须要具有的良好编程习惯。将自己的思想通过注释先整理出来，再用代码去体现。</p>\n<p>文档注释：<br>例：</p>\n<pre class=\"language-none\"><code class=\"language-none\">&#x2F;**\n*注释实例\n*@author yys\n*@date 2019.9.6\n*&#x2F;</code></pre>\n\n<p>例:</p>\n<pre class=\"language-none\"><code class=\"language-none\">&#x2F;**\n*注释实例\n*@param a 整数a\n*@param b 整数b\n@return a与b中的最大值\n*@author yys\n*@date 2019.9.6\n*&#x2F;</code></pre>\n\n<p>文档注释-&gt;Tools generateJavaDoc<br>可以用这个工具 将自己的文档注释生成网页 在二次开发等都有一定的依赖<br>在Other。。。的那一栏写参数： -encoding UTF-8 -charset UTF-8 不然会因为字符编码报错</p>\n<hr>\n<p>2.Java变量<br>Java中的变量和方法命名的基本规范：</p>\n<p>  变量和方法名首字母小写,驼峰式<br>  类名首字母大写，驼峰式<br>  常量全大写，划线式<br>例子：</p>\n<pre class=\"language-none\"><code class=\"language-none\">public class TestJavaBasic&#123;\n    public static final String STUDENT_NUMBER &#x3D; &quot;2345&quot;;\n    public void getMax()&#123;\n    int myAge &#x3D; 0;\n    &#x2F;&#x2F;int my_age &#x3D; 0； 不要使用这种划线式 要使用驼峰式 \n    &#x2F;&#x2F;当一门语言如果不支持大小写的情况下，比如VB\n&#125;\n&#125;</code></pre>\n\n<p>Java 对各种变量、方法和类等要素命名时使用的字符序列称为标识符，凡是自己可以起名字的地方都叫标识符。</p>\n<p>定义合法标识符规则</p>\n<p>由26个英文字母大小写，数字：0-9 ，_或 $ 组成 </p>\n<p>数字不可以开头。</p>\n<p>不可以使用关键字和保留字，但能包含关键字和保留字。</p>\n<p>Java中严格区分大小写，长度无限制。</p>\n<p>标识符不能包含空格。</p>\n<p>注意：在起名字的时，为了提高阅读性，要尽量有意义，“见名知意”。</p>\n<p>关键字：</p>\n<p>定义：被Java语言赋予了特殊含义，用做专门用途的字符串（单词）特点：关键字中所有字母都为小写<br>常用关键字：</p>\n<pre class=\"language-none\"><code class=\"language-none\">用于定义数据类型的关键字:class,interface,enum,byte,short,int,long,float,double,char,boolean,void\n\n用于定义数据类型值的关键字:true,false,null\n\n用于定义流程控制的关键字：if，else，switch，case，default，while，do，for，break，continue，return\n\n用于定义访问权限修饰符的关键字：private，protected，public\n\n用于定义类，函数，变量修饰符的关键字：\nabstract，final，static，synchronized\n\n用于定义类与类之间关系的关键字：extends，implements\n\n用于定义建立实例及引用实例，判断实例的关键字：new，this，super，instanceof\n\n用于异常处理的关键字：try，catch，finally，throw，throws\n\n用于包的关键字：package，import\n\n\n其他修饰符关键字：native，strictfp，transient，volatile，assert</code></pre>\n\n<p>注：java中的常量所谓常量可以理解成一种特殊的变量，它的值被设定后，在程序运行过程中不允许被改变。</p>\n<h2 id=\"Java中的变量\"><a href=\"#Java中的变量\" class=\"headerlink\" title=\"Java中的变量\"></a>Java中的变量</h2><p>1).变量的定义</p>\n<p>变量的概念：</p>\n<p>内存中的一个存储区域。该区域有自己的名称（变量名）和类型（数据类型）。Java中每个变量必须先声明，后使用。该区域的数据可以在同一类型范围内不断变化。</p>\n<p>定义变量的格式：</p>\n<p>数据类型    变量名  &#x3D;  初始化值</p>\n<p>使用变量注意：</p>\n<p>变量是通过使用变量名来访问这块区域的，变量的作用域：一对{ }之间有效</p>\n<p>2).变量的数据类型</p>\n<p>对于每一种数据都定义了明确的具体数据类型，在内存中分配了不同大小的内存空间。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>占用存储空间</th>\n<th>表数范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte</td>\n<td>1字节</td>\n<td>-128~127</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2字节</td>\n<td>-215~215-1</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4字节</td>\n<td>-231~231-1</td>\n</tr>\n<tr>\n<td>long</td>\n<td>8字节</td>\n<td>-263~263-1</td>\n</tr>\n</tbody></table>\n<p>浮点类型：float、double</p>\n<p>与整数类型类似，Java 浮点类型也有固定的表数范围和字段长度。</p>\n<p>Java 的浮点型常量默认为 double 型，声明 float 型常量，须后加 ‘f’ 或 ‘F’。</p>\n<p>字符类型：char</p>\n<p>char 型数据用来表示通常意义上”字符”。</p>\n<p>字符型常量的三种表现形式：</p>\n<p>字符常量是用单引号(‘ ’)括起来的单个字符，涵盖世界上所有书面语的字符。例如：char c1 &#x3D; ‘a’;   char c2 &#x3D; ‘中’; char c3 &#x3D;  ‘9’;</p>\n<p>Java中还允许使用转义字符‘\\’来将其后的字符转变为特殊字符型常量。例如：char c3 &#x3D; ‘\\n’;  – ‘\\n’表示换行符</p>\n<p>直接使用 Unicode 值来表示字符型常量：‘\\uXXXX’。其中，XXXX代表一个十六进制整数。如：\\u000a 表示 \\n。</p>\n<p>char 类型是可以进行运算的。因为它都对应有 Unicode 值。</p>\n<p>布尔类型：boolean</p>\n<p>boolean 类型适于逻辑运算，一般用于程序流程控制：</p>\n<p>if条件控制语句；while循环控制语句；do-while循环控制语句；for循环控制语句；</p>\n<p>boolean类型数据只允许取值true和false，不可以0或非 0 的整数替代true和false，这点和C语言不同。</p>\n<hr>\n<p>基本数据类型转换</p>\n<p>自动类型转换</p>\n<p>容量小的类型自动转换为容量大的数据类型。数据类型按容量大小排序为：<br>byte-&gt;short-&gt;int-&gt;long-&gt;float-&gt;double<br>           char-&gt;int</p>\n<hr>\n<p>强制类型转换</p>\n<p>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符（()），()中写转换的目标类型，但可能造成精度降低或溢出,格外要注意。</p>\n<p>如将3.14转化为int类型：(int)3.14.<br>boolean类型不可以转换为其它的数据类型。 </p>\n<hr>\n<p>结论<br>&#x2F;&#x2F; byte short int long float doubl<br>a . 从左至右称为扩宽类型，把左边类型直接赋值给右边类型，称为自动转换，反之需要强转<br>b. 表达式运算结果的最低级别是int 类型</p>\n<hr>\n<p>变量的作用域<br>变量的作用域：一对{ }之间有效</p>\n<hr>\n<p>double小数取后三位  并四舍五入</p>\n<pre class=\"language-none\"><code class=\"language-none\">@Test\npublic void change2()&#123;    \n    double a &#x3D; 3.2343543345;\n    a &#x3D; (int)(a * 1000 + 0.5)&#x2F;1000.0;  \n    System.out.println(a);\n    &#125;</code></pre>\n\n<p>简单的对称加密（使用了^运算符）^-^</p>\n<pre class=\"language-none\"><code class=\"language-none\">@Test\n    public void testYiHuo()&#123;&#x2F;&#x2F;用于简单的对称加密\n        int old &#x3D; 5201314;\n        int pwd &#x3D; 6110;&#x2F;&#x2F;密钥\n        int b &#x3D; old^pwd;&#x2F;&#x2F;加密后的值\n        System.out.println(b);\n        int New &#x3D; b^pwd;\n        System.out.println(New);&#x2F;&#x2F;解密后的值\n        System.out.println(New &#x3D;&#x3D; old);\n    &#125;</code></pre>\n\n<hr>\n<p> java运算符<br> 算术运算符：a++是先使用a的值 再自增<br>                a–是先自增 再使用a的值<br>                例</p>\n  <pre class=\"language-none\"><code class=\"language-none\">@Test\npublic void change2()&#123;\n    int a &#x3D; 3;\n    int b &#x3D; a++   &#x2F;&#x2F;a&#x3D;4 b&#x3D;3\n            + a++ &#x2F;&#x2F;a&#x3D;5 b&#x3D;3+4\n            + ++a&#x2F;&#x2F;a&#x3D;6 b&#x3D;7+6\n            + a++&#x2F;&#x2F;a&#x3D;7 b&#x3D;13+6\n            + ++a&#x2F;&#x2F;a&#x3D;8 b&#x3D;19+8\n            + a++;&#x2F;&#x2F;a&#x3D;9 b&#x3D;27+8&#x3D;35\n    System.out.println(a);&#x2F;&#x2F;9\n    System.out.println(b);&#x2F;&#x2F;35\n&#125;</code></pre>\n\n<p>比较运算符 结果都是boolean型<br>instanceof是检查是否是类的对象<br>实例：</p>\n<pre class=\"language-none\"><code class=\"language-none\">&quot;Hello&quot; instanceof String\n&#x2F;&#x2F;结果为True</code></pre>\n\n<p> 逻辑运算符中<br>“&amp;”和“&amp;&amp;”的区别：<br>单&amp;时，左边无论真假，右边都进行运算；<br>双&amp;时，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算。<br>和“||”的区别同理，双或时，左边为真，右边不参与运算。<br>异或( ^ )与或( | )的不同之处是：对于 ^ 而言，当左右都为true时，结果为false。</p>\n<hr>\n<p>三目运算符<br>格式:     (条件表达式)?表达式1：表达式2；</p>\n<p>如果条件为true，运算后的结果是表达式1；</p>\n<p>如果条件为false，运算后的结果是表达式2；<br>例：</p>\n<pre class=\"language-none\"><code class=\"language-none\">@Test\n    public int Demo(int a,int b)&#123;\n        return (a&gt;b)?a:b;\n    &#125;\n    </code></pre>\n\n<hr>\n<h2 id=\"选择结构语句\"><a href=\"#选择结构语句\" class=\"headerlink\" title=\"选择结构语句\"></a>选择结构语句</h2><p>if语句<br>if-else语句<br>if-else if-else语句<br>switch语句<br>例：</p>\n<pre class=\"language-none\"><code class=\"language-none\">switch(expression)&#123;\n       case value1 : &#x2F;&#x2F;语句\n                 break; &#x2F;&#x2F;可选\n       case value2 : &#x2F;&#x2F;语句\n                 break; &#x2F;&#x2F;可选\n       case value3 : &#x2F;&#x2F;语句\n                 break; &#x2F;&#x2F;可选\n       default : &#x2F;&#x2F;可选 &#x2F;&#x2F;语句\n&#125;</code></pre>\n\n<h2 id=\"逻辑语句结构\"><a href=\"#逻辑语句结构\" class=\"headerlink\" title=\"逻辑语句结构\"></a>逻辑语句结构</h2><p>while循环<br>注：要先写i++等语句<br>do while循环 至少执行一次<br>break 语句：<br>break语句用于终止某个语句块的执行</p>\n<p>break循环默认只能跳出属于break自己的内循环<br>再jdk1.6之前 若想跳出循环 需要在原有的循环代码</p>\n<pre class=\"language-none\"><code class=\"language-none\">@Test\n public void Demo()&#123;\n     for (int i &#x3D; 1; i &lt;&#x3D;5; i++) &#123;\n         for (int j &#x3D; 1; j &lt;&#x3D;10 ; j++) &#123;\n             System.out.println(&quot;你好&quot;);\n             if(j&#x3D;&#x3D;3)&#123;\n                 break;\n             &#125;\n         &#125;\n     &#125;\n &#125;</code></pre>\n\n<p>修改为</p>\n<pre class=\"language-none\"><code class=\"language-none\">@Test\n    public void Demo()&#123;\n        boolean isBr &#x3D; true;\n        for (int i &#x3D; 1; i &lt;&#x3D;5&amp;&amp;isBr; i++) &#123;\n            for (int j &#x3D; 1; j &lt;&#x3D;10 ; j++) &#123;\n                System.out.println(&quot;你好&quot;);\n                if(j&#x3D;&#x3D;3)&#123;\n                    isBr&#x3D;false;\n                    break;\n                &#125;\n            &#125;\n        &#125;\n    &#125;</code></pre>\n\n<p> 如果是在jdk1.6之后的版本 可以选择给每一个循环起一个别名</p>\n <pre class=\"language-none\"><code class=\"language-none\"> @Test\npublic void Demo()&#123;\n    forA:for (int i &#x3D; 1; i &lt;&#x3D;5; i++) &#123;\n        forB:for (int j &#x3D; 1; j &lt;&#x3D;10 ; j++) &#123;\n            System.out.println(&quot;你好&quot;);\n            if(j&#x3D;&#x3D;3)&#123;\n                break forA;\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p> continue语句:<br>continue语句用于跳过某个循环语句块的一次执行<br>continue语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环</p>\n<p>–</p>\n<h2 id=\"函数（方法）\"><a href=\"#函数（方法）\" class=\"headerlink\" title=\"函数（方法）\"></a>函数（方法）</h2><p>什么是函数<br>函数声明：<br>访问权限  返回值类型 函数名（参数类型 形式参数1，参数类型 形式参数2，….）｛<br>          程序代码<br>     return 返回值；<br>｝<br>其中：<br>形式参数：在方法被调用时用于接收外部传入的数据的变量。<br>参数类型：就是该形式参数的数据类型。<br>返回值：方法在执行完毕后返还给调用它的程序的数据。<br>返回值类型：函数要返回的结果的数据类型。<br>实参：调用函数时实际传给函数形式参数的数据。<br>2).函数的重载<br>函数的重载就是在同一个类中允许同时存在一个以上的同名函数，只要它们的参数个数或类型不同即可。<br>在同一个类中可以定义多个同名方法—方法名重载(overload)。<br>例子：</p>\n<pre class=\"language-none\"><code class=\"language-none\">public class Test&#123;\n       public static void main(String [] args)&#123;\n        int isum;\n        double fsum;\n        isum&#x3D;add(3,5);\n        isum&#x3D;add(3,5,6);\n        fsum&#x3D;add(3.2,6.5);\n       &#125;\n      public static int add(int x,int y)         &#123;  reutrn x+y; &#125;\n      public static int add(int x,int y,int z)   &#123; return x+y+z; &#125;\n      public static double add(double x,double y)&#123;  return x+y; &#125;\n    &#125;</code></pre>\n\n<p>注：<br>重载方法的参数列表必须不同<br>重载方法的返回值类型可以相同，也可以不同<br>调用时根据方法的参数类型来区别。</p>","categories":[],"tags":[{"name":"Java","path":"api/tags/Java.json"}]}