{"title":"leetcode283.移动零","slug":"leetcode283-移动零","date":"2023-08-08T11:48:39.000Z","updated":"2023-08-08T11:50:12.866Z","comments":true,"path":"api/articles/leetcode283-移动零.json","excerpt":"题目给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。请注意 ，必须在不复制数组的情况下原地对数组进行操作。","covers":null,"content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p>\n<p><strong>请注意</strong> ，必须在不复制数组的情况下原地对数组进行操作。</p>\n<span id=\"more\"></span> \n\n<p><strong>示例 1:</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入: nums &#x3D; [0,1,0,3,12]\n输出: [1,3,12,0,0]</code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入: nums &#x3D; [0]\n输出: [0]</code></pre>\n\n<p><strong>提示</strong>:</p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 104</code></li>\n<li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li>\n</ul>\n<p><strong>进阶：</strong>你能尽量减少完成的操作次数吗？</p>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ul>\n<li>双指针</li>\n</ul>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    void moveZeroes(vector&lt;int&gt;&amp; nums) &#123;\n        int n &#x3D; nums.size(); &#x2F;&#x2F; 获取数组长度\n\n        int right &#x3D; 0; &#x2F;&#x2F; 定义指向数组右边的指针\n        int left &#x3D; 0; &#x2F;&#x2F; 定义指向数组左边的指针\n\n        while (right &lt; nums.size()) &#123; &#x2F;&#x2F; 循环遍历数组\n            if (nums[right] &#x3D;&#x3D; 0); &#x2F;&#x2F; 如果当前元素为零，跳过该步骤（注：这里存在逻辑错误，应该去掉分号，即 if (nums[right] &#x3D;&#x3D; 0)）\n            else &#123;\n                nums[left] &#x3D; nums[right]; &#x2F;&#x2F; 如果当前元素不为零，将其移动到左边（注：这里将非零元素移到了左边，而不是把零元素移到右边）\n                left++; &#x2F;&#x2F; 左指针右移一位\n            &#125;\n            right++; &#x2F;&#x2F; 右指针右移一位\n        &#125;\n\n        while (left &lt; nums.size()) &#123; &#x2F;&#x2F; 将剩余的位置填充为零\n            nums[left++] &#x3D; 0; &#x2F;&#x2F; 将左指针位置及其右边的元素都置为零\n        &#125;\n    &#125;\n&#125;;\n</code></pre>\n\n","more":"<p><strong>示例 1:</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入: nums &#x3D; [0,1,0,3,12]\n输出: [1,3,12,0,0]</code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入: nums &#x3D; [0]\n输出: [0]</code></pre>\n\n<p><strong>提示</strong>:</p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 104</code></li>\n<li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li>\n</ul>\n<p><strong>进阶：</strong>你能尽量减少完成的操作次数吗？</p>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ul>\n<li>双指针</li>\n</ul>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    void moveZeroes(vector&lt;int&gt;&amp; nums) &#123;\n        int n &#x3D; nums.size(); &#x2F;&#x2F; 获取数组长度\n\n        int right &#x3D; 0; &#x2F;&#x2F; 定义指向数组右边的指针\n        int left &#x3D; 0; &#x2F;&#x2F; 定义指向数组左边的指针\n\n        while (right &lt; nums.size()) &#123; &#x2F;&#x2F; 循环遍历数组\n            if (nums[right] &#x3D;&#x3D; 0); &#x2F;&#x2F; 如果当前元素为零，跳过该步骤（注：这里存在逻辑错误，应该去掉分号，即 if (nums[right] &#x3D;&#x3D; 0)）\n            else &#123;\n                nums[left] &#x3D; nums[right]; &#x2F;&#x2F; 如果当前元素不为零，将其移动到左边（注：这里将非零元素移到了左边，而不是把零元素移到右边）\n                left++; &#x2F;&#x2F; 左指针右移一位\n            &#125;\n            right++; &#x2F;&#x2F; 右指针右移一位\n        &#125;\n\n        while (left &lt; nums.size()) &#123; &#x2F;&#x2F; 将剩余的位置填充为零\n            nums[left++] &#x3D; 0; &#x2F;&#x2F; 将左指针位置及其右边的元素都置为零\n        &#125;\n    &#125;\n&#125;;\n</code></pre>","categories":[],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"}]}