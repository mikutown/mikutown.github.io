{"title":"Javaの集合","slug":"Javaの集合","date":"2020-04-07T10:58:40.000Z","updated":"2021-01-02T19:06:10.000Z","comments":true,"path":"api/articles/Javaの集合.json","excerpt":"Javaの集合集合 [Figure] 1. 集合概述Java 集合就像一种容器，可以把多个对象的引用放入容器中。","covers":["https://gitee.com/mikutown/pic/raw/master/img/20200407191916.png","https://gitee.com/mikutown/pic/raw/master/img/20200407192036.png","https://gitee.com/mikutown/pic/raw/master/img/20200407192057.png","https://gitee.com/mikutown/pic/raw/master/img/20200407192123.png"],"content":"<h1 id=\"Javaの集合\"><a href=\"#Javaの集合\" class=\"headerlink\" title=\"Javaの集合\"></a>Javaの集合</h1><h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20200407191916.png\" loading=\"lazy\"><br><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20200407192002.png\" loading=\"lazy\"></p>\n<h5 id=\"1-集合概述\"><a href=\"#1-集合概述\" class=\"headerlink\" title=\"1. 集合概述\"></a>1. 集合概述</h5><ul>\n<li>Java 集合就像一种容器，可以把多个对象的引用放入容器中。</li>\n</ul>\n<a id=\"more\"></a>\n\n<ul>\n<li>Java 集合类可以用于存储数量不等的多个对象，还可用于保存具有映射关系的关联数组</li>\n<li>Java 集合可分为 Set、List 和 Map 三种体系</li>\n<li>Set：无序、不可重复的集合</li>\n<li>List：有序，可重复的集合</li>\n<li>Map：具有映射关系的集合</li>\n<li>在 Java5 之前，Java 集合会丢失容器中所有对象的数据类型，把所有对象都当成 Object 类型处理；从 Java5 增加了泛型以后，Java 集合可以记住容器中对象的数据类型。<br><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20200407192036.png\" loading=\"lazy\"></li>\n</ul>\n<h5 id=\"2-Collection接口\"><a href=\"#2-Collection接口\" class=\"headerlink\" title=\"2. Collection接口\"></a>2. Collection接口</h5><ul>\n<li>Collection 接口是 List、Set 和 Queue 接口的父接口，该接口里定义的方法既可用于操作 Set 集合，也可用于操作 List 和 Queue 集合：</li>\n<li><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20200407192057.png\" loading=\"lazy\"></li>\n</ul>\n<h5 id=\"3-List接口\"><a href=\"#3-List接口\" class=\"headerlink\" title=\"3. List接口\"></a>3. List接口</h5><pre><code>  1. List接口简介\n</code></pre>\n<ul>\n<li><p>List接口为Collection直接接口。List所代表的是有序的Collection，即它用某种特定的插入顺序来维护元素顺序。用户可以对列表中每个元素的插入位置进行精确地控制，</p>\n</li>\n<li><p>同时可以根据元素的整数索引（在列表中的位置）访问元素，并搜索列表中的元素。实现List接口的集合主要有：ArrayList、LinkedList、Vector、Stack。</p>\n<ol start=\"2\">\n<li>ArrayList集合</li>\n</ol>\n</li>\n<li><p>ArrayList内部是通过数组实现的，它允许对元素进行快速随机访问。数组的缺点是每个元素之间不能有间隔，当数组大小不满足时需要增加存储能力，就要讲已经有数组的数据复制到新的存储空间中。</p>\n</li>\n<li><p>当从ArrayList的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高（ArrayList在内存不够时默认是扩展50% + 1个）。因此，它适合随机查找和遍历，不适合插入和删除。</p>\n</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test3</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">></span></span> list<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//追加到末尾</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12311\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12322\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//1.for</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//2.foreach</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token operator\">:</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//3.迭代器</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=============\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> it <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/*while (true)&#123;\n            boolean b = it.hasNext();\n            if(!b)&#123;\n                break;\n            &#125;\n            System.out.println(it.next());\n        &#125;*/</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre><code>3. LinkedList集合\n</code></pre>\n<ul>\n<li>LinkedList是用双向链表结构存储数据的，很适合数据的动态插入和删除，随机访问和遍历速度比较慢。另外，他还提供了List接口中没有定义的方法，专门用于操作表头和表尾元素，可以当作堆栈、队列和双向队列使用。</li>\n</ul>\n<pre><code>4. Vector集合\n</code></pre>\n<ul>\n<li>Vector集合底层数据结构是数组实现的，其操作和ArrayList一致，查询快，增删慢，但是其内部是线程安全，效率低。</li>\n</ul>\n<pre><code>5. Itrator接口\n</code></pre>\n<ul>\n<li><p>Iterator 接口主要用于遍历 Collection 集合中的元素，Iterator 对象也被称为迭代器</p>\n</li>\n<li><p>Iterator 接口隐藏了各种 Collection 实现类的底层细节，向应用程序提供了遍历 Collection 集合元素的统一编程接口</p>\n</li>\n<li><p>Iterator 仅用于遍历集合，Iterator 本身并不提供承装对象的能力。如果需要创建 Iterator 对象，则必须有一个被迭代的集合。<img src=\"https://gitee.com/mikutown/pic/raw/master/img/20200407192123.png\" loading=\"lazy\"></p>\n</li>\n</ul>\n<pre><code>6. ArrayList和LinkedList的区别如下:\n</code></pre>\n<ul>\n<li><p>ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。</p>\n</li>\n<li><p>对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。</p>\n</li>\n<li><p>对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。</p>\n</li>\n</ul>\n<h4 id=\"自己写一个集合类\"><a href=\"#自己写一个集合类\" class=\"headerlink\" title=\"自己写一个集合类\"></a>自己写一个集合类</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span>  size <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            size <span class=\"token operator\">=</span> size <span class=\"token operator\">+</span> size<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newarr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>newarr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            newarr<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            arr <span class=\"token operator\">=</span> newarr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            arr<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            size <span class=\"token operator\">=</span> size <span class=\"token operator\">+</span> size <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newarr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>newarr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        newarr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>newarr<span class=\"token punctuation\">,</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>count <span class=\"token operator\">-</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arr <span class=\"token operator\">=</span> newarr<span class=\"token punctuation\">;</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        arr <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> newArr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span> isContains <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                isContains <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                isContains <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> isContains<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        size <span class=\"token operator\">=</span> minCapacity<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newarr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>newarr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>newarr<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>count<span class=\"token operator\">-</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            System.arraycopy(arr,index,newarr,index+1,count - index);</span>\n            count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            arr <span class=\"token operator\">=</span> newarr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未找到元素，删除失败！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"[\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            size <span class=\"token operator\">=</span> size <span class=\"token operator\">+</span> size <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newarr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>newarr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            arr <span class=\"token operator\">=</span> newarr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                s <span class=\"token operator\">=</span> s <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                s <span class=\"token operator\">=</span> s <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n        s <span class=\"token operator\">=</span> s <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h4 id=\"Set接口\"><a href=\"#Set接口\" class=\"headerlink\" title=\"Set接口\"></a>Set接口</h4><p>1).Set接口介绍</p>\n<p>Set是Collection子接口；</p>\n<p>Set和Collection基本上一样，一点除外：Set无法记住添加的顺序，不允许包含重复的元素。</p>\n<p>当试图添加两个相同元素进Set集合，添加操作失败，add()方法返回false。</p>\n<p>Setr如何判断两个对象是否相等？HashSet 集合的add()方法底层依赖于双列集合HashMap, 它依赖于两个方法 equals()和hashCode(); 先比较元素equals(),  再比较hashCoede值.</p>\n<p>也就是说两个对象equals比较返回true，Set集合是不会接受这个两个对象的。</p>\n<p>常用子类：</p>\n<p>HashSet:散列存放</p>\n<p>TreeSet:有序存放</p>\n<p>2).HashSet集合</p>\n<p>HashSet 是 Set 接口的典型实现，大多数时候使用 Set 集合时都使用这个实现类。</p>\n<p>HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存取和查找性能。</p>\n<p>HashSet 具有以下特点：</p>\n<p>不能保证元素的排列顺序</p>\n<p>HashSet 不是线程安全的</p>\n<p>集合元素可以是 null</p>\n<p>当向 HashSet 集合中存入一个元素时，HashSet 会调用该对象的 hashCode() 方法来得到该对象的 hashCode 值，然后根据 hashCode 值决定该对象在 HashSet 中的存储位置。如果两个元素的 equals() 方法返回 true，但它们的 hashCode() 返回值不相等，hashSet 将会把它们存储在不同的位置，但依然可以添加成功。</p>\n<p>3).TreeSet集合</p>\n<p>TreeSet 是 SortedSet 接口的实现类，TreeSet 可以确保集合元素处于排序状态。</p>\n<p>TreeSet 支持两种排序方法：自然排序和定制排序。默认情况下，TreeSet 采用自然排序。</p>\n<p>自然排序</p>\n<p>TreeSet 会调用集合元素的 compareTo(Object obj) 方法来比较元素之间的大小关系，然后将集合元素按升序排列</p>\n<p>如果试图把一个对象添加到 TreeSet 时，则该对象的类必须实现 Comparable 接口。</p>\n<p>实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即通过 compareTo(Object obj) 方法的返回值来比较大小。</p>\n<p>Comparable 的典型实现：</p>\n<p>BigDecimal、BigInteger 以及所有的数值型对应的包装类：按它们对应的数值大小进行比较</p>\n<p>Character：按字符的 UNICODE 值来进行比较</p>\n<p>Boolean：true 对应的包装类实例大于 false 对应的包装类实例</p>\n<p>String：按字符串中字符的 UNICODE 值进行比较</p>\n<p>Date、Time：后边的时间、日期比前面的时间、日期大</p>\n<p>自然排序步骤：</p>\n<p>1.让元素自身具备比较性，</p>\n<p>2.实现Compareable接口，覆盖其CompareTo方法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不是学生对象\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n       <span class=\"token class-name\">Student</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span>obj<span class=\"token punctuation\">;</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"....compareto.....\"</span><span class=\"token operator\">+</span>s<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">></span>s<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n           <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">==</span>s<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span></code></pre>\n<p>定制排序</p>\n<p>如果需要实现定制排序，则需要在创建 TreeSet 集合对象时，提供一个 Comparator 接口的实现类对象。由该 Comparator 对象负责集合元素的排序逻辑</p>\n<p>定制排序步骤：</p>\n<p>   1）创建比较器,实现comparator接口</p>\n<p>   2）复写compare方法</p>\n<p>   3）在创建TreeSet集合对象时,提供一个一个Comparator对象</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//第一步：实现Comparator接口</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//第二步：实现一个campare方法</span>\n <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>o1 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student1</span> <span class=\"token operator\">&amp;</span> o2instanceof <span class=\"token class-name\">Student1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token class-name\">Student1</span> s1 <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student1</span><span class=\"token punctuation\">)</span>o1<span class=\"token punctuation\">;</span>\n           <span class=\"token class-name\">Student1</span> s2 <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student1</span><span class=\"token punctuation\">)</span>o2<span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n              <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n              <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student1</span><span class=\"token punctuation\">></span></span> s<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span>  <span class=\"token class-name\">MyComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//第三步：创建TreeSet集合对象时,提供一个一个Comparator对象</span></code></pre>\n<p><a href=\"https://www.cnblogs.com/chenglc/p/8073049.html\">集合详解</a></p>\n","more":"<ul>\n<li>Java 集合类可以用于存储数量不等的多个对象，还可用于保存具有映射关系的关联数组</li>\n<li>Java 集合可分为 Set、List 和 Map 三种体系</li>\n<li>Set：无序、不可重复的集合</li>\n<li>List：有序，可重复的集合</li>\n<li>Map：具有映射关系的集合</li>\n<li>在 Java5 之前，Java 集合会丢失容器中所有对象的数据类型，把所有对象都当成 Object 类型处理；从 Java5 增加了泛型以后，Java 集合可以记住容器中对象的数据类型。<br><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20200407192036.png\"></li>\n</ul>\n<h5 id=\"2-Collection接口\"><a href=\"#2-Collection接口\" class=\"headerlink\" title=\"2. Collection接口\"></a>2. Collection接口</h5><ul>\n<li>Collection 接口是 List、Set 和 Queue 接口的父接口，该接口里定义的方法既可用于操作 Set 集合，也可用于操作 List 和 Queue 集合：</li>\n<li><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20200407192057.png\"></li>\n</ul>\n<h5 id=\"3-List接口\"><a href=\"#3-List接口\" class=\"headerlink\" title=\"3. List接口\"></a>3. List接口</h5><pre><code>  1. List接口简介\n</code></pre>\n<ul>\n<li><p>List接口为Collection直接接口。List所代表的是有序的Collection，即它用某种特定的插入顺序来维护元素顺序。用户可以对列表中每个元素的插入位置进行精确地控制，</p>\n</li>\n<li><p>同时可以根据元素的整数索引（在列表中的位置）访问元素，并搜索列表中的元素。实现List接口的集合主要有：ArrayList、LinkedList、Vector、Stack。</p>\n<ol start=\"2\">\n<li>ArrayList集合</li>\n</ol>\n</li>\n<li><p>ArrayList内部是通过数组实现的，它允许对元素进行快速随机访问。数组的缺点是每个元素之间不能有间隔，当数组大小不满足时需要增加存储能力，就要讲已经有数组的数据复制到新的存储空间中。</p>\n</li>\n<li><p>当从ArrayList的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高（ArrayList在内存不够时默认是扩展50% + 1个）。因此，它适合随机查找和遍历，不适合插入和删除。</p>\n</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test3</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">></span></span> list<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//追加到末尾</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12311\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12322\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//1.for</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//2.foreach</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token operator\">:</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//3.迭代器</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=============\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> it <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/*while (true)&#123;\n            boolean b = it.hasNext();\n            if(!b)&#123;\n                break;\n            &#125;\n            System.out.println(it.next());\n        &#125;*/</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre><code>3. LinkedList集合\n</code></pre>\n<ul>\n<li>LinkedList是用双向链表结构存储数据的，很适合数据的动态插入和删除，随机访问和遍历速度比较慢。另外，他还提供了List接口中没有定义的方法，专门用于操作表头和表尾元素，可以当作堆栈、队列和双向队列使用。</li>\n</ul>\n<pre><code>4. Vector集合\n</code></pre>\n<ul>\n<li>Vector集合底层数据结构是数组实现的，其操作和ArrayList一致，查询快，增删慢，但是其内部是线程安全，效率低。</li>\n</ul>\n<pre><code>5. Itrator接口\n</code></pre>\n<ul>\n<li><p>Iterator 接口主要用于遍历 Collection 集合中的元素，Iterator 对象也被称为迭代器</p>\n</li>\n<li><p>Iterator 接口隐藏了各种 Collection 实现类的底层细节，向应用程序提供了遍历 Collection 集合元素的统一编程接口</p>\n</li>\n<li><p>Iterator 仅用于遍历集合，Iterator 本身并不提供承装对象的能力。如果需要创建 Iterator 对象，则必须有一个被迭代的集合。<img src=\"https://gitee.com/mikutown/pic/raw/master/img/20200407192123.png\"></p>\n</li>\n</ul>\n<pre><code>6. ArrayList和LinkedList的区别如下:\n</code></pre>\n<ul>\n<li><p>ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。</p>\n</li>\n<li><p>对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。</p>\n</li>\n<li><p>对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。</p>\n</li>\n</ul>\n<h4 id=\"自己写一个集合类\"><a href=\"#自己写一个集合类\" class=\"headerlink\" title=\"自己写一个集合类\"></a>自己写一个集合类</h4><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span>  size <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            size <span class=\"token operator\">=</span> size <span class=\"token operator\">+</span> size<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newarr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>newarr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            newarr<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            arr <span class=\"token operator\">=</span> newarr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            arr<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            size <span class=\"token operator\">=</span> size <span class=\"token operator\">+</span> size <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newarr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>newarr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        newarr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>newarr<span class=\"token punctuation\">,</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>count <span class=\"token operator\">-</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arr <span class=\"token operator\">=</span> newarr<span class=\"token punctuation\">;</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        arr <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> newArr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span> isContains <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                isContains <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                isContains <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> isContains<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        size <span class=\"token operator\">=</span> minCapacity<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newarr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>newarr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>newarr<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>count<span class=\"token operator\">-</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            System.arraycopy(arr,index,newarr,index+1,count - index);</span>\n            count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            arr <span class=\"token operator\">=</span> newarr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未找到元素，删除失败！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"[\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            size <span class=\"token operator\">=</span> size <span class=\"token operator\">+</span> size <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newarr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>newarr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            arr <span class=\"token operator\">=</span> newarr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                s <span class=\"token operator\">=</span> s <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                s <span class=\"token operator\">=</span> s <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n        s <span class=\"token operator\">=</span> s <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h4 id=\"Set接口\"><a href=\"#Set接口\" class=\"headerlink\" title=\"Set接口\"></a>Set接口</h4><p>1).Set接口介绍</p>\n<p>Set是Collection子接口；</p>\n<p>Set和Collection基本上一样，一点除外：Set无法记住添加的顺序，不允许包含重复的元素。</p>\n<p>当试图添加两个相同元素进Set集合，添加操作失败，add()方法返回false。</p>\n<p>Setr如何判断两个对象是否相等？HashSet 集合的add()方法底层依赖于双列集合HashMap, 它依赖于两个方法 equals()和hashCode(); 先比较元素equals(),  再比较hashCoede值.</p>\n<p>也就是说两个对象equals比较返回true，Set集合是不会接受这个两个对象的。</p>\n<p>常用子类：</p>\n<p>HashSet:散列存放</p>\n<p>TreeSet:有序存放</p>\n<p>2).HashSet集合</p>\n<p>HashSet 是 Set 接口的典型实现，大多数时候使用 Set 集合时都使用这个实现类。</p>\n<p>HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存取和查找性能。</p>\n<p>HashSet 具有以下特点：</p>\n<p>不能保证元素的排列顺序</p>\n<p>HashSet 不是线程安全的</p>\n<p>集合元素可以是 null</p>\n<p>当向 HashSet 集合中存入一个元素时，HashSet 会调用该对象的 hashCode() 方法来得到该对象的 hashCode 值，然后根据 hashCode 值决定该对象在 HashSet 中的存储位置。如果两个元素的 equals() 方法返回 true，但它们的 hashCode() 返回值不相等，hashSet 将会把它们存储在不同的位置，但依然可以添加成功。</p>\n<p>3).TreeSet集合</p>\n<p>TreeSet 是 SortedSet 接口的实现类，TreeSet 可以确保集合元素处于排序状态。</p>\n<p>TreeSet 支持两种排序方法：自然排序和定制排序。默认情况下，TreeSet 采用自然排序。</p>\n<p>自然排序</p>\n<p>TreeSet 会调用集合元素的 compareTo(Object obj) 方法来比较元素之间的大小关系，然后将集合元素按升序排列</p>\n<p>如果试图把一个对象添加到 TreeSet 时，则该对象的类必须实现 Comparable 接口。</p>\n<p>实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即通过 compareTo(Object obj) 方法的返回值来比较大小。</p>\n<p>Comparable 的典型实现：</p>\n<p>BigDecimal、BigInteger 以及所有的数值型对应的包装类：按它们对应的数值大小进行比较</p>\n<p>Character：按字符的 UNICODE 值来进行比较</p>\n<p>Boolean：true 对应的包装类实例大于 false 对应的包装类实例</p>\n<p>String：按字符串中字符的 UNICODE 值进行比较</p>\n<p>Date、Time：后边的时间、日期比前面的时间、日期大</p>\n<p>自然排序步骤：</p>\n<p>1.让元素自身具备比较性，</p>\n<p>2.实现Compareable接口，覆盖其CompareTo方法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不是学生对象\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n       <span class=\"token class-name\">Student</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span>obj<span class=\"token punctuation\">;</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"....compareto.....\"</span><span class=\"token operator\">+</span>s<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">></span>s<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n           <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">==</span>s<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span></code></pre>\n<p>定制排序</p>\n<p>如果需要实现定制排序，则需要在创建 TreeSet 集合对象时，提供一个 Comparator 接口的实现类对象。由该 Comparator 对象负责集合元素的排序逻辑</p>\n<p>定制排序步骤：</p>\n<p>   1）创建比较器,实现comparator接口</p>\n<p>   2）复写compare方法</p>\n<p>   3）在创建TreeSet集合对象时,提供一个一个Comparator对象</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//第一步：实现Comparator接口</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//第二步：实现一个campare方法</span>\n <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>o1 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student1</span> <span class=\"token operator\">&amp;</span> o2instanceof <span class=\"token class-name\">Student1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token class-name\">Student1</span> s1 <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student1</span><span class=\"token punctuation\">)</span>o1<span class=\"token punctuation\">;</span>\n           <span class=\"token class-name\">Student1</span> s2 <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student1</span><span class=\"token punctuation\">)</span>o2<span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n              <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n              <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student1</span><span class=\"token punctuation\">></span></span> s<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span>  <span class=\"token class-name\">MyComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//第三步：创建TreeSet集合对象时,提供一个一个Comparator对象</span></code></pre>\n<p><a href=\"https://www.cnblogs.com/chenglc/p/8073049.html\">集合详解</a></p>","categories":[],"tags":[{"name":"Java","path":"api/tags/Java.json"}]}