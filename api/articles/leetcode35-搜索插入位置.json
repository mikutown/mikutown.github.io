{"title":"leetcode35.搜索插入位置","slug":"leetcode35-搜索插入位置","date":"2024-01-09T10:03:03.000Z","updated":"2024-01-17T01:29:10.791Z","comments":true,"path":"api/articles/leetcode35-搜索插入位置.json","excerpt":"题目给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。请你将两个数相加，并以相同形式返回一个表示和的链表。你可以假设除了数字 0 之外，这两个数都不会以 0 开头。","covers":["https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg"],"content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p>\n<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>\n<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n <span id=\"more\"></span>\n\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg\" alt=\"img\" loading=\"lazy\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]\n输出：[7,0,8]\n解释：342 + 465 &#x3D; 807.</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：l1 &#x3D; [0], l2 &#x3D; [0]\n输出：[0]</code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9]\n输出：[8,9,9,9,0,0,0,1]</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li>\n<li><code>0 &lt;= Node.val &lt;= 9</code></li>\n<li>题目数据保证列表表示的数字不含前导零</li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ol>\n<li>直接模拟</li>\n</ol>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;**\n * Definition for singly-linked list.\n * struct ListNode &#123;\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) &#123;&#125;\n *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;\n *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;\n * &#125;;\n *&#x2F;\nclass Solution &#123;\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) &#123;\n        ListNode *newHead &#x3D; new ListNode(0);\n        ListNode *p &#x3D; l1;\n        ListNode *q &#x3D; l2;\n        ListNode *curr &#x3D; newHead;\n        int carry &#x3D; 0; &#x2F;&#x2F;进位\n        while(p !&#x3D; NULL || q !&#x3D; NULL) &#123;\n            int sum &#x3D; 0, x &#x3D; 0, y &#x3D; 0;\n            if(p) &#123;\n                x &#x3D; p -&gt; val;\n                p &#x3D; p -&gt; next;\n            &#125;\n            if(q) &#123;\n                y &#x3D; q -&gt; val;\n                q &#x3D; q -&gt; next;\n            &#125;\n            sum &#x3D; x + y + carry;\n            carry &#x3D; sum &#x2F; 10;\n            curr -&gt; next &#x3D; new ListNode(sum % 10);\n            curr &#x3D; curr -&gt; next;\n        &#125;\n        if(carry) &#123;\n            curr -&gt; next &#x3D; new ListNode(carry);\n        &#125;\n        return newHead -&gt; next;\n    &#125;\n&#125;;</code></pre>\n\n","more":"<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg\" alt=\"img\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]\n输出：[7,0,8]\n解释：342 + 465 &#x3D; 807.</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：l1 &#x3D; [0], l2 &#x3D; [0]\n输出：[0]</code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9]\n输出：[8,9,9,9,0,0,0,1]</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li>\n<li><code>0 &lt;= Node.val &lt;= 9</code></li>\n<li>题目数据保证列表表示的数字不含前导零</li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ol>\n<li>直接模拟</li>\n</ol>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;**\n * Definition for singly-linked list.\n * struct ListNode &#123;\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) &#123;&#125;\n *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;\n *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;\n * &#125;;\n *&#x2F;\nclass Solution &#123;\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) &#123;\n        ListNode *newHead &#x3D; new ListNode(0);\n        ListNode *p &#x3D; l1;\n        ListNode *q &#x3D; l2;\n        ListNode *curr &#x3D; newHead;\n        int carry &#x3D; 0; &#x2F;&#x2F;进位\n        while(p !&#x3D; NULL || q !&#x3D; NULL) &#123;\n            int sum &#x3D; 0, x &#x3D; 0, y &#x3D; 0;\n            if(p) &#123;\n                x &#x3D; p -&gt; val;\n                p &#x3D; p -&gt; next;\n            &#125;\n            if(q) &#123;\n                y &#x3D; q -&gt; val;\n                q &#x3D; q -&gt; next;\n            &#125;\n            sum &#x3D; x + y + carry;\n            carry &#x3D; sum &#x2F; 10;\n            curr -&gt; next &#x3D; new ListNode(sum % 10);\n            curr &#x3D; curr -&gt; next;\n        &#125;\n        if(carry) &#123;\n            curr -&gt; next &#x3D; new ListNode(carry);\n        &#125;\n        return newHead -&gt; next;\n    &#125;\n&#125;;</code></pre>","categories":[],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"}]}