{"title":"Go语言の函数、包和错误处理","slug":"Go语言の函数、包和错误处理","date":"2021-01-19T07:49:52.000Z","updated":"2021-01-19T11:23:29.757Z","comments":true,"path":"api/articles/Go语言の函数、包和错误处理.json","excerpt":"Go语言の函数、包和错误处理本文章主要讲解了Go语言的函数，包和错误处理等知识。","covers":["https://gitee.com/mikutown/pic/raw/master/img/image-20210119163512224.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210119182340923.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210119185147993.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210119185241781.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210119185640204.png"],"content":"<h1 id=\"Go语言の函数、包和错误处理\"><a href=\"#Go语言の函数、包和错误处理\" class=\"headerlink\" title=\"Go语言の函数、包和错误处理\"></a>Go语言の函数、包和错误处理</h1><p>本文章主要讲解了Go语言的函数，包和错误处理等知识。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"为什么需要函数\"><a href=\"#为什么需要函数\" class=\"headerlink\" title=\"为什么需要函数\"></a>为什么需要函数</h2><h3 id=\"完成需求\"><a href=\"#完成需求\" class=\"headerlink\" title=\"完成需求\"></a>完成需求</h3><p>输入两个数，再输入一个运算符（+-*/），得到结果。</p>\n<h3 id=\"使用传统的方法解决\"><a href=\"#使用传统的方法解决\" class=\"headerlink\" title=\"使用传统的方法解决\"></a>使用传统的方法解决</h3><ul>\n<li>代码</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span>\n\t<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.3</span>\n\t<span class=\"token keyword\">var</span> operator <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token string\">'-'</span>\n\t<span class=\"token keyword\">switch</span> operator <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v + %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v - %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">-</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v * %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">*</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v / %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">/</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\">➜  main go run .&#x2F;main.go\n1.2 - 2.3 &#x3D; -1.0999999999999999</code></pre>\n<ul>\n<li>分析上面的代码问题<ol>\n<li>可以完成功能需求，但代码冗余</li>\n<li>与此同时不利于代码的维护</li>\n<li>函数可以解决这个问题奥</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"函数的基本概念\"><a href=\"#函数的基本概念\" class=\"headerlink\" title=\"函数的基本概念\"></a>函数的基本概念</h2><p>​    为完成某一功能的程序指令（语句）的集合，称为函数。</p>\n<p>在Go中，函数分为：自定义函数、系统函数（查看Go编程手册）</p>\n<h2 id=\"函数的基本语法\"><a href=\"#函数的基本语法\" class=\"headerlink\" title=\"函数的基本语法\"></a>函数的基本语法</h2><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> 函数名 <span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>返回值列表<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  执行语句<span class=\"token operator\">...</span>\n  <span class=\"token keyword\">return</span> 返回值列表\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol>\n<li>形参列表：表示函数的输入</li>\n<li>函数的语句：表示为了实现某一功能代码块</li>\n<li>函数可以有返回值，也可以没有</li>\n</ol>\n<h2 id=\"快速入门案例\"><a href=\"#快速入门案例\" class=\"headerlink\" title=\"快速入门案例\"></a>快速入门案例</h2><p>使用函数解决前面的计算问题。</p>\n<p>走代码：</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span>n2 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> operator <span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> res <span class=\"token builtin\">float64</span>\n\t<span class=\"token keyword\">switch</span> operator <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">-</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">*</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">/</span> n2\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作符号错误哦！\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span>\n\t<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.3</span>\n\t<span class=\"token keyword\">var</span> operator <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token string\">'+'</span>\n\tresult <span class=\"token operator\">:=</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> operator<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"包的引出\"><a href=\"#包的引出\" class=\"headerlink\" title=\"包的引出\"></a>包的引出</h2><ol>\n<li>在实际的开发中，我们往往需要在不同的文件中，去调用其他文件的定义的函数，比如main.go中，去使用utils.go文件中的函数，如何实现？-&gt;包</li>\n<li>现在有两个程序员共同开发一个Go项目，程序员xiaoming希望定义函数Cal，程序员xiaoqiang也想定义函数也叫Cal。两个程序员为此还吵了起来，怎么办？-&gt;包</li>\n</ol>\n<h2 id=\"包的原理图\"><a href=\"#包的原理图\" class=\"headerlink\" title=\"包的原理图\"></a>包的原理图</h2><p>包的本质实际上就是创建不同的文件夹，来存放程序文件。</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210119163512224.png\" alt=\"image-20210119163512224\" loading=\"lazy\"></p>\n<h2 id=\"包的基本概念\"><a href=\"#包的基本概念\" class=\"headerlink\" title=\"包的基本概念\"></a>包的基本概念</h2><p>​    说明：go的每一个文件都是属于一个包的，也就是说go是以包的形式来管理文件和项目目录结构的</p>\n<h2 id=\"包的三大作用\"><a href=\"#包的三大作用\" class=\"headerlink\" title=\"包的三大作用\"></a>包的三大作用</h2><ul>\n<li><p>区分相同名字的函数、变量等标识符</p>\n</li>\n<li><p>当程序文件很多时，可以很好的管理项目</p>\n</li>\n<li><p>控制函数、变量等访问范围，即作用域</p>\n</li>\n</ul>\n<h2 id=\"包的相关说明\"><a href=\"#包的相关说明\" class=\"headerlink\" title=\"包的相关说明\"></a>包的相关说明</h2><ul>\n<li><p>打包基本语法</p>\n<p><code>package 包名</code></p>\n</li>\n<li><p>引入包的基本语法</p>\n<p><code>import &quot;包的路径&quot;</code></p>\n</li>\n</ul>\n<h2 id=\"包使用的快速入门\"><a href=\"#包使用的快速入门\" class=\"headerlink\" title=\"包使用的快速入门\"></a>包使用的快速入门</h2><p>包快速入门-Go相互调用函数，我们将func Cal定义到文件utils.go，将utils.go放到一个包中，当其它文件需要使用到utils.go的方法时，可以import该包，就可以使用了。【演示：新建项目的目录结构】</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210119182340923.png\" alt=\"image-20210119182340923\" loading=\"lazy\"></p>\n<ul>\n<li>utils.go:</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> utils\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//将计算的功能，放到一个函数中，然后在需要使用，调用即可</span>\n<span class=\"token comment\">//为了让其它包的文件使用Cal函数，需要将C大写类似其它语言的public</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Cal</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span>n2 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> operator <span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> res <span class=\"token builtin\">float64</span>\n\t<span class=\"token keyword\">switch</span> operator <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">-</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">*</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">/</span> n2\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作符号错误哦！\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>Main.go</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"go_code/chapter06/demo02/utils\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//请大家完成这样一个需求：</span>\n\t<span class=\"token comment\">//输入两个数，再输入一个运算符（+,-,*,/)，得到结果。。</span>\n\t<span class=\"token comment\">//分析思路...</span>\n\t<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span>\n\t<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.3</span>\n\t<span class=\"token keyword\">var</span> operator <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token string\">'+'</span>\n\tresult <span class=\"token operator\">:=</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">Cal</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span>n2<span class=\"token punctuation\">,</span>operator<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result=\"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"包使用的注意事项和细节讨论\"><a href=\"#包使用的注意事项和细节讨论\" class=\"headerlink\" title=\"包使用的注意事项和细节讨论\"></a>包使用的注意事项和细节讨论</h2><ol>\n<li>在给一个文件打包时，该包对应一个文件夹，比如这里的utils文件夹对应的包名就是utils，文件的包名通常和文件所在的文件夹名一致，一般为小写字母。</li>\n<li>当一个文件要使用其它包函数或变量时，需要先引入对应的包</li>\n</ol>\n<ul>\n<li>引入方式1:<code>import &quot;包名&quot;</code></li>\n<li>引入方式2:</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"包名\"</span>\n  <span class=\"token string\">\"包名\"</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<ul>\n<li>package指令在文件第一行，然后是import指令。</li>\n<li>在import包时，路径从$GOPATH的src下开始，不用带src，编译器会自动从src开始引入。</li>\n</ul>\n<ol start=\"3\">\n<li>为了让其它包的文件可以访问到本包的函数，则该函数名的首字母需要大写，类似其他语言的public，这样才能跨包访问。比如utils.go的<em>Cal</em>函数</li>\n<li>在访问其它包函数，变量时，其语法是 包名.函数名,比如这个main.go文件中的<code>utils.Cal(90, 80, &quot;+&quot;)</code></li>\n<li>如果包名较长，Go支持给包取别名，注意细节；取别名后，原来的包名就不能使用了<ul>\n<li>说明：如果给包取了别名，则**需要使用别名来访问该包的函数和变量。</li>\n</ul>\n</li>\n<li>在同一包下，不能有相同的函数名（也不能有相同的全局变量名），否则报重复定义</li>\n<li>如果你要编译成一个可执行程序文件，就需要将这个包声明为main，即<code>package main</code>这个就是一个语法规范，如果你是写一个库，包名可以自定义</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210119185147993.png\" alt=\"image-20210119185147993\" loading=\"lazy\"></p>\n<h2 id=\"函数的调用机制\"><a href=\"#函数的调用机制\" class=\"headerlink\" title=\"函数的调用机制\"></a>函数的调用机制</h2><h3 id=\"通俗易懂的方式的理解\"><a href=\"#通俗易懂的方式的理解\" class=\"headerlink\" title=\"通俗易懂的方式的理解\"></a>通俗易懂的方式的理解</h3><p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210119185241781.png\" alt=\"image-20210119185241781\" loading=\"lazy\"></p>\n<h3 id=\"函数-调用过程\"><a href=\"#函数-调用过程\" class=\"headerlink\" title=\"函数-调用过程\"></a>函数-调用过程</h3><p>介绍：为了让大家更好地理解函数调用过程，看两个案例，并画出示意图，这个很重要</p>\n<ol>\n<li>传入一个数+1</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210119185640204.png\" alt=\"image-20210119185640204\" loading=\"lazy\"></p>\n<p>对上图说明</p>\n<ol>\n<li><p>在调用一个函数时，会给该函数分配一个新的空间，编译器会通过自身的处理让这个新的空间和其它的栈的空间去分开来</p>\n</li>\n<li><p>在每个函数对应的栈中，数据空间时独立的，不会混淆</p>\n</li>\n<li><p>当一个函数调用完毕（执行完毕）后，程序会销毁这个函数对应的栈空间。</p>\n</li>\n<li><p>计算两个数，并返回</p>\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//一个函数 test</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tn1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//输入结果=？</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\tsum <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">+</span> n2\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getSum sum = \"</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token comment\">// 30</span>\n\t<span class=\"token comment\">//当函数有return语句时，就是将结果返回给调用者</span>\n\t<span class=\"token comment\">//即谁调用我，就返回给谁</span>\n\t<span class=\"token keyword\">return</span> sum\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tn1 <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n\t<span class=\"token comment\">//调用test</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span><span class=\"token comment\">//输出结果=？</span>\n\n\tsum <span class=\"token operator\">:=</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main sum=\"</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token comment\">// 30</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo03&#x2F;main  go run main.go \ntest() n1&#x3D; 11\nmain() n1&#x3D; 10\ngetSum sum &#x3D;  30\nmain sum&#x3D; 30</code></pre>\n<h3 id=\"return语句\"><a href=\"#return语句\" class=\"headerlink\" title=\"return语句\"></a>return语句</h3><ul>\n<li>基本语法和说明</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">Go函数支持返回多个值，这一点是其它编程语言没有的。\n<span class=\"token keyword\">func</span> 函数名<span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">)</span> （返回值类型列表） <span class=\"token punctuation\">&#123;</span>\n  语句<span class=\"token operator\">...</span>\n  <span class=\"token keyword\">return</span> 返回值列表\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol>\n<li>如果返回多个值时，在接收时，希望忽略某个返回值，则使用<code>_</code>符号表示占位忽略</li>\n<li>如果返回值只有一个，（返回值类型列表）可以不写<code>()</code></li>\n</ol>\n<ul>\n<li><p>案例演示1</p>\n<p>请编写要给函数，可以计算两个数的和和差，并返回结果。</p>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  n1 <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n  <span class=\"token comment\">//调用test</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span><span class=\"token comment\">//输出结果？</span>\n  sum <span class=\"token operator\">:=</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main sum =\"</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token comment\">//30</span>\n  <span class=\"token comment\">//调用getSumAndSub</span>\n  res1<span class=\"token punctuation\">,</span>res2 <span class=\"token operator\">:=</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//res1 = 3 res2 = -1 </span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res1=%v res2=%v\\n\"</span><span class=\"token punctuation\">,</span>res1<span class=\"token punctuation\">,</span> res2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//编写函数，可以计算两个数的和和差，并返回结果</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  sum <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">+</span> n2\n  sub <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">-</span> n2\n  <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">,</span> sub\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li><p>案例演示2</p>\n<p>一个细节说明：希望忽略某个返回值，则使用<code>_</code>符号表示占位忽略</p>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//希望忽略某个返回值，则使用`_`符号表示占位忽略</span>\n<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> res3 <span class=\"token operator\">=</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res3=\"</span><span class=\"token punctuation\">,</span>res3<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"函数的递归调用\"><a href=\"#函数的递归调用\" class=\"headerlink\" title=\"函数的递归调用\"></a>函数的递归调用</h2>","more":"<h2 id=\"为什么需要函数\"><a href=\"#为什么需要函数\" class=\"headerlink\" title=\"为什么需要函数\"></a>为什么需要函数</h2><h3 id=\"完成需求\"><a href=\"#完成需求\" class=\"headerlink\" title=\"完成需求\"></a>完成需求</h3><p>输入两个数，再输入一个运算符（+-*/），得到结果。</p>\n<h3 id=\"使用传统的方法解决\"><a href=\"#使用传统的方法解决\" class=\"headerlink\" title=\"使用传统的方法解决\"></a>使用传统的方法解决</h3><ul>\n<li>代码</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span>\n\t<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.3</span>\n\t<span class=\"token keyword\">var</span> operator <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token string\">'-'</span>\n\t<span class=\"token keyword\">switch</span> operator <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v + %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v - %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">-</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v * %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">*</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v / %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">/</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\">➜  main go run .&#x2F;main.go\n1.2 - 2.3 &#x3D; -1.0999999999999999</code></pre>\n<ul>\n<li>分析上面的代码问题<ol>\n<li>可以完成功能需求，但代码冗余</li>\n<li>与此同时不利于代码的维护</li>\n<li>函数可以解决这个问题奥</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"函数的基本概念\"><a href=\"#函数的基本概念\" class=\"headerlink\" title=\"函数的基本概念\"></a>函数的基本概念</h2><p>​    为完成某一功能的程序指令（语句）的集合，称为函数。</p>\n<p>在Go中，函数分为：自定义函数、系统函数（查看Go编程手册）</p>\n<h2 id=\"函数的基本语法\"><a href=\"#函数的基本语法\" class=\"headerlink\" title=\"函数的基本语法\"></a>函数的基本语法</h2><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> 函数名 <span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>返回值列表<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  执行语句<span class=\"token operator\">...</span>\n  <span class=\"token keyword\">return</span> 返回值列表\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol>\n<li>形参列表：表示函数的输入</li>\n<li>函数的语句：表示为了实现某一功能代码块</li>\n<li>函数可以有返回值，也可以没有</li>\n</ol>\n<h2 id=\"快速入门案例\"><a href=\"#快速入门案例\" class=\"headerlink\" title=\"快速入门案例\"></a>快速入门案例</h2><p>使用函数解决前面的计算问题。</p>\n<p>走代码：</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span>n2 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> operator <span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> res <span class=\"token builtin\">float64</span>\n\t<span class=\"token keyword\">switch</span> operator <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">-</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">*</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">/</span> n2\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作符号错误哦！\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span>\n\t<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.3</span>\n\t<span class=\"token keyword\">var</span> operator <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token string\">'+'</span>\n\tresult <span class=\"token operator\">:=</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> operator<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"包的引出\"><a href=\"#包的引出\" class=\"headerlink\" title=\"包的引出\"></a>包的引出</h2><ol>\n<li>在实际的开发中，我们往往需要在不同的文件中，去调用其他文件的定义的函数，比如main.go中，去使用utils.go文件中的函数，如何实现？-&gt;包</li>\n<li>现在有两个程序员共同开发一个Go项目，程序员xiaoming希望定义函数Cal，程序员xiaoqiang也想定义函数也叫Cal。两个程序员为此还吵了起来，怎么办？-&gt;包</li>\n</ol>\n<h2 id=\"包的原理图\"><a href=\"#包的原理图\" class=\"headerlink\" title=\"包的原理图\"></a>包的原理图</h2><p>包的本质实际上就是创建不同的文件夹，来存放程序文件。</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210119163512224.png\" alt=\"image-20210119163512224\"></p>\n<h2 id=\"包的基本概念\"><a href=\"#包的基本概念\" class=\"headerlink\" title=\"包的基本概念\"></a>包的基本概念</h2><p>​    说明：go的每一个文件都是属于一个包的，也就是说go是以包的形式来管理文件和项目目录结构的</p>\n<h2 id=\"包的三大作用\"><a href=\"#包的三大作用\" class=\"headerlink\" title=\"包的三大作用\"></a>包的三大作用</h2><ul>\n<li><p>区分相同名字的函数、变量等标识符</p>\n</li>\n<li><p>当程序文件很多时，可以很好的管理项目</p>\n</li>\n<li><p>控制函数、变量等访问范围，即作用域</p>\n</li>\n</ul>\n<h2 id=\"包的相关说明\"><a href=\"#包的相关说明\" class=\"headerlink\" title=\"包的相关说明\"></a>包的相关说明</h2><ul>\n<li><p>打包基本语法</p>\n<p><code>package 包名</code></p>\n</li>\n<li><p>引入包的基本语法</p>\n<p><code>import &quot;包的路径&quot;</code></p>\n</li>\n</ul>\n<h2 id=\"包使用的快速入门\"><a href=\"#包使用的快速入门\" class=\"headerlink\" title=\"包使用的快速入门\"></a>包使用的快速入门</h2><p>包快速入门-Go相互调用函数，我们将func Cal定义到文件utils.go，将utils.go放到一个包中，当其它文件需要使用到utils.go的方法时，可以import该包，就可以使用了。【演示：新建项目的目录结构】</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210119182340923.png\" alt=\"image-20210119182340923\"></p>\n<ul>\n<li>utils.go:</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> utils\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//将计算的功能，放到一个函数中，然后在需要使用，调用即可</span>\n<span class=\"token comment\">//为了让其它包的文件使用Cal函数，需要将C大写类似其它语言的public</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Cal</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span>n2 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> operator <span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> res <span class=\"token builtin\">float64</span>\n\t<span class=\"token keyword\">switch</span> operator <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">-</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">*</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">/</span> n2\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作符号错误哦！\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>Main.go</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"go_code/chapter06/demo02/utils\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//请大家完成这样一个需求：</span>\n\t<span class=\"token comment\">//输入两个数，再输入一个运算符（+,-,*,/)，得到结果。。</span>\n\t<span class=\"token comment\">//分析思路...</span>\n\t<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span>\n\t<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.3</span>\n\t<span class=\"token keyword\">var</span> operator <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token string\">'+'</span>\n\tresult <span class=\"token operator\">:=</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">Cal</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span>n2<span class=\"token punctuation\">,</span>operator<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result=\"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"包使用的注意事项和细节讨论\"><a href=\"#包使用的注意事项和细节讨论\" class=\"headerlink\" title=\"包使用的注意事项和细节讨论\"></a>包使用的注意事项和细节讨论</h2><ol>\n<li>在给一个文件打包时，该包对应一个文件夹，比如这里的utils文件夹对应的包名就是utils，文件的包名通常和文件所在的文件夹名一致，一般为小写字母。</li>\n<li>当一个文件要使用其它包函数或变量时，需要先引入对应的包</li>\n</ol>\n<ul>\n<li>引入方式1:<code>import &quot;包名&quot;</code></li>\n<li>引入方式2:</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"包名\"</span>\n  <span class=\"token string\">\"包名\"</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<ul>\n<li>package指令在文件第一行，然后是import指令。</li>\n<li>在import包时，路径从$GOPATH的src下开始，不用带src，编译器会自动从src开始引入。</li>\n</ul>\n<ol start=\"3\">\n<li>为了让其它包的文件可以访问到本包的函数，则该函数名的首字母需要大写，类似其他语言的public，这样才能跨包访问。比如utils.go的<em>Cal</em>函数</li>\n<li>在访问其它包函数，变量时，其语法是 包名.函数名,比如这个main.go文件中的<code>utils.Cal(90, 80, &quot;+&quot;)</code></li>\n<li>如果包名较长，Go支持给包取别名，注意细节；取别名后，原来的包名就不能使用了<ul>\n<li>说明：如果给包取了别名，则**需要使用别名来访问该包的函数和变量。</li>\n</ul>\n</li>\n<li>在同一包下，不能有相同的函数名（也不能有相同的全局变量名），否则报重复定义</li>\n<li>如果你要编译成一个可执行程序文件，就需要将这个包声明为main，即<code>package main</code>这个就是一个语法规范，如果你是写一个库，包名可以自定义</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210119185147993.png\" alt=\"image-20210119185147993\"></p>\n<h2 id=\"函数的调用机制\"><a href=\"#函数的调用机制\" class=\"headerlink\" title=\"函数的调用机制\"></a>函数的调用机制</h2><h3 id=\"通俗易懂的方式的理解\"><a href=\"#通俗易懂的方式的理解\" class=\"headerlink\" title=\"通俗易懂的方式的理解\"></a>通俗易懂的方式的理解</h3><p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210119185241781.png\" alt=\"image-20210119185241781\"></p>\n<h3 id=\"函数-调用过程\"><a href=\"#函数-调用过程\" class=\"headerlink\" title=\"函数-调用过程\"></a>函数-调用过程</h3><p>介绍：为了让大家更好地理解函数调用过程，看两个案例，并画出示意图，这个很重要</p>\n<ol>\n<li>传入一个数+1</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210119185640204.png\" alt=\"image-20210119185640204\"></p>\n<p>对上图说明</p>\n<ol>\n<li><p>在调用一个函数时，会给该函数分配一个新的空间，编译器会通过自身的处理让这个新的空间和其它的栈的空间去分开来</p>\n</li>\n<li><p>在每个函数对应的栈中，数据空间时独立的，不会混淆</p>\n</li>\n<li><p>当一个函数调用完毕（执行完毕）后，程序会销毁这个函数对应的栈空间。</p>\n</li>\n<li><p>计算两个数，并返回</p>\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//一个函数 test</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tn1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//输入结果=？</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\tsum <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">+</span> n2\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getSum sum = \"</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token comment\">// 30</span>\n\t<span class=\"token comment\">//当函数有return语句时，就是将结果返回给调用者</span>\n\t<span class=\"token comment\">//即谁调用我，就返回给谁</span>\n\t<span class=\"token keyword\">return</span> sum\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tn1 <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n\t<span class=\"token comment\">//调用test</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span><span class=\"token comment\">//输出结果=？</span>\n\n\tsum <span class=\"token operator\">:=</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main sum=\"</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token comment\">// 30</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo03&#x2F;main  go run main.go \ntest() n1&#x3D; 11\nmain() n1&#x3D; 10\ngetSum sum &#x3D;  30\nmain sum&#x3D; 30</code></pre>\n<h3 id=\"return语句\"><a href=\"#return语句\" class=\"headerlink\" title=\"return语句\"></a>return语句</h3><ul>\n<li>基本语法和说明</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">Go函数支持返回多个值，这一点是其它编程语言没有的。\n<span class=\"token keyword\">func</span> 函数名<span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">)</span> （返回值类型列表） <span class=\"token punctuation\">&#123;</span>\n  语句<span class=\"token operator\">...</span>\n  <span class=\"token keyword\">return</span> 返回值列表\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol>\n<li>如果返回多个值时，在接收时，希望忽略某个返回值，则使用<code>_</code>符号表示占位忽略</li>\n<li>如果返回值只有一个，（返回值类型列表）可以不写<code>()</code></li>\n</ol>\n<ul>\n<li><p>案例演示1</p>\n<p>请编写要给函数，可以计算两个数的和和差，并返回结果。</p>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  n1 <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n  <span class=\"token comment\">//调用test</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span><span class=\"token comment\">//输出结果？</span>\n  sum <span class=\"token operator\">:=</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main sum =\"</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token comment\">//30</span>\n  <span class=\"token comment\">//调用getSumAndSub</span>\n  res1<span class=\"token punctuation\">,</span>res2 <span class=\"token operator\">:=</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//res1 = 3 res2 = -1 </span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res1=%v res2=%v\\n\"</span><span class=\"token punctuation\">,</span>res1<span class=\"token punctuation\">,</span> res2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//编写函数，可以计算两个数的和和差，并返回结果</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  sum <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">+</span> n2\n  sub <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">-</span> n2\n  <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">,</span> sub\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li><p>案例演示2</p>\n<p>一个细节说明：希望忽略某个返回值，则使用<code>_</code>符号表示占位忽略</p>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//希望忽略某个返回值，则使用`_`符号表示占位忽略</span>\n<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> res3 <span class=\"token operator\">=</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res3=\"</span><span class=\"token punctuation\">,</span>res3<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"函数的递归调用\"><a href=\"#函数的递归调用\" class=\"headerlink\" title=\"函数的递归调用\"></a>函数的递归调用</h2>","categories":[],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}