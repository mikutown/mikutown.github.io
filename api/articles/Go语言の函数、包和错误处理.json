{"title":"Go语言の函数、包和错误处理","slug":"Go语言の函数、包和错误处理","date":"2021-01-19T07:49:52.000Z","updated":"2022-05-20T07:22:57.476Z","comments":true,"path":"api/articles/Go语言の函数、包和错误处理.json","excerpt":"Go语言の函数、包和错误处理本文章主要讲解了Go语言的函数，包和错误处理等知识。","covers":["http://cdn.leafii.top/img/20220520151521.png","http://cdn.leafii.top/img/20220520151536.png","http://cdn.leafii.top/img/20220520151554.png","http://cdn.leafii.top/img/20220520151621.png","http://cdn.leafii.top/img/20220520151636.png","http://cdn.leafii.top/img/20220520151656.png","http://cdn.leafii.top/img/20220520151726.png","http://cdn.leafii.top/img/20220520151742.png","http://cdn.leafii.top/img/20220520151809.png","http://cdn.leafii.top/img/20220520151852.png","http://cdn.leafii.top/img/20220520151828.png","http://cdn.leafii.top/img/20220520151920.png","http://cdn.leafii.top/img/20220520152039.png","http://cdn.leafii.top/img/20220520152102.png","http://cdn.leafii.top/img/20220520152119.png","http://cdn.leafii.top/img/20220520152137.png","http://cdn.leafii.top/img/20220520152150.png","http://cdn.leafii.top/img/20220520152211.png","http://cdn.leafii.top/img/20220520152226.png","http://cdn.leafii.top/img/20220520152245.png"],"content":"<h1 id=\"Go语言の函数、包和错误处理\"><a href=\"#Go语言の函数、包和错误处理\" class=\"headerlink\" title=\"Go语言の函数、包和错误处理\"></a>Go语言の函数、包和错误处理</h1><p>本文章主要讲解了Go语言的函数，包和错误处理等知识。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"为什么需要函数\"><a href=\"#为什么需要函数\" class=\"headerlink\" title=\"为什么需要函数\"></a>为什么需要函数</h2><h3 id=\"完成需求\"><a href=\"#完成需求\" class=\"headerlink\" title=\"完成需求\"></a>完成需求</h3><p>输入两个数，再输入一个运算符（+-*&#x2F;），得到结果。</p>\n<h3 id=\"使用传统的方法解决\"><a href=\"#使用传统的方法解决\" class=\"headerlink\" title=\"使用传统的方法解决\"></a>使用传统的方法解决</h3><ul>\n<li>代码</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span>\n\t<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.3</span>\n\t<span class=\"token keyword\">var</span> operator <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token char\">'-'</span>\n\t<span class=\"token keyword\">switch</span> operator <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'+'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v + %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v - %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">-</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v * %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">*</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v / %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">/</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\">➜  main go run .&#x2F;main.go\n1.2 - 2.3 &#x3D; -1.0999999999999999</code></pre>\n\n<ul>\n<li>分析上面的代码问题<ol>\n<li>可以完成功能需求，但代码冗余</li>\n<li>与此同时不利于代码的维护</li>\n<li>函数可以解决这个问题奥</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"函数的基本概念\"><a href=\"#函数的基本概念\" class=\"headerlink\" title=\"函数的基本概念\"></a>函数的基本概念</h2><p>​\t为完成某一功能的程序指令（语句）的集合，称为函数。</p>\n<p>在Go中，函数分为：自定义函数、系统函数（查看Go编程手册）</p>\n<h2 id=\"函数的基本语法\"><a href=\"#函数的基本语法\" class=\"headerlink\" title=\"函数的基本语法\"></a>函数的基本语法</h2><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> 函数名 <span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>返回值列表<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  执行语句<span class=\"token operator\">...</span>\n  <span class=\"token keyword\">return</span> 返回值列表\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol>\n<li>形参列表：表示函数的输入</li>\n<li>函数的语句：表示为了实现某一功能代码块</li>\n<li>函数可以有返回值，也可以没有</li>\n</ol>\n<h2 id=\"快速入门案例\"><a href=\"#快速入门案例\" class=\"headerlink\" title=\"快速入门案例\"></a>快速入门案例</h2><p>使用函数解决前面的计算问题。</p>\n<p>走代码：</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span>n2 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> operator <span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> res <span class=\"token builtin\">float64</span>\n\t<span class=\"token keyword\">switch</span> operator <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'+'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">-</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">*</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">/</span> n2\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作符号错误哦！\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span>\n\t<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.3</span>\n\t<span class=\"token keyword\">var</span> operator <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token char\">'+'</span>\n\tresult <span class=\"token operator\">:=</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> operator<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"包的引出\"><a href=\"#包的引出\" class=\"headerlink\" title=\"包的引出\"></a>包的引出</h2><ol>\n<li>在实际的开发中，我们往往需要在不同的文件中，去调用其他文件的定义的函数，比如main.go中，去使用utils.go文件中的函数，如何实现？-&gt;包</li>\n<li>现在有两个程序员共同开发一个Go项目，程序员xiaoming希望定义函数Cal，程序员xiaoqiang也想定义函数也叫Cal。两个程序员为此还吵了起来，怎么办？-&gt;包</li>\n</ol>\n<h2 id=\"包的原理图\"><a href=\"#包的原理图\" class=\"headerlink\" title=\"包的原理图\"></a>包的原理图</h2><p>包的本质实际上就是创建不同的文件夹，来存放程序文件。</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520151521.png\" loading=\"lazy\"></p>\n<h2 id=\"包的基本概念\"><a href=\"#包的基本概念\" class=\"headerlink\" title=\"包的基本概念\"></a>包的基本概念</h2><p>​\t说明：go的每一个文件都是属于一个包的，也就是说go是以包的形式来管理文件和项目目录结构的</p>\n<h2 id=\"包的三大作用\"><a href=\"#包的三大作用\" class=\"headerlink\" title=\"包的三大作用\"></a>包的三大作用</h2><ul>\n<li><p>区分相同名字的函数、变量等标识符</p>\n</li>\n<li><p>当程序文件很多时，可以很好的管理项目</p>\n</li>\n<li><p>控制函数、变量等访问范围，即作用域</p>\n</li>\n</ul>\n<h2 id=\"包的相关说明\"><a href=\"#包的相关说明\" class=\"headerlink\" title=\"包的相关说明\"></a>包的相关说明</h2><ul>\n<li><p>打包基本语法</p>\n<p><code>package 包名</code></p>\n</li>\n<li><p>引入包的基本语法</p>\n<p><code>import &quot;包的路径&quot;</code></p>\n</li>\n</ul>\n<h2 id=\"包使用的快速入门\"><a href=\"#包使用的快速入门\" class=\"headerlink\" title=\"包使用的快速入门\"></a>包使用的快速入门</h2><p>包快速入门-Go相互调用函数，我们将func Cal定义到文件utils.go，将utils.go放到一个包中，当其它文件需要使用到utils.go的方法时，可以import该包，就可以使用了。【演示：新建项目的目录结构】</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520151536.png\" loading=\"lazy\"></p>\n<ul>\n<li>utils.go:</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> utils\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//将计算的功能，放到一个函数中，然后在需要使用，调用即可</span>\n<span class=\"token comment\">//为了让其它包的文件使用Cal函数，需要将C大写类似其它语言的public</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Cal</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span>n2 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> operator <span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> res <span class=\"token builtin\">float64</span>\n\t<span class=\"token keyword\">switch</span> operator <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'+'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">-</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">*</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">/</span> n2\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作符号错误哦！\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ul>\n<li>Main.go</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"go_code/chapter06/demo02/utils\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//请大家完成这样一个需求：</span>\n\t<span class=\"token comment\">//输入两个数，再输入一个运算符（+,-,*,/)，得到结果。。</span>\n\t<span class=\"token comment\">//分析思路...</span>\n\t<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span>\n\t<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.3</span>\n\t<span class=\"token keyword\">var</span> operator <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token char\">'+'</span>\n\tresult <span class=\"token operator\">:=</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">Cal</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span>n2<span class=\"token punctuation\">,</span>operator<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result=\"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"包使用的注意事项和细节讨论\"><a href=\"#包使用的注意事项和细节讨论\" class=\"headerlink\" title=\"包使用的注意事项和细节讨论\"></a>包使用的注意事项和细节讨论</h2><ol>\n<li>在给一个文件打包时，该包对应一个文件夹，比如这里的utils文件夹对应的包名就是utils，文件的包名通常和文件所在的文件夹名一致，一般为小写字母。</li>\n<li>当一个文件要使用其它包函数或变量时，需要先引入对应的包</li>\n</ol>\n<ul>\n<li>引入方式1:<code>import &quot;包名&quot;</code></li>\n<li>引入方式2:</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"包名\"</span>\n  <span class=\"token string\">\"包名\"</span>\n<span class=\"token punctuation\">)</span></code></pre>\n\n<ul>\n<li>package指令在文件第一行，然后是import指令。</li>\n<li>在import包时，路径从$GOPATH的src下开始，不用带src，编译器会自动从src开始引入。</li>\n</ul>\n<ol start=\"3\">\n<li>为了让其它包的文件可以访问到本包的函数，则该函数名的首字母需要大写，类似其他语言的public，这样才能跨包访问。比如utils.go的<em>Cal</em>函数</li>\n<li>在访问其它包函数，变量时，其语法是 包名.函数名,比如这个main.go文件中的<code>utils.Cal(90, 80, &quot;+&quot;)</code></li>\n<li>如果包名较长，Go支持给包取别名，注意细节；取别名后，原来的包名就不能使用了<ul>\n<li>说明：如果给包取了别名，则**需要使用别名来访问该包的函数和变量。</li>\n</ul>\n</li>\n<li>在同一包下，不能有相同的函数名（也不能有相同的全局变量名），否则报重复定义</li>\n<li>如果你要编译成一个可执行程序文件，就需要将这个包声明为main，即<code>package main</code>这个就是一个语法规范，如果你是写一个库，包名可以自定义</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520151554.png\" loading=\"lazy\"></p>\n<h2 id=\"函数的调用机制\"><a href=\"#函数的调用机制\" class=\"headerlink\" title=\"函数的调用机制\"></a>函数的调用机制</h2><h3 id=\"通俗易懂的方式的理解\"><a href=\"#通俗易懂的方式的理解\" class=\"headerlink\" title=\"通俗易懂的方式的理解\"></a>通俗易懂的方式的理解</h3><p><img src=\"http://cdn.leafii.top/img/20220520151621.png\" loading=\"lazy\"></p>\n<h3 id=\"函数-调用过程\"><a href=\"#函数-调用过程\" class=\"headerlink\" title=\"函数-调用过程\"></a>函数-调用过程</h3><p>介绍：为了让大家更好地理解函数调用过程，看两个案例，并画出示意图，这个很重要</p>\n<ol>\n<li>传入一个数+1</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520151636.png\" loading=\"lazy\"></p>\n<p>对上图说明</p>\n<ol>\n<li><p>在调用一个函数时，会给该函数分配一个新的空间，编译器会通过自身的处理让这个新的空间和其它的栈的空间去分开来</p>\n</li>\n<li><p>在每个函数对应的栈中，数据空间时独立的，不会混淆</p>\n</li>\n<li><p>当一个函数调用完毕（执行完毕）后，程序会销毁这个函数对应的栈空间。</p>\n</li>\n<li><p>计算两个数，并返回</p>\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//一个函数 test</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tn1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//输入结果=？</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\tsum <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">+</span> n2\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getSum sum = \"</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token comment\">// 30</span>\n\t<span class=\"token comment\">//当函数有return语句时，就是将结果返回给调用者</span>\n\t<span class=\"token comment\">//即谁调用我，就返回给谁</span>\n\t<span class=\"token keyword\">return</span> sum\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tn1 <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n\t<span class=\"token comment\">//调用test</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span><span class=\"token comment\">//输出结果=？</span>\n\n\tsum <span class=\"token operator\">:=</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main sum=\"</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token comment\">// 30</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo03&#x2F;main  go run main.go \ntest() n1&#x3D; 11\nmain() n1&#x3D; 10\ngetSum sum &#x3D;  30\nmain sum&#x3D; 30</code></pre>\n\n<h3 id=\"return语句\"><a href=\"#return语句\" class=\"headerlink\" title=\"return语句\"></a>return语句</h3><ul>\n<li>基本语法和说明</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">Go函数支持返回多个值，这一点是其它编程语言没有的。\n<span class=\"token keyword\">func</span> 函数名<span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">)</span> （返回值类型列表） <span class=\"token punctuation\">&#123;</span>\n  语句<span class=\"token operator\">...</span>\n  <span class=\"token keyword\">return</span> 返回值列表\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol>\n<li>如果返回多个值时，在接收时，希望忽略某个返回值，则使用<code>_</code>符号表示占位忽略</li>\n<li>如果返回值只有一个，（返回值类型列表）可以不写<code>()</code></li>\n</ol>\n<ul>\n<li><p>案例演示1</p>\n<p>请编写要给函数，可以计算两个数的和和差，并返回结果。</p>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  n1 <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n  <span class=\"token comment\">//调用test</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span><span class=\"token comment\">//输出结果？</span>\n  sum <span class=\"token operator\">:=</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main sum =\"</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token comment\">//30</span>\n  <span class=\"token comment\">//调用getSumAndSub</span>\n  res1<span class=\"token punctuation\">,</span>res2 <span class=\"token operator\">:=</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//res1 = 3 res2 = -1 </span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res1=%v res2=%v\\n\"</span><span class=\"token punctuation\">,</span>res1<span class=\"token punctuation\">,</span> res2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//编写函数，可以计算两个数的和和差，并返回结果</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  sum <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">+</span> n2\n  sub <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">-</span> n2\n  <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">,</span> sub\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ul>\n<li><p>案例演示2</p>\n<p>一个细节说明：希望忽略某个返回值，则使用<code>_</code>符号表示占位忽略</p>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//希望忽略某个返回值，则使用`_`符号表示占位忽略</span>\n<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> res3 <span class=\"token operator\">=</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res3=\"</span><span class=\"token punctuation\">,</span>res3<span class=\"token punctuation\">)</span></code></pre>\n\n<h2 id=\"函数的递归调用\"><a href=\"#函数的递归调用\" class=\"headerlink\" title=\"函数的递归调用\"></a>函数的递归调用</h2><h3 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>一个函数在<strong>函数体内</strong>又<strong>调用了本身</strong>，我们称为递归调用</p>\n<h3 id=\"递归调用快速入门\"><a href=\"#递归调用快速入门\" class=\"headerlink\" title=\"递归调用快速入门\"></a>递归调用快速入门</h3><ul>\n<li>代码1</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#123;</span>\n    n<span class=\"token operator\">--</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n=\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//通过分析来看递归调用的特点</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>上面代码的分析图：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520151656.png\" loading=\"lazy\"></p>\n<ul>\n<li>代码2</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#123;</span>\n    n<span class=\"token operator\">--</span>\n    <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n=\"</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//看一段代码</span>\n  <span class=\"token comment\">//test(4) //通过分析来看下递归调用的特点</span>\n  <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ？通过分析来看下递归调用的特点</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>对上面代码分析的示意图：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520151726.png\" loading=\"lazy\"></p>\n<h3 id=\"递归调用的总结\"><a href=\"#递归调用的总结\" class=\"headerlink\" title=\"递归调用的总结\"></a>递归调用的总结</h3><p><strong>函数递归需要遵守的重要原则：</strong></p>\n<ol>\n<li>执行一个函数时，就创建一个新的受保护的独立空间（新函数栈）</li>\n<li>函数的局部变量是独立的，不会相互影响</li>\n<li>递归必须向退出递归的条件逼近，否则就是无限递归，死循环了 :) </li>\n<li>当一个函数执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，同时当函数执行完毕或者返回时，该函数本身也会被系统销毁</li>\n</ol>\n<h3 id=\"递归课堂练习题\"><a href=\"#递归课堂练习题\" class=\"headerlink\" title=\"递归课堂练习题\"></a>递归课堂练习题</h3><ul>\n<li><p>题1:斐波那契数</p>\n<p>请使用递归的方式，求出斐波那契数1，1，2，3，5，8，13…</p>\n<p>给你一个整数n，求出它的斐波那切数是多少？</p>\n<ul>\n<li>思路</li>\n</ul>\n<ol>\n<li>当n&#x3D;&#x3D;1 || n&#x3D;&#x3D;2, 返回1</li>\n<li>当n&gt;2, 返回f(n-1) + f(n-2)</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> n<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  res <span class=\"token operator\">:=</span> <span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//测试</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ul>\n<li><p>题2:求函数值</p>\n<p>已知 <em><em>f(1)&#x3D;3;f(n)&#x3D;2</em>(n-1)+1</em>*;</p>\n<p>请使用递归的思想编程，求出f(n)的值？</p>\n<ul>\n<li><p>思路</p>\n<p>递归就完事了奥铁子</p>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*\n已知 f(1)=3;f(n)=2*(n-1)+1;\n请使用递归的思想编程，求出f(n)的值？\n*/</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> n<span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">3</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f(1)=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f(5)=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre></li>\n</ul>\n</li>\n<li><p>题3:猴子吃桃子问题</p>\n<p>有一堆桃子，猴子第一天吃了其中的一半，并再多吃了一个!以后每天猴子都吃其中的一半，然后再多吃一个。当到第十天时，想再吃时(还没吃)，发现只有 <strong>1</strong> 个桃子了。问题:最初共多少个桃子? </p>\n<ul>\n<li>思路分析:<ol>\n<li>第10天只有1个桃子</li>\n<li>第9天有（第十天桃子数量+1）*2个</li>\n<li>第n天有peach(n)&#x3D;(peach(n+1)+1)*2</li>\n</ol>\n</li>\n<li>代码</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">peach</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> n<span class=\"token operator\">==</span><span class=\"token number\">10</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">peach</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre></li>\n</ul>\n<h2 id=\"函数使用的注意事项和细节讨论\"><a href=\"#函数使用的注意事项和细节讨论\" class=\"headerlink\" title=\"函数使用的注意事项和细节讨论\"></a>函数使用的注意事项和细节讨论</h2><ol>\n<li>函数的形参列表可以是多个，返回值列表也可以是多个。</li>\n<li>形参列表和返回值列表的数据类型可以是值类型和引用类型。</li>\n<li>函数的命名遵循标识符命名规范，首字母不能是数字，首字母大写该函数可以被本包文件和其它包文件使用，类似 public , 首字母小写，只能被本包文件使用，其它包文件不能使用，类似 private</li>\n<li>函数中的变量是局部的，函数外不生效【案例说明】</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//n1 是 test函数的局部变量，只能在test函数中使用</span>\n  <span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//这里不能使用n1，因为n1是test函数的局部变量</span>\n  <span class=\"token comment\">//fmt.Println(\"n1=\",n1)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"5\">\n<li>基本数据类型和数组默认都是<strong>值传递</strong>，即进行值拷贝。在函数内修改，不会影响到原来的值。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  n1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test02() n1=\"</span><span class=\"token punctuation\">,</span> n1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  num <span class=\"token operator\">:=</span> <span class=\"token number\">20</span>\n  <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main() num=\"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"6\">\n<li>如果希望函数内的变量能修改函数外的变量（指的是默认以值传递的方式的数据类型），可以传入变量的地址&amp;，函数内以指针的方式操作变量。从效果上看类似引用。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token operator\">*</span>n1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>n1 <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test03() n1=\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>n1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//30</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  num <span class=\"token operator\">:=</span> <span class=\"token number\">20</span>\n  <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main() num=\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 30</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><img src=\"http://cdn.leafii.top/img/20220520151742.png\" loading=\"lazy\"></p>\n<ol start=\"7\">\n<li>Golang的函数不支持函数重载</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  n1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test02() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//这是错误的奥！！！！！</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"8\">\n<li>在Golang中，<strong>函数也是一种数据类型</strong>，可以赋值给一个变量，则该变量就是一个函数类型的变量了。<strong>通过该变量可以对函数调用</strong></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  a <span class=\"token operator\">:=</span> getSum\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a的类型%T， getSum类型是%T \\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> getSum<span class=\"token punctuation\">)</span>\n  \n  res <span class=\"token operator\">:=</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//等价 res := getSum(10, 40)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"9\">\n<li>函数既然是一种数据类型，因此在Golang中，函数可以作为形参，并且调用哦</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">res2 <span class=\"token operator\">:=</span> <span class=\"token function\">myFun</span><span class=\"token punctuation\">(</span>getSum<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res2=\"</span><span class=\"token punctuation\">,</span> res2<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">myFun</span><span class=\"token punctuation\">(</span>funvar <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> num1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> num2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">funvar</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"10\">\n<li><p>为了简化数据类型定义，Golang支持自定义数据类型</p>\n<p>基本语法：<code>type 自定义数据类型名 数据类型 //理解：相当于一个别名</code></p>\n<p>案例：<code>type myInt int  //这时myInt就等价int来使用了哦！ </code></p>\n<p>案例：<code>type mySum func(int, int) int //这时mySum就等价一个 函数类型fu nc(int, int) int</code></p>\n</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520151809.png\" loading=\"lazy\"></p>\n<ol start=\"11\">\n<li>支持对函数返回值命名</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>sum <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> sub <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tsub <span class=\"token operator\">=</span> n1 <span class=\"token operator\">-</span> n2\n\tsum <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\ta1<span class=\"token punctuation\">,</span> b1 <span class=\"token operator\">:=</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a1=%v,b1=%v \\n\"</span><span class=\"token punctuation\">,</span>a1<span class=\"token punctuation\">,</span> b1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"12\">\n<li>使用<code>_</code>标示符，忽略返回值</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>sum <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> sub <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  sum <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2\n  sub <span class=\"token operator\">=</span> n1 <span class=\"token operator\">-</span> n2\n  <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  res1<span class=\"token punctuation\">,</span><span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  fml<span class=\"token punctuation\">.</span><span class=\"token function\">Ptintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res1=%d\"</span><span class=\"token punctuation\">,</span>res1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"13\">\n<li>Go支持可变参数</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//支持0到多个参数</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">...</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> sum <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//支持1到多个参数</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">...</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> sum <span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ul>\n<li>说明：<ol>\n<li>args是slice切片，通过args[index]可以访问到各个值。</li>\n<li>案例演示：编写一个函数sum，可以求出1到多个int的和</li>\n<li>如果一个函数的形参列表中有可变参数，则可变参数需要放在形参列表最后。</li>\n</ol>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//案例演示:编写一个函数sum，可以求出 1到多个int的和</span>\n<span class=\"token comment\">//参数的使用</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">...</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span>\n  sum <span class=\"token operator\">:=</span> n1\n  <span class=\"token comment\">//遍历args</span>\n  <span class=\"token keyword\">for</span> i<span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n    sum <span class=\"token operator\">+=</span> args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token comment\">//args[0] 表示取出args切片的第一个元素值，其它以此类推</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> sum\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  res4 <span class=\"token operator\">:=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res4=\"</span><span class=\"token punctuation\">,</span>res4<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"函数的课堂练习\"><a href=\"#函数的课堂练习\" class=\"headerlink\" title=\"函数的课堂练习\"></a>函数的课堂练习</h2><ul>\n<li>题1</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">float32</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float32</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n1 type=%T \\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//n1 type = float32</span>\n  <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// sum = 3</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//代码有误错误？输出什么？</span></code></pre>\n\n<p>没有错误。</p>\n<pre class=\"language-none\"><code class=\"language-none\">n1 type&#x3D;float32 \nsum&#x3D; 3</code></pre>\n\n<ul>\n<li>题2</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> mySum <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum2</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span>n2<span class=\"token punctuation\">,</span>n3 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//使用自定义数据类型（type）来简化定义 </span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span>funcVar mySum<span class=\"token punctuation\">,</span> num1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> num2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">funcVar</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  a <span class=\"token operator\">:=</span> sum\n  b <span class=\"token operator\">:=</span> sum2\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//ok</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//error</span>\n  \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*\n\t错误：\n\tfmt.Println(myFunc(b,1,2))错误，原因是类型不匹配。\n\t因为不能把func sum2(n1,n2,n3 int) int 赋给func(int,int) int\n*/</span></code></pre>\n\n<ul>\n<li>题3：请编写一个函数swap(n1 *int,n2 *int)可以交换n1和n2的值</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//定义一个临时变量</span>\n  t <span class=\"token operator\">:=</span> <span class=\"token operator\">*</span>n1\n  <span class=\"token operator\">*</span>n1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>n2\n  <span class=\"token operator\">*</span>n2 <span class=\"token operator\">=</span> t\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  a <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n  b <span class=\"token operator\">:=</span> <span class=\"token number\">20</span>\n  <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=%v,b=%v \\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\">a&#x3D;20,b&#x3D;10 </code></pre>\n\n<h2 id=\"init函数\"><a href=\"#init函数\" class=\"headerlink\" title=\"init函数\"></a>init函数</h2><h3 id=\"基本介绍-1\"><a href=\"#基本介绍-1\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>​\t每一个源文件都可以包含一个init函数，该函数会在main函数执行前，被Go运行框架调用，也就是说init会在main函数前被调用。</p>\n<h3 id=\"案例说明：\"><a href=\"#案例说明：\" class=\"headerlink\" title=\"案例说明：\"></a>案例说明：</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//init函数，通常可以在init函数中完成初始化工作 </span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init()...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main()...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>输出结果是：</p>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo04&#x2F;main  go run .&#x2F;main.go\ninit()...\nmain()...</code></pre>\n\n<h3 id=\"init函数的注意事项和细节\"><a href=\"#init函数的注意事项和细节\" class=\"headerlink\" title=\"init函数的注意事项和细节\"></a>init函数的注意事项和细节</h3><ol>\n<li>如果一个文件同时包含<strong>全局变量定义，init函数和main函数</strong>，则执行的流程全局变量定义-&gt;init函数-&gt;main函数</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520151852.png\" loading=\"lazy\"></p>\n<ol start=\"2\">\n<li>init函数最主要的作用，就是完成一些初始化的工作，比如下面的案例</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520151828.png\" loading=\"lazy\"></p>\n<p><img src=\"http://cdn.leafii.top/img/20220520151920.png\" loading=\"lazy\"></p>\n<ol start=\"3\">\n<li>细节说明：面试题：案例如果main.go和utils.go都含有变量定义，init函数时，执行的流程又是什么样呢？</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520152039.png\" loading=\"lazy\"></p>\n<h2 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>​\tGo支持匿名函数，匿名函数就是没有名字的函数，如果我们某个函数只是希望使用一次，可以考虑使用匿名函数，匿名函数也可以实现多次调用。</p>\n<h3 id=\"匿名函数使用方式1\"><a href=\"#匿名函数使用方式1\" class=\"headerlink\" title=\"匿名函数使用方式1\"></a>匿名函数使用方式1</h3><p>​\t在定义匿名函数时就直接调用，这种方式匿名函数只能调用一次。【案例演示】</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//在定义匿名函数时就直接调用，这种方式匿名函数只能调用一次</span>\n  \n  <span class=\"token comment\">//案例演示，求两个数的和，使用匿名函数的方式完成</span>\n  res1 <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res1=\"</span><span class=\"token punctuation\">,</span> res1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"匿名函数使用方式2\"><a href=\"#匿名函数使用方式2\" class=\"headerlink\" title=\"匿名函数使用方式2\"></a>匿名函数使用方式2</h3><p>​\t将<strong>匿名函数赋给一个变量</strong>（函数变量），再通过该<strong>变量来调用匿名函数</strong>【案例演示】</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//将匿名函数func (n1 int, n2 int) int 赋给a变量</span>\n<span class=\"token comment\">//则a的数据类型就是函数类型，此时，我们可以通过a完成调用</span>\na <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">-</span> n2\n<span class=\"token punctuation\">&#125;</span>\nres2 <span class=\"token operator\">:=</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res2=\"</span><span class=\"token punctuation\">,</span> res2<span class=\"token punctuation\">)</span>\nres3 <span class=\"token operator\">:=</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res3=\"</span><span class=\"token punctuation\">,</span> res3<span class=\"token punctuation\">)</span></code></pre>\n\n<h3 id=\"全局匿名函数\"><a href=\"#全局匿名函数\" class=\"headerlink\" title=\"全局匿名函数\"></a>全局匿名函数</h3><p>​\t如果将匿名函数赋给一个全局变量，那么这个匿名函数，就成为一个全局匿名函数，可以在程序有效。</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">//func1就是一个全局匿名函数</span>\n  Fun1 <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">*</span> n2\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//全局匿名函数的使用</span>\nres4 <span class=\"token operator\">:=</span> <span class=\"token function\">Fun1</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res4=\"</span><span class=\"token punctuation\">,</span> res4<span class=\"token punctuation\">)</span></code></pre>\n\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><h3 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>​\t基本介绍：闭包就是<strong>一个函数</strong>和<strong>其相关的引用环境</strong>组合的一个整体（实体）</p>\n<h3 id=\"案例演示\"><a href=\"#案例演示\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//累加器</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">AddUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> n <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>x <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n    n <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> x\n    <span class=\"token keyword\">return</span> n\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//使用前面的代码</span>\n  f <span class=\"token operator\">:=</span> <span class=\"token function\">AddUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//11</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//13</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//16</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ul>\n<li><p>对上面代码的说明和总结</p>\n<ol>\n<li><p>AddUpper是一个函数，返回的数据类型是<code>fun (int) int</code></p>\n</li>\n<li><p>闭包的说明</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> n <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>x <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  n <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> x\n  <span class=\"token keyword\">return</span> n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>返回的是一个匿名函数，但是这个匿名函数引用到函数外的n，因此这个匿名函数就和n形成一个整体，构成闭包。</p>\n</li>\n<li><p>可以这么理解：闭包是类，函数是操作，n是字段。函数和它使用到n构成闭包。</p>\n</li>\n<li><p>当我们反复的调用f函数时，n初始化一次，所以每调用一次就进行累计。</p>\n</li>\n<li><p>我们要搞清楚闭包的关键，就是要分析出返回的函数它使用（引用）到那些变量，因为函数和它引用到的变量共同构成闭包。</p>\n</li>\n<li><p>对上面代码的一个修改，加深对闭包的理解</p>\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//累加器</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">AddUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> n <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n  <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>x <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n    n <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> x\n    str <span class=\"token operator\">+=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// => 36 = '$'</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str=\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> <span class=\"token comment\">//1. str = \"hello$\" 2. str = \"hello$$\" 3. str = \"hello$$$\"</span>\n    <span class=\"token keyword\">return</span> n\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//使用前面的代码</span>\n  f <span class=\"token operator\">:=</span> <span class=\"token function\">AddUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//11</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//13</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//16</span>\n<span class=\"token punctuation\">&#125;</span></code></pre></li>\n</ul>\n<h3 id=\"闭包的最佳实践\"><a href=\"#闭包的最佳实践\" class=\"headerlink\" title=\"闭包的最佳实践\"></a>闭包的最佳实践</h3><ul>\n<li>请编写一个程序，具体要求如下：</li>\n</ul>\n<ol>\n<li>编写一个函数 makeSuffix (suffix string) 可以接收一个文件后缀名(比如.jpg)，并返回一个闭包</li>\n<li>调用闭包，可以传入一个文件名，如果该文件名没有指定的后缀(比如.jpg)，则返回 文件名.jpg，如果已经有.jpg后缀，则返回原文件名。</li>\n<li>要求使用闭包的方式完成</li>\n<li>Strings.HasSuffix， 该函数可以判断某个字符串是否有指定的后缀 。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n  <span class=\"token string\">\"strings\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">makeSuffix</span><span class=\"token punctuation\">(</span>suffix <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasSuffix</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>suffix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> name <span class=\"token operator\">+</span> suffix\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> name\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//返回一个闭包</span>\n  f <span class=\"token operator\">:=</span> <span class=\"token function\">makeSuffix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".jpg\"</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件名处理后=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"winter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件名处理后=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"winter.jpg.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>上面代码的总结和说明：</p>\n<ol>\n<li>返回的匿名函数和 makeSuffix (suffix string) 的 suffix 变量 组合成一个闭包,因为 返回的函数引用 到 suffix 这个变量</li>\n<li>我们体会一下闭包的好处，如果使用传统的方法，也可以轻松实现这个功能，但是传统方法需要每 次都传入 后缀名，比如 .jpg ,而闭包因为可以保留上次引用的某个值，所以我们传入一次就可以反复 使用。可以仔细的体会一把!</li>\n</ol>\n<h2 id=\"函数的defer\"><a href=\"#函数的defer\" class=\"headerlink\" title=\"函数的defer\"></a>函数的defer</h2><h3 id=\"为什么需要defer\"><a href=\"#为什么需要defer\" class=\"headerlink\" title=\"为什么需要defer\"></a>为什么需要defer</h3><p>​\t在函数中，程序员经常需要创建资源（比如：数据库连接、文件句柄、锁等），为了在<strong>函数执行完毕后，及时的释放资源</strong>，Go的设计者提供defer（延时机制）。</p>\n<h3 id=\"快速入门案例-1\"><a href=\"#快速入门案例-1\" class=\"headerlink\" title=\"快速入门案例\"></a>快速入门案例</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//当执行到defer时，暂时不执行，会将defer后面的语句压入到独立的栈（defer栈）</span>\n  <span class=\"token comment\">//当函数执行完毕后，再从defer栈，按照先入后出的方式出栈，执行</span>\n  <span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok1 n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span><span class=\"token comment\">//defer 3. ok1 n1 = 10</span>\n  <span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok2 n2=\"</span><span class=\"token punctuation\">,</span>n2<span class=\"token punctuation\">)</span><span class=\"token comment\">//defer 2. ok2 n2 = 20</span>\n  \n  res <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">+</span> n2 <span class=\"token comment\">// res = 30</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok3 res=\"</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  res <span class=\"token operator\">:=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span><span class=\"token comment\">// 4. res = 30</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo06&#x2F;main  go run .&#x2F;main.go\nok3 res&#x3D; 30\nok2 n2&#x3D; 20\nok1 n1&#x3D; 10\nres&#x3D; 30</code></pre>\n\n<h3 id=\"defer的注意事项和细节\"><a href=\"#defer的注意事项和细节\" class=\"headerlink\" title=\"defer的注意事项和细节\"></a>defer的注意事项和细节</h3><ol>\n<li>当go执行到一个defer时，不会立即执行defer后的语句，而是将defer后的语句压入到一个栈中【暂时称此栈为defer栈】，然后继续执行函数下一个语句</li>\n<li>当函数执行完毕后，再从defer栈中，依次从栈顶取出语句执行（注：遵守栈 先入后出的机制），所以可以看到前面案例输出的顺序。</li>\n<li>在defer将语句放入到栈时，也会将相关的值拷贝同时入栈。<strong>请看一段代码：</strong></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//当执行到defer时，暂时不执行，会讲defer后面的语句压入到独立的栈(defer栈)</span>\n  <span class=\"token comment\">//当函数执行完毕后，再从defer栈，按照先入后出的方式出栈，执行</span>\n  <span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok1 n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//defer 3. ok1 n1=10</span>\n  <span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok2 n2=\"</span><span class=\"token punctuation\">,</span>n2<span class=\"token punctuation\">)</span> <span class=\"token comment\">//defer 2. ok2 n2=20</span>\n  <span class=\"token comment\">//增加一句话</span>\n  n1<span class=\"token operator\">++</span> <span class=\"token comment\">//n1 = 11</span>\n  n2<span class=\"token operator\">++</span> <span class=\"token comment\">//n2 = 21</span>\n  res <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">+</span> n2 <span class=\"token comment\">// res = 32</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok3 res=\"</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span> <span class=\"token comment\">//1. ok3 res= 32</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  res <span class=\"token operator\">:=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token comment\">//4. res = 32</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><img src=\"http://cdn.leafii.top/img/20220520152102.png\" loading=\"lazy\"></p>\n<h3 id=\"defer的最佳实践\"><a href=\"#defer的最佳实践\" class=\"headerlink\" title=\"defer的最佳实践\"></a>defer的最佳实践</h3><p>defer最主要的价值是在，当函数执行完毕后可以及时的释放函数创建的资源。看看模拟代码： </p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//关闭文件资源</span>\n  file <span class=\"token operator\">=</span> <span class=\"token function\">openfile</span><span class=\"token punctuation\">(</span>文件名<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">defer</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//\t其他代码</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//释放数据库资源</span>\n  connect <span class=\"token operator\">=</span> <span class=\"token function\">openDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">defer</span> cinnect<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//其他代码</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>说明</p>\n<ol>\n<li>在Golang编程中的通常做法是，创建资源后，比如（打开了文件，获取了数据库的链接，或者是锁资源），可以执行defer file.Close() defer connect.Close()</li>\n<li>在defer后，可以继续使用创建资源。</li>\n<li>当函数完毕后，系统会依次从defer栈中，取出语句，关闭资源</li>\n<li>这种机制，非常简洁，程序员不用再为什么时候关闭资源而烦心。</li>\n</ol>\n<h2 id=\"函数参数传递方式\"><a href=\"#函数参数传递方式\" class=\"headerlink\" title=\"函数参数传递方式\"></a>函数参数传递方式</h2><h3 id=\"基本介绍-2\"><a href=\"#基本介绍-2\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>​\t我们在讲解函数注意事项和使用细节时，已经讲过值类型和引用类型了，这里我们再系统总结一 下，因为这是重难点，值类型参数默认就是值传递，而引用类型参数默认就是引用传递。</p>\n<h3 id=\"两种传递方式\"><a href=\"#两种传递方式\" class=\"headerlink\" title=\"两种传递方式\"></a>两种传递方式</h3><ol>\n<li>值传递</li>\n<li>引用传递</li>\n</ol>\n<p>  其实，不管是值传递还是引用传递，传递给函数的都是变量的副本，不同的是，值传递的是值的拷贝，引用传递的是地址的拷贝，一般来说，地址拷贝效率高，因为数据量小，而值拷贝决定拷贝的 数据大小，数据越大，效率越低。</p>\n<h3 id=\"值类型和引用类型\"><a href=\"#值类型和引用类型\" class=\"headerlink\" title=\"值类型和引用类型\"></a>值类型和引用类型</h3><ol>\n<li>值类型：基本数据类型int系列，float系列，bool，string，数组和结构体struct</li>\n<li>引用类型：指针、slice切片、map、管道chan、interface等都是引用类型</li>\n</ol>\n<h3 id=\"值传递和引用传递使用特点\"><a href=\"#值传递和引用传递使用特点\" class=\"headerlink\" title=\"值传递和引用传递使用特点\"></a>值传递和引用传递使用特点</h3><ol>\n<li>值类型默认是值传递，变量直接存储值，内存通常在栈中分配【示意图】</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520152119.png\" loading=\"lazy\"></p>\n<ol start=\"2\">\n<li>引用类型默认是引用传递：变量存储的是一个地址，这个地址对应的空间才真正存储数据（值），内存通常在堆上分配，当没有任何变量引出这个地址时，该地址对应的数据空间就成为一个垃圾，由GC来回收。【示意图】</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520152137.png\" loading=\"lazy\"></p>\n<ol start=\"3\">\n<li>如果希望函数内的变量能修改函数外的变量，可以传入变量的地址&amp;，函数内以指针的方式操作变量。从效果上看类似引用。这个案例在前面详解函数使用注意事项中有。</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520152150.png\" loading=\"lazy\"></p>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><ol>\n<li>函数内部声明&#x2F;定义的变量叫局部变量，作用域仅限于<strong>函数内部</strong></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//age 和 Name 的作用域就只在test函数内部</span>\n  age <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n  Name <span class=\"token operator\">:=</span> <span class=\"token string\">\"tom~\"</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  \n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"2\">\n<li>函数外部声明&#x2F;定义的变量叫全局变量，作用域在整个包都有效，如果其首字母为大写，则作用 域在整个程序有效</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//函数外部声明/定义的变量叫全局变量</span>\n<span class=\"token comment\">//作用域在整个包都有效，如果其首字母为大写，则作用域在整个程序有效</span>\n<span class=\"token keyword\">var</span> age <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">50</span>\n<span class=\"token keyword\">var</span> Name <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"jack~\"</span>\n<span class=\"token comment\">//函数</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//age和Name的作用域就只在test函数内部</span>\n  age <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n  Name <span class=\"token operator\">:=</span> <span class=\"token string\">\"tom~\"</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age=\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span> <span class=\"token comment\">//10</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name=\"</span><span class=\"token punctuation\">,</span> Name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// tom~</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age=\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 50</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name=\"</span><span class=\"token punctuation\">,</span> Name<span class=\"token punctuation\">)</span> <span class=\"token comment\">//jack~</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"3\">\n<li>如果变量是在一个代码块，比如for&#x2F;if中，那么这个变量的作用域就在该代码块</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//如果变量是在一个代码块，比如for/if中，那么这个变量的作用域就在该代码块</span>\n<span class=\"token keyword\">for</span> i<span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> i <span class=\"token builtin\">int</span> <span class=\"token comment\">//局部变量</span>\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span></code></pre>\n\n<h3 id=\"变量作用域的课堂练习\"><a href=\"#变量作用域的课堂练习\" class=\"headerlink\" title=\"变量作用域的课堂练习\"></a>变量作用域的课堂练习</h3><ul>\n<li>题1</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"tom~\"</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// tom~</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  name <span class=\"token operator\">:=</span> <span class=\"token string\">\"jack~\"</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// jack</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// tom</span>\n  <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//tom</span>\n  <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// jack</span>\n  <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// tom</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ul>\n<li>题2</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> Age <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span> <span class=\"token comment\">// ok</span>\nName <span class=\"token operator\">:=</span> <span class=\"token string\">\"tom\"</span> <span class=\"token comment\">// var Name string\t\tName = \"tom\"</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span>Name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><strong>错误，因为赋值语句 不能在函数体外面</strong></p>\n<h2 id=\"函数课堂练习（综合）\"><a href=\"#函数课堂练习（综合）\" class=\"headerlink\" title=\"函数课堂练习（综合）\"></a>函数课堂练习（综合）</h2><ol>\n<li>函数可以没有返回值案例，编写一个函数，从终端输入一个整数打印出对应的金字塔</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//将打印金字塔的代码封装到函数中</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">printPyramid</span><span class=\"token punctuation\">(</span>totalLevel <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//i表示层数</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> totalLevel<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//在打印*前先打印空格</span>\n    <span class=\"token keyword\">for</span> k <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> totalLevel <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//j表示每层打印多少</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//调用printPyramid函数就可以打印金字塔</span>\n  <span class=\"token comment\">//从终端输入一个整数打印出对应的金字塔</span>\n  <span class=\"token keyword\">var</span> n <span class=\"token builtin\">int</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入打印金字塔的层数\"</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanln</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">printPyramid</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\">请输入打印金字塔的层数\n3\n  *\n ***\n*****</code></pre>\n\n<ol start=\"2\">\n<li>编写一个函数，从终端输入一个整数（1到9），打印出对应的乘法表</li>\n</ol>\n<ul>\n<li>思路：将九九乘法表以函数的方式封装，在需要打印时，直接调用即可</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">printMulti</span><span class=\"token punctuation\">(</span>num <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//打印出九九乘法表</span>\n  <span class=\"token comment\">//i表示层数</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> j<span class=\"token operator\">:=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v * %v = %v \\t\"</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//从终端输入一个整数表示要打印的乘法表对应的数</span>\n  <span class=\"token keyword\">var</span> num <span class=\"token builtin\">int</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入九九乘法表的对应数\"</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanln</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">printMulti</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\">请输入九九乘法表的对应数\n7\n1 * 1 &#x3D; 1 \n1 * 2 &#x3D; 2       2 * 2 &#x3D; 4 \n1 * 3 &#x3D; 3       2 * 3 &#x3D; 6       3 * 3 &#x3D; 9 \n1 * 4 &#x3D; 4       2 * 4 &#x3D; 8       3 * 4 &#x3D; 12      4 * 4 &#x3D; 16 \n1 * 5 &#x3D; 5       2 * 5 &#x3D; 10      3 * 5 &#x3D; 15      4 * 5 &#x3D; 20      5 * 5 &#x3D; 25 \n1 * 6 &#x3D; 6       2 * 6 &#x3D; 12      3 * 6 &#x3D; 18      4 * 6 &#x3D; 24      5 * 6 &#x3D; 30      6 * 6 &#x3D; 36 \n1 * 7 &#x3D; 7       2 * 7 &#x3D; 14      3 * 7 &#x3D; 21      4 * 7 &#x3D; 28      5 * 7 &#x3D; 35      6 * 7 &#x3D; 42       7 * 7 &#x3D; 49 </code></pre>\n\n<ol start=\"3\">\n<li>编写函数，对给定的一个二位数组（3 * 3）转置，这个题将数组的时候再完成8</li>\n</ol>\n<h2 id=\"字符串常用的系统函数\"><a href=\"#字符串常用的系统函数\" class=\"headerlink\" title=\"字符串常用的系统函数\"></a>字符串常用的系统函数</h2><p>​\t说明：字符串在我们程序开发中，使用的是非常多的，常用的函数需要同学们掌握[带看手册或者 官方编程指南]</p>\n<ol>\n<li>统计字符串的长度，按字节 len(str)</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  str <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello叶\"</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str len=\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 8</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"2\">\n<li>字符串遍历，同时处理有中文的问题 <code>r := []rune(str)</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">str2 <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello北京\"</span>\n<span class=\"token comment\">//字符串遍历，同时处理有中文的问题 r := []rune(str)</span>\nr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">rune</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字符=%c\\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"3\">\n<li>字符串转整数：<code>n,err := strong.Atoi(&quot;12&quot;)</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">n<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Atoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"转换错误\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"转成的结果是\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"4\">\n<li>整数转字符串 <code>str = strconv.Itoa(12345)</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">str <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span><span class=\"token number\">12345</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str=%v, str=%T\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"5\">\n<li>字符串 转 []byte: <code>var bytes = []byte(&quot;hello go&quot;)</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> bytes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello go\"</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bytes = %v \\n\"</span><span class=\"token punctuation\">,</span>bytes<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"6\">\n<li>[]byte 转 字符串：<code>str = string([]byte&#123;97,98,99&#125;)</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">str <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str=%v\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"7\">\n<li>10进制转2，8，16进制： <code>str = strconv.FormatInt(123,2) // 2-&gt;8, 16</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">str <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">FormatInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123对应的二进制是=%v\\n\"</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">)</span>\nstr <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">FormatInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123对应的16进制是%v\\n\"</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"8\">\n<li>查找子串是否在指定的字符串中： <code>strings.Contains(&quot;seafood&quot;, &quot;foo&quot;) //true</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">b <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Contaions</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"seafood\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mary\"</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=%v\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"9\">\n<li>统计一个字符串有几个指定的子串： <code>strings.Count(&quot;seheese&quot;, &quot;e&quot;) //4</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">num <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Count</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ceheese\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num=%v\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"10\">\n<li>不区分大小写的字符串比较(&#x3D;&#x3D;是区分字母大小写的): <code>fmt.Println(strings.EqualFold(&quot;abc&quot;, &quot;Abc&quot;)) // true</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">b <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">EqualFold</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Abc\"</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=%v\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"结果\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"abc\"</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//false 区分字母大小写</span></code></pre>\n\n<ol start=\"11\">\n<li>返回子串在字符串第一次出现的index值，如果没有返回-1:<code>strings.Index(&quot;NLT_abc&quot;, &quot;abc&quot;) //4</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">index <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NLT_abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index=%v\\n\"</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre>\n\n<ol start=\"12\">\n<li>返回子串在字符串最后一次出现的index，如没有返回-1:<code>strings.LastIndex(&quot;go golang&quot;,&quot;go&quot;)</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">index <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">LastIndex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"go golang\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"go\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//3</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index=%v\\n\"</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"13\">\n<li>将指定的子串替换成 另外一个子串:<code> strings.Replace(&quot;go go hello&quot;, &quot;go&quot;, &quot;go 语言&quot;, n)</code> n 可以指定你希望替换几个，如果 n&#x3D;-1 表示全部替换</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"go go hello\"</span>\nstr <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"go\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"北京\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str=%v str2=%v\\n\"</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"14\">\n<li><p>按照指定的某个字符，为分割标识，将一个字符串拆分成字符串数组:</p>\n<p><code>strings.Split(&quot;hello,wrold,ok&quot;, &quot;,&quot;)</code></p>\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">strArr <span class=\"token operator\">:=</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello,world,ok\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i<span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>strArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str[%v]=%v\\n\"</span><span class=\"token punctuation\">,</span> strArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"strArr=%v\\n\"</span><span class=\"token punctuation\">,</span>strArr<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"15\">\n<li>将字符串的字母进行大小写的转换：<code>strings.ToLower(&quot;Go&quot;) // go strings.ToUpper(&quot;Go&quot;) // GO</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">str <span class=\"token operator\">:=</span> <span class=\"token string\">\"golang Hello\"</span>\nstr <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\nstr <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str=%v\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> <span class=\"token comment\">// GOLANG HELLO</span></code></pre>\n\n<ol start=\"16\">\n<li>将字符串左右两边的空格去掉：<code> strings.TrimSpace(&quot;tn a lone gopher ntrn&quot;)</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">str <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">TrimSpace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tn a lone gopher ntrn\"</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str=%q\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> </code></pre>\n\n<ol start=\"17\">\n<li>将字符串左右两边指定的字符去掉 : <code>strings.Trim(&quot;! hello! &quot;, &quot; !&quot;)//// [&quot;hello&quot;] //将左右两边 !和 &quot;&quot;去掉</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">str <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"! hello! \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" !\"</span><span class=\"token punctuation\">)</span> \nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str=%q\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"18\">\n<li><p>将字符串左边指定的字符去掉：<code> strings.TrimLeft(&quot;!hello!&quot;,&quot;!&quot;) //[&quot;hello&quot;]将左边！和&quot;&quot;去掉</code></p>\n</li>\n<li><p>将字符串右边指定的字符去掉：<code> strings.TrimRight(&quot;!hello!&quot;,&quot;!&quot;) //[&quot;hello&quot;]将右边！和&quot;&quot;去掉</code></p>\n</li>\n<li><p>判断字符串是否以指定的字符串开头:<code> strings.HasPrefix(&quot;ftp://192.168.10.1&quot;, &quot;ftp&quot;) // true</code></p>\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">b <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasPrefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ftp://192.168.10.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hsp\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=%v\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"21\">\n<li>判断字符串是否以指定的字符串结束：<code>strings.HasSuffix(&quot;NLT_abc.jpg&quot;,&quot;abc&quot;) //false</code></li>\n</ol>\n<h2 id=\"时间和日期相关函数\"><a href=\"#时间和日期相关函数\" class=\"headerlink\" title=\"时间和日期相关函数\"></a>时间和日期相关函数</h2><h3 id=\"基本的介绍\"><a href=\"#基本的介绍\" class=\"headerlink\" title=\"基本的介绍\"></a>基本的介绍</h3><p>​\t说明：在编程中，程序员会经常用到日期相关的函数，比如：统计某段代码执行花费的时间等等。</p>\n<ol>\n<li>时间和日期相关函数，需要导入time包</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520152211.png\" loading=\"lazy\"></p>\n<ol start=\"2\">\n<li>time.Time类型，用于表示时间</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n  <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//\t看看日期和时间相关函数和方法使用</span>\n  <span class=\"token comment\">// 1.获取当前时间</span>\n  now <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"now=%v now type=%T\\n\"</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 2.通过now可以获取到年月日，时分秒</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年=%v\\n\"</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Year</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"月=%v\\n\"</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Month</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"月=%v\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">Month</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"日=%v\\n\"</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Day</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"时=%v\\n\"</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Hour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"分=%v\\n\"</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Minute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秒=%v\\n\"</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"4\">\n<li><p>格式化日期时间</p>\n<ul>\n<li>方式1:就是使用Printf或者Sprintf</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//格式化日期时间</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前年月日 %d-%d-%d %d:%d:%d \\n\"</span><span class=\"token punctuation\">,</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">Year</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Month</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Day</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Hour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Minute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dateStr=%v\\n\"</span><span class=\"token punctuation\">,</span> dateStr<span class=\"token punctuation\">)</span></code></pre>\n\n<ul>\n<li>使用time.Format()方法完成：</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2006-01-02 15:04:05\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2006-01-02\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"15:04:05\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>对上面代码的说明：</p>\n<p>“2006&#x2F;01&#x2F;02 15:04:05”\t这个字符串的各个数字是固定的，必须是这样写。</p>\n<p>“2006&#x2F;01&#x2F;02 15:05:05”\t这个字符串各个数字可以自由的组合，这样可以按程序需求来返回时间和日期</p>\n<ol start=\"5\">\n<li>时间的常量</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">const</span><span class=\"token punctuation\">(</span>\n  Nanosecond Duration <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">//纳秒</span>\n  Microsecond\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> Nanosecond <span class=\"token comment\">//微秒</span>\n  Millisecond\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> Microsecond <span class=\"token comment\">//毫秒</span>\n  Second\t\t\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> Millisecond <span class=\"token comment\">//秒</span>\n  Minute\t\t\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> Second <span class=\"token comment\">//分钟</span>\n  Hour\t\t\t\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> Minute <span class=\"token comment\">//小时</span>\n<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​\t常量的作用：<strong>在程序中可用于获取指定时间单位的时间，比如想得到100毫秒</strong></p>\n<p>​\t100 * time.Millisecond</p>\n<ol start=\"6\">\n<li>结合Sleep来使用一下时间常量</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//需求，每隔1秒打印一个数字，打印到100时就退出</span>\n<span class=\"token comment\">//需求2:每隔0.1秒打印一个数字，打印到100时就退出</span>\ni <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n  i<span class=\"token operator\">++</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//休眠</span>\n  <span class=\"token comment\">//time.Sleep(time.Second)</span>\n  time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Millisecond <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">break</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"7\">\n<li>time的Unix和UnixNano的方法</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520152226.png\" loading=\"lazy\"></p>\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//Unix和UnixNano的使用</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unix时间戳=%v unixnano时间戳=%v\\n\"</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Unix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">UnixNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">2018</span>\nunix时间戳<span class=\"token operator\">=</span><span class=\"token number\">1527584269</span> unixnano时间戳<span class=\"token operator\">=</span><span class=\"token number\">1527584269975756200</span></code></pre>\n\n<h3 id=\"时间和日期的课堂练习\"><a href=\"#时间和日期的课堂练习\" class=\"headerlink\" title=\"时间和日期的课堂练习\"></a>时间和日期的课堂练习</h3><p>编写一段代码来统计 函数test03执行的时间</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n  <span class=\"token string\">\"time\"</span>\n  <span class=\"token string\">\"strconv\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  str <span class=\"token operator\">:=</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n    str <span class=\"token operator\">+=</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">+</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//在执行test03前，先获取到当前的unix时间戳</span>\n  start <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Unix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  end <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Unix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行test03()耗费时间为%v秒\\n\"</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"内置函数\"><a href=\"#内置函数\" class=\"headerlink\" title=\"内置函数\"></a>内置函数</h2><h3 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h3><p>​\tGolang设计者为了编程方便，提供了一些函数，这些函数可以直接使用，我们称为Go的内置函数。文档：<a href=\"https://studygolang.com/pkgdoc\">https://studygolang.com/pkgdoc</a> -&gt; builtin</p>\n<ol>\n<li>len:用来求长度，比如string、array、slice、map、channel</li>\n<li>new:用来分配内存，主要用来分配值类型，比如int、float32,struct…返回的是指针</li>\n</ol>\n<p>举例说明 <strong>new</strong> 的使用:</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  num1 <span class=\"token operator\">:=</span> <span class=\"token number\">100</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1的类型%T , num1的值=%v , num1的地址%v\\n\"</span><span class=\"token punctuation\">,</span> num1<span class=\"token punctuation\">,</span> num1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num1<span class=\"token punctuation\">)</span>\n  num2 <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// *int</span>\n  <span class=\"token comment\">//num2的类型%T => *int</span>\n  <span class=\"token comment\">//num2的值 = 地址 0xc0420404c098 （系统分配）</span>\n  <span class=\"token comment\">//num2的地址 %v = 地址 0xc04206a020 (系统分配)</span>\n  <span class=\"token comment\">//num2指向的值 = 100</span>\n  <span class=\"token operator\">*</span>num2 <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num2的类型%T , num2的值=%v , num2的地址%v\\n nu2这个指针， 指向的值=%v\"</span><span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num2<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>num2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\">num1的类型int , num1的值&#x3D;100 , num1的地址0xc00001e090\nnum2的类型*int , num2的值&#x3D;0xc00001e098 , num2的地址0xc00000e030 num2这个指针指向的值&#x3D;100 </code></pre>\n\n<p>上面代码对应的内存分析图：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520152245.png\" loading=\"lazy\"></p>\n<ol start=\"3\">\n<li>make: 用来<strong>分配内存</strong>，主要用来<strong>分配引用类型</strong>，比如channel 、 map 、slice。这个之后讲解。</li>\n</ol>\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  num1 <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n  num2 <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n  res <span class=\"token operator\">:=</span> num1 <span class=\"token operator\">/</span> num2\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//测试</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main()下面的代码...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\">panic: runtime error: integer divide by zero\n\ngoroutine 1 [running]:\nmain.test()\n        &#x2F;Users&#x2F;leafii&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo10&#x2F;main&#x2F;main.go:8 +0x11\nmain.main()\n        &#x2F;Users&#x2F;leafii&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo10&#x2F;main&#x2F;main.go:13 +0x25\nexit status 2</code></pre>\n\n\n\n<ul>\n<li>对上面代码的总结<ol>\n<li>在默认情况下，当发生错误后(panic) ,程序就会退出(崩溃.)</li>\n<li>如果我们希望:当发生错误后，可以捕获到错误，并进行处理，保证程序可以继续执行。还可 以在捕获到错误后，给管理员一个提示(邮件,短信。。。)</li>\n<li>这里引出我们要将的错误处理机制</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"基本说明\"><a href=\"#基本说明\" class=\"headerlink\" title=\"基本说明\"></a>基本说明</h3><ol>\n<li><p>Go语言追求简洁优雅，所以，Go 语言不支持传统的 try…catch…finally 这种处理。 </p>\n</li>\n<li><p>Go中引入的处理方式为:<strong>defer</strong>,<strong>panic</strong>,**recover<br>**</p>\n</li>\n<li><p>这几个异常的使用场景可以这么简单描述:Go 中可以抛出一个 panic 的异常，然后在 defer 中</p>\n<p>通过 recover 捕获这个异常，然后正常处理</p>\n</li>\n</ol>\n<h3 id=\"使用defer-recover来处理错误\"><a href=\"#使用defer-recover来处理错误\" class=\"headerlink\" title=\"使用defer+recover来处理错误\"></a>使用defer+recover来处理错误</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n  <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//使用defer + recover 来捕获和处理异常</span>\n  <span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    err <span class=\"token operator\">:=</span> <span class=\"token function\">recover</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//recover() 内置函数，可以捕获到异常</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> nul <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//说明捕获到错误</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"err=\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  num1 <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n  num2 <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n  res <span class=\"token operator\">:=</span> num1 <span class=\"token operator\">/</span> num2\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//测试</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main()下面的代码...\"</span><span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo10&#x2F;main  go run .&#x2F;main.go\nerr&#x3D; runtime error: integer divide by zero\nmain()下面的代码...\nmain()下面的代码...\nmain()下面的代码...\n^Csignal: interrupt</code></pre>\n\n<h3 id=\"错误处理的好处\"><a href=\"#错误处理的好处\" class=\"headerlink\" title=\"错误处理的好处\"></a>错误处理的好处</h3><p>进行错误处理后，程序不会轻易挂掉，如果加入预警代码，就可以让程序更加的健壮。【案例演示】</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"> ~<span class=\"token operator\">/</span><span class=\"token keyword\">go</span><span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>go_code<span class=\"token operator\">/</span>chapter06<span class=\"token operator\">/</span>demo11<span class=\"token operator\">/</span>main  <span class=\"token keyword\">go</span> run <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>main<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span>\nerr<span class=\"token operator\">=</span> runtime <span class=\"token builtin\">error</span><span class=\"token punctuation\">:</span> integer divide by zero\n发送邮件给admin@outlook<span class=\"token punctuation\">.</span>com~~~~~~~~~\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>下面的代码<span class=\"token operator\">...</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>下面的代码<span class=\"token operator\">...</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>下面的代码<span class=\"token operator\">...</span>\n<span class=\"token operator\">^</span>Csignal<span class=\"token punctuation\">:</span> interrupt</code></pre>\n\n<h2 id=\"自定义错误\"><a href=\"#自定义错误\" class=\"headerlink\" title=\"自定义错误\"></a>自定义错误</h2><h3 id=\"自定义错误的介绍\"><a href=\"#自定义错误的介绍\" class=\"headerlink\" title=\"自定义错误的介绍\"></a>自定义错误的介绍</h3><p>Go程序中，也支持自定义错误，使用error.New和panic内置函数</p>\n<ol>\n<li>errors.New(“错误说明”)，会返回一个error类型的值，表示一个错误</li>\n<li>panic内置函数，接收一个interface{}类型的值（也就是任何值了）作为参数。可以接收error类型的变量，<strong>输出错误信息，并退出程序。</strong></li>\n</ol>\n<h3 id=\"案例说明\"><a href=\"#案例说明\" class=\"headerlink\" title=\"案例说明\"></a>案例说明</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n  <span class=\"token string\">\"errors\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//函数去读取以配置文件init.conf的信息</span>\n<span class=\"token comment\">//如果文件名传入不正确，我们就返回一个自定义的错误</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">readConf</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> name <span class=\"token operator\">==</span> <span class=\"token string\">\"config.ini\"</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//读取</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//返回一个自定义错误</span>\n    <span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取文件错误..\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  err <span class=\"token operator\">:=</span> <span class=\"token function\">readConf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config2.ini\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//如果读取文件发送错误，就输出这个错误，并终止程序</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test02()继续执行...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//测试</span>\n  <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main()下面的代码...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\">panic: 读取文件错误..\n\ngoroutine 1 [running]:\nmain.test02()\n        &#x2F;Users&#x2F;leafii&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo12&#x2F;main&#x2F;main.go:21 +0x5a\nmain.main()\n        &#x2F;Users&#x2F;leafii&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo12&#x2F;main&#x2F;main.go:27 +0x25\nexit status 2</code></pre>\n\n","more":"<h2 id=\"为什么需要函数\"><a href=\"#为什么需要函数\" class=\"headerlink\" title=\"为什么需要函数\"></a>为什么需要函数</h2><h3 id=\"完成需求\"><a href=\"#完成需求\" class=\"headerlink\" title=\"完成需求\"></a>完成需求</h3><p>输入两个数，再输入一个运算符（+-*&#x2F;），得到结果。</p>\n<h3 id=\"使用传统的方法解决\"><a href=\"#使用传统的方法解决\" class=\"headerlink\" title=\"使用传统的方法解决\"></a>使用传统的方法解决</h3><ul>\n<li>代码</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span>\n\t<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.3</span>\n\t<span class=\"token keyword\">var</span> operator <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token char\">'-'</span>\n\t<span class=\"token keyword\">switch</span> operator <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'+'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v + %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v - %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">-</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v * %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">*</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v / %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">/</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\">➜  main go run .&#x2F;main.go\n1.2 - 2.3 &#x3D; -1.0999999999999999</code></pre>\n\n<ul>\n<li>分析上面的代码问题<ol>\n<li>可以完成功能需求，但代码冗余</li>\n<li>与此同时不利于代码的维护</li>\n<li>函数可以解决这个问题奥</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"函数的基本概念\"><a href=\"#函数的基本概念\" class=\"headerlink\" title=\"函数的基本概念\"></a>函数的基本概念</h2><p>​\t为完成某一功能的程序指令（语句）的集合，称为函数。</p>\n<p>在Go中，函数分为：自定义函数、系统函数（查看Go编程手册）</p>\n<h2 id=\"函数的基本语法\"><a href=\"#函数的基本语法\" class=\"headerlink\" title=\"函数的基本语法\"></a>函数的基本语法</h2><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> 函数名 <span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>返回值列表<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  执行语句<span class=\"token operator\">...</span>\n  <span class=\"token keyword\">return</span> 返回值列表\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol>\n<li>形参列表：表示函数的输入</li>\n<li>函数的语句：表示为了实现某一功能代码块</li>\n<li>函数可以有返回值，也可以没有</li>\n</ol>\n<h2 id=\"快速入门案例\"><a href=\"#快速入门案例\" class=\"headerlink\" title=\"快速入门案例\"></a>快速入门案例</h2><p>使用函数解决前面的计算问题。</p>\n<p>走代码：</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span>n2 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> operator <span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> res <span class=\"token builtin\">float64</span>\n\t<span class=\"token keyword\">switch</span> operator <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'+'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">-</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">*</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">/</span> n2\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作符号错误哦！\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span>\n\t<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.3</span>\n\t<span class=\"token keyword\">var</span> operator <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token char\">'+'</span>\n\tresult <span class=\"token operator\">:=</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> operator<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"包的引出\"><a href=\"#包的引出\" class=\"headerlink\" title=\"包的引出\"></a>包的引出</h2><ol>\n<li>在实际的开发中，我们往往需要在不同的文件中，去调用其他文件的定义的函数，比如main.go中，去使用utils.go文件中的函数，如何实现？-&gt;包</li>\n<li>现在有两个程序员共同开发一个Go项目，程序员xiaoming希望定义函数Cal，程序员xiaoqiang也想定义函数也叫Cal。两个程序员为此还吵了起来，怎么办？-&gt;包</li>\n</ol>\n<h2 id=\"包的原理图\"><a href=\"#包的原理图\" class=\"headerlink\" title=\"包的原理图\"></a>包的原理图</h2><p>包的本质实际上就是创建不同的文件夹，来存放程序文件。</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520151521.png\"></p>\n<h2 id=\"包的基本概念\"><a href=\"#包的基本概念\" class=\"headerlink\" title=\"包的基本概念\"></a>包的基本概念</h2><p>​\t说明：go的每一个文件都是属于一个包的，也就是说go是以包的形式来管理文件和项目目录结构的</p>\n<h2 id=\"包的三大作用\"><a href=\"#包的三大作用\" class=\"headerlink\" title=\"包的三大作用\"></a>包的三大作用</h2><ul>\n<li><p>区分相同名字的函数、变量等标识符</p>\n</li>\n<li><p>当程序文件很多时，可以很好的管理项目</p>\n</li>\n<li><p>控制函数、变量等访问范围，即作用域</p>\n</li>\n</ul>\n<h2 id=\"包的相关说明\"><a href=\"#包的相关说明\" class=\"headerlink\" title=\"包的相关说明\"></a>包的相关说明</h2><ul>\n<li><p>打包基本语法</p>\n<p><code>package 包名</code></p>\n</li>\n<li><p>引入包的基本语法</p>\n<p><code>import &quot;包的路径&quot;</code></p>\n</li>\n</ul>\n<h2 id=\"包使用的快速入门\"><a href=\"#包使用的快速入门\" class=\"headerlink\" title=\"包使用的快速入门\"></a>包使用的快速入门</h2><p>包快速入门-Go相互调用函数，我们将func Cal定义到文件utils.go，将utils.go放到一个包中，当其它文件需要使用到utils.go的方法时，可以import该包，就可以使用了。【演示：新建项目的目录结构】</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520151536.png\"></p>\n<ul>\n<li>utils.go:</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> utils\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//将计算的功能，放到一个函数中，然后在需要使用，调用即可</span>\n<span class=\"token comment\">//为了让其它包的文件使用Cal函数，需要将C大写类似其它语言的public</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Cal</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span>n2 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> operator <span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> res <span class=\"token builtin\">float64</span>\n\t<span class=\"token keyword\">switch</span> operator <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'+'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">-</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">*</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">/</span> n2\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作符号错误哦！\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ul>\n<li>Main.go</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"go_code/chapter06/demo02/utils\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//请大家完成这样一个需求：</span>\n\t<span class=\"token comment\">//输入两个数，再输入一个运算符（+,-,*,/)，得到结果。。</span>\n\t<span class=\"token comment\">//分析思路...</span>\n\t<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span>\n\t<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.3</span>\n\t<span class=\"token keyword\">var</span> operator <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token char\">'+'</span>\n\tresult <span class=\"token operator\">:=</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">Cal</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span>n2<span class=\"token punctuation\">,</span>operator<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result=\"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"包使用的注意事项和细节讨论\"><a href=\"#包使用的注意事项和细节讨论\" class=\"headerlink\" title=\"包使用的注意事项和细节讨论\"></a>包使用的注意事项和细节讨论</h2><ol>\n<li>在给一个文件打包时，该包对应一个文件夹，比如这里的utils文件夹对应的包名就是utils，文件的包名通常和文件所在的文件夹名一致，一般为小写字母。</li>\n<li>当一个文件要使用其它包函数或变量时，需要先引入对应的包</li>\n</ol>\n<ul>\n<li>引入方式1:<code>import &quot;包名&quot;</code></li>\n<li>引入方式2:</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"包名\"</span>\n  <span class=\"token string\">\"包名\"</span>\n<span class=\"token punctuation\">)</span></code></pre>\n\n<ul>\n<li>package指令在文件第一行，然后是import指令。</li>\n<li>在import包时，路径从$GOPATH的src下开始，不用带src，编译器会自动从src开始引入。</li>\n</ul>\n<ol start=\"3\">\n<li>为了让其它包的文件可以访问到本包的函数，则该函数名的首字母需要大写，类似其他语言的public，这样才能跨包访问。比如utils.go的<em>Cal</em>函数</li>\n<li>在访问其它包函数，变量时，其语法是 包名.函数名,比如这个main.go文件中的<code>utils.Cal(90, 80, &quot;+&quot;)</code></li>\n<li>如果包名较长，Go支持给包取别名，注意细节；取别名后，原来的包名就不能使用了<ul>\n<li>说明：如果给包取了别名，则**需要使用别名来访问该包的函数和变量。</li>\n</ul>\n</li>\n<li>在同一包下，不能有相同的函数名（也不能有相同的全局变量名），否则报重复定义</li>\n<li>如果你要编译成一个可执行程序文件，就需要将这个包声明为main，即<code>package main</code>这个就是一个语法规范，如果你是写一个库，包名可以自定义</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520151554.png\"></p>\n<h2 id=\"函数的调用机制\"><a href=\"#函数的调用机制\" class=\"headerlink\" title=\"函数的调用机制\"></a>函数的调用机制</h2><h3 id=\"通俗易懂的方式的理解\"><a href=\"#通俗易懂的方式的理解\" class=\"headerlink\" title=\"通俗易懂的方式的理解\"></a>通俗易懂的方式的理解</h3><p><img src=\"http://cdn.leafii.top/img/20220520151621.png\"></p>\n<h3 id=\"函数-调用过程\"><a href=\"#函数-调用过程\" class=\"headerlink\" title=\"函数-调用过程\"></a>函数-调用过程</h3><p>介绍：为了让大家更好地理解函数调用过程，看两个案例，并画出示意图，这个很重要</p>\n<ol>\n<li>传入一个数+1</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520151636.png\"></p>\n<p>对上图说明</p>\n<ol>\n<li><p>在调用一个函数时，会给该函数分配一个新的空间，编译器会通过自身的处理让这个新的空间和其它的栈的空间去分开来</p>\n</li>\n<li><p>在每个函数对应的栈中，数据空间时独立的，不会混淆</p>\n</li>\n<li><p>当一个函数调用完毕（执行完毕）后，程序会销毁这个函数对应的栈空间。</p>\n</li>\n<li><p>计算两个数，并返回</p>\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//一个函数 test</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tn1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//输入结果=？</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\tsum <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">+</span> n2\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getSum sum = \"</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token comment\">// 30</span>\n\t<span class=\"token comment\">//当函数有return语句时，就是将结果返回给调用者</span>\n\t<span class=\"token comment\">//即谁调用我，就返回给谁</span>\n\t<span class=\"token keyword\">return</span> sum\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tn1 <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n\t<span class=\"token comment\">//调用test</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span><span class=\"token comment\">//输出结果=？</span>\n\n\tsum <span class=\"token operator\">:=</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main sum=\"</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token comment\">// 30</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo03&#x2F;main  go run main.go \ntest() n1&#x3D; 11\nmain() n1&#x3D; 10\ngetSum sum &#x3D;  30\nmain sum&#x3D; 30</code></pre>\n\n<h3 id=\"return语句\"><a href=\"#return语句\" class=\"headerlink\" title=\"return语句\"></a>return语句</h3><ul>\n<li>基本语法和说明</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">Go函数支持返回多个值，这一点是其它编程语言没有的。\n<span class=\"token keyword\">func</span> 函数名<span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">)</span> （返回值类型列表） <span class=\"token punctuation\">&#123;</span>\n  语句<span class=\"token operator\">...</span>\n  <span class=\"token keyword\">return</span> 返回值列表\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol>\n<li>如果返回多个值时，在接收时，希望忽略某个返回值，则使用<code>_</code>符号表示占位忽略</li>\n<li>如果返回值只有一个，（返回值类型列表）可以不写<code>()</code></li>\n</ol>\n<ul>\n<li><p>案例演示1</p>\n<p>请编写要给函数，可以计算两个数的和和差，并返回结果。</p>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  n1 <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n  <span class=\"token comment\">//调用test</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span><span class=\"token comment\">//输出结果？</span>\n  sum <span class=\"token operator\">:=</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main sum =\"</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token comment\">//30</span>\n  <span class=\"token comment\">//调用getSumAndSub</span>\n  res1<span class=\"token punctuation\">,</span>res2 <span class=\"token operator\">:=</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//res1 = 3 res2 = -1 </span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res1=%v res2=%v\\n\"</span><span class=\"token punctuation\">,</span>res1<span class=\"token punctuation\">,</span> res2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//编写函数，可以计算两个数的和和差，并返回结果</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  sum <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">+</span> n2\n  sub <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">-</span> n2\n  <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">,</span> sub\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ul>\n<li><p>案例演示2</p>\n<p>一个细节说明：希望忽略某个返回值，则使用<code>_</code>符号表示占位忽略</p>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//希望忽略某个返回值，则使用`_`符号表示占位忽略</span>\n<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> res3 <span class=\"token operator\">=</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res3=\"</span><span class=\"token punctuation\">,</span>res3<span class=\"token punctuation\">)</span></code></pre>\n\n<h2 id=\"函数的递归调用\"><a href=\"#函数的递归调用\" class=\"headerlink\" title=\"函数的递归调用\"></a>函数的递归调用</h2><h3 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>一个函数在<strong>函数体内</strong>又<strong>调用了本身</strong>，我们称为递归调用</p>\n<h3 id=\"递归调用快速入门\"><a href=\"#递归调用快速入门\" class=\"headerlink\" title=\"递归调用快速入门\"></a>递归调用快速入门</h3><ul>\n<li>代码1</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#123;</span>\n    n<span class=\"token operator\">--</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n=\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//通过分析来看递归调用的特点</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>上面代码的分析图：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520151656.png\"></p>\n<ul>\n<li>代码2</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#123;</span>\n    n<span class=\"token operator\">--</span>\n    <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n=\"</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//看一段代码</span>\n  <span class=\"token comment\">//test(4) //通过分析来看下递归调用的特点</span>\n  <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ？通过分析来看下递归调用的特点</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>对上面代码分析的示意图：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520151726.png\"></p>\n<h3 id=\"递归调用的总结\"><a href=\"#递归调用的总结\" class=\"headerlink\" title=\"递归调用的总结\"></a>递归调用的总结</h3><p><strong>函数递归需要遵守的重要原则：</strong></p>\n<ol>\n<li>执行一个函数时，就创建一个新的受保护的独立空间（新函数栈）</li>\n<li>函数的局部变量是独立的，不会相互影响</li>\n<li>递归必须向退出递归的条件逼近，否则就是无限递归，死循环了 :) </li>\n<li>当一个函数执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，同时当函数执行完毕或者返回时，该函数本身也会被系统销毁</li>\n</ol>\n<h3 id=\"递归课堂练习题\"><a href=\"#递归课堂练习题\" class=\"headerlink\" title=\"递归课堂练习题\"></a>递归课堂练习题</h3><ul>\n<li><p>题1:斐波那契数</p>\n<p>请使用递归的方式，求出斐波那契数1，1，2，3，5，8，13…</p>\n<p>给你一个整数n，求出它的斐波那切数是多少？</p>\n<ul>\n<li>思路</li>\n</ul>\n<ol>\n<li>当n&#x3D;&#x3D;1 || n&#x3D;&#x3D;2, 返回1</li>\n<li>当n&gt;2, 返回f(n-1) + f(n-2)</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> n<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  res <span class=\"token operator\">:=</span> <span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//测试</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ul>\n<li><p>题2:求函数值</p>\n<p>已知 <em><em>f(1)&#x3D;3;f(n)&#x3D;2</em>(n-1)+1</em>*;</p>\n<p>请使用递归的思想编程，求出f(n)的值？</p>\n<ul>\n<li><p>思路</p>\n<p>递归就完事了奥铁子</p>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*\n已知 f(1)=3;f(n)=2*(n-1)+1;\n请使用递归的思想编程，求出f(n)的值？\n*/</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> n<span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">3</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f(1)=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f(5)=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre></li>\n</ul>\n</li>\n<li><p>题3:猴子吃桃子问题</p>\n<p>有一堆桃子，猴子第一天吃了其中的一半，并再多吃了一个!以后每天猴子都吃其中的一半，然后再多吃一个。当到第十天时，想再吃时(还没吃)，发现只有 <strong>1</strong> 个桃子了。问题:最初共多少个桃子? </p>\n<ul>\n<li>思路分析:<ol>\n<li>第10天只有1个桃子</li>\n<li>第9天有（第十天桃子数量+1）*2个</li>\n<li>第n天有peach(n)&#x3D;(peach(n+1)+1)*2</li>\n</ol>\n</li>\n<li>代码</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">peach</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> n<span class=\"token operator\">==</span><span class=\"token number\">10</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">peach</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre></li>\n</ul>\n<h2 id=\"函数使用的注意事项和细节讨论\"><a href=\"#函数使用的注意事项和细节讨论\" class=\"headerlink\" title=\"函数使用的注意事项和细节讨论\"></a>函数使用的注意事项和细节讨论</h2><ol>\n<li>函数的形参列表可以是多个，返回值列表也可以是多个。</li>\n<li>形参列表和返回值列表的数据类型可以是值类型和引用类型。</li>\n<li>函数的命名遵循标识符命名规范，首字母不能是数字，首字母大写该函数可以被本包文件和其它包文件使用，类似 public , 首字母小写，只能被本包文件使用，其它包文件不能使用，类似 private</li>\n<li>函数中的变量是局部的，函数外不生效【案例说明】</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//n1 是 test函数的局部变量，只能在test函数中使用</span>\n  <span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//这里不能使用n1，因为n1是test函数的局部变量</span>\n  <span class=\"token comment\">//fmt.Println(\"n1=\",n1)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"5\">\n<li>基本数据类型和数组默认都是<strong>值传递</strong>，即进行值拷贝。在函数内修改，不会影响到原来的值。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  n1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test02() n1=\"</span><span class=\"token punctuation\">,</span> n1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  num <span class=\"token operator\">:=</span> <span class=\"token number\">20</span>\n  <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main() num=\"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"6\">\n<li>如果希望函数内的变量能修改函数外的变量（指的是默认以值传递的方式的数据类型），可以传入变量的地址&amp;，函数内以指针的方式操作变量。从效果上看类似引用。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token operator\">*</span>n1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>n1 <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test03() n1=\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>n1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//30</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  num <span class=\"token operator\">:=</span> <span class=\"token number\">20</span>\n  <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main() num=\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 30</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><img src=\"http://cdn.leafii.top/img/20220520151742.png\"></p>\n<ol start=\"7\">\n<li>Golang的函数不支持函数重载</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  n1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test02() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//这是错误的奥！！！！！</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"8\">\n<li>在Golang中，<strong>函数也是一种数据类型</strong>，可以赋值给一个变量，则该变量就是一个函数类型的变量了。<strong>通过该变量可以对函数调用</strong></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  a <span class=\"token operator\">:=</span> getSum\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a的类型%T， getSum类型是%T \\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> getSum<span class=\"token punctuation\">)</span>\n  \n  res <span class=\"token operator\">:=</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//等价 res := getSum(10, 40)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"9\">\n<li>函数既然是一种数据类型，因此在Golang中，函数可以作为形参，并且调用哦</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">res2 <span class=\"token operator\">:=</span> <span class=\"token function\">myFun</span><span class=\"token punctuation\">(</span>getSum<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res2=\"</span><span class=\"token punctuation\">,</span> res2<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">myFun</span><span class=\"token punctuation\">(</span>funvar <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> num1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> num2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">funvar</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"10\">\n<li><p>为了简化数据类型定义，Golang支持自定义数据类型</p>\n<p>基本语法：<code>type 自定义数据类型名 数据类型 //理解：相当于一个别名</code></p>\n<p>案例：<code>type myInt int  //这时myInt就等价int来使用了哦！ </code></p>\n<p>案例：<code>type mySum func(int, int) int //这时mySum就等价一个 函数类型fu nc(int, int) int</code></p>\n</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520151809.png\"></p>\n<ol start=\"11\">\n<li>支持对函数返回值命名</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>sum <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> sub <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tsub <span class=\"token operator\">=</span> n1 <span class=\"token operator\">-</span> n2\n\tsum <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\ta1<span class=\"token punctuation\">,</span> b1 <span class=\"token operator\">:=</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a1=%v,b1=%v \\n\"</span><span class=\"token punctuation\">,</span>a1<span class=\"token punctuation\">,</span> b1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"12\">\n<li>使用<code>_</code>标示符，忽略返回值</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>sum <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> sub <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  sum <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2\n  sub <span class=\"token operator\">=</span> n1 <span class=\"token operator\">-</span> n2\n  <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  res1<span class=\"token punctuation\">,</span><span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  fml<span class=\"token punctuation\">.</span><span class=\"token function\">Ptintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res1=%d\"</span><span class=\"token punctuation\">,</span>res1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"13\">\n<li>Go支持可变参数</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//支持0到多个参数</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">...</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> sum <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//支持1到多个参数</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">...</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> sum <span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ul>\n<li>说明：<ol>\n<li>args是slice切片，通过args[index]可以访问到各个值。</li>\n<li>案例演示：编写一个函数sum，可以求出1到多个int的和</li>\n<li>如果一个函数的形参列表中有可变参数，则可变参数需要放在形参列表最后。</li>\n</ol>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//案例演示:编写一个函数sum，可以求出 1到多个int的和</span>\n<span class=\"token comment\">//参数的使用</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">...</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span>\n  sum <span class=\"token operator\">:=</span> n1\n  <span class=\"token comment\">//遍历args</span>\n  <span class=\"token keyword\">for</span> i<span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n    sum <span class=\"token operator\">+=</span> args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token comment\">//args[0] 表示取出args切片的第一个元素值，其它以此类推</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> sum\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  res4 <span class=\"token operator\">:=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res4=\"</span><span class=\"token punctuation\">,</span>res4<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"函数的课堂练习\"><a href=\"#函数的课堂练习\" class=\"headerlink\" title=\"函数的课堂练习\"></a>函数的课堂练习</h2><ul>\n<li>题1</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">float32</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float32</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n1 type=%T \\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//n1 type = float32</span>\n  <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// sum = 3</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//代码有误错误？输出什么？</span></code></pre>\n\n<p>没有错误。</p>\n<pre class=\"language-none\"><code class=\"language-none\">n1 type&#x3D;float32 \nsum&#x3D; 3</code></pre>\n\n<ul>\n<li>题2</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> mySum <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum2</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span>n2<span class=\"token punctuation\">,</span>n3 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//使用自定义数据类型（type）来简化定义 </span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span>funcVar mySum<span class=\"token punctuation\">,</span> num1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> num2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">funcVar</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  a <span class=\"token operator\">:=</span> sum\n  b <span class=\"token operator\">:=</span> sum2\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//ok</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//error</span>\n  \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*\n\t错误：\n\tfmt.Println(myFunc(b,1,2))错误，原因是类型不匹配。\n\t因为不能把func sum2(n1,n2,n3 int) int 赋给func(int,int) int\n*/</span></code></pre>\n\n<ul>\n<li>题3：请编写一个函数swap(n1 *int,n2 *int)可以交换n1和n2的值</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//定义一个临时变量</span>\n  t <span class=\"token operator\">:=</span> <span class=\"token operator\">*</span>n1\n  <span class=\"token operator\">*</span>n1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>n2\n  <span class=\"token operator\">*</span>n2 <span class=\"token operator\">=</span> t\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  a <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n  b <span class=\"token operator\">:=</span> <span class=\"token number\">20</span>\n  <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=%v,b=%v \\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\">a&#x3D;20,b&#x3D;10 </code></pre>\n\n<h2 id=\"init函数\"><a href=\"#init函数\" class=\"headerlink\" title=\"init函数\"></a>init函数</h2><h3 id=\"基本介绍-1\"><a href=\"#基本介绍-1\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>​\t每一个源文件都可以包含一个init函数，该函数会在main函数执行前，被Go运行框架调用，也就是说init会在main函数前被调用。</p>\n<h3 id=\"案例说明：\"><a href=\"#案例说明：\" class=\"headerlink\" title=\"案例说明：\"></a>案例说明：</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//init函数，通常可以在init函数中完成初始化工作 </span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init()...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main()...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>输出结果是：</p>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo04&#x2F;main  go run .&#x2F;main.go\ninit()...\nmain()...</code></pre>\n\n<h3 id=\"init函数的注意事项和细节\"><a href=\"#init函数的注意事项和细节\" class=\"headerlink\" title=\"init函数的注意事项和细节\"></a>init函数的注意事项和细节</h3><ol>\n<li>如果一个文件同时包含<strong>全局变量定义，init函数和main函数</strong>，则执行的流程全局变量定义-&gt;init函数-&gt;main函数</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520151852.png\"></p>\n<ol start=\"2\">\n<li>init函数最主要的作用，就是完成一些初始化的工作，比如下面的案例</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520151828.png\"></p>\n<p><img src=\"http://cdn.leafii.top/img/20220520151920.png\"></p>\n<ol start=\"3\">\n<li>细节说明：面试题：案例如果main.go和utils.go都含有变量定义，init函数时，执行的流程又是什么样呢？</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520152039.png\"></p>\n<h2 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>​\tGo支持匿名函数，匿名函数就是没有名字的函数，如果我们某个函数只是希望使用一次，可以考虑使用匿名函数，匿名函数也可以实现多次调用。</p>\n<h3 id=\"匿名函数使用方式1\"><a href=\"#匿名函数使用方式1\" class=\"headerlink\" title=\"匿名函数使用方式1\"></a>匿名函数使用方式1</h3><p>​\t在定义匿名函数时就直接调用，这种方式匿名函数只能调用一次。【案例演示】</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//在定义匿名函数时就直接调用，这种方式匿名函数只能调用一次</span>\n  \n  <span class=\"token comment\">//案例演示，求两个数的和，使用匿名函数的方式完成</span>\n  res1 <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res1=\"</span><span class=\"token punctuation\">,</span> res1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"匿名函数使用方式2\"><a href=\"#匿名函数使用方式2\" class=\"headerlink\" title=\"匿名函数使用方式2\"></a>匿名函数使用方式2</h3><p>​\t将<strong>匿名函数赋给一个变量</strong>（函数变量），再通过该<strong>变量来调用匿名函数</strong>【案例演示】</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//将匿名函数func (n1 int, n2 int) int 赋给a变量</span>\n<span class=\"token comment\">//则a的数据类型就是函数类型，此时，我们可以通过a完成调用</span>\na <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">-</span> n2\n<span class=\"token punctuation\">&#125;</span>\nres2 <span class=\"token operator\">:=</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res2=\"</span><span class=\"token punctuation\">,</span> res2<span class=\"token punctuation\">)</span>\nres3 <span class=\"token operator\">:=</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res3=\"</span><span class=\"token punctuation\">,</span> res3<span class=\"token punctuation\">)</span></code></pre>\n\n<h3 id=\"全局匿名函数\"><a href=\"#全局匿名函数\" class=\"headerlink\" title=\"全局匿名函数\"></a>全局匿名函数</h3><p>​\t如果将匿名函数赋给一个全局变量，那么这个匿名函数，就成为一个全局匿名函数，可以在程序有效。</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">//func1就是一个全局匿名函数</span>\n  Fun1 <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">*</span> n2\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//全局匿名函数的使用</span>\nres4 <span class=\"token operator\">:=</span> <span class=\"token function\">Fun1</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res4=\"</span><span class=\"token punctuation\">,</span> res4<span class=\"token punctuation\">)</span></code></pre>\n\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><h3 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>​\t基本介绍：闭包就是<strong>一个函数</strong>和<strong>其相关的引用环境</strong>组合的一个整体（实体）</p>\n<h3 id=\"案例演示\"><a href=\"#案例演示\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//累加器</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">AddUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> n <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>x <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n    n <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> x\n    <span class=\"token keyword\">return</span> n\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//使用前面的代码</span>\n  f <span class=\"token operator\">:=</span> <span class=\"token function\">AddUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//11</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//13</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//16</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ul>\n<li><p>对上面代码的说明和总结</p>\n<ol>\n<li><p>AddUpper是一个函数，返回的数据类型是<code>fun (int) int</code></p>\n</li>\n<li><p>闭包的说明</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> n <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>x <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  n <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> x\n  <span class=\"token keyword\">return</span> n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>返回的是一个匿名函数，但是这个匿名函数引用到函数外的n，因此这个匿名函数就和n形成一个整体，构成闭包。</p>\n</li>\n<li><p>可以这么理解：闭包是类，函数是操作，n是字段。函数和它使用到n构成闭包。</p>\n</li>\n<li><p>当我们反复的调用f函数时，n初始化一次，所以每调用一次就进行累计。</p>\n</li>\n<li><p>我们要搞清楚闭包的关键，就是要分析出返回的函数它使用（引用）到那些变量，因为函数和它引用到的变量共同构成闭包。</p>\n</li>\n<li><p>对上面代码的一个修改，加深对闭包的理解</p>\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//累加器</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">AddUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> n <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n  <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>x <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n    n <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> x\n    str <span class=\"token operator\">+=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// => 36 = '$'</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str=\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> <span class=\"token comment\">//1. str = \"hello$\" 2. str = \"hello$$\" 3. str = \"hello$$$\"</span>\n    <span class=\"token keyword\">return</span> n\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//使用前面的代码</span>\n  f <span class=\"token operator\">:=</span> <span class=\"token function\">AddUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//11</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//13</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//16</span>\n<span class=\"token punctuation\">&#125;</span></code></pre></li>\n</ul>\n<h3 id=\"闭包的最佳实践\"><a href=\"#闭包的最佳实践\" class=\"headerlink\" title=\"闭包的最佳实践\"></a>闭包的最佳实践</h3><ul>\n<li>请编写一个程序，具体要求如下：</li>\n</ul>\n<ol>\n<li>编写一个函数 makeSuffix (suffix string) 可以接收一个文件后缀名(比如.jpg)，并返回一个闭包</li>\n<li>调用闭包，可以传入一个文件名，如果该文件名没有指定的后缀(比如.jpg)，则返回 文件名.jpg，如果已经有.jpg后缀，则返回原文件名。</li>\n<li>要求使用闭包的方式完成</li>\n<li>Strings.HasSuffix， 该函数可以判断某个字符串是否有指定的后缀 。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n  <span class=\"token string\">\"strings\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">makeSuffix</span><span class=\"token punctuation\">(</span>suffix <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasSuffix</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>suffix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> name <span class=\"token operator\">+</span> suffix\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> name\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//返回一个闭包</span>\n  f <span class=\"token operator\">:=</span> <span class=\"token function\">makeSuffix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".jpg\"</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件名处理后=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"winter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件名处理后=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"winter.jpg.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>上面代码的总结和说明：</p>\n<ol>\n<li>返回的匿名函数和 makeSuffix (suffix string) 的 suffix 变量 组合成一个闭包,因为 返回的函数引用 到 suffix 这个变量</li>\n<li>我们体会一下闭包的好处，如果使用传统的方法，也可以轻松实现这个功能，但是传统方法需要每 次都传入 后缀名，比如 .jpg ,而闭包因为可以保留上次引用的某个值，所以我们传入一次就可以反复 使用。可以仔细的体会一把!</li>\n</ol>\n<h2 id=\"函数的defer\"><a href=\"#函数的defer\" class=\"headerlink\" title=\"函数的defer\"></a>函数的defer</h2><h3 id=\"为什么需要defer\"><a href=\"#为什么需要defer\" class=\"headerlink\" title=\"为什么需要defer\"></a>为什么需要defer</h3><p>​\t在函数中，程序员经常需要创建资源（比如：数据库连接、文件句柄、锁等），为了在<strong>函数执行完毕后，及时的释放资源</strong>，Go的设计者提供defer（延时机制）。</p>\n<h3 id=\"快速入门案例-1\"><a href=\"#快速入门案例-1\" class=\"headerlink\" title=\"快速入门案例\"></a>快速入门案例</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//当执行到defer时，暂时不执行，会将defer后面的语句压入到独立的栈（defer栈）</span>\n  <span class=\"token comment\">//当函数执行完毕后，再从defer栈，按照先入后出的方式出栈，执行</span>\n  <span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok1 n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span><span class=\"token comment\">//defer 3. ok1 n1 = 10</span>\n  <span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok2 n2=\"</span><span class=\"token punctuation\">,</span>n2<span class=\"token punctuation\">)</span><span class=\"token comment\">//defer 2. ok2 n2 = 20</span>\n  \n  res <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">+</span> n2 <span class=\"token comment\">// res = 30</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok3 res=\"</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  res <span class=\"token operator\">:=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span><span class=\"token comment\">// 4. res = 30</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo06&#x2F;main  go run .&#x2F;main.go\nok3 res&#x3D; 30\nok2 n2&#x3D; 20\nok1 n1&#x3D; 10\nres&#x3D; 30</code></pre>\n\n<h3 id=\"defer的注意事项和细节\"><a href=\"#defer的注意事项和细节\" class=\"headerlink\" title=\"defer的注意事项和细节\"></a>defer的注意事项和细节</h3><ol>\n<li>当go执行到一个defer时，不会立即执行defer后的语句，而是将defer后的语句压入到一个栈中【暂时称此栈为defer栈】，然后继续执行函数下一个语句</li>\n<li>当函数执行完毕后，再从defer栈中，依次从栈顶取出语句执行（注：遵守栈 先入后出的机制），所以可以看到前面案例输出的顺序。</li>\n<li>在defer将语句放入到栈时，也会将相关的值拷贝同时入栈。<strong>请看一段代码：</strong></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//当执行到defer时，暂时不执行，会讲defer后面的语句压入到独立的栈(defer栈)</span>\n  <span class=\"token comment\">//当函数执行完毕后，再从defer栈，按照先入后出的方式出栈，执行</span>\n  <span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok1 n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//defer 3. ok1 n1=10</span>\n  <span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok2 n2=\"</span><span class=\"token punctuation\">,</span>n2<span class=\"token punctuation\">)</span> <span class=\"token comment\">//defer 2. ok2 n2=20</span>\n  <span class=\"token comment\">//增加一句话</span>\n  n1<span class=\"token operator\">++</span> <span class=\"token comment\">//n1 = 11</span>\n  n2<span class=\"token operator\">++</span> <span class=\"token comment\">//n2 = 21</span>\n  res <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">+</span> n2 <span class=\"token comment\">// res = 32</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok3 res=\"</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span> <span class=\"token comment\">//1. ok3 res= 32</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  res <span class=\"token operator\">:=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token comment\">//4. res = 32</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><img src=\"http://cdn.leafii.top/img/20220520152102.png\"></p>\n<h3 id=\"defer的最佳实践\"><a href=\"#defer的最佳实践\" class=\"headerlink\" title=\"defer的最佳实践\"></a>defer的最佳实践</h3><p>defer最主要的价值是在，当函数执行完毕后可以及时的释放函数创建的资源。看看模拟代码： </p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//关闭文件资源</span>\n  file <span class=\"token operator\">=</span> <span class=\"token function\">openfile</span><span class=\"token punctuation\">(</span>文件名<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">defer</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//\t其他代码</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//释放数据库资源</span>\n  connect <span class=\"token operator\">=</span> <span class=\"token function\">openDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">defer</span> cinnect<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//其他代码</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>说明</p>\n<ol>\n<li>在Golang编程中的通常做法是，创建资源后，比如（打开了文件，获取了数据库的链接，或者是锁资源），可以执行defer file.Close() defer connect.Close()</li>\n<li>在defer后，可以继续使用创建资源。</li>\n<li>当函数完毕后，系统会依次从defer栈中，取出语句，关闭资源</li>\n<li>这种机制，非常简洁，程序员不用再为什么时候关闭资源而烦心。</li>\n</ol>\n<h2 id=\"函数参数传递方式\"><a href=\"#函数参数传递方式\" class=\"headerlink\" title=\"函数参数传递方式\"></a>函数参数传递方式</h2><h3 id=\"基本介绍-2\"><a href=\"#基本介绍-2\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>​\t我们在讲解函数注意事项和使用细节时，已经讲过值类型和引用类型了，这里我们再系统总结一 下，因为这是重难点，值类型参数默认就是值传递，而引用类型参数默认就是引用传递。</p>\n<h3 id=\"两种传递方式\"><a href=\"#两种传递方式\" class=\"headerlink\" title=\"两种传递方式\"></a>两种传递方式</h3><ol>\n<li>值传递</li>\n<li>引用传递</li>\n</ol>\n<p>  其实，不管是值传递还是引用传递，传递给函数的都是变量的副本，不同的是，值传递的是值的拷贝，引用传递的是地址的拷贝，一般来说，地址拷贝效率高，因为数据量小，而值拷贝决定拷贝的 数据大小，数据越大，效率越低。</p>\n<h3 id=\"值类型和引用类型\"><a href=\"#值类型和引用类型\" class=\"headerlink\" title=\"值类型和引用类型\"></a>值类型和引用类型</h3><ol>\n<li>值类型：基本数据类型int系列，float系列，bool，string，数组和结构体struct</li>\n<li>引用类型：指针、slice切片、map、管道chan、interface等都是引用类型</li>\n</ol>\n<h3 id=\"值传递和引用传递使用特点\"><a href=\"#值传递和引用传递使用特点\" class=\"headerlink\" title=\"值传递和引用传递使用特点\"></a>值传递和引用传递使用特点</h3><ol>\n<li>值类型默认是值传递，变量直接存储值，内存通常在栈中分配【示意图】</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520152119.png\"></p>\n<ol start=\"2\">\n<li>引用类型默认是引用传递：变量存储的是一个地址，这个地址对应的空间才真正存储数据（值），内存通常在堆上分配，当没有任何变量引出这个地址时，该地址对应的数据空间就成为一个垃圾，由GC来回收。【示意图】</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520152137.png\"></p>\n<ol start=\"3\">\n<li>如果希望函数内的变量能修改函数外的变量，可以传入变量的地址&amp;，函数内以指针的方式操作变量。从效果上看类似引用。这个案例在前面详解函数使用注意事项中有。</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520152150.png\"></p>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><ol>\n<li>函数内部声明&#x2F;定义的变量叫局部变量，作用域仅限于<strong>函数内部</strong></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//age 和 Name 的作用域就只在test函数内部</span>\n  age <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n  Name <span class=\"token operator\">:=</span> <span class=\"token string\">\"tom~\"</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  \n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"2\">\n<li>函数外部声明&#x2F;定义的变量叫全局变量，作用域在整个包都有效，如果其首字母为大写，则作用 域在整个程序有效</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//函数外部声明/定义的变量叫全局变量</span>\n<span class=\"token comment\">//作用域在整个包都有效，如果其首字母为大写，则作用域在整个程序有效</span>\n<span class=\"token keyword\">var</span> age <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">50</span>\n<span class=\"token keyword\">var</span> Name <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"jack~\"</span>\n<span class=\"token comment\">//函数</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//age和Name的作用域就只在test函数内部</span>\n  age <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n  Name <span class=\"token operator\">:=</span> <span class=\"token string\">\"tom~\"</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age=\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span> <span class=\"token comment\">//10</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name=\"</span><span class=\"token punctuation\">,</span> Name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// tom~</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age=\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 50</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name=\"</span><span class=\"token punctuation\">,</span> Name<span class=\"token punctuation\">)</span> <span class=\"token comment\">//jack~</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"3\">\n<li>如果变量是在一个代码块，比如for&#x2F;if中，那么这个变量的作用域就在该代码块</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//如果变量是在一个代码块，比如for/if中，那么这个变量的作用域就在该代码块</span>\n<span class=\"token keyword\">for</span> i<span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> i <span class=\"token builtin\">int</span> <span class=\"token comment\">//局部变量</span>\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span></code></pre>\n\n<h3 id=\"变量作用域的课堂练习\"><a href=\"#变量作用域的课堂练习\" class=\"headerlink\" title=\"变量作用域的课堂练习\"></a>变量作用域的课堂练习</h3><ul>\n<li>题1</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"tom~\"</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// tom~</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  name <span class=\"token operator\">:=</span> <span class=\"token string\">\"jack~\"</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// jack</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// tom</span>\n  <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//tom</span>\n  <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// jack</span>\n  <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// tom</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ul>\n<li>题2</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> Age <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span> <span class=\"token comment\">// ok</span>\nName <span class=\"token operator\">:=</span> <span class=\"token string\">\"tom\"</span> <span class=\"token comment\">// var Name string\t\tName = \"tom\"</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span>Name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><strong>错误，因为赋值语句 不能在函数体外面</strong></p>\n<h2 id=\"函数课堂练习（综合）\"><a href=\"#函数课堂练习（综合）\" class=\"headerlink\" title=\"函数课堂练习（综合）\"></a>函数课堂练习（综合）</h2><ol>\n<li>函数可以没有返回值案例，编写一个函数，从终端输入一个整数打印出对应的金字塔</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//将打印金字塔的代码封装到函数中</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">printPyramid</span><span class=\"token punctuation\">(</span>totalLevel <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//i表示层数</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> totalLevel<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//在打印*前先打印空格</span>\n    <span class=\"token keyword\">for</span> k <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> totalLevel <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//j表示每层打印多少</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//调用printPyramid函数就可以打印金字塔</span>\n  <span class=\"token comment\">//从终端输入一个整数打印出对应的金字塔</span>\n  <span class=\"token keyword\">var</span> n <span class=\"token builtin\">int</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入打印金字塔的层数\"</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanln</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">printPyramid</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\">请输入打印金字塔的层数\n3\n  *\n ***\n*****</code></pre>\n\n<ol start=\"2\">\n<li>编写一个函数，从终端输入一个整数（1到9），打印出对应的乘法表</li>\n</ol>\n<ul>\n<li>思路：将九九乘法表以函数的方式封装，在需要打印时，直接调用即可</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">printMulti</span><span class=\"token punctuation\">(</span>num <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//打印出九九乘法表</span>\n  <span class=\"token comment\">//i表示层数</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> j<span class=\"token operator\">:=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v * %v = %v \\t\"</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//从终端输入一个整数表示要打印的乘法表对应的数</span>\n  <span class=\"token keyword\">var</span> num <span class=\"token builtin\">int</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入九九乘法表的对应数\"</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanln</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">printMulti</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\">请输入九九乘法表的对应数\n7\n1 * 1 &#x3D; 1 \n1 * 2 &#x3D; 2       2 * 2 &#x3D; 4 \n1 * 3 &#x3D; 3       2 * 3 &#x3D; 6       3 * 3 &#x3D; 9 \n1 * 4 &#x3D; 4       2 * 4 &#x3D; 8       3 * 4 &#x3D; 12      4 * 4 &#x3D; 16 \n1 * 5 &#x3D; 5       2 * 5 &#x3D; 10      3 * 5 &#x3D; 15      4 * 5 &#x3D; 20      5 * 5 &#x3D; 25 \n1 * 6 &#x3D; 6       2 * 6 &#x3D; 12      3 * 6 &#x3D; 18      4 * 6 &#x3D; 24      5 * 6 &#x3D; 30      6 * 6 &#x3D; 36 \n1 * 7 &#x3D; 7       2 * 7 &#x3D; 14      3 * 7 &#x3D; 21      4 * 7 &#x3D; 28      5 * 7 &#x3D; 35      6 * 7 &#x3D; 42       7 * 7 &#x3D; 49 </code></pre>\n\n<ol start=\"3\">\n<li>编写函数，对给定的一个二位数组（3 * 3）转置，这个题将数组的时候再完成8</li>\n</ol>\n<h2 id=\"字符串常用的系统函数\"><a href=\"#字符串常用的系统函数\" class=\"headerlink\" title=\"字符串常用的系统函数\"></a>字符串常用的系统函数</h2><p>​\t说明：字符串在我们程序开发中，使用的是非常多的，常用的函数需要同学们掌握[带看手册或者 官方编程指南]</p>\n<ol>\n<li>统计字符串的长度，按字节 len(str)</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  str <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello叶\"</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str len=\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 8</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"2\">\n<li>字符串遍历，同时处理有中文的问题 <code>r := []rune(str)</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">str2 <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello北京\"</span>\n<span class=\"token comment\">//字符串遍历，同时处理有中文的问题 r := []rune(str)</span>\nr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">rune</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字符=%c\\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"3\">\n<li>字符串转整数：<code>n,err := strong.Atoi(&quot;12&quot;)</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">n<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Atoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"转换错误\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"转成的结果是\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"4\">\n<li>整数转字符串 <code>str = strconv.Itoa(12345)</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">str <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span><span class=\"token number\">12345</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str=%v, str=%T\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"5\">\n<li>字符串 转 []byte: <code>var bytes = []byte(&quot;hello go&quot;)</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> bytes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello go\"</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bytes = %v \\n\"</span><span class=\"token punctuation\">,</span>bytes<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"6\">\n<li>[]byte 转 字符串：<code>str = string([]byte&#123;97,98,99&#125;)</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">str <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str=%v\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"7\">\n<li>10进制转2，8，16进制： <code>str = strconv.FormatInt(123,2) // 2-&gt;8, 16</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">str <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">FormatInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123对应的二进制是=%v\\n\"</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">)</span>\nstr <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">FormatInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123对应的16进制是%v\\n\"</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"8\">\n<li>查找子串是否在指定的字符串中： <code>strings.Contains(&quot;seafood&quot;, &quot;foo&quot;) //true</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">b <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Contaions</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"seafood\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mary\"</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=%v\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"9\">\n<li>统计一个字符串有几个指定的子串： <code>strings.Count(&quot;seheese&quot;, &quot;e&quot;) //4</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">num <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Count</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ceheese\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num=%v\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"10\">\n<li>不区分大小写的字符串比较(&#x3D;&#x3D;是区分字母大小写的): <code>fmt.Println(strings.EqualFold(&quot;abc&quot;, &quot;Abc&quot;)) // true</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">b <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">EqualFold</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Abc\"</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=%v\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"结果\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"abc\"</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//false 区分字母大小写</span></code></pre>\n\n<ol start=\"11\">\n<li>返回子串在字符串第一次出现的index值，如果没有返回-1:<code>strings.Index(&quot;NLT_abc&quot;, &quot;abc&quot;) //4</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">index <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NLT_abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index=%v\\n\"</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre>\n\n<ol start=\"12\">\n<li>返回子串在字符串最后一次出现的index，如没有返回-1:<code>strings.LastIndex(&quot;go golang&quot;,&quot;go&quot;)</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">index <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">LastIndex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"go golang\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"go\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//3</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index=%v\\n\"</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"13\">\n<li>将指定的子串替换成 另外一个子串:<code> strings.Replace(&quot;go go hello&quot;, &quot;go&quot;, &quot;go 语言&quot;, n)</code> n 可以指定你希望替换几个，如果 n&#x3D;-1 表示全部替换</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"go go hello\"</span>\nstr <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"go\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"北京\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str=%v str2=%v\\n\"</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"14\">\n<li><p>按照指定的某个字符，为分割标识，将一个字符串拆分成字符串数组:</p>\n<p><code>strings.Split(&quot;hello,wrold,ok&quot;, &quot;,&quot;)</code></p>\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">strArr <span class=\"token operator\">:=</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello,world,ok\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i<span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>strArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str[%v]=%v\\n\"</span><span class=\"token punctuation\">,</span> strArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"strArr=%v\\n\"</span><span class=\"token punctuation\">,</span>strArr<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"15\">\n<li>将字符串的字母进行大小写的转换：<code>strings.ToLower(&quot;Go&quot;) // go strings.ToUpper(&quot;Go&quot;) // GO</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">str <span class=\"token operator\">:=</span> <span class=\"token string\">\"golang Hello\"</span>\nstr <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\nstr <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str=%v\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> <span class=\"token comment\">// GOLANG HELLO</span></code></pre>\n\n<ol start=\"16\">\n<li>将字符串左右两边的空格去掉：<code> strings.TrimSpace(&quot;tn a lone gopher ntrn&quot;)</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">str <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">TrimSpace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tn a lone gopher ntrn\"</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str=%q\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> </code></pre>\n\n<ol start=\"17\">\n<li>将字符串左右两边指定的字符去掉 : <code>strings.Trim(&quot;! hello! &quot;, &quot; !&quot;)//// [&quot;hello&quot;] //将左右两边 !和 &quot;&quot;去掉</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">str <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"! hello! \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" !\"</span><span class=\"token punctuation\">)</span> \nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str=%q\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"18\">\n<li><p>将字符串左边指定的字符去掉：<code> strings.TrimLeft(&quot;!hello!&quot;,&quot;!&quot;) //[&quot;hello&quot;]将左边！和&quot;&quot;去掉</code></p>\n</li>\n<li><p>将字符串右边指定的字符去掉：<code> strings.TrimRight(&quot;!hello!&quot;,&quot;!&quot;) //[&quot;hello&quot;]将右边！和&quot;&quot;去掉</code></p>\n</li>\n<li><p>判断字符串是否以指定的字符串开头:<code> strings.HasPrefix(&quot;ftp://192.168.10.1&quot;, &quot;ftp&quot;) // true</code></p>\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">b <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasPrefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ftp://192.168.10.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hsp\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=%v\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"21\">\n<li>判断字符串是否以指定的字符串结束：<code>strings.HasSuffix(&quot;NLT_abc.jpg&quot;,&quot;abc&quot;) //false</code></li>\n</ol>\n<h2 id=\"时间和日期相关函数\"><a href=\"#时间和日期相关函数\" class=\"headerlink\" title=\"时间和日期相关函数\"></a>时间和日期相关函数</h2><h3 id=\"基本的介绍\"><a href=\"#基本的介绍\" class=\"headerlink\" title=\"基本的介绍\"></a>基本的介绍</h3><p>​\t说明：在编程中，程序员会经常用到日期相关的函数，比如：统计某段代码执行花费的时间等等。</p>\n<ol>\n<li>时间和日期相关函数，需要导入time包</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520152211.png\"></p>\n<ol start=\"2\">\n<li>time.Time类型，用于表示时间</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n  <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//\t看看日期和时间相关函数和方法使用</span>\n  <span class=\"token comment\">// 1.获取当前时间</span>\n  now <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"now=%v now type=%T\\n\"</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 2.通过now可以获取到年月日，时分秒</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年=%v\\n\"</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Year</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"月=%v\\n\"</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Month</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"月=%v\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">Month</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"日=%v\\n\"</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Day</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"时=%v\\n\"</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Hour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"分=%v\\n\"</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Minute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秒=%v\\n\"</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"4\">\n<li><p>格式化日期时间</p>\n<ul>\n<li>方式1:就是使用Printf或者Sprintf</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//格式化日期时间</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前年月日 %d-%d-%d %d:%d:%d \\n\"</span><span class=\"token punctuation\">,</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">Year</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Month</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Day</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Hour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Minute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dateStr=%v\\n\"</span><span class=\"token punctuation\">,</span> dateStr<span class=\"token punctuation\">)</span></code></pre>\n\n<ul>\n<li>使用time.Format()方法完成：</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2006-01-02 15:04:05\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2006-01-02\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"15:04:05\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>对上面代码的说明：</p>\n<p>“2006&#x2F;01&#x2F;02 15:04:05”\t这个字符串的各个数字是固定的，必须是这样写。</p>\n<p>“2006&#x2F;01&#x2F;02 15:05:05”\t这个字符串各个数字可以自由的组合，这样可以按程序需求来返回时间和日期</p>\n<ol start=\"5\">\n<li>时间的常量</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">const</span><span class=\"token punctuation\">(</span>\n  Nanosecond Duration <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">//纳秒</span>\n  Microsecond\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> Nanosecond <span class=\"token comment\">//微秒</span>\n  Millisecond\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> Microsecond <span class=\"token comment\">//毫秒</span>\n  Second\t\t\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> Millisecond <span class=\"token comment\">//秒</span>\n  Minute\t\t\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> Second <span class=\"token comment\">//分钟</span>\n  Hour\t\t\t\t\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> Minute <span class=\"token comment\">//小时</span>\n<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​\t常量的作用：<strong>在程序中可用于获取指定时间单位的时间，比如想得到100毫秒</strong></p>\n<p>​\t100 * time.Millisecond</p>\n<ol start=\"6\">\n<li>结合Sleep来使用一下时间常量</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//需求，每隔1秒打印一个数字，打印到100时就退出</span>\n<span class=\"token comment\">//需求2:每隔0.1秒打印一个数字，打印到100时就退出</span>\ni <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n  i<span class=\"token operator\">++</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//休眠</span>\n  <span class=\"token comment\">//time.Sleep(time.Second)</span>\n  time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Millisecond <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">break</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"7\">\n<li>time的Unix和UnixNano的方法</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520152226.png\"></p>\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//Unix和UnixNano的使用</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unix时间戳=%v unixnano时间戳=%v\\n\"</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Unix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">UnixNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">2018</span>\nunix时间戳<span class=\"token operator\">=</span><span class=\"token number\">1527584269</span> unixnano时间戳<span class=\"token operator\">=</span><span class=\"token number\">1527584269975756200</span></code></pre>\n\n<h3 id=\"时间和日期的课堂练习\"><a href=\"#时间和日期的课堂练习\" class=\"headerlink\" title=\"时间和日期的课堂练习\"></a>时间和日期的课堂练习</h3><p>编写一段代码来统计 函数test03执行的时间</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n  <span class=\"token string\">\"time\"</span>\n  <span class=\"token string\">\"strconv\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  str <span class=\"token operator\">:=</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n    str <span class=\"token operator\">+=</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">+</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//在执行test03前，先获取到当前的unix时间戳</span>\n  start <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Unix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  end <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Unix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行test03()耗费时间为%v秒\\n\"</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"内置函数\"><a href=\"#内置函数\" class=\"headerlink\" title=\"内置函数\"></a>内置函数</h2><h3 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h3><p>​\tGolang设计者为了编程方便，提供了一些函数，这些函数可以直接使用，我们称为Go的内置函数。文档：<a href=\"https://studygolang.com/pkgdoc\">https://studygolang.com/pkgdoc</a> -&gt; builtin</p>\n<ol>\n<li>len:用来求长度，比如string、array、slice、map、channel</li>\n<li>new:用来分配内存，主要用来分配值类型，比如int、float32,struct…返回的是指针</li>\n</ol>\n<p>举例说明 <strong>new</strong> 的使用:</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  num1 <span class=\"token operator\">:=</span> <span class=\"token number\">100</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num1的类型%T , num1的值=%v , num1的地址%v\\n\"</span><span class=\"token punctuation\">,</span> num1<span class=\"token punctuation\">,</span> num1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num1<span class=\"token punctuation\">)</span>\n  num2 <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// *int</span>\n  <span class=\"token comment\">//num2的类型%T => *int</span>\n  <span class=\"token comment\">//num2的值 = 地址 0xc0420404c098 （系统分配）</span>\n  <span class=\"token comment\">//num2的地址 %v = 地址 0xc04206a020 (系统分配)</span>\n  <span class=\"token comment\">//num2指向的值 = 100</span>\n  <span class=\"token operator\">*</span>num2 <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num2的类型%T , num2的值=%v , num2的地址%v\\n nu2这个指针， 指向的值=%v\"</span><span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num2<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>num2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\">num1的类型int , num1的值&#x3D;100 , num1的地址0xc00001e090\nnum2的类型*int , num2的值&#x3D;0xc00001e098 , num2的地址0xc00000e030 num2这个指针指向的值&#x3D;100 </code></pre>\n\n<p>上面代码对应的内存分析图：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520152245.png\"></p>\n<ol start=\"3\">\n<li>make: 用来<strong>分配内存</strong>，主要用来<strong>分配引用类型</strong>，比如channel 、 map 、slice。这个之后讲解。</li>\n</ol>\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  num1 <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n  num2 <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n  res <span class=\"token operator\">:=</span> num1 <span class=\"token operator\">/</span> num2\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//测试</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main()下面的代码...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\">panic: runtime error: integer divide by zero\n\ngoroutine 1 [running]:\nmain.test()\n        &#x2F;Users&#x2F;leafii&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo10&#x2F;main&#x2F;main.go:8 +0x11\nmain.main()\n        &#x2F;Users&#x2F;leafii&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo10&#x2F;main&#x2F;main.go:13 +0x25\nexit status 2</code></pre>\n\n\n\n<ul>\n<li>对上面代码的总结<ol>\n<li>在默认情况下，当发生错误后(panic) ,程序就会退出(崩溃.)</li>\n<li>如果我们希望:当发生错误后，可以捕获到错误，并进行处理，保证程序可以继续执行。还可 以在捕获到错误后，给管理员一个提示(邮件,短信。。。)</li>\n<li>这里引出我们要将的错误处理机制</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"基本说明\"><a href=\"#基本说明\" class=\"headerlink\" title=\"基本说明\"></a>基本说明</h3><ol>\n<li><p>Go语言追求简洁优雅，所以，Go 语言不支持传统的 try…catch…finally 这种处理。 </p>\n</li>\n<li><p>Go中引入的处理方式为:<strong>defer</strong>,<strong>panic</strong>,**recover<br>**</p>\n</li>\n<li><p>这几个异常的使用场景可以这么简单描述:Go 中可以抛出一个 panic 的异常，然后在 defer 中</p>\n<p>通过 recover 捕获这个异常，然后正常处理</p>\n</li>\n</ol>\n<h3 id=\"使用defer-recover来处理错误\"><a href=\"#使用defer-recover来处理错误\" class=\"headerlink\" title=\"使用defer+recover来处理错误\"></a>使用defer+recover来处理错误</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n  <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//使用defer + recover 来捕获和处理异常</span>\n  <span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    err <span class=\"token operator\">:=</span> <span class=\"token function\">recover</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//recover() 内置函数，可以捕获到异常</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> nul <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//说明捕获到错误</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"err=\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  num1 <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n  num2 <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n  res <span class=\"token operator\">:=</span> num1 <span class=\"token operator\">/</span> num2\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//测试</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main()下面的代码...\"</span><span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo10&#x2F;main  go run .&#x2F;main.go\nerr&#x3D; runtime error: integer divide by zero\nmain()下面的代码...\nmain()下面的代码...\nmain()下面的代码...\n^Csignal: interrupt</code></pre>\n\n<h3 id=\"错误处理的好处\"><a href=\"#错误处理的好处\" class=\"headerlink\" title=\"错误处理的好处\"></a>错误处理的好处</h3><p>进行错误处理后，程序不会轻易挂掉，如果加入预警代码，就可以让程序更加的健壮。【案例演示】</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"> ~<span class=\"token operator\">/</span><span class=\"token keyword\">go</span><span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>go_code<span class=\"token operator\">/</span>chapter06<span class=\"token operator\">/</span>demo11<span class=\"token operator\">/</span>main  <span class=\"token keyword\">go</span> run <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>main<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span>\nerr<span class=\"token operator\">=</span> runtime <span class=\"token builtin\">error</span><span class=\"token punctuation\">:</span> integer divide by zero\n发送邮件给admin@outlook<span class=\"token punctuation\">.</span>com~~~~~~~~~\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>下面的代码<span class=\"token operator\">...</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>下面的代码<span class=\"token operator\">...</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>下面的代码<span class=\"token operator\">...</span>\n<span class=\"token operator\">^</span>Csignal<span class=\"token punctuation\">:</span> interrupt</code></pre>\n\n<h2 id=\"自定义错误\"><a href=\"#自定义错误\" class=\"headerlink\" title=\"自定义错误\"></a>自定义错误</h2><h3 id=\"自定义错误的介绍\"><a href=\"#自定义错误的介绍\" class=\"headerlink\" title=\"自定义错误的介绍\"></a>自定义错误的介绍</h3><p>Go程序中，也支持自定义错误，使用error.New和panic内置函数</p>\n<ol>\n<li>errors.New(“错误说明”)，会返回一个error类型的值，表示一个错误</li>\n<li>panic内置函数，接收一个interface{}类型的值（也就是任何值了）作为参数。可以接收error类型的变量，<strong>输出错误信息，并退出程序。</strong></li>\n</ol>\n<h3 id=\"案例说明\"><a href=\"#案例说明\" class=\"headerlink\" title=\"案例说明\"></a>案例说明</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n  <span class=\"token string\">\"errors\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//函数去读取以配置文件init.conf的信息</span>\n<span class=\"token comment\">//如果文件名传入不正确，我们就返回一个自定义的错误</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">readConf</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> name <span class=\"token operator\">==</span> <span class=\"token string\">\"config.ini\"</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//读取</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//返回一个自定义错误</span>\n    <span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取文件错误..\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  err <span class=\"token operator\">:=</span> <span class=\"token function\">readConf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config2.ini\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//如果读取文件发送错误，就输出这个错误，并终止程序</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test02()继续执行...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//测试</span>\n  <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main()下面的代码...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\">panic: 读取文件错误..\n\ngoroutine 1 [running]:\nmain.test02()\n        &#x2F;Users&#x2F;leafii&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo12&#x2F;main&#x2F;main.go:21 +0x5a\nmain.main()\n        &#x2F;Users&#x2F;leafii&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo12&#x2F;main&#x2F;main.go:27 +0x25\nexit status 2</code></pre>","categories":[],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}