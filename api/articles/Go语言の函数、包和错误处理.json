{"title":"Go语言の函数、包和错误处理","slug":"Go语言の函数、包和错误处理","date":"2021-01-19T07:49:52.000Z","updated":"2021-01-20T10:17:19.270Z","comments":true,"path":"api/articles/Go语言の函数、包和错误处理.json","excerpt":"Go语言の函数、包和错误处理本文章主要讲解了Go语言的函数，包和错误处理等知识。","covers":["https://gitee.com/mikutown/pic/raw/master/img/image-20210119163512224.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210119182340923.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210119185147993.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210119185241781.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210119185640204.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210120145428637.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210120145923733.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210120164317464.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210120165212122.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210120181428443.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210120181522732.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210120181535751.png"],"content":"<h1 id=\"Go语言の函数、包和错误处理\"><a href=\"#Go语言の函数、包和错误处理\" class=\"headerlink\" title=\"Go语言の函数、包和错误处理\"></a>Go语言の函数、包和错误处理</h1><p>本文章主要讲解了Go语言的函数，包和错误处理等知识。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"为什么需要函数\"><a href=\"#为什么需要函数\" class=\"headerlink\" title=\"为什么需要函数\"></a>为什么需要函数</h2><h3 id=\"完成需求\"><a href=\"#完成需求\" class=\"headerlink\" title=\"完成需求\"></a>完成需求</h3><p>输入两个数，再输入一个运算符（+-*/），得到结果。</p>\n<h3 id=\"使用传统的方法解决\"><a href=\"#使用传统的方法解决\" class=\"headerlink\" title=\"使用传统的方法解决\"></a>使用传统的方法解决</h3><ul>\n<li>代码</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span>\n\t<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.3</span>\n\t<span class=\"token keyword\">var</span> operator <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token string\">'-'</span>\n\t<span class=\"token keyword\">switch</span> operator <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v + %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v - %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">-</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v * %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">*</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v / %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">/</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\">➜  main go run .&#x2F;main.go\n1.2 - 2.3 &#x3D; -1.0999999999999999</code></pre>\n<ul>\n<li>分析上面的代码问题<ol>\n<li>可以完成功能需求，但代码冗余</li>\n<li>与此同时不利于代码的维护</li>\n<li>函数可以解决这个问题奥</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"函数的基本概念\"><a href=\"#函数的基本概念\" class=\"headerlink\" title=\"函数的基本概念\"></a>函数的基本概念</h2><p>​    为完成某一功能的程序指令（语句）的集合，称为函数。</p>\n<p>在Go中，函数分为：自定义函数、系统函数（查看Go编程手册）</p>\n<h2 id=\"函数的基本语法\"><a href=\"#函数的基本语法\" class=\"headerlink\" title=\"函数的基本语法\"></a>函数的基本语法</h2><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> 函数名 <span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>返回值列表<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  执行语句<span class=\"token operator\">...</span>\n  <span class=\"token keyword\">return</span> 返回值列表\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol>\n<li>形参列表：表示函数的输入</li>\n<li>函数的语句：表示为了实现某一功能代码块</li>\n<li>函数可以有返回值，也可以没有</li>\n</ol>\n<h2 id=\"快速入门案例\"><a href=\"#快速入门案例\" class=\"headerlink\" title=\"快速入门案例\"></a>快速入门案例</h2><p>使用函数解决前面的计算问题。</p>\n<p>走代码：</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span>n2 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> operator <span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> res <span class=\"token builtin\">float64</span>\n\t<span class=\"token keyword\">switch</span> operator <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">-</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">*</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">/</span> n2\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作符号错误哦！\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span>\n\t<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.3</span>\n\t<span class=\"token keyword\">var</span> operator <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token string\">'+'</span>\n\tresult <span class=\"token operator\">:=</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> operator<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"包的引出\"><a href=\"#包的引出\" class=\"headerlink\" title=\"包的引出\"></a>包的引出</h2><ol>\n<li>在实际的开发中，我们往往需要在不同的文件中，去调用其他文件的定义的函数，比如main.go中，去使用utils.go文件中的函数，如何实现？-&gt;包</li>\n<li>现在有两个程序员共同开发一个Go项目，程序员xiaoming希望定义函数Cal，程序员xiaoqiang也想定义函数也叫Cal。两个程序员为此还吵了起来，怎么办？-&gt;包</li>\n</ol>\n<h2 id=\"包的原理图\"><a href=\"#包的原理图\" class=\"headerlink\" title=\"包的原理图\"></a>包的原理图</h2><p>包的本质实际上就是创建不同的文件夹，来存放程序文件。</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210119163512224.png\" alt=\"image-20210119163512224\" loading=\"lazy\"></p>\n<h2 id=\"包的基本概念\"><a href=\"#包的基本概念\" class=\"headerlink\" title=\"包的基本概念\"></a>包的基本概念</h2><p>​    说明：go的每一个文件都是属于一个包的，也就是说go是以包的形式来管理文件和项目目录结构的</p>\n<h2 id=\"包的三大作用\"><a href=\"#包的三大作用\" class=\"headerlink\" title=\"包的三大作用\"></a>包的三大作用</h2><ul>\n<li><p>区分相同名字的函数、变量等标识符</p>\n</li>\n<li><p>当程序文件很多时，可以很好的管理项目</p>\n</li>\n<li><p>控制函数、变量等访问范围，即作用域</p>\n</li>\n</ul>\n<h2 id=\"包的相关说明\"><a href=\"#包的相关说明\" class=\"headerlink\" title=\"包的相关说明\"></a>包的相关说明</h2><ul>\n<li><p>打包基本语法</p>\n<p><code>package 包名</code></p>\n</li>\n<li><p>引入包的基本语法</p>\n<p><code>import &quot;包的路径&quot;</code></p>\n</li>\n</ul>\n<h2 id=\"包使用的快速入门\"><a href=\"#包使用的快速入门\" class=\"headerlink\" title=\"包使用的快速入门\"></a>包使用的快速入门</h2><p>包快速入门-Go相互调用函数，我们将func Cal定义到文件utils.go，将utils.go放到一个包中，当其它文件需要使用到utils.go的方法时，可以import该包，就可以使用了。【演示：新建项目的目录结构】</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210119182340923.png\" alt=\"image-20210119182340923\" loading=\"lazy\"></p>\n<ul>\n<li>utils.go:</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> utils\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//将计算的功能，放到一个函数中，然后在需要使用，调用即可</span>\n<span class=\"token comment\">//为了让其它包的文件使用Cal函数，需要将C大写类似其它语言的public</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Cal</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span>n2 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> operator <span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> res <span class=\"token builtin\">float64</span>\n\t<span class=\"token keyword\">switch</span> operator <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">-</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">*</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">/</span> n2\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作符号错误哦！\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>Main.go</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"go_code/chapter06/demo02/utils\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//请大家完成这样一个需求：</span>\n\t<span class=\"token comment\">//输入两个数，再输入一个运算符（+,-,*,/)，得到结果。。</span>\n\t<span class=\"token comment\">//分析思路...</span>\n\t<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span>\n\t<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.3</span>\n\t<span class=\"token keyword\">var</span> operator <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token string\">'+'</span>\n\tresult <span class=\"token operator\">:=</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">Cal</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span>n2<span class=\"token punctuation\">,</span>operator<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result=\"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"包使用的注意事项和细节讨论\"><a href=\"#包使用的注意事项和细节讨论\" class=\"headerlink\" title=\"包使用的注意事项和细节讨论\"></a>包使用的注意事项和细节讨论</h2><ol>\n<li>在给一个文件打包时，该包对应一个文件夹，比如这里的utils文件夹对应的包名就是utils，文件的包名通常和文件所在的文件夹名一致，一般为小写字母。</li>\n<li>当一个文件要使用其它包函数或变量时，需要先引入对应的包</li>\n</ol>\n<ul>\n<li>引入方式1:<code>import &quot;包名&quot;</code></li>\n<li>引入方式2:</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"包名\"</span>\n  <span class=\"token string\">\"包名\"</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<ul>\n<li>package指令在文件第一行，然后是import指令。</li>\n<li>在import包时，路径从$GOPATH的src下开始，不用带src，编译器会自动从src开始引入。</li>\n</ul>\n<ol start=\"3\">\n<li>为了让其它包的文件可以访问到本包的函数，则该函数名的首字母需要大写，类似其他语言的public，这样才能跨包访问。比如utils.go的<em>Cal</em>函数</li>\n<li>在访问其它包函数，变量时，其语法是 包名.函数名,比如这个main.go文件中的<code>utils.Cal(90, 80, &quot;+&quot;)</code></li>\n<li>如果包名较长，Go支持给包取别名，注意细节；取别名后，原来的包名就不能使用了<ul>\n<li>说明：如果给包取了别名，则**需要使用别名来访问该包的函数和变量。</li>\n</ul>\n</li>\n<li>在同一包下，不能有相同的函数名（也不能有相同的全局变量名），否则报重复定义</li>\n<li>如果你要编译成一个可执行程序文件，就需要将这个包声明为main，即<code>package main</code>这个就是一个语法规范，如果你是写一个库，包名可以自定义</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210119185147993.png\" alt=\"image-20210119185147993\" loading=\"lazy\"></p>\n<h2 id=\"函数的调用机制\"><a href=\"#函数的调用机制\" class=\"headerlink\" title=\"函数的调用机制\"></a>函数的调用机制</h2><h3 id=\"通俗易懂的方式的理解\"><a href=\"#通俗易懂的方式的理解\" class=\"headerlink\" title=\"通俗易懂的方式的理解\"></a>通俗易懂的方式的理解</h3><p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210119185241781.png\" alt=\"image-20210119185241781\" loading=\"lazy\"></p>\n<h3 id=\"函数-调用过程\"><a href=\"#函数-调用过程\" class=\"headerlink\" title=\"函数-调用过程\"></a>函数-调用过程</h3><p>介绍：为了让大家更好地理解函数调用过程，看两个案例，并画出示意图，这个很重要</p>\n<ol>\n<li>传入一个数+1</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210119185640204.png\" alt=\"image-20210119185640204\" loading=\"lazy\"></p>\n<p>对上图说明</p>\n<ol>\n<li><p>在调用一个函数时，会给该函数分配一个新的空间，编译器会通过自身的处理让这个新的空间和其它的栈的空间去分开来</p>\n</li>\n<li><p>在每个函数对应的栈中，数据空间时独立的，不会混淆</p>\n</li>\n<li><p>当一个函数调用完毕（执行完毕）后，程序会销毁这个函数对应的栈空间。</p>\n</li>\n<li><p>计算两个数，并返回</p>\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//一个函数 test</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tn1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//输入结果=？</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\tsum <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">+</span> n2\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getSum sum = \"</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token comment\">// 30</span>\n\t<span class=\"token comment\">//当函数有return语句时，就是将结果返回给调用者</span>\n\t<span class=\"token comment\">//即谁调用我，就返回给谁</span>\n\t<span class=\"token keyword\">return</span> sum\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tn1 <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n\t<span class=\"token comment\">//调用test</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span><span class=\"token comment\">//输出结果=？</span>\n\n\tsum <span class=\"token operator\">:=</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main sum=\"</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token comment\">// 30</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo03&#x2F;main  go run main.go \ntest() n1&#x3D; 11\nmain() n1&#x3D; 10\ngetSum sum &#x3D;  30\nmain sum&#x3D; 30</code></pre>\n<h3 id=\"return语句\"><a href=\"#return语句\" class=\"headerlink\" title=\"return语句\"></a>return语句</h3><ul>\n<li>基本语法和说明</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">Go函数支持返回多个值，这一点是其它编程语言没有的。\n<span class=\"token keyword\">func</span> 函数名<span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">)</span> （返回值类型列表） <span class=\"token punctuation\">&#123;</span>\n  语句<span class=\"token operator\">...</span>\n  <span class=\"token keyword\">return</span> 返回值列表\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol>\n<li>如果返回多个值时，在接收时，希望忽略某个返回值，则使用<code>_</code>符号表示占位忽略</li>\n<li>如果返回值只有一个，（返回值类型列表）可以不写<code>()</code></li>\n</ol>\n<ul>\n<li><p>案例演示1</p>\n<p>请编写要给函数，可以计算两个数的和和差，并返回结果。</p>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  n1 <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n  <span class=\"token comment\">//调用test</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span><span class=\"token comment\">//输出结果？</span>\n  sum <span class=\"token operator\">:=</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main sum =\"</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token comment\">//30</span>\n  <span class=\"token comment\">//调用getSumAndSub</span>\n  res1<span class=\"token punctuation\">,</span>res2 <span class=\"token operator\">:=</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//res1 = 3 res2 = -1 </span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res1=%v res2=%v\\n\"</span><span class=\"token punctuation\">,</span>res1<span class=\"token punctuation\">,</span> res2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//编写函数，可以计算两个数的和和差，并返回结果</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  sum <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">+</span> n2\n  sub <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">-</span> n2\n  <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">,</span> sub\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li><p>案例演示2</p>\n<p>一个细节说明：希望忽略某个返回值，则使用<code>_</code>符号表示占位忽略</p>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//希望忽略某个返回值，则使用`_`符号表示占位忽略</span>\n<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> res3 <span class=\"token operator\">=</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res3=\"</span><span class=\"token punctuation\">,</span>res3<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"函数的递归调用\"><a href=\"#函数的递归调用\" class=\"headerlink\" title=\"函数的递归调用\"></a>函数的递归调用</h2><h3 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>一个函数在<strong>函数体内</strong>又<strong>调用了本身</strong>，我们称为递归调用</p>\n<h3 id=\"递归调用快速入门\"><a href=\"#递归调用快速入门\" class=\"headerlink\" title=\"递归调用快速入门\"></a>递归调用快速入门</h3><ul>\n<li>代码1</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#123;</span>\n    n<span class=\"token operator\">--</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n=\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//通过分析来看递归调用的特点</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>上面代码的分析图：</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210120145428637.png\" alt=\"image-20210120145428637\" loading=\"lazy\"></p>\n<ul>\n<li>代码2</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#123;</span>\n    n<span class=\"token operator\">--</span>\n    <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n=\"</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//看一段代码</span>\n  <span class=\"token comment\">//test(4) //通过分析来看下递归调用的特点</span>\n  <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ？通过分析来看下递归调用的特点</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>对上面代码分析的示意图：</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210120145923733.png\" alt=\"image-20210120145923733\" loading=\"lazy\"></p>\n<h3 id=\"递归调用的总结\"><a href=\"#递归调用的总结\" class=\"headerlink\" title=\"递归调用的总结\"></a>递归调用的总结</h3><p><strong>函数递归需要遵守的重要原则：</strong></p>\n<ol>\n<li>执行一个函数时，就创建一个新的受保护的独立空间（新函数栈）</li>\n<li>函数的局部变量是独立的，不会相互影响</li>\n<li>递归必须向退出递归的条件逼近，否则就是无限递归，死循环了 :) </li>\n<li>当一个函数执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，同时当函数执行完毕或者返回时，该函数本身也会被系统销毁</li>\n</ol>\n<h3 id=\"递归课堂练习题\"><a href=\"#递归课堂练习题\" class=\"headerlink\" title=\"递归课堂练习题\"></a>递归课堂练习题</h3><ul>\n<li><p>题1:斐波那契数</p>\n<p>请使用递归的方式，求出斐波那契数1，1，2，3，5，8，13…</p>\n<p>给你一个整数n，求出它的斐波那切数是多少？</p>\n<ul>\n<li>思路</li>\n</ul>\n<ol>\n<li>当n==1 || n==2, 返回1</li>\n<li>当n&gt;2, 返回f(n-1) + f(n-2)</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> n<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  res <span class=\"token operator\">:=</span> <span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//测试</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li><p>题2:求函数值</p>\n<p>已知 *<em>f(1)=3;f(n)=2</em>(n-1)+1**;</p>\n<p>请使用递归的思想编程，求出f(n)的值？</p>\n<ul>\n<li><p>思路</p>\n<p>递归就完事了奥铁子</p>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*\n已知 f(1)=3;f(n)=2*(n-1)+1;\n请使用递归的思想编程，求出f(n)的值？\n*/</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> n<span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">3</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f(1)=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f(5)=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre></li>\n</ul>\n</li>\n<li><p>题3:猴子吃桃子问题</p>\n<p>有一堆桃子，猴子第一天吃了其中的一半，并再多吃了一个!以后每天猴子都吃其中的一半，然后再多吃一个。当到第十天时，想再吃时(还没吃)，发现只有 <strong>1</strong> 个桃子了。问题:最初共多少个桃子? </p>\n<ul>\n<li>思路分析:<ol>\n<li>第10天只有1个桃子</li>\n<li>第9天有（第十天桃子数量+1）*2个</li>\n<li>第n天有peach(n)=(peach(n+1)+1)*2</li>\n</ol>\n</li>\n<li>代码</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">peach</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> n<span class=\"token operator\">==</span><span class=\"token number\">10</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">peach</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"函数使用的注意事项和细节讨论\"><a href=\"#函数使用的注意事项和细节讨论\" class=\"headerlink\" title=\"函数使用的注意事项和细节讨论\"></a>函数使用的注意事项和细节讨论</h2></li>\n</ul>\n<ol>\n<li>函数的形参列表可以是多个，返回值列表也可以是多个。</li>\n<li>形参列表和返回值列表的数据类型可以是值类型和引用类型。</li>\n<li>函数的命名遵循标识符命名规范，首字母不能是数字，首字母大写该函数可以被本包文件和其它包文件使用，类似 public , 首字母小写，只能被本包文件使用，其它包文件不能使用，类似 private</li>\n<li>函数中的变量是局部的，函数外不生效【案例说明】</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//n1 是 test函数的局部变量，只能在test函数中使用</span>\n  <span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//这里不能使用n1，因为n1是test函数的局部变量</span>\n  <span class=\"token comment\">//fmt.Println(\"n1=\",n1)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"5\">\n<li>基本数据类型和数组默认都是<strong>值传递</strong>，即进行值拷贝。在函数内修改，不会影响到原来的值。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  n1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test02() n1=\"</span><span class=\"token punctuation\">,</span> n1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  num <span class=\"token operator\">:=</span> <span class=\"token number\">20</span>\n  <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main() num=\"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"6\">\n<li>如果希望函数内的变量能修改函数外的变量（指的是默认以值传递的方式的数据类型），可以传入变量的地址&amp;，函数内以指针的方式操作变量。从效果上看类似引用。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token operator\">*</span>n1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>n1 <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test03() n1=\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>n1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//30</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  num <span class=\"token operator\">:=</span> <span class=\"token number\">20</span>\n  <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main() num=\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 30</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210120164317464.png\" alt=\"image-20210120164317464\" loading=\"lazy\"></p>\n<ol start=\"7\">\n<li>Golang的函数不支持函数重载</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  n1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test02() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//这是错误的奥！！！！！</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"8\">\n<li>在Golang中，<strong>函数也是一种数据类型</strong>，可以赋值给一个变量，则该变量就是一个函数类型的变量了。<strong>通过该变量可以对函数调用</strong></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  a <span class=\"token operator\">:=</span> getSum\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a的类型%T， getSum类型是%T \\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> getSum<span class=\"token punctuation\">)</span>\n  \n  res <span class=\"token operator\">:=</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//等价 res := getSum(10, 40)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"9\">\n<li>函数既然是一种数据类型，因此在Golang中，函数可以作为形参，并且调用哦</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">res2 <span class=\"token operator\">:=</span> <span class=\"token function\">myFun</span><span class=\"token punctuation\">(</span>getSum<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res2=\"</span><span class=\"token punctuation\">,</span> res2<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">myFun</span><span class=\"token punctuation\">(</span>funvar <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> num1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> num2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">funvar</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"10\">\n<li><p>为了简化数据类型定义，Golang支持自定义数据类型</p>\n<p>基本语法：<code>type 自定义数据类型名 数据类型 //理解：相当于一个别名</code></p>\n<p>案例：<code>type myInt int  //这时myInt就等价int来使用了哦！ </code></p>\n<p>案例：<code>type mySum func(int, int) int //这时mySum就等价一个 函数类型fu nc(int, int) int</code></p>\n</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210120165212122.png\" alt=\"image-20210120165212122\" loading=\"lazy\"></p>\n<ol start=\"11\">\n<li>支持对函数返回值命名</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>sum <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> sub <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tsub <span class=\"token operator\">=</span> n1 <span class=\"token operator\">-</span> n2\n\tsum <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\ta1<span class=\"token punctuation\">,</span> b1 <span class=\"token operator\">:=</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a1=%v,b1=%v \\n\"</span><span class=\"token punctuation\">,</span>a1<span class=\"token punctuation\">,</span> b1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"12\">\n<li>使用<code>_</code>标示符，忽略返回值</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>sum <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> sub <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  sum <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2\n  sub <span class=\"token operator\">=</span> n1 <span class=\"token operator\">-</span> n2\n  <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  res1<span class=\"token punctuation\">,</span><span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  fml<span class=\"token punctuation\">.</span><span class=\"token function\">Ptintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res1=%d\"</span><span class=\"token punctuation\">,</span>res1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"13\">\n<li>Go支持可变参数</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//支持0到多个参数</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">...</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> sum <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//支持1到多个参数</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">...</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> sum <span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>说明：<ol>\n<li>args是slice切片，通过args[index]可以访问到各个值。</li>\n<li>案例演示：编写一个函数sum，可以求出1到多个int的和</li>\n<li>如果一个函数的形参列表中有可变参数，则可变参数需要放在形参列表最后。</li>\n</ol>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//案例演示:编写一个函数sum，可以求出 1到多个int的和</span>\n<span class=\"token comment\">//参数的使用</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">...</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span>\n  sum <span class=\"token operator\">:=</span> n1\n  <span class=\"token comment\">//遍历args</span>\n  <span class=\"token keyword\">for</span> i<span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n    sum <span class=\"token operator\">+=</span> args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token comment\">//args[0] 表示取出args切片的第一个元素值，其它以此类推</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> sum\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  res4 <span class=\"token operator\">:=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res4=\"</span><span class=\"token punctuation\">,</span>res4<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"函数的课堂练习\"><a href=\"#函数的课堂练习\" class=\"headerlink\" title=\"函数的课堂练习\"></a>函数的课堂练习</h2><ul>\n<li>题1</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">float32</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float32</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n1 type=%T \\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//n1 type = float32</span>\n  <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// sum = 3</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//代码有误错误？输出什么？</span></code></pre>\n<p>没有错误。</p>\n<pre class=\"language-none\"><code class=\"language-none\">n1 type&#x3D;float32 \nsum&#x3D; 3</code></pre>\n<ul>\n<li>题2</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> mySum <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum2</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span>n2<span class=\"token punctuation\">,</span>n3 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//使用自定义数据类型（type）来简化定义 </span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span>funcVar mySum<span class=\"token punctuation\">,</span> num1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> num2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">funcVar</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  a <span class=\"token operator\">:=</span> sum\n  b <span class=\"token operator\">:=</span> sum2\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//ok</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//error</span>\n  \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*\n\t错误：\n\tfmt.Println(myFunc(b,1,2))错误，原因是类型不匹配。\n\t因为不能把func sum2(n1,n2,n3 int) int 赋给func(int,int) int\n*/</span></code></pre>\n<ul>\n<li>题3：请编写一个函数swap(n1 *int,n2 *int)可以交换n1和n2的值</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//定义一个临时变量</span>\n  t <span class=\"token operator\">:=</span> <span class=\"token operator\">*</span>n1\n  <span class=\"token operator\">*</span>n1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>n2\n  <span class=\"token operator\">*</span>n2 <span class=\"token operator\">=</span> t\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  a <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n  b <span class=\"token operator\">:=</span> <span class=\"token number\">20</span>\n  <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=%v,b=%v \\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\">a&#x3D;20,b&#x3D;10 </code></pre>\n<h2 id=\"init函数\"><a href=\"#init函数\" class=\"headerlink\" title=\"init函数\"></a>init函数</h2><h3 id=\"基本介绍-1\"><a href=\"#基本介绍-1\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>​    每一个源文件都可以包含一个init函数，该函数会在main函数执行前，被Go运行框架调用，也就是说init会在main函数前被调用。</p>\n<h3 id=\"案例说明：\"><a href=\"#案例说明：\" class=\"headerlink\" title=\"案例说明：\"></a>案例说明：</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//init函数，通常可以在init函数中完成初始化工作 </span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init()...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main()...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>输出结果是：</p>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo04&#x2F;main  go run .&#x2F;main.go\ninit()...\nmain()...</code></pre>\n<h3 id=\"init函数的注意事项和细节\"><a href=\"#init函数的注意事项和细节\" class=\"headerlink\" title=\"init函数的注意事项和细节\"></a>init函数的注意事项和细节</h3><ol>\n<li>如果一个文件同时包含<strong>全局变量定义，init函数和main函数</strong>，则执行的流程全局变量定义-&gt;init函数-&gt;main函数</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210120181428443.png\" alt=\"image-20210120181428443\" loading=\"lazy\"></p>\n<ol start=\"2\">\n<li>init函数最主要的作用，就是完成一些初始化的工作，比如下面的案例</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210120181522732.png\" alt=\"image-20210120181522732\" loading=\"lazy\"></p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210120181535751.png\" alt=\"image-20210120181535751\" loading=\"lazy\"></p>\n<ol start=\"3\">\n<li>细节说明：面试题：案例如果main.go和utils.go都含有变量定义，init函数时，执行的流程又是什么样呢？</li>\n</ol>\n<p>![image-20210120181641012](/Users/leafii/Library/Application Support/typora-user-images/image-20210120181641012.png)</p>\n<h2 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h2>","more":"<h2 id=\"为什么需要函数\"><a href=\"#为什么需要函数\" class=\"headerlink\" title=\"为什么需要函数\"></a>为什么需要函数</h2><h3 id=\"完成需求\"><a href=\"#完成需求\" class=\"headerlink\" title=\"完成需求\"></a>完成需求</h3><p>输入两个数，再输入一个运算符（+-*/），得到结果。</p>\n<h3 id=\"使用传统的方法解决\"><a href=\"#使用传统的方法解决\" class=\"headerlink\" title=\"使用传统的方法解决\"></a>使用传统的方法解决</h3><ul>\n<li>代码</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span>\n\t<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.3</span>\n\t<span class=\"token keyword\">var</span> operator <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token string\">'-'</span>\n\t<span class=\"token keyword\">switch</span> operator <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v + %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v - %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">-</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v * %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">*</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v / %v = %v\\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n1 <span class=\"token operator\">/</span> n2<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\">➜  main go run .&#x2F;main.go\n1.2 - 2.3 &#x3D; -1.0999999999999999</code></pre>\n<ul>\n<li>分析上面的代码问题<ol>\n<li>可以完成功能需求，但代码冗余</li>\n<li>与此同时不利于代码的维护</li>\n<li>函数可以解决这个问题奥</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"函数的基本概念\"><a href=\"#函数的基本概念\" class=\"headerlink\" title=\"函数的基本概念\"></a>函数的基本概念</h2><p>​    为完成某一功能的程序指令（语句）的集合，称为函数。</p>\n<p>在Go中，函数分为：自定义函数、系统函数（查看Go编程手册）</p>\n<h2 id=\"函数的基本语法\"><a href=\"#函数的基本语法\" class=\"headerlink\" title=\"函数的基本语法\"></a>函数的基本语法</h2><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> 函数名 <span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>返回值列表<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  执行语句<span class=\"token operator\">...</span>\n  <span class=\"token keyword\">return</span> 返回值列表\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol>\n<li>形参列表：表示函数的输入</li>\n<li>函数的语句：表示为了实现某一功能代码块</li>\n<li>函数可以有返回值，也可以没有</li>\n</ol>\n<h2 id=\"快速入门案例\"><a href=\"#快速入门案例\" class=\"headerlink\" title=\"快速入门案例\"></a>快速入门案例</h2><p>使用函数解决前面的计算问题。</p>\n<p>走代码：</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span>n2 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> operator <span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> res <span class=\"token builtin\">float64</span>\n\t<span class=\"token keyword\">switch</span> operator <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">-</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">*</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">/</span> n2\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作符号错误哦！\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span>\n\t<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.3</span>\n\t<span class=\"token keyword\">var</span> operator <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token string\">'+'</span>\n\tresult <span class=\"token operator\">:=</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> operator<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"包的引出\"><a href=\"#包的引出\" class=\"headerlink\" title=\"包的引出\"></a>包的引出</h2><ol>\n<li>在实际的开发中，我们往往需要在不同的文件中，去调用其他文件的定义的函数，比如main.go中，去使用utils.go文件中的函数，如何实现？-&gt;包</li>\n<li>现在有两个程序员共同开发一个Go项目，程序员xiaoming希望定义函数Cal，程序员xiaoqiang也想定义函数也叫Cal。两个程序员为此还吵了起来，怎么办？-&gt;包</li>\n</ol>\n<h2 id=\"包的原理图\"><a href=\"#包的原理图\" class=\"headerlink\" title=\"包的原理图\"></a>包的原理图</h2><p>包的本质实际上就是创建不同的文件夹，来存放程序文件。</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210119163512224.png\" alt=\"image-20210119163512224\"></p>\n<h2 id=\"包的基本概念\"><a href=\"#包的基本概念\" class=\"headerlink\" title=\"包的基本概念\"></a>包的基本概念</h2><p>​    说明：go的每一个文件都是属于一个包的，也就是说go是以包的形式来管理文件和项目目录结构的</p>\n<h2 id=\"包的三大作用\"><a href=\"#包的三大作用\" class=\"headerlink\" title=\"包的三大作用\"></a>包的三大作用</h2><ul>\n<li><p>区分相同名字的函数、变量等标识符</p>\n</li>\n<li><p>当程序文件很多时，可以很好的管理项目</p>\n</li>\n<li><p>控制函数、变量等访问范围，即作用域</p>\n</li>\n</ul>\n<h2 id=\"包的相关说明\"><a href=\"#包的相关说明\" class=\"headerlink\" title=\"包的相关说明\"></a>包的相关说明</h2><ul>\n<li><p>打包基本语法</p>\n<p><code>package 包名</code></p>\n</li>\n<li><p>引入包的基本语法</p>\n<p><code>import &quot;包的路径&quot;</code></p>\n</li>\n</ul>\n<h2 id=\"包使用的快速入门\"><a href=\"#包使用的快速入门\" class=\"headerlink\" title=\"包使用的快速入门\"></a>包使用的快速入门</h2><p>包快速入门-Go相互调用函数，我们将func Cal定义到文件utils.go，将utils.go放到一个包中，当其它文件需要使用到utils.go的方法时，可以import该包，就可以使用了。【演示：新建项目的目录结构】</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210119182340923.png\" alt=\"image-20210119182340923\"></p>\n<ul>\n<li>utils.go:</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> utils\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//将计算的功能，放到一个函数中，然后在需要使用，调用即可</span>\n<span class=\"token comment\">//为了让其它包的文件使用Cal函数，需要将C大写类似其它语言的public</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Cal</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span>n2 <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> operator <span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> res <span class=\"token builtin\">float64</span>\n\t<span class=\"token keyword\">switch</span> operator <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">-</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">*</span> n2\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span>\n\t\tres <span class=\"token operator\">=</span> n1 <span class=\"token operator\">/</span> n2\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作符号错误哦！\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>Main.go</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"go_code/chapter06/demo02/utils\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//请大家完成这样一个需求：</span>\n\t<span class=\"token comment\">//输入两个数，再输入一个运算符（+,-,*,/)，得到结果。。</span>\n\t<span class=\"token comment\">//分析思路...</span>\n\t<span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span>\n\t<span class=\"token keyword\">var</span> n2 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.3</span>\n\t<span class=\"token keyword\">var</span> operator <span class=\"token builtin\">byte</span> <span class=\"token operator\">=</span> <span class=\"token string\">'+'</span>\n\tresult <span class=\"token operator\">:=</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">Cal</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span>n2<span class=\"token punctuation\">,</span>operator<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result=\"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"包使用的注意事项和细节讨论\"><a href=\"#包使用的注意事项和细节讨论\" class=\"headerlink\" title=\"包使用的注意事项和细节讨论\"></a>包使用的注意事项和细节讨论</h2><ol>\n<li>在给一个文件打包时，该包对应一个文件夹，比如这里的utils文件夹对应的包名就是utils，文件的包名通常和文件所在的文件夹名一致，一般为小写字母。</li>\n<li>当一个文件要使用其它包函数或变量时，需要先引入对应的包</li>\n</ol>\n<ul>\n<li>引入方式1:<code>import &quot;包名&quot;</code></li>\n<li>引入方式2:</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"包名\"</span>\n  <span class=\"token string\">\"包名\"</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<ul>\n<li>package指令在文件第一行，然后是import指令。</li>\n<li>在import包时，路径从$GOPATH的src下开始，不用带src，编译器会自动从src开始引入。</li>\n</ul>\n<ol start=\"3\">\n<li>为了让其它包的文件可以访问到本包的函数，则该函数名的首字母需要大写，类似其他语言的public，这样才能跨包访问。比如utils.go的<em>Cal</em>函数</li>\n<li>在访问其它包函数，变量时，其语法是 包名.函数名,比如这个main.go文件中的<code>utils.Cal(90, 80, &quot;+&quot;)</code></li>\n<li>如果包名较长，Go支持给包取别名，注意细节；取别名后，原来的包名就不能使用了<ul>\n<li>说明：如果给包取了别名，则**需要使用别名来访问该包的函数和变量。</li>\n</ul>\n</li>\n<li>在同一包下，不能有相同的函数名（也不能有相同的全局变量名），否则报重复定义</li>\n<li>如果你要编译成一个可执行程序文件，就需要将这个包声明为main，即<code>package main</code>这个就是一个语法规范，如果你是写一个库，包名可以自定义</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210119185147993.png\" alt=\"image-20210119185147993\"></p>\n<h2 id=\"函数的调用机制\"><a href=\"#函数的调用机制\" class=\"headerlink\" title=\"函数的调用机制\"></a>函数的调用机制</h2><h3 id=\"通俗易懂的方式的理解\"><a href=\"#通俗易懂的方式的理解\" class=\"headerlink\" title=\"通俗易懂的方式的理解\"></a>通俗易懂的方式的理解</h3><p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210119185241781.png\" alt=\"image-20210119185241781\"></p>\n<h3 id=\"函数-调用过程\"><a href=\"#函数-调用过程\" class=\"headerlink\" title=\"函数-调用过程\"></a>函数-调用过程</h3><p>介绍：为了让大家更好地理解函数调用过程，看两个案例，并画出示意图，这个很重要</p>\n<ol>\n<li>传入一个数+1</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210119185640204.png\" alt=\"image-20210119185640204\"></p>\n<p>对上图说明</p>\n<ol>\n<li><p>在调用一个函数时，会给该函数分配一个新的空间，编译器会通过自身的处理让这个新的空间和其它的栈的空间去分开来</p>\n</li>\n<li><p>在每个函数对应的栈中，数据空间时独立的，不会混淆</p>\n</li>\n<li><p>当一个函数调用完毕（执行完毕）后，程序会销毁这个函数对应的栈空间。</p>\n</li>\n<li><p>计算两个数，并返回</p>\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//一个函数 test</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tn1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//输入结果=？</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\tsum <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">+</span> n2\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getSum sum = \"</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token comment\">// 30</span>\n\t<span class=\"token comment\">//当函数有return语句时，就是将结果返回给调用者</span>\n\t<span class=\"token comment\">//即谁调用我，就返回给谁</span>\n\t<span class=\"token keyword\">return</span> sum\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tn1 <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n\t<span class=\"token comment\">//调用test</span>\n\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span><span class=\"token comment\">//输出结果=？</span>\n\n\tsum <span class=\"token operator\">:=</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main sum=\"</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token comment\">// 30</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo03&#x2F;main  go run main.go \ntest() n1&#x3D; 11\nmain() n1&#x3D; 10\ngetSum sum &#x3D;  30\nmain sum&#x3D; 30</code></pre>\n<h3 id=\"return语句\"><a href=\"#return语句\" class=\"headerlink\" title=\"return语句\"></a>return语句</h3><ul>\n<li>基本语法和说明</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">Go函数支持返回多个值，这一点是其它编程语言没有的。\n<span class=\"token keyword\">func</span> 函数名<span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">)</span> （返回值类型列表） <span class=\"token punctuation\">&#123;</span>\n  语句<span class=\"token operator\">...</span>\n  <span class=\"token keyword\">return</span> 返回值列表\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol>\n<li>如果返回多个值时，在接收时，希望忽略某个返回值，则使用<code>_</code>符号表示占位忽略</li>\n<li>如果返回值只有一个，（返回值类型列表）可以不写<code>()</code></li>\n</ol>\n<ul>\n<li><p>案例演示1</p>\n<p>请编写要给函数，可以计算两个数的和和差，并返回结果。</p>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  n1 <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n  <span class=\"token comment\">//调用test</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span><span class=\"token comment\">//输出结果？</span>\n  sum <span class=\"token operator\">:=</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main sum =\"</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token comment\">//30</span>\n  <span class=\"token comment\">//调用getSumAndSub</span>\n  res1<span class=\"token punctuation\">,</span>res2 <span class=\"token operator\">:=</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//res1 = 3 res2 = -1 </span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res1=%v res2=%v\\n\"</span><span class=\"token punctuation\">,</span>res1<span class=\"token punctuation\">,</span> res2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//编写函数，可以计算两个数的和和差，并返回结果</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  sum <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">+</span> n2\n  sub <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">-</span> n2\n  <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">,</span> sub\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li><p>案例演示2</p>\n<p>一个细节说明：希望忽略某个返回值，则使用<code>_</code>符号表示占位忽略</p>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//希望忽略某个返回值，则使用`_`符号表示占位忽略</span>\n<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> res3 <span class=\"token operator\">=</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res3=\"</span><span class=\"token punctuation\">,</span>res3<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"函数的递归调用\"><a href=\"#函数的递归调用\" class=\"headerlink\" title=\"函数的递归调用\"></a>函数的递归调用</h2><h3 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>一个函数在<strong>函数体内</strong>又<strong>调用了本身</strong>，我们称为递归调用</p>\n<h3 id=\"递归调用快速入门\"><a href=\"#递归调用快速入门\" class=\"headerlink\" title=\"递归调用快速入门\"></a>递归调用快速入门</h3><ul>\n<li>代码1</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#123;</span>\n    n<span class=\"token operator\">--</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n=\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//通过分析来看递归调用的特点</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>上面代码的分析图：</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210120145428637.png\" alt=\"image-20210120145428637\"></p>\n<ul>\n<li>代码2</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#123;</span>\n    n<span class=\"token operator\">--</span>\n    <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n=\"</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//看一段代码</span>\n  <span class=\"token comment\">//test(4) //通过分析来看下递归调用的特点</span>\n  <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ？通过分析来看下递归调用的特点</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>对上面代码分析的示意图：</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210120145923733.png\" alt=\"image-20210120145923733\"></p>\n<h3 id=\"递归调用的总结\"><a href=\"#递归调用的总结\" class=\"headerlink\" title=\"递归调用的总结\"></a>递归调用的总结</h3><p><strong>函数递归需要遵守的重要原则：</strong></p>\n<ol>\n<li>执行一个函数时，就创建一个新的受保护的独立空间（新函数栈）</li>\n<li>函数的局部变量是独立的，不会相互影响</li>\n<li>递归必须向退出递归的条件逼近，否则就是无限递归，死循环了 :) </li>\n<li>当一个函数执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，同时当函数执行完毕或者返回时，该函数本身也会被系统销毁</li>\n</ol>\n<h3 id=\"递归课堂练习题\"><a href=\"#递归课堂练习题\" class=\"headerlink\" title=\"递归课堂练习题\"></a>递归课堂练习题</h3><ul>\n<li><p>题1:斐波那契数</p>\n<p>请使用递归的方式，求出斐波那契数1，1，2，3，5，8，13…</p>\n<p>给你一个整数n，求出它的斐波那切数是多少？</p>\n<ul>\n<li>思路</li>\n</ul>\n<ol>\n<li>当n==1 || n==2, 返回1</li>\n<li>当n&gt;2, 返回f(n-1) + f(n-2)</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> n<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  res <span class=\"token operator\">:=</span> <span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//测试</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li><p>题2:求函数值</p>\n<p>已知 *<em>f(1)=3;f(n)=2</em>(n-1)+1**;</p>\n<p>请使用递归的思想编程，求出f(n)的值？</p>\n<ul>\n<li><p>思路</p>\n<p>递归就完事了奥铁子</p>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*\n已知 f(1)=3;f(n)=2*(n-1)+1;\n请使用递归的思想编程，求出f(n)的值？\n*/</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> n<span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">3</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f(1)=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f(5)=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre></li>\n</ul>\n</li>\n<li><p>题3:猴子吃桃子问题</p>\n<p>有一堆桃子，猴子第一天吃了其中的一半，并再多吃了一个!以后每天猴子都吃其中的一半，然后再多吃一个。当到第十天时，想再吃时(还没吃)，发现只有 <strong>1</strong> 个桃子了。问题:最初共多少个桃子? </p>\n<ul>\n<li>思路分析:<ol>\n<li>第10天只有1个桃子</li>\n<li>第9天有（第十天桃子数量+1）*2个</li>\n<li>第n天有peach(n)=(peach(n+1)+1)*2</li>\n</ol>\n</li>\n<li>代码</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">peach</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> n<span class=\"token operator\">==</span><span class=\"token number\">10</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">peach</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"函数使用的注意事项和细节讨论\"><a href=\"#函数使用的注意事项和细节讨论\" class=\"headerlink\" title=\"函数使用的注意事项和细节讨论\"></a>函数使用的注意事项和细节讨论</h2></li>\n</ul>\n<ol>\n<li>函数的形参列表可以是多个，返回值列表也可以是多个。</li>\n<li>形参列表和返回值列表的数据类型可以是值类型和引用类型。</li>\n<li>函数的命名遵循标识符命名规范，首字母不能是数字，首字母大写该函数可以被本包文件和其它包文件使用，类似 public , 首字母小写，只能被本包文件使用，其它包文件不能使用，类似 private</li>\n<li>函数中的变量是局部的，函数外不生效【案例说明】</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//n1 是 test函数的局部变量，只能在test函数中使用</span>\n  <span class=\"token keyword\">var</span> n1 <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//这里不能使用n1，因为n1是test函数的局部变量</span>\n  <span class=\"token comment\">//fmt.Println(\"n1=\",n1)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"5\">\n<li>基本数据类型和数组默认都是<strong>值传递</strong>，即进行值拷贝。在函数内修改，不会影响到原来的值。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  n1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test02() n1=\"</span><span class=\"token punctuation\">,</span> n1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  num <span class=\"token operator\">:=</span> <span class=\"token number\">20</span>\n  <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main() num=\"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"6\">\n<li>如果希望函数内的变量能修改函数外的变量（指的是默认以值传递的方式的数据类型），可以传入变量的地址&amp;，函数内以指针的方式操作变量。从效果上看类似引用。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token operator\">*</span>n1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>n1 <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test03() n1=\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>n1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//30</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  num <span class=\"token operator\">:=</span> <span class=\"token number\">20</span>\n  <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main() num=\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 30</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210120164317464.png\" alt=\"image-20210120164317464\"></p>\n<ol start=\"7\">\n<li>Golang的函数不支持函数重载</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  n1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test02() n1=\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//这是错误的奥！！！！！</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"8\">\n<li>在Golang中，<strong>函数也是一种数据类型</strong>，可以赋值给一个变量，则该变量就是一个函数类型的变量了。<strong>通过该变量可以对函数调用</strong></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  a <span class=\"token operator\">:=</span> getSum\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a的类型%T， getSum类型是%T \\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> getSum<span class=\"token punctuation\">)</span>\n  \n  res <span class=\"token operator\">:=</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//等价 res := getSum(10, 40)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res=\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"9\">\n<li>函数既然是一种数据类型，因此在Golang中，函数可以作为形参，并且调用哦</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">res2 <span class=\"token operator\">:=</span> <span class=\"token function\">myFun</span><span class=\"token punctuation\">(</span>getSum<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res2=\"</span><span class=\"token punctuation\">,</span> res2<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">myFun</span><span class=\"token punctuation\">(</span>funvar <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> num1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> num2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">funvar</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"10\">\n<li><p>为了简化数据类型定义，Golang支持自定义数据类型</p>\n<p>基本语法：<code>type 自定义数据类型名 数据类型 //理解：相当于一个别名</code></p>\n<p>案例：<code>type myInt int  //这时myInt就等价int来使用了哦！ </code></p>\n<p>案例：<code>type mySum func(int, int) int //这时mySum就等价一个 函数类型fu nc(int, int) int</code></p>\n</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210120165212122.png\" alt=\"image-20210120165212122\"></p>\n<ol start=\"11\">\n<li>支持对函数返回值命名</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>sum <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> sub <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tsub <span class=\"token operator\">=</span> n1 <span class=\"token operator\">-</span> n2\n\tsum <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\ta1<span class=\"token punctuation\">,</span> b1 <span class=\"token operator\">:=</span> <span class=\"token function\">getSumAndSub</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a1=%v,b1=%v \\n\"</span><span class=\"token punctuation\">,</span>a1<span class=\"token punctuation\">,</span> b1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"12\">\n<li>使用<code>_</code>标示符，忽略返回值</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>sum <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> sub <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  sum <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2\n  sub <span class=\"token operator\">=</span> n1 <span class=\"token operator\">-</span> n2\n  <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  res1<span class=\"token punctuation\">,</span><span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  fml<span class=\"token punctuation\">.</span><span class=\"token function\">Ptintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res1=%d\"</span><span class=\"token punctuation\">,</span>res1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"13\">\n<li>Go支持可变参数</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//支持0到多个参数</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">...</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> sum <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//支持1到多个参数</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">...</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> sum <span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>说明：<ol>\n<li>args是slice切片，通过args[index]可以访问到各个值。</li>\n<li>案例演示：编写一个函数sum，可以求出1到多个int的和</li>\n<li>如果一个函数的形参列表中有可变参数，则可变参数需要放在形参列表最后。</li>\n</ol>\n</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//案例演示:编写一个函数sum，可以求出 1到多个int的和</span>\n<span class=\"token comment\">//参数的使用</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">...</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span>\n  sum <span class=\"token operator\">:=</span> n1\n  <span class=\"token comment\">//遍历args</span>\n  <span class=\"token keyword\">for</span> i<span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n    sum <span class=\"token operator\">+=</span> args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token comment\">//args[0] 表示取出args切片的第一个元素值，其它以此类推</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> sum\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  res4 <span class=\"token operator\">:=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res4=\"</span><span class=\"token punctuation\">,</span>res4<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"函数的课堂练习\"><a href=\"#函数的课堂练习\" class=\"headerlink\" title=\"函数的课堂练习\"></a>函数的课堂练习</h2><ul>\n<li>题1</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">float32</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float32</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n1 type=%T \\n\"</span><span class=\"token punctuation\">,</span>n1<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//n1 type = float32</span>\n  <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum=\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// sum = 3</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//代码有误错误？输出什么？</span></code></pre>\n<p>没有错误。</p>\n<pre class=\"language-none\"><code class=\"language-none\">n1 type&#x3D;float32 \nsum&#x3D; 3</code></pre>\n<ul>\n<li>题2</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> mySum <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum2</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span>n2<span class=\"token punctuation\">,</span>n3 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//使用自定义数据类型（type）来简化定义 </span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span>funcVar mySum<span class=\"token punctuation\">,</span> num1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> num2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">funcVar</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  a <span class=\"token operator\">:=</span> sum\n  b <span class=\"token operator\">:=</span> sum2\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//ok</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//error</span>\n  \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*\n\t错误：\n\tfmt.Println(myFunc(b,1,2))错误，原因是类型不匹配。\n\t因为不能把func sum2(n1,n2,n3 int) int 赋给func(int,int) int\n*/</span></code></pre>\n<ul>\n<li>题3：请编写一个函数swap(n1 *int,n2 *int)可以交换n1和n2的值</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n2 <span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//定义一个临时变量</span>\n  t <span class=\"token operator\">:=</span> <span class=\"token operator\">*</span>n1\n  <span class=\"token operator\">*</span>n1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>n2\n  <span class=\"token operator\">*</span>n2 <span class=\"token operator\">=</span> t\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  a <span class=\"token operator\">:=</span> <span class=\"token number\">10</span>\n  b <span class=\"token operator\">:=</span> <span class=\"token number\">20</span>\n  <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=%v,b=%v \\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\">a&#x3D;20,b&#x3D;10 </code></pre>\n<h2 id=\"init函数\"><a href=\"#init函数\" class=\"headerlink\" title=\"init函数\"></a>init函数</h2><h3 id=\"基本介绍-1\"><a href=\"#基本介绍-1\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>​    每一个源文件都可以包含一个init函数，该函数会在main函数执行前，被Go运行框架调用，也就是说init会在main函数前被调用。</p>\n<h3 id=\"案例说明：\"><a href=\"#案例说明：\" class=\"headerlink\" title=\"案例说明：\"></a>案例说明：</h3><pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//init函数，通常可以在init函数中完成初始化工作 </span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init()...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main()...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>输出结果是：</p>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo04&#x2F;main  go run .&#x2F;main.go\ninit()...\nmain()...</code></pre>\n<h3 id=\"init函数的注意事项和细节\"><a href=\"#init函数的注意事项和细节\" class=\"headerlink\" title=\"init函数的注意事项和细节\"></a>init函数的注意事项和细节</h3><ol>\n<li>如果一个文件同时包含<strong>全局变量定义，init函数和main函数</strong>，则执行的流程全局变量定义-&gt;init函数-&gt;main函数</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210120181428443.png\" alt=\"image-20210120181428443\"></p>\n<ol start=\"2\">\n<li>init函数最主要的作用，就是完成一些初始化的工作，比如下面的案例</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210120181522732.png\" alt=\"image-20210120181522732\"></p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210120181535751.png\" alt=\"image-20210120181535751\"></p>\n<ol start=\"3\">\n<li>细节说明：面试题：案例如果main.go和utils.go都含有变量定义，init函数时，执行的流程又是什么样呢？</li>\n</ol>\n<p>![image-20210120181641012](/Users/leafii/Library/Application Support/typora-user-images/image-20210120181641012.png)</p>\n<h2 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h2>","categories":[],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}