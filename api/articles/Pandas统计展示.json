{"title":"Pandas统计展示","slug":"Pandas统计展示","date":"2022-06-08T06:16:49.000Z","updated":"2022-06-08T14:13:25.800Z","comments":true,"path":"api/articles/Pandas统计展示.json","excerpt":"Pandas统计展示​        本文主要写Pandas在统计展示方面的知识。","covers":["http://cdn.leafii.top/img/20220608204129.png","http://cdn.leafii.top/img/20220608204205.png","http://cdn.leafii.top/img/20220608210450.png","http://cdn.leafii.top/img/Figure_1.png","http://cdn.leafii.top/img/Figure_2.png","http://cdn.leafii.top/img/Figure_3.png","http://cdn.leafii.top/img/Figure_4.png","http://cdn.leafii.top/img/20220608215327.png","http://cdn.leafii.top/img/Figure_5.png","http://cdn.leafii.top/img/Figure_6.png"],"content":"<h1 id=\"Pandas统计展示\"><a href=\"#Pandas统计展示\" class=\"headerlink\" title=\"Pandas统计展示\"></a>Pandas统计展示</h1><p>​        本文主要写Pandas在统计展示方面的知识。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"基础统计方法\"><a href=\"#基础统计方法\" class=\"headerlink\" title=\"基础统计方法\"></a>基础统计方法</h2><p>​        在Pandas上做数据统计，要比在Numpy上做舒服很多，因为在数据展示上，有很多额外的信息辅助你来消化这些信息。而且你还能比较方便地绘制成图。</p>\n<p>​        在本节内容中我们会对比Numpy中的方法和Pandas的不同，来解释为什么人们在做数据分析的时候喜欢用Pandas。</p>\n<h3 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h3><p>​        在分析数据或者统计数据的时候，首先得有数据，我简单创建了一份数据，后续的工作将会依赖于这份数据，所以请你帮我点击一下下面的 Run 键，初始化一下这份数据。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1.39</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.77</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">0.34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.91</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.05</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">0.34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.47</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.22</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.27</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.61</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"r0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"c0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<p>​         运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">      c0    c1    c2\nr0  1.39  1.77  None\nr1  0.34  1.91 -0.05\nr2  0.34  1.47  1.22\nr3  None  0.27 -0.61</code></pre>\n\n<p>​        你在日常生活中，也经常是以这种 2 维表格型数据为主，而且因为各种不可知原因，你的数据可能存在缺失状况。比如有人没交作业，有数据还没被采集到等等。 如果你使用 Excel 收集的数据（用 Pandas 读 Excel），那这种情况可能更加多。</p>\n<h3 id=\"快速总结\"><a href=\"#快速总结\" class=\"headerlink\" title=\"快速总结\"></a>快速总结</h3><p>​        通常，如果我们不知道这份数据包含了什么，想快速了解一下这份数据的基础信息，我们可以直接先上一个 <code>describe()</code>，让 Pandas 自动帮我们描述一下这份数据的基础信息。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">          c0    c1    c2\ncount   3.00  4.00  3.00\nunique  2.00  4.00  3.00\ntop     0.34  1.77 -0.05\nfreq    2.00  1.00  1.00</code></pre>\n\n<p>​        这里，会显示出来 <code>count</code> 计数（剔除掉 None 或者 NAN 这种无效数据），所以你在结果中能看到 <code>c0</code>，<code>c2</code> 两个的有效数是 3 个，而 <code>c1</code> 有效数有 4 个。</p>\n<p>​        <code>unique</code> 表示的是每个 column 中有多少独特的数据。这个在初步感知数据丰富度上会有一定的作用。</p>\n<p>​        <code>top</code> 表示出现最多的数据是哪一个，这组数据在 <code>c0</code> column 处，我们能观察到 <code>0.34</code> 出现了两次，所以它选的 top 是 <code>0.34</code>。</p>\n<p>​        <code>freq</code> 是继续了 <code>top</code>，表述的是这个出现频率最多的数据，出现的次数有多少次。</p>\n<p>​        上面这份数据还不是纯数据，如果是存数值型的数据，我们跑 <code>describe()</code> 还能看到统计学的信息。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df1 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"c0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\ndescribe:\\n\"</span><span class=\"token punctuation\">,</span> df1<span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">         c0        c1        c2\na  0.053206  0.686505  0.439459\nb  0.083406  0.096903  0.212163\nc  0.369903  0.877894  0.918427\nd  0.169573  0.563210  0.900700\n\ndescribe:\n              c0        c1        c2\ncount  4.000000  4.000000  4.000000\nmean   0.169022  0.556128  0.617687\nstd    0.142708  0.332400  0.349645\nmin    0.053206  0.096903  0.212163\n25%    0.075856  0.446634  0.382635\n50%    0.126490  0.624858  0.670080\n75%    0.219656  0.734352  0.905132\nmax    0.369903  0.877894  0.918427</code></pre>\n\n<p>​        平均数（mean），均方差（std），最小值（min），统计学的 25 分位，50 分位，75 分位各是多少，最大值（max）是多少。</p>\n<h3 id=\"日常一般用法\"><a href=\"#日常一般用法\" class=\"headerlink\" title=\"日常一般用法\"></a>日常一般用法</h3><ul>\n<li>均值中位数<code>df.mean()；df.median()</code></li>\n</ul>\n<p>​        像上面，我们已经可以从 <code>describe()</code> 功能中略知一二了，但是你肯定也不满足于这些简单的描述信息。那么我们看看还有哪些简单实用的统计学功能。 比较常用的，我们通常会想知道一组数据的均值，用 <code>mean()</code> 就好了。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        这样可以直接输出每一个 columns 的均值，因为这是在对 df 的第0个维度在做求均值。也可以这么写。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​         运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">c0    0.690000\nc1    1.355000\nc2    0.186667\ndtype: float64</code></pre>\n\n<p>​        当然，如果你不想对第 0 个维度，而是想对第 1 个维度求均值呢（后面的功能中 axis 的用法都基本相似）。我们只需要把 <code>axis=0</code> 换成 <code>axis=1</code></p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">r0    1.580000\nr1    0.733333\nr2    1.010000\nr3   -0.170000\ndtype: float64</code></pre>\n\n<p>​        还有一个比较有用的参数 <code>skipna</code>，这个是用来处理数据中有 <code>None</code> 或者是 <code>NaN</code> 时用的。我们需不需要排除掉有 None 或者 NaN 的数据。 如果需要 skip 掉这些，我们就还是会计算所有行列的数值，只是在计数的时候，扣掉这些 None 和 NaN。<strong>而当 <code>skipna=False</code> 的时候， Pandas 只要遇到了 None 或者 NaN，就不计算这列、行的数据了。所以下面你会看到，它只返回了一个 column 的结果。</strong></p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>skipna<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#c1    1.355</span>\n<span class=\"token comment\">#dtype: float64</span></code></pre>\n\n<p>​        你看，对比 <a href=\"https://mofanpy.com/tutorials/data-manipulation/numpy/operations/\">Numpy 的用法</a>，你会发现， Pandas 在展示信息上还是挺对用户考虑的，它把行名等都展示出来，让人不犯迷糊。</p>\n<p>​        有了上面的 <code>mean()</code> 的用法做铺垫，理解后面的用法也方便很多。比如在计算人民收入的时候， 我们常用中值来代替均值，原因很简单，<strong>极高收入群体总是拉高了我们的平均收入， 用中位数反倒能反映出群众的真实收入。</strong> 查中值的方式也很简单，就是 <code>median()</code>。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 最后一个为高收入人</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mean():\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 拉高平均收入，拉高仇恨</span>\n<span class=\"token comment\">#mean(): 26750.0</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"median():\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>median<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 比较合理</span>\n<span class=\"token comment\">#median(): 3000.0</span></code></pre>\n\n<ul>\n<li>累加累乘<code>df.sum()；df.prod()</code></li>\n</ul>\n<p>​        有了上面的<code>mean()</code>和<code>median()</code>的用法做铺垫，理解后面的用法也方便很多。比如要对数据做累加和累乘的运算，我们使用方式和<code>mean()</code>就没啥差别。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"c0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">   c0  c1  c2\n0   0   1   2\n1   3   4   5\n2   6   7   8\n3   9  10  11</code></pre>\n\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum():\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nsum(axis=0):\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nsum(axis=1):\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sum():\n c0    18\nc1    22\nc2    26\ndtype: int64\n\nsum(axis&#x3D;0):\n c0    18\nc1    22\nc2    26\ndtype: int64\n\nsum(axis&#x3D;1):\n 0     3\n1    12\n2    21\n3    30\ndtype: int64</code></pre>\n\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prod():\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>prod<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nprod(axis=0):\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>prod<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nprod(axis=1):\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>prod<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">prod():\n c0      0\nc1    280\nc2    880\ndtype: int32\n\nprod(axis&#x3D;0):\n c0      0\nc1    280\nc2    880\ndtype: int32\n\nprod(axis&#x3D;1):\n 0      0\n1     60\n2    336\n3    990\ndtype: int32</code></pre>\n\n<ul>\n<li>最大最小<code>df.max(); df.min()</code></li>\n</ul>\n<p>​        同理，理解了上面的用法，查找最大最小也不是问题。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"max():\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nmin():\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">max():\n c0     9\nc1    10\nc2    11\ndtype: int32\n\nmin():\n c0    0\nc1    1\nc2    2\ndtype: int32</code></pre>\n\n<p>​        不过你注意到没，这种 <code>max()</code> 和 <code>min()</code> 都是对某一维度进行操作的，肯定有时候，你想要找到那个全局最大最小的数，这怎么找？ 哈哈，那你就做两次操作吧。或者你可以先把它转成 numpy，然后展平了求全局最大最小。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>ravel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 用 Numpy 的方式运算</span>\n<span class=\"token comment\">#11</span>\n<span class=\"token comment\">#11</span></code></pre>\n\n<p>​        如果想计算 mean 或者 median 这种，你想想然后再试试，用哪种方式比较合适呢？</p>\n<ul>\n<li>处理空值 <code>df.isnull(); df.notnull(); df.dropna(); df.fillna()</code></li>\n</ul>\n<p>​        总有 None 或者 NaN 值有时候挺烦人的，因为在做机器学习或者是统计数据的时候，你也不能放它在那不管。比如在机器学习中，如果有空值，你要么就选择放弃这条数据， 要么就要对它进行科学的填充，有人用均值有人用中值等。所以上面学到的技巧都能在这里用上。</p>\n<p>​        第一，你可能想要先看看你的数据中有没有空值。用下面的 <code>isnull()</code> 或者 <code>notnull()</code> 就能找到。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                  columns<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ABCD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nisnull():\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>isnull<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True 就是空</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nnotnull()\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>notnull<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False 为空</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">     A    B    C    D\n0  1.0  2.0  3.0  0.0\n1  3.0  4.0  NaN  1.0\n2  NaN  NaN  NaN  NaN\n3  NaN  3.0  NaN  4.0\n\nisnull():\n        A      B      C      D\n0  False  False  False  False\n1  False  False   True  False\n2   True   True   True   True\n3   True  False   True  False\n\nnotnull()\n        A      B      C      D\n0   True   True   True   True\n1   True   True  False   True\n2  False  False  False  False\n3  False   True  False   True</code></pre>\n\n<p>​        发现这里有空值，下面你就可以对这些 None, Null, NaN 做处理了。要么你就放弃这些有空值的数据，用 <code>dropna()</code>。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"默认：\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>dropna<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 默认按 axis=0</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\naxis=1:\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>dropna<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 可以换一个 axis drop</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">默认：\n      A    B    C    D\n0  1.0  2.0  3.0  0.0\n\naxis&#x3D;1:\n Empty DataFrame\nColumns: []\nIndex: [0, 1, 2, 3]</code></pre>\n\n<p>​        当然，你觉得数据只要有值你就想留下来，只去除掉那些全为空的数据，那么你还能在筛选的时候加一个 <code>how=&quot;all&quot;</code> 参数。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df1 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">.</span>dropna<span class=\"token punctuation\">(</span>how<span class=\"token operator\">=</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># how 默认为 \"any\" </span>\n<span class=\"token comment\">#     0     1    2</span>\n<span class=\"token comment\">#1  1.0  None  3.0</span></code></pre>\n\n<p>​        刚也说了，除了 drop 掉有 None 的，还可以对这些空值进行填充，填充的值也可以自行选定。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 填充 111</span></code></pre>\n\n<p>​        对不同特征<strong>列</strong>做差异化的填充数值。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">values <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"D\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span>\ndf<span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span>values<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        甚至，如果你有一个每一位上的默认值，你都可以用一个全新的 df 来做空位的填充。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df2 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ABCD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"df2:\\n\"</span><span class=\"token punctuation\">,</span> df2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nfillna(df2):\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span>df2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">df2:\n     A   B   C   D\n0   0   1   2   3\n1   4   5   6   7\n2   8   9  10  11\n3  12  13  14  15\n\nfillna(df2):\n       A    B     C     D\n0   1.0  2.0   3.0   0.0\n1   3.0  4.0   6.0   1.0\n2   8.0  9.0  10.0  11.0\n3  12.0  3.0  14.0   4.0</code></pre>\n\n<ul>\n<li>获取索引 <code>df.idxmin(); df.idxmax()</code></li>\n</ul>\n<p>​        一般来说，当你想用 <code>np.argmax()</code> 或者 <code>np.argmin()</code> 的时候，你可以在 pandas 用 <code>idxmax()</code> 和 <code>idxmin()</code> 来替换。原理都一样， 就是找到那个最大最小值的索引。这个的好处是，你只关注索引而不用关注值，你可以对这个索引的值做你想要的后续处理。</p>\n<p>同上面一样，你还能用上面学到的 <code>skipna</code> 来对空值做控制。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                  columns<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ABCD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nidxmax():\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>idxmax<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nidxmax(skipna=False):\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>idxmax<span class=\"token punctuation\">(</span>skipna<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nidxmin():\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>idxmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">   A  B    C  D\n0  1  2  3.0  0\n1  3  4  NaN  1\n2  3  5  2.0  1\n3  3  2  2.0  3\n\nidxmax():\n A    1\nB    2\nC    0\nD    3\ndtype: int64\n\nidxmax(skipna&#x3D;False):\n A    1.0\nB    2.0\nC    NaN\nD    3.0\ndtype: float64\n\nidxmin():\n A    0\nB    0\nC    2\nD    0\ndtype: int64</code></pre>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        在机器学习或者统计学中，只要你是和数据打交道，就少不了先观察和了解数据。用 Pandas 的这些功能，可以帮你快速了解数据的全貌， 也可以对其中的数据缺失做一些处理。</p>\n<h2 id=\"绘制图表\"><a href=\"#绘制图表\" class=\"headerlink\" title=\"绘制图表\"></a>绘制图表</h2><p>​        数据是服务于人的决策的，我们有一大堆数据，如果人没有真正意义上理解这些数据背后的含义，那即使数据量再大，它也是无意义的。所以我们今天来探讨一种让人与数据之间构建信息传递桥梁的方法-数据可视化技术。</p>\n<p>​        在 Pandas 中， 就已经可以实现多种多样的数据可视化方案了。</p>\n<p>​        我们来看看你拥有的数据可以被 Pandas 表达成什么样。</p>\n<h3 id=\"散点图Scatter\"><a href=\"#散点图Scatter\" class=\"headerlink\" title=\"散点图Scatter\"></a>散点图Scatter</h3><p>​        散点图实际在很多生活场景上都有运用的。比如你要描绘数据 sample 之间与拟合曲线之间呈现的关系：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220608204129.png\" loading=\"lazy\"></p>\n<p>​        又或者在演示算法是如何进化 ，如何运动的。</p>\n<p><img src=\"http://cdn.leafii.top/img/20220608204205.png\" loading=\"lazy\"></p>\n<p>​        这些都是我之前做过的散点图案例，所以适用场景还是非常多的。在 Pandas 中，我们有非常方便的办法来直接对 DataFrame 做散点图。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt <span class=\"token comment\">#一定要加上</span>\nn <span class=\"token operator\">=</span> <span class=\"token number\">1024</span> \t\t\t<span class=\"token comment\"># data size</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\ncolor <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arctan2<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>x<span class=\"token operator\">=</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span>color<span class=\"token punctuation\">,</span> s<span class=\"token operator\">=</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span><span class=\"token string\">\"rainbow\"</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        点击运行之后，你会发现可以做出来一幅非常好看的图。当然这里的参数你可以随意搭配，比如试试不写 <code>c=color</code> 或者去掉 <code>cmap=&quot;rainbow&quot;</code>， 看看会有何影响。</p>\n<p>​        我稍微解释一下几个你可能在乎的参数：</p>\n<ul>\n<li>c: 对于这组数据中每个（x,y）数据点的颜色值</li>\n<li>s: 画点的大小（size）</li>\n<li>alpha：不透明度</li>\n<li>cmap：colormap，你可以在<a href=\"https://matplotlib.org/stable/tutorials/colors/colormaps.html\">这里</a>找到非常丰富的案例</li>\n</ul>\n<h3 id=\"折线图-plot\"><a href=\"#折线图-plot\" class=\"headerlink\" title=\"折线图 plot\"></a>折线图 plot</h3><p>​        同样在这个拟合关系的图中， 我们其实还绘制了一张折线图。可见，折线图也是非常有用的。</p>\n<p><img src=\"http://cdn.leafii.top/img/20220608210450.png\" loading=\"lazy\"></p>\n<p>​        同样，还有很多机器学习的loss变化曲线案例都是用折线图绘制出来的。而在Pandas中，折线图的绘制方法很简单。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">n <span class=\"token operator\">=</span> <span class=\"token number\">20</span>    <span class=\"token comment\"># data size</span>\nx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\ny <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.4</span> <span class=\"token operator\">+</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">:</span> y<span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>x<span class=\"token operator\">=</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>![](<a href=\"http://cdn.leafii.top/img/Screen\">http://cdn.leafii.top/img/Screen</a> Shot 2022-06-08 at 21.07.19.png)</p>\n<p>​        我用最朴素的方法，绘制了一条歪歪扭扭的折线图，来体现它真的很折。你可能很感兴趣，为什么这里的 <code>c</code> 参数传入的数值和上面散点图的不一样？ 原来在折线图中，线的颜色最好是一样的，不然当线多了以后，你会发现不同颜色就看不出到底是那条线了。</p>\n<p>​        碰到多条线的时候，怎么处理:</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">n <span class=\"token operator\">=</span> <span class=\"token number\">20</span> <span class=\"token comment\"># data size</span>\nx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\ny1 <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\ny2 <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.4</span> <span class=\"token operator\">+</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">:</span>x<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"y1\"</span><span class=\"token punctuation\">:</span> y1<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"y2\"</span><span class=\"token punctuation\">:</span> y2<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>x<span class=\"token operator\">=</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"y1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"y2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p><img src=\"http://cdn.leafii.top/img/Figure_1.png\" loading=\"lazy\"></p>\n<p>​        只要我给多个 <code>y</code>，它就能给出多条线的位置，当然还帮你注明哪个颜色是哪条线。</p>\n<h3 id=\"条形图-bar\"><a href=\"#条形图-bar\" class=\"headerlink\" title=\"条形图 bar\"></a>条形图 bar</h3><p>​        做两家公司收入对比，或者是年度值变化的时候，我们也很喜欢用条形图。直接点，我们看看 Pandas 的条形图怎么画。 假设有 abd 四家公司，这 5 年的营收对比可以这么画。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p><img src=\"http://cdn.leafii.top/img/Figure_2.png\" loading=\"lazy\"></p>\n<p>​        如果把他们放在一起来看占比多少时，我们还能这么干：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span>stacked<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p><img src=\"http://cdn.leafii.top/img/Figure_3.png\" loading=\"lazy\"></p>\n<p>​        横着不好看，想画一个竖着的图，Pandas 也能轻松做到。你只需要把 <code>bar()</code> 换成 <code>barh()</code> 就好。多出来的这个 h 就是 horizontal 的意思。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>barh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p><img src=\"http://cdn.leafii.top/img/Figure_4.png\" loading=\"lazy\"></p>\n<h3 id=\"分布图-histograms\"><a href=\"#分布图-histograms\" class=\"headerlink\" title=\"分布图 histograms\"></a>分布图 histograms</h3><p>​        分布图在机器学习和统计学中非常重要，我经常画分布图，比如要画神经网络的参数分布可视化。又或者是GAN生成对抗网络中的数据分布。</p>\n<p><img src=\"http://cdn.leafii.top/img/20220608215327.png\" loading=\"lazy\"></p>\n<p>​        我们用<code>plot.hist()</code>就能画出来了，这里的hist是histogram，也就是分布的意思。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        当然还会有多个分布重合在一起，你想对比这看看这些分布有无差别的时候，重合度怎么样的时候。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>alpha<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> bins<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        为了使你能轻松辨析出 abc 这几个分布的不同，我把 <code>alpha</code> 不透明度调整了一下，让你能看清楚重叠部分。而且 <code>bins</code> 柱状体的数量也调多了。</p>\n<h3 id=\"饼图-Pie\"><a href=\"#饼图-Pie\" class=\"headerlink\" title=\"饼图 Pie\"></a>饼图 Pie</h3><p>​        当你想给 Excel 批量话饼图的时候， 你就能结合读取 Excel 的教学，和这一节一起用。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"boss\"</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\nindex<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"meeting\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"supervise\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"teaching\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"team building\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>pie<span class=\"token punctuation\">(</span>y<span class=\"token operator\">=</span><span class=\"token string\">\"boss\"</span><span class=\"token punctuation\">,</span> figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p><img src=\"http://cdn.leafii.top/img/Figure_5.png\" loading=\"lazy\"></p>\n<p>​        如果你有多张大饼，想要对比？当然也没问题。可以多加一个 <code>subpots</code> 来分开画饼。<code>legend</code> 是用来确定要不要输出图例的，我这里嫌弃图例占地方， 就设置 <code>legend=False</code>。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"bigBoss\"</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"smallBoss\"</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"meeting\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"supervise\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"teaching\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"team building\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>pie<span class=\"token punctuation\">(</span>subplots<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> legend<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p><img src=\"http://cdn.leafii.top/img/Figure_6.png\" loading=\"lazy\"></p>\n<h3 id=\"面积图-area\"><a href=\"#面积图-area\" class=\"headerlink\" title=\"面积图 area\"></a>面积图 area</h3><p>​        面积图偶尔你还是会看见的，比如在我的 <a href=\"https://mofanpy.com/tutorials/machine-learning/evolutionary-algorithm/neat-supervised-learning/\">进化算法教学中</a>， 就使用了面积图来观看各个种群的占比随时间的变化情况。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>\n    np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        如果你不想上下堆砌在一起观看，而是有统一的一个起点，那可以用这个参数 <code>stacked=False</code>。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">(</span>stacked<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></code></pre>\n\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        好了，这节内容也还挺多的，我就先讲到这里。用 Pandas 画图还可以有很多其他花样， 你可以在这里看到更加细节的<a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html\">官方文档</a>。 每种画图功能里面，也还有更多参数可以调整。记得不懂就要多在网上搜搜，多看官方文档。</p>\n","more":"<h2 id=\"基础统计方法\"><a href=\"#基础统计方法\" class=\"headerlink\" title=\"基础统计方法\"></a>基础统计方法</h2><p>​        在Pandas上做数据统计，要比在Numpy上做舒服很多，因为在数据展示上，有很多额外的信息辅助你来消化这些信息。而且你还能比较方便地绘制成图。</p>\n<p>​        在本节内容中我们会对比Numpy中的方法和Pandas的不同，来解释为什么人们在做数据分析的时候喜欢用Pandas。</p>\n<h3 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h3><p>​        在分析数据或者统计数据的时候，首先得有数据，我简单创建了一份数据，后续的工作将会依赖于这份数据，所以请你帮我点击一下下面的 Run 键，初始化一下这份数据。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1.39</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.77</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">0.34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.91</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.05</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">0.34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.47</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.22</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.27</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.61</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"r0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"c0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<p>​         运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">      c0    c1    c2\nr0  1.39  1.77  None\nr1  0.34  1.91 -0.05\nr2  0.34  1.47  1.22\nr3  None  0.27 -0.61</code></pre>\n\n<p>​        你在日常生活中，也经常是以这种 2 维表格型数据为主，而且因为各种不可知原因，你的数据可能存在缺失状况。比如有人没交作业，有数据还没被采集到等等。 如果你使用 Excel 收集的数据（用 Pandas 读 Excel），那这种情况可能更加多。</p>\n<h3 id=\"快速总结\"><a href=\"#快速总结\" class=\"headerlink\" title=\"快速总结\"></a>快速总结</h3><p>​        通常，如果我们不知道这份数据包含了什么，想快速了解一下这份数据的基础信息，我们可以直接先上一个 <code>describe()</code>，让 Pandas 自动帮我们描述一下这份数据的基础信息。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">          c0    c1    c2\ncount   3.00  4.00  3.00\nunique  2.00  4.00  3.00\ntop     0.34  1.77 -0.05\nfreq    2.00  1.00  1.00</code></pre>\n\n<p>​        这里，会显示出来 <code>count</code> 计数（剔除掉 None 或者 NAN 这种无效数据），所以你在结果中能看到 <code>c0</code>，<code>c2</code> 两个的有效数是 3 个，而 <code>c1</code> 有效数有 4 个。</p>\n<p>​        <code>unique</code> 表示的是每个 column 中有多少独特的数据。这个在初步感知数据丰富度上会有一定的作用。</p>\n<p>​        <code>top</code> 表示出现最多的数据是哪一个，这组数据在 <code>c0</code> column 处，我们能观察到 <code>0.34</code> 出现了两次，所以它选的 top 是 <code>0.34</code>。</p>\n<p>​        <code>freq</code> 是继续了 <code>top</code>，表述的是这个出现频率最多的数据，出现的次数有多少次。</p>\n<p>​        上面这份数据还不是纯数据，如果是存数值型的数据，我们跑 <code>describe()</code> 还能看到统计学的信息。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df1 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"c0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\ndescribe:\\n\"</span><span class=\"token punctuation\">,</span> df1<span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">         c0        c1        c2\na  0.053206  0.686505  0.439459\nb  0.083406  0.096903  0.212163\nc  0.369903  0.877894  0.918427\nd  0.169573  0.563210  0.900700\n\ndescribe:\n              c0        c1        c2\ncount  4.000000  4.000000  4.000000\nmean   0.169022  0.556128  0.617687\nstd    0.142708  0.332400  0.349645\nmin    0.053206  0.096903  0.212163\n25%    0.075856  0.446634  0.382635\n50%    0.126490  0.624858  0.670080\n75%    0.219656  0.734352  0.905132\nmax    0.369903  0.877894  0.918427</code></pre>\n\n<p>​        平均数（mean），均方差（std），最小值（min），统计学的 25 分位，50 分位，75 分位各是多少，最大值（max）是多少。</p>\n<h3 id=\"日常一般用法\"><a href=\"#日常一般用法\" class=\"headerlink\" title=\"日常一般用法\"></a>日常一般用法</h3><ul>\n<li>均值中位数<code>df.mean()；df.median()</code></li>\n</ul>\n<p>​        像上面，我们已经可以从 <code>describe()</code> 功能中略知一二了，但是你肯定也不满足于这些简单的描述信息。那么我们看看还有哪些简单实用的统计学功能。 比较常用的，我们通常会想知道一组数据的均值，用 <code>mean()</code> 就好了。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        这样可以直接输出每一个 columns 的均值，因为这是在对 df 的第0个维度在做求均值。也可以这么写。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​         运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">c0    0.690000\nc1    1.355000\nc2    0.186667\ndtype: float64</code></pre>\n\n<p>​        当然，如果你不想对第 0 个维度，而是想对第 1 个维度求均值呢（后面的功能中 axis 的用法都基本相似）。我们只需要把 <code>axis=0</code> 换成 <code>axis=1</code></p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">r0    1.580000\nr1    0.733333\nr2    1.010000\nr3   -0.170000\ndtype: float64</code></pre>\n\n<p>​        还有一个比较有用的参数 <code>skipna</code>，这个是用来处理数据中有 <code>None</code> 或者是 <code>NaN</code> 时用的。我们需不需要排除掉有 None 或者 NaN 的数据。 如果需要 skip 掉这些，我们就还是会计算所有行列的数值，只是在计数的时候，扣掉这些 None 和 NaN。<strong>而当 <code>skipna=False</code> 的时候， Pandas 只要遇到了 None 或者 NaN，就不计算这列、行的数据了。所以下面你会看到，它只返回了一个 column 的结果。</strong></p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>skipna<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#c1    1.355</span>\n<span class=\"token comment\">#dtype: float64</span></code></pre>\n\n<p>​        你看，对比 <a href=\"https://mofanpy.com/tutorials/data-manipulation/numpy/operations/\">Numpy 的用法</a>，你会发现， Pandas 在展示信息上还是挺对用户考虑的，它把行名等都展示出来，让人不犯迷糊。</p>\n<p>​        有了上面的 <code>mean()</code> 的用法做铺垫，理解后面的用法也方便很多。比如在计算人民收入的时候， 我们常用中值来代替均值，原因很简单，<strong>极高收入群体总是拉高了我们的平均收入， 用中位数反倒能反映出群众的真实收入。</strong> 查中值的方式也很简单，就是 <code>median()</code>。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 最后一个为高收入人</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mean():\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 拉高平均收入，拉高仇恨</span>\n<span class=\"token comment\">#mean(): 26750.0</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"median():\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>median<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 比较合理</span>\n<span class=\"token comment\">#median(): 3000.0</span></code></pre>\n\n<ul>\n<li>累加累乘<code>df.sum()；df.prod()</code></li>\n</ul>\n<p>​        有了上面的<code>mean()</code>和<code>median()</code>的用法做铺垫，理解后面的用法也方便很多。比如要对数据做累加和累乘的运算，我们使用方式和<code>mean()</code>就没啥差别。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"c0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">   c0  c1  c2\n0   0   1   2\n1   3   4   5\n2   6   7   8\n3   9  10  11</code></pre>\n\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum():\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nsum(axis=0):\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nsum(axis=1):\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">sum():\n c0    18\nc1    22\nc2    26\ndtype: int64\n\nsum(axis&#x3D;0):\n c0    18\nc1    22\nc2    26\ndtype: int64\n\nsum(axis&#x3D;1):\n 0     3\n1    12\n2    21\n3    30\ndtype: int64</code></pre>\n\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prod():\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>prod<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nprod(axis=0):\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>prod<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nprod(axis=1):\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>prod<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">prod():\n c0      0\nc1    280\nc2    880\ndtype: int32\n\nprod(axis&#x3D;0):\n c0      0\nc1    280\nc2    880\ndtype: int32\n\nprod(axis&#x3D;1):\n 0      0\n1     60\n2    336\n3    990\ndtype: int32</code></pre>\n\n<ul>\n<li>最大最小<code>df.max(); df.min()</code></li>\n</ul>\n<p>​        同理，理解了上面的用法，查找最大最小也不是问题。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"max():\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nmin():\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">max():\n c0     9\nc1    10\nc2    11\ndtype: int32\n\nmin():\n c0    0\nc1    1\nc2    2\ndtype: int32</code></pre>\n\n<p>​        不过你注意到没，这种 <code>max()</code> 和 <code>min()</code> 都是对某一维度进行操作的，肯定有时候，你想要找到那个全局最大最小的数，这怎么找？ 哈哈，那你就做两次操作吧。或者你可以先把它转成 numpy，然后展平了求全局最大最小。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>ravel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 用 Numpy 的方式运算</span>\n<span class=\"token comment\">#11</span>\n<span class=\"token comment\">#11</span></code></pre>\n\n<p>​        如果想计算 mean 或者 median 这种，你想想然后再试试，用哪种方式比较合适呢？</p>\n<ul>\n<li>处理空值 <code>df.isnull(); df.notnull(); df.dropna(); df.fillna()</code></li>\n</ul>\n<p>​        总有 None 或者 NaN 值有时候挺烦人的，因为在做机器学习或者是统计数据的时候，你也不能放它在那不管。比如在机器学习中，如果有空值，你要么就选择放弃这条数据， 要么就要对它进行科学的填充，有人用均值有人用中值等。所以上面学到的技巧都能在这里用上。</p>\n<p>​        第一，你可能想要先看看你的数据中有没有空值。用下面的 <code>isnull()</code> 或者 <code>notnull()</code> 就能找到。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                  columns<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ABCD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nisnull():\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>isnull<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True 就是空</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nnotnull()\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>notnull<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False 为空</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">     A    B    C    D\n0  1.0  2.0  3.0  0.0\n1  3.0  4.0  NaN  1.0\n2  NaN  NaN  NaN  NaN\n3  NaN  3.0  NaN  4.0\n\nisnull():\n        A      B      C      D\n0  False  False  False  False\n1  False  False   True  False\n2   True   True   True   True\n3   True  False   True  False\n\nnotnull()\n        A      B      C      D\n0   True   True   True   True\n1   True   True  False   True\n2  False  False  False  False\n3  False   True  False   True</code></pre>\n\n<p>​        发现这里有空值，下面你就可以对这些 None, Null, NaN 做处理了。要么你就放弃这些有空值的数据，用 <code>dropna()</code>。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"默认：\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>dropna<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 默认按 axis=0</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\naxis=1:\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>dropna<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 可以换一个 axis drop</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">默认：\n      A    B    C    D\n0  1.0  2.0  3.0  0.0\n\naxis&#x3D;1:\n Empty DataFrame\nColumns: []\nIndex: [0, 1, 2, 3]</code></pre>\n\n<p>​        当然，你觉得数据只要有值你就想留下来，只去除掉那些全为空的数据，那么你还能在筛选的时候加一个 <code>how=&quot;all&quot;</code> 参数。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df1 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">.</span>dropna<span class=\"token punctuation\">(</span>how<span class=\"token operator\">=</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># how 默认为 \"any\" </span>\n<span class=\"token comment\">#     0     1    2</span>\n<span class=\"token comment\">#1  1.0  None  3.0</span></code></pre>\n\n<p>​        刚也说了，除了 drop 掉有 None 的，还可以对这些空值进行填充，填充的值也可以自行选定。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 填充 111</span></code></pre>\n\n<p>​        对不同特征<strong>列</strong>做差异化的填充数值。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">values <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"D\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span>\ndf<span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span>values<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        甚至，如果你有一个每一位上的默认值，你都可以用一个全新的 df 来做空位的填充。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df2 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ABCD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"df2:\\n\"</span><span class=\"token punctuation\">,</span> df2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nfillna(df2):\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span>df2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">df2:\n     A   B   C   D\n0   0   1   2   3\n1   4   5   6   7\n2   8   9  10  11\n3  12  13  14  15\n\nfillna(df2):\n       A    B     C     D\n0   1.0  2.0   3.0   0.0\n1   3.0  4.0   6.0   1.0\n2   8.0  9.0  10.0  11.0\n3  12.0  3.0  14.0   4.0</code></pre>\n\n<ul>\n<li>获取索引 <code>df.idxmin(); df.idxmax()</code></li>\n</ul>\n<p>​        一般来说，当你想用 <code>np.argmax()</code> 或者 <code>np.argmin()</code> 的时候，你可以在 pandas 用 <code>idxmax()</code> 和 <code>idxmin()</code> 来替换。原理都一样， 就是找到那个最大最小值的索引。这个的好处是，你只关注索引而不用关注值，你可以对这个索引的值做你想要的后续处理。</p>\n<p>同上面一样，你还能用上面学到的 <code>skipna</code> 来对空值做控制。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                  columns<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ABCD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nidxmax():\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>idxmax<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nidxmax(skipna=False):\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>idxmax<span class=\"token punctuation\">(</span>skipna<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nidxmin():\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>idxmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">   A  B    C  D\n0  1  2  3.0  0\n1  3  4  NaN  1\n2  3  5  2.0  1\n3  3  2  2.0  3\n\nidxmax():\n A    1\nB    2\nC    0\nD    3\ndtype: int64\n\nidxmax(skipna&#x3D;False):\n A    1.0\nB    2.0\nC    NaN\nD    3.0\ndtype: float64\n\nidxmin():\n A    0\nB    0\nC    2\nD    0\ndtype: int64</code></pre>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        在机器学习或者统计学中，只要你是和数据打交道，就少不了先观察和了解数据。用 Pandas 的这些功能，可以帮你快速了解数据的全貌， 也可以对其中的数据缺失做一些处理。</p>\n<h2 id=\"绘制图表\"><a href=\"#绘制图表\" class=\"headerlink\" title=\"绘制图表\"></a>绘制图表</h2><p>​        数据是服务于人的决策的，我们有一大堆数据，如果人没有真正意义上理解这些数据背后的含义，那即使数据量再大，它也是无意义的。所以我们今天来探讨一种让人与数据之间构建信息传递桥梁的方法-数据可视化技术。</p>\n<p>​        在 Pandas 中， 就已经可以实现多种多样的数据可视化方案了。</p>\n<p>​        我们来看看你拥有的数据可以被 Pandas 表达成什么样。</p>\n<h3 id=\"散点图Scatter\"><a href=\"#散点图Scatter\" class=\"headerlink\" title=\"散点图Scatter\"></a>散点图Scatter</h3><p>​        散点图实际在很多生活场景上都有运用的。比如你要描绘数据 sample 之间与拟合曲线之间呈现的关系：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220608204129.png\"></p>\n<p>​        又或者在演示算法是如何进化 ，如何运动的。</p>\n<p><img src=\"http://cdn.leafii.top/img/20220608204205.png\"></p>\n<p>​        这些都是我之前做过的散点图案例，所以适用场景还是非常多的。在 Pandas 中，我们有非常方便的办法来直接对 DataFrame 做散点图。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt <span class=\"token comment\">#一定要加上</span>\nn <span class=\"token operator\">=</span> <span class=\"token number\">1024</span> \t\t\t<span class=\"token comment\"># data size</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\ncolor <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arctan2<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>x<span class=\"token operator\">=</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span>color<span class=\"token punctuation\">,</span> s<span class=\"token operator\">=</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span><span class=\"token string\">\"rainbow\"</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        点击运行之后，你会发现可以做出来一幅非常好看的图。当然这里的参数你可以随意搭配，比如试试不写 <code>c=color</code> 或者去掉 <code>cmap=&quot;rainbow&quot;</code>， 看看会有何影响。</p>\n<p>​        我稍微解释一下几个你可能在乎的参数：</p>\n<ul>\n<li>c: 对于这组数据中每个（x,y）数据点的颜色值</li>\n<li>s: 画点的大小（size）</li>\n<li>alpha：不透明度</li>\n<li>cmap：colormap，你可以在<a href=\"https://matplotlib.org/stable/tutorials/colors/colormaps.html\">这里</a>找到非常丰富的案例</li>\n</ul>\n<h3 id=\"折线图-plot\"><a href=\"#折线图-plot\" class=\"headerlink\" title=\"折线图 plot\"></a>折线图 plot</h3><p>​        同样在这个拟合关系的图中， 我们其实还绘制了一张折线图。可见，折线图也是非常有用的。</p>\n<p><img src=\"http://cdn.leafii.top/img/20220608210450.png\"></p>\n<p>​        同样，还有很多机器学习的loss变化曲线案例都是用折线图绘制出来的。而在Pandas中，折线图的绘制方法很简单。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">n <span class=\"token operator\">=</span> <span class=\"token number\">20</span>    <span class=\"token comment\"># data size</span>\nx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\ny <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.4</span> <span class=\"token operator\">+</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">:</span> y<span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>x<span class=\"token operator\">=</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>![](<a href=\"http://cdn.leafii.top/img/Screen\">http://cdn.leafii.top/img/Screen</a> Shot 2022-06-08 at 21.07.19.png)</p>\n<p>​        我用最朴素的方法，绘制了一条歪歪扭扭的折线图，来体现它真的很折。你可能很感兴趣，为什么这里的 <code>c</code> 参数传入的数值和上面散点图的不一样？ 原来在折线图中，线的颜色最好是一样的，不然当线多了以后，你会发现不同颜色就看不出到底是那条线了。</p>\n<p>​        碰到多条线的时候，怎么处理:</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">n <span class=\"token operator\">=</span> <span class=\"token number\">20</span> <span class=\"token comment\"># data size</span>\nx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\ny1 <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\ny2 <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.4</span> <span class=\"token operator\">+</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">:</span>x<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"y1\"</span><span class=\"token punctuation\">:</span> y1<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"y2\"</span><span class=\"token punctuation\">:</span> y2<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>x<span class=\"token operator\">=</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"y1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"y2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p><img src=\"http://cdn.leafii.top/img/Figure_1.png\"></p>\n<p>​        只要我给多个 <code>y</code>，它就能给出多条线的位置，当然还帮你注明哪个颜色是哪条线。</p>\n<h3 id=\"条形图-bar\"><a href=\"#条形图-bar\" class=\"headerlink\" title=\"条形图 bar\"></a>条形图 bar</h3><p>​        做两家公司收入对比，或者是年度值变化的时候，我们也很喜欢用条形图。直接点，我们看看 Pandas 的条形图怎么画。 假设有 abd 四家公司，这 5 年的营收对比可以这么画。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p><img src=\"http://cdn.leafii.top/img/Figure_2.png\"></p>\n<p>​        如果把他们放在一起来看占比多少时，我们还能这么干：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span>stacked<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p><img src=\"http://cdn.leafii.top/img/Figure_3.png\"></p>\n<p>​        横着不好看，想画一个竖着的图，Pandas 也能轻松做到。你只需要把 <code>bar()</code> 换成 <code>barh()</code> 就好。多出来的这个 h 就是 horizontal 的意思。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>barh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p><img src=\"http://cdn.leafii.top/img/Figure_4.png\"></p>\n<h3 id=\"分布图-histograms\"><a href=\"#分布图-histograms\" class=\"headerlink\" title=\"分布图 histograms\"></a>分布图 histograms</h3><p>​        分布图在机器学习和统计学中非常重要，我经常画分布图，比如要画神经网络的参数分布可视化。又或者是GAN生成对抗网络中的数据分布。</p>\n<p><img src=\"http://cdn.leafii.top/img/20220608215327.png\"></p>\n<p>​        我们用<code>plot.hist()</code>就能画出来了，这里的hist是histogram，也就是分布的意思。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        当然还会有多个分布重合在一起，你想对比这看看这些分布有无差别的时候，重合度怎么样的时候。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>alpha<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> bins<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        为了使你能轻松辨析出 abc 这几个分布的不同，我把 <code>alpha</code> 不透明度调整了一下，让你能看清楚重叠部分。而且 <code>bins</code> 柱状体的数量也调多了。</p>\n<h3 id=\"饼图-Pie\"><a href=\"#饼图-Pie\" class=\"headerlink\" title=\"饼图 Pie\"></a>饼图 Pie</h3><p>​        当你想给 Excel 批量话饼图的时候， 你就能结合读取 Excel 的教学，和这一节一起用。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"boss\"</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\nindex<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"meeting\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"supervise\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"teaching\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"team building\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>pie<span class=\"token punctuation\">(</span>y<span class=\"token operator\">=</span><span class=\"token string\">\"boss\"</span><span class=\"token punctuation\">,</span> figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p><img src=\"http://cdn.leafii.top/img/Figure_5.png\"></p>\n<p>​        如果你有多张大饼，想要对比？当然也没问题。可以多加一个 <code>subpots</code> 来分开画饼。<code>legend</code> 是用来确定要不要输出图例的，我这里嫌弃图例占地方， 就设置 <code>legend=False</code>。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"bigBoss\"</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"smallBoss\"</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"meeting\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"supervise\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"teaching\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"team building\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>pie<span class=\"token punctuation\">(</span>subplots<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> legend<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p><img src=\"http://cdn.leafii.top/img/Figure_6.png\"></p>\n<h3 id=\"面积图-area\"><a href=\"#面积图-area\" class=\"headerlink\" title=\"面积图 area\"></a>面积图 area</h3><p>​        面积图偶尔你还是会看见的，比如在我的 <a href=\"https://mofanpy.com/tutorials/machine-learning/evolutionary-algorithm/neat-supervised-learning/\">进化算法教学中</a>， 就使用了面积图来观看各个种群的占比随时间的变化情况。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>\n    np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        如果你不想上下堆砌在一起观看，而是有统一的一个起点，那可以用这个参数 <code>stacked=False</code>。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">(</span>stacked<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></code></pre>\n\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        好了，这节内容也还挺多的，我就先讲到这里。用 Pandas 画图还可以有很多其他花样， 你可以在这里看到更加细节的<a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html\">官方文档</a>。 每种画图功能里面，也还有更多参数可以调整。记得不懂就要多在网上搜搜，多看官方文档。</p>","categories":[],"tags":[{"name":"python","path":"api/tags/python.json"},{"name":"机器学习基础","path":"api/tags/机器学习基础.json"}]}