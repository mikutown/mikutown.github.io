{"title":"Git与Gitee环境配置","slug":"Git与Gitee环境配置","date":"2020-03-30T15:22:51.000Z","updated":"2021-01-02T18:58:10.000Z","comments":true,"path":"api/articles/Git与Gitee环境配置.json","excerpt":"配置git与gitee连接1.下载&amp;安装git[Git官网](Git (git-scm.com))按照自己的操作系统进行下载安装，如Windows就下载Windows版本的安装包，下载速度慢的话可以用bitcomit或者迅雷进行下载，速度海星=-=","covers":["https://gitee.com/mikutown/pic/raw/master/img/20201231022924.png"],"content":"<h2 id=\"配置git与gitee连接\"><a href=\"#配置git与gitee连接\" class=\"headerlink\" title=\"配置git与gitee连接\"></a>配置git与gitee连接</h2><h3 id=\"1-下载-amp-安装git\"><a href=\"#1-下载-amp-安装git\" class=\"headerlink\" title=\"1.下载&amp;安装git\"></a>1.下载&amp;安装git</h3><p>[Git官网](<a href=\"https://git-scm.com/\">Git (git-scm.com)</a>)</p>\n<p>按照自己的操作系统进行下载安装，如Windows就下载Windows版本的安装包，下载速度慢的话可以用bitcomit或者迅雷进行下载，速度海星=-=</p>\n<a id=\"more\"></a>\n\n<p>双击安装包，将安装包安装在自己定义的路径（最好别有中文），新手的话定义完自定义就一直next就可以了吧……（gitee官方教程原文：请注意，如果你不熟悉每个选项的意思，请保持默认的选项）</p>\n<p>安装完毕后 （如果以上一切正常，打开终端(Window下请打开安装git时一并安装的bash) 输入 git –version <strong>应该会显示如下类似的信息</strong>）</p>\n<pre class=\"language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">git version 2.5.0</code></pre>\n<h3 id=\"2-配置git默认参数\"><a href=\"#2-配置git默认参数\" class=\"headerlink\" title=\"2.配置git默认参数\"></a>2.配置git默认参数</h3><p>( 在 Windows 系统上，Git 会找寻用户主目录下的 .gitconfig 文件。主目录即 $HOME 变量指定的目录，一般都是 <code>C:\\Documents and Settings\\$USER</code>。此外，Git 还会尝试找寻 /etc/gitconfig 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。)</p>\n<p>使用以上代码进行用户名和邮箱的配置</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"John Doe\"</span>\n$ <span class=\"token function\">git</span> config --global user.email johndoe@example.com</code></pre>\n<p>使用以下命令使客户端记住密码以便使用https进行仓库的推拉</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config --global credential.helper store</code></pre>\n<p>可以使用git config –list命令对当前已有的配置信息进行检查</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config --list\nuser.name<span class=\"token operator\">=</span>Scott Chacon\nuser.email<span class=\"token operator\">=</span>schacon@gmail.com\ncolor.status<span class=\"token operator\">=</span>auto\ncolor.branch<span class=\"token operator\">=</span>auto\ncolor.interactive<span class=\"token operator\">=</span>auto\ncolor.diff<span class=\"token operator\">=</span>auto\n<span class=\"token punctuation\">..</span>.</code></pre>\n<h3 id=\"3-配置ssh公钥（SSHKey）\"><a href=\"#3-配置ssh公钥（SSHKey）\" class=\"headerlink\" title=\"3.配置ssh公钥（SSHKey）\"></a>3.配置ssh公钥（SSHKey）</h3><p>使用以下代码创建一个sshkey：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-keygen -t rsa -C <span class=\"token string\">\"youremail@youremail.com\"</span>  \n\n<span class=\"token comment\"># Generating public/private rsa key pair...</span>\n<span class=\"token comment\"># 三次回车即可生成 ssh key</span></code></pre>\n<p>创建成功后使用cat命令查看公钥（public key)</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> ~/.ssh/id_rsa.pub</code></pre>\n<p>将显示的内容添加到gitee的公钥页面中：</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20201231022924.png\" alt=\"image-20201231022917205\" loading=\"lazy\"></p>\n<p>添加后，测试一下是否添加成功:</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#Gitee</span>\n$ <span class=\"token function\">ssh</span> -T git@gitee.com\n\n<span class=\"token comment\">#GitHub</span>\n$ <span class=\"token function\">ssh</span> -T git@github.com</code></pre>\n<p>第一次会询问你是否进行contiune，记得输入yes！</p>\n<p>成功后的一般是这样</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#Gitee</span>\nWelcome to Gitee.com, YourName<span class=\"token operator\">!</span>\n\n<span class=\"token comment\">#GitHub</span>\nYou've successfully authenticated, but GitHub does not provide shell access.</code></pre>\n<h2 id=\"Git常用操作\"><a href=\"#Git常用操作\" class=\"headerlink\" title=\"Git常用操作\"></a>Git常用操作</h2><h3 id=\"在工作目录中初始化新仓库\"><a href=\"#在工作目录中初始化新仓库\" class=\"headerlink\" title=\"在工作目录中初始化新仓库\"></a>在工作目录中初始化新仓库</h3><p>要对现有的某个项目开始用 Git 管理，只需到此项目所在的目录，执行：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> init</code></pre>\n<p>初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件。（在第九章我们会详细说明刚才创建的 .git 目录中究竟有哪些文件，以及都起些什么作用。）</p>\n<p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> *.c\n$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> README\n$ <span class=\"token function\">git</span> commit -m <span class=\"token string\">'initial project version'</span></code></pre>\n<p>稍后我们再逐一解释每条命令的意思。不过现在，你已经得到了一个实际维护着若干文件的 Git 仓库。</p>\n<h3 id=\"从现有仓库克隆\"><a href=\"#从现有仓库克隆\" class=\"headerlink\" title=\"从现有仓库克隆\"></a>从现有仓库克隆</h3><p>克隆仓库的命令格式为 <strong><code>git clone [url]</code></strong> 。比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone git@gitee.com:oschina/git-osc.git</code></pre>\n<p>这会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录，然后从中取出最新版本的文件拷贝。如果进入这个新建的 grit 目录，你会看到仓库中的所有文件已经在里边了，准备好后续的开发和使用。如果希望在克隆的时候，自己定义要新建的仓库目录名称，可以在上面的命令末尾指定新的名字：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone git@gitee.com:oschina/git-osc.git mygrit</code></pre>\n<p>唯一的差别就是，现在新建的目录成了 mygrit，其他的都和上边的一样。</p>\n<h3 id=\"其他常用基础操作\"><a href=\"#其他常用基础操作\" class=\"headerlink\" title=\"其他常用基础操作\"></a>其他常用基础操作</h3><p><a href=\"https://gitee.com/help/articles/4114#article-header0\">Git 仓库基础操作</a></p>\n<hr>\n<p>引用：</p>\n<p><a href=\"https://www.cnblogs.com/yiven/p/8465054.html\">入门级 - 码云（Gitee），GitHub 教程 - Yiven</a></p>\n<p>[Git 知识大全 - Gitee.com](</p>\n","more":"<p>双击安装包，将安装包安装在自己定义的路径（最好别有中文），新手的话定义完自定义就一直next就可以了吧……（gitee官方教程原文：请注意，如果你不熟悉每个选项的意思，请保持默认的选项）</p>\n<p>安装完毕后 （如果以上一切正常，打开终端(Window下请打开安装git时一并安装的bash) 输入 git –version <strong>应该会显示如下类似的信息</strong>）</p>\n<pre class=\"language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">git version 2.5.0</code></pre>\n<h3 id=\"2-配置git默认参数\"><a href=\"#2-配置git默认参数\" class=\"headerlink\" title=\"2.配置git默认参数\"></a>2.配置git默认参数</h3><p>( 在 Windows 系统上，Git 会找寻用户主目录下的 .gitconfig 文件。主目录即 $HOME 变量指定的目录，一般都是 <code>C:\\Documents and Settings\\$USER</code>。此外，Git 还会尝试找寻 /etc/gitconfig 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。)</p>\n<p>使用以上代码进行用户名和邮箱的配置</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"John Doe\"</span>\n$ <span class=\"token function\">git</span> config --global user.email johndoe@example.com</code></pre>\n<p>使用以下命令使客户端记住密码以便使用https进行仓库的推拉</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config --global credential.helper store</code></pre>\n<p>可以使用git config –list命令对当前已有的配置信息进行检查</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config --list\nuser.name<span class=\"token operator\">=</span>Scott Chacon\nuser.email<span class=\"token operator\">=</span>schacon@gmail.com\ncolor.status<span class=\"token operator\">=</span>auto\ncolor.branch<span class=\"token operator\">=</span>auto\ncolor.interactive<span class=\"token operator\">=</span>auto\ncolor.diff<span class=\"token operator\">=</span>auto\n<span class=\"token punctuation\">..</span>.</code></pre>\n<h3 id=\"3-配置ssh公钥（SSHKey）\"><a href=\"#3-配置ssh公钥（SSHKey）\" class=\"headerlink\" title=\"3.配置ssh公钥（SSHKey）\"></a>3.配置ssh公钥（SSHKey）</h3><p>使用以下代码创建一个sshkey：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ ssh-keygen -t rsa -C <span class=\"token string\">\"youremail@youremail.com\"</span>  \n\n<span class=\"token comment\"># Generating public/private rsa key pair...</span>\n<span class=\"token comment\"># 三次回车即可生成 ssh key</span></code></pre>\n<p>创建成功后使用cat命令查看公钥（public key)</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> ~/.ssh/id_rsa.pub</code></pre>\n<p>将显示的内容添加到gitee的公钥页面中：</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20201231022924.png\" alt=\"image-20201231022917205\"></p>\n<p>添加后，测试一下是否添加成功:</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#Gitee</span>\n$ <span class=\"token function\">ssh</span> -T git@gitee.com\n\n<span class=\"token comment\">#GitHub</span>\n$ <span class=\"token function\">ssh</span> -T git@github.com</code></pre>\n<p>第一次会询问你是否进行contiune，记得输入yes！</p>\n<p>成功后的一般是这样</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#Gitee</span>\nWelcome to Gitee.com, YourName<span class=\"token operator\">!</span>\n\n<span class=\"token comment\">#GitHub</span>\nYou've successfully authenticated, but GitHub does not provide shell access.</code></pre>\n<h2 id=\"Git常用操作\"><a href=\"#Git常用操作\" class=\"headerlink\" title=\"Git常用操作\"></a>Git常用操作</h2><h3 id=\"在工作目录中初始化新仓库\"><a href=\"#在工作目录中初始化新仓库\" class=\"headerlink\" title=\"在工作目录中初始化新仓库\"></a>在工作目录中初始化新仓库</h3><p>要对现有的某个项目开始用 Git 管理，只需到此项目所在的目录，执行：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> init</code></pre>\n<p>初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件。（在第九章我们会详细说明刚才创建的 .git 目录中究竟有哪些文件，以及都起些什么作用。）</p>\n<p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> *.c\n$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> README\n$ <span class=\"token function\">git</span> commit -m <span class=\"token string\">'initial project version'</span></code></pre>\n<p>稍后我们再逐一解释每条命令的意思。不过现在，你已经得到了一个实际维护着若干文件的 Git 仓库。</p>\n<h3 id=\"从现有仓库克隆\"><a href=\"#从现有仓库克隆\" class=\"headerlink\" title=\"从现有仓库克隆\"></a>从现有仓库克隆</h3><p>克隆仓库的命令格式为 <strong><code>git clone [url]</code></strong> 。比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone git@gitee.com:oschina/git-osc.git</code></pre>\n<p>这会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录，然后从中取出最新版本的文件拷贝。如果进入这个新建的 grit 目录，你会看到仓库中的所有文件已经在里边了，准备好后续的开发和使用。如果希望在克隆的时候，自己定义要新建的仓库目录名称，可以在上面的命令末尾指定新的名字：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone git@gitee.com:oschina/git-osc.git mygrit</code></pre>\n<p>唯一的差别就是，现在新建的目录成了 mygrit，其他的都和上边的一样。</p>\n<h3 id=\"其他常用基础操作\"><a href=\"#其他常用基础操作\" class=\"headerlink\" title=\"其他常用基础操作\"></a>其他常用基础操作</h3><p><a href=\"https://gitee.com/help/articles/4114#article-header0\">Git 仓库基础操作</a></p>\n<hr>\n<p>引用：</p>\n<p><a href=\"https://www.cnblogs.com/yiven/p/8465054.html\">入门级 - 码云（Gitee），GitHub 教程 - Yiven</a></p>\n<p>[Git 知识大全 - Gitee.com](</p>","categories":[],"tags":[{"name":"Git","path":"api/tags/Git.json"}]}