{"title":"Java类与对象，Scanner以及编码体系","slug":"Java类与对象，Scanner以及编码体系","date":"2020-04-01T15:00:29.000Z","updated":"2021-01-02T19:00:48.000Z","comments":true,"path":"api/articles/Java类与对象，Scanner以及编码体系.json","excerpt":"Java类与对象，Scanner，编码体系类与对象java中有两个地方具有默认初始化，数组，类的成员变量java中以包作为默认管理级别，那默认情况下同一个包中都可以访问","covers":["https://gitee.com/mikutown/pic/raw/master/img/20200401225912.png"],"content":"<h1 id=\"Java类与对象，Scanner，编码体系\"><a href=\"#Java类与对象，Scanner，编码体系\" class=\"headerlink\" title=\"Java类与对象，Scanner，编码体系\"></a>Java类与对象，Scanner，编码体系</h1><h2 id=\"类与对象\"><a href=\"#类与对象\" class=\"headerlink\" title=\"类与对象\"></a>类与对象</h2><ol>\n<li>java中有两个地方具有默认初始化，数组，类的成员变量</li>\n<li>java中以包作为默认管理级别，那默认情况下同一个包中都可以访问<span id=\"more\"></span></li>\n<li>public private default辨析：</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>访问权限</th>\n<th>本类</th>\n<th>本包的类</th>\n<th>子类</th>\n<th>非子类的外包类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n<td>否</td>\n</tr>\n<tr>\n<td>default</td>\n<td>是</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n</tr>\n<tr>\n<td>private</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n<td>否</td>\n</tr>\n</tbody></table>\n<p>1、public： 所修饰的类、变量、方法，在内外包均具有访问权限；<br>2、protected： 这种权限是为继承而设计的，protected所修饰的成员，对所有子类是可访问的，但只对同包的类是可访问的，对外包的非子类是不可以访问；<br>3、包访问权限（default）： 只对同包的类具有访问的权限，外包的所有类都不能访问；<br>4、private： 私有的权限，只对本类的方法可以使用；</p>\n<hr>\n<p>构造方法：<br>1).构造方法的定义</p>\n<p>它具有与类相同的名称；</p>\n<p>它不含返回值；</p>\n<p>注意：在构造方法里不含返回值的概念是不同于“void”的，在定义构造方法时加了“void”，结果这个方法就不再被自动调了。</p>\n<p>2).构造方法的作用</p>\n<p>当一个类的实例对象刚产生时，这个类的构造方法就会被自动调用，我们可以在这个方法中加入要完成初始化工作的代码。这就好像我们规定每个“人”一出生就必须先洗澡，</p>\n<p>我们就可以在“人”的构造方法中加入完成“洗澡”的程序代码，于是每个“人”一出生就会自动完成“洗澡”，程序就不必再在每个人刚出生时一个一个地告诉他们要“洗澡”了。</p>\n<p>语法格式：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&lt;</span> 修饰符<span class=\"token operator\">></span>  <span class=\"token operator\">&lt;</span>类名<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span> 参数表<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n     <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span> 语句<span class=\"token operator\">></span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> legs<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  legs <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>    <span class=\"token comment\">//构造器</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLegs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  legs <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getLegs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> legs<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//创建Animal类的实例：Animal  a=new Animal(); //调用构造器，将legs初始化为4.</span></code></pre>\n\n<p>3).默认的构造方法</p>\n<p>Java语言中，每个类都至少有一个构造方法；</p>\n<p>如果类的定义者没有显式的定义任何构造方法，系统将自动提供一个默认的构造方法：</p>\n<p>–默认构造方法没有参数</p>\n<p>–默认构造方法没有方法体</p>\n<p>–默认的构造方法：Animal(){ }</p>\n<p> 所以：不编写构造方法就能用new Xxx()创建类的实例。</p>\n<p>Java类中，一旦类的定义者显式定义了一个或多个构造方法，系统将不再提供默认的构造方法；</p>\n<p>4).构造方法重载</p>\n<p>构造方法重载使得对象的创建更加灵活，方便创建各种不同的对象。</p>\n<p>构造方法重载举例：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Date</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>…<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Date</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>…<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>…<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><strong>构造方法重载，参数列表必须不同</strong></p>\n<h3 id=\"类的封装\"><a href=\"#类的封装\" class=\"headerlink\" title=\"类的封装\"></a>类的封装</h3><ol>\n<li>对于新建的类 要封装他 需要在类中的变量的权限改为private 然后对其添加get和set方法</li>\n<li>在写get和set方法时，方法中的参数要顾名思义，不能随便乱写</li>\n<li>bool类型的getter不能用setXXX()，而是要用isXXX()。bool类型取名尽量不要添加is作为开头，因为generator会自动将bool类型的变量的方法命名为isXXX()，容易撞名字。</li>\n<li>对于除了bool类型之外的其他类型，第二个字母最好不要大写。原因同上。</li>\n</ol>\n<h3 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ol>\n<li>构造方法分为无参构造，有参构造，全参构造</li>\n<li>实例化类的时候，就会进行构造方法的调用。</li>\n<li>构造方法是不能写返回值的</li>\n<li>类的构造方法，默认是无参构造，当类中未声明任何构造方法时，才会具备默认的无参构造。</li>\n<li>this关键字<ol>\n<li>引用当前对象</li>\n<li>本类中调用构造方法</li>\n</ol>\n</li>\n<li>普通方法，也叫实例方法，它的执行必须依赖对象。</li>\n<li>可以通过构造方法创建对象，通过关键字new来调用构造方法。</li>\n<li>可以多多使用.var这个小技巧 实例化时会更方便。</li>\n<li>直接用new 例：</li>\n</ol>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<pre><code>这是一个匿名对象。不持有对方的引用。\n</code></pre>\n<ol start=\"10\">\n<li>构造方法的方法名固定，与类名一致。</li>\n<li>构造方法，不能声明返回值，但是它的本质上是有返回值的，返回类的对象的实例</li>\n<li>任何类都必须具有构造方法。当代码中未声明任何构造方法，则有一个著名的默认无参构造，是public级别的。</li>\n<li>编写类的时候不要吝啬this关键字的使用</li>\n<li>构造方法之间的调用：<ol>\n<li>通过this()来调用本类的构造方法，必须放置首行，而且只能有一个（因为如果有多个，就是相当于实例化了多个类的实例）</li>\n<li>调用有参构造，只能调用一次，只要调用一次就会产生一个新的对象。</li>\n<li>构造方法的调用，类内用this()；，类外用new。<br><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20200401225912.png\" alt=\"image.png\" loading=\"lazy\"></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"方法的重载\"><a href=\"#方法的重载\" class=\"headerlink\" title=\"方法的重载\"></a>方法的重载</h3><ol>\n<li>一个类中的不一样的方法，恰好方法名相同，签名不同。</li>\n<li>方法签名： 就是方法名和方法的参数列表。java不允许有相同的方法签名出现。<br>example:</li>\n</ol>\n <pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">sout</span><span class=\"token punctuation\">(</span>\"<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">sout</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"静态\"><a href=\"#静态\" class=\"headerlink\" title=\"静态\"></a>静态</h3><ol>\n<li>若要直接在类中调用方法，可以给方法添加static关键字，使其变为静态方法，就可以进行直接调用了，不用实例化再调用。</li>\n<li>静态方法与类行管，它的执行只需要类名，不需要对象。</li>\n<li>不加static就是实例方法 实例方法的执行依赖对象。</li>\n<li>就算是初始化为空的类也可以使用静态方法。即null在代码上可以调用静态方法</li>\n<li>比如就算使用了dog.fn1()；，编译之后还是会编译成Dog.fn1()；fn1是Dog中的静态方法</li>\n<li>静态方法和实例方法之间的调用关系：静态方法不允许调用实例方法，反之可以。</li>\n<li>static和this关键字水火不容 因为this代表当前对象</li>\n</ol>\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><ol>\n<li>初始化对象时，先执行静态代码块，再执行实例代码块，最后执行构造方法。</li>\n<li>代码块：<ol>\n<li>静态代码块：类加载的时候就执行，执行一次。<ol>\n<li>什么时候才会类加载？<ol>\n<li>使用new方法实例化对象时</li>\n<li>使用Class.forName(“类名”)时</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>实例代码块：每创建一个实例执行一次</li>\n<li>代码块的执行都在构造方法之前<br>example:</li>\n</ol>\n</li>\n</ol>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Demo</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"实例代码块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//实例代码块： 创建对象才被调用，每创建一个对象执行一次！</span>\n\n\n    <span class=\"token keyword\">static</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态代码块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 静态代码块：类加载的时候被调用，只调用一次。</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//实例方法：它的执行必须依赖对象</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"说话\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sayStatic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//静态方法：它的执行不必依赖对象</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"说话静态方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"实例方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//实例方法允许调用静态方法</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//fn1(); 这样就不ok</span>\n        <span class=\"token comment\">//这样相当于 this.fn1();</span>\n        <span class=\"token comment\">//static 和 this 是水火不容的</span>\n        <span class=\"token comment\">//静态方法不能调用实例方法</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n\n<p>?</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">DemoTest</span><span class=\"token punctuation\">.</span>java\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Demo</span> demo1<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Demo</span> demo2<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//先执行静态代码块，再执行实例代码块，再执行构造方法</span>\n        <span class=\"token class-name\">Demo</span> demo3<span class=\"token punctuation\">;</span><span class=\"token comment\">//代码块不执行</span>\n        <span class=\"token class-name\">Demo</span> demo4 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//代码块不执行</span>\n        <span class=\"token comment\">//在下列情况 才会执行代码块</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.yys.Demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//限定名，全程 有包有类名</span>\n\n        <span class=\"token class-name\">Class</span> c1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//限定名</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//类名</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Demo</span> demo <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        demo<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">.</span><span class=\"token function\">sayStatic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        demo<span class=\"token punctuation\">.</span><span class=\"token function\">sayStatic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//一样的 编译后都是Demo.sayStatic();</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<hr>\n<h3 id=\"类的继承，抽象及接口\"><a href=\"#类的继承，抽象及接口\" class=\"headerlink\" title=\"类的继承，抽象及接口\"></a>类的继承，抽象及接口</h3><ol>\n<li>继承的目的:为了扩展<ol>\n<li>向上抽象</li>\n<li>向下具化</li>\n</ol>\n</li>\n<li>例子</li>\n</ol>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//Student是子类，继承了父类Person</span></code></pre>\n\n<ol start=\"3\">\n<li>子类中对父类哪些东西是可见的<br>protected修饰的方法<br>protected修饰的方法或变量在子类中（内部）可以访问。相当于 子类+同包，<br><strong>对象与protected无关！</strong></li>\n<li>子类中写的方法可以用@Override进行检测 检测该方法是不是冲写的，父类是不是有这个方法</li>\n<li>方法的重写：<ol>\n<li>方法修饰符不能低于原来 </li>\n<li>如果父类的方法是void，重写的方法必须是void</li>\n<li>如果父类的方法有返回值，重写的方法不能比父类中原方法的返回类型更抽象（）</li>\n<li>抛异常不能比原来更抽象</li>\n</ol>\n</li>\n<li>super作用<ol>\n<li>在子类中访问父类对象</li>\n<li>如果不存在方法的重写，this.调用父类的方法      </li>\n<li>调用父类构造方法</li>\n</ol>\n</li>\n</ol>\n<p>尽量保留默认的无参数构造 不然的话继承时很麻烦 会报错 因为子类构造方法的参数只能比父类的参数更多</p>\n<hr>\n<h3 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h3><p>1).继承的概述<br>多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可。</p>\n<p>2).继承格式<br>通过extends关键字可以实现类与类的继承<br>class &lt;子类名&gt; extends &lt;父类名&gt; {方法体}<br>单独的这个类称为父类，基类或者超类；这多个类可以称为子类或者派生类。<br>子类只能继承父类所有非私有的成员(成员方法和成员变量),子类不能继承父类的构造方法，但是可以通过super关键字去访问父类构造方法。<br>3).继承的效果<br>扩展功能<br>提高代码复用率<br>让类与类之间产生了关系，是多态的前提<br>增强了类的耦合性<br>4).继承的特点<br>Java只支持单继承，不支持多继承;<br>Java支持多层继承(继承体系).<br>5).super关键字<br>调用父类构造方法<br>调用父类成员方法<br>调用父类成员变量<br>6).使用继承注意事项<br>子类中所有的构造方法默认都会访问父类中空参数的构造方法。<br>子类中要使用父类成员变量, 因为子类会继承父类中的数据，可能还会使用父类的数据。所以，子类初始化之前，一定要先完成父类数据的初始化。<br>如果父类没有无参构造方法,子类怎么办?<br>在父类中添加一个无参的构造方法<br>子类通过super去显示调用父类其他的带参的构造方法<br>子类通过this去调用本类的其他构造方法,本类其他构造也必须首先访问了父类构造<br>子类中的成员变量和父类中的成员变量名称一样时,在子类中访问一个变量的查找顺序是怎样的?<br>在子类的方法的局部范围找,有就使用<br>在子类的成员范围找,有就使用<br>在父类的成员范围找,有就使用<br>如果还找不到,就报错</p>\n<hr>\n<h3 id=\"方法的重写\"><a href=\"#方法的重写\" class=\"headerlink\" title=\"方法的重写\"></a>方法的重写</h3><p>1).什么是方法重写?<br>子类中出现了和父类中一模一样的方法声明(方法名,参数列表,返回值类型)，也被称为方法覆盖，方法复写。</p>\n<p>2).方法重写(Override)和方法重载(Overload)的区别?<br>Override是覆盖的意思，也就是重写，它与返回值类型无关，只看参数列表;</p>\n<p>Overload是重载的意思，表示在同一个类中，允许存在一个以上的同名函数，只要他们的参数个数或者参数类型不同即可;</p>\n<p>两者不同主要体现在：目的不同、范围不同、参数要求不同、返回类型不同。</p>\n<p>同:overload用于增加程序的可读性(做法不同,但是做的同一事情)。 override用于提供其超级类已经提供的方法的特定实现。<br>同:overload 在相同的类范围内内执行。 override发生在两类具有继承（继承）的关系。<br>参数要求不同:overload参数必须不同。 override参数必须相同。<br>返回类型不同:overload中可以相同或不同。 override必须是相同的或协变的。<br>3).方法重写的应用?<br>当子类需要父类的功能，但是父类功能不满足自身的时候,可以重写父类中的方法。</p>\n<p>4).方法重写的注意事项<br>父类中私有方法不能被重写。因为父类私有方法子类根本就无法继承；<br>子类重写父类方法时，访问权限不能更低。 最好就一致<br>子类重写父类方法时，如果父类方法带有异常,则子类异常范围必须一致或更小<br>子类重写父类方法的时候，最好声明一模一样</p>\n<h3 id=\"final关键字\"><a href=\"#final关键字\" class=\"headerlink\" title=\"final关键字\"></a>final关键字</h3><p>1).final修饰类被修饰类不能被继承.2).final修饰方法被修饰的方法不能被重写.3).final修饰变量①局部变量——基本类型基本类型的局部变量，被final修饰后，只能赋值一次，不能再更改。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FinalDemo1</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 声明变量，使用final修饰</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 第一次赋值</span>\n        a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 第二次赋值</span>\n        a <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错,不可重新赋值</span>\n        <span class=\"token comment\">// 声明变量，直接赋值，使用final修饰</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 第二次赋值</span>\n        b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错,不可重新赋值</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>② 局部变量——引用类型引用类型的局部变量，被final修饰后，只能指向一个对象，地址不能再更改。但是不影响对象内部的成员变量值的修改。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FinalDemo2</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 创建 User 对象</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">User</span> u <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建 另一个 User对象</span>\n        u <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错，指向了新的对象，地址值改变。</span>\n        <span class=\"token comment\">// 调用setName方法</span>\n        u<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可以修改</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>③成员变量成员变量涉及到初始化的问题，初始化方式有两种，只能二选一：显式初始化：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> USERNAME <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>构造方法初始化：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> USERNAME <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n \n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>USERNAME <span class=\"token operator\">=</span> username<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><strong>被final修饰的常量名称，一般都有书写规范，所有字母都大写，且用下划线式。</strong></p>\n<hr>\n<h3 id=\"对象创建过程\"><a href=\"#对象创建过程\" class=\"headerlink\" title=\"对象创建过程\"></a>对象创建过程</h3><ul>\n<li>创建创建父类对象（父类对象创建也是如此）</li>\n<li>加载类对象 : 静态代码块 </li>\n<li>默认初始化 成员变量 </li>\n<li>显式初始化成员变量 </li>\n<li>实例代码块</li>\n<li>构造方法</li>\n</ul>\n<p>如果想让继承的类构造它的父类的所有参数以及子类独有的参数：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>java\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"姓名:\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>java\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> score<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">exam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"考试得了：\"</span> <span class=\"token operator\">+</span> score <span class=\"token operator\">+</span> <span class=\"token string\">\"分\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">showMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"同学，\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><strong>在写子类的全参数构造方法时要先用super实例化父类。</strong></p>\n<h3 id=\"对象的创建过程\"><a href=\"#对象的创建过程\" class=\"headerlink\" title=\"对象的创建过程\"></a>对象的创建过程</h3><p>例子：创建一个工具类，一个MyObject对象，一个MyMy对象继承MyObject：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">MyUtils</span><span class=\"token punctuation\">.</span>java\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyUtils</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token keyword\">return</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">MyObject</span><span class=\"token punctuation\">.</span>java\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyObject</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">MyUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"实例代码块： MyObject\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">static</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态代码块： MyObject\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造方法： MyObject\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">MyMy</span><span class=\"token punctuation\">.</span>java\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyMy</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MyObject</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">MyUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"实例代码块： MyMy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">static</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态代码块： MyMy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyMy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造方法： MyMy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span>java\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyMy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>结果：<br>    静态代码块： MyObject<br>    静态代码块： MyMy<br>    实例代码块： MyObject<br>    构造方法： MyObject<br>    实例代码块： MyMy<br>    构造方法： MyMy</p>\n<p>即：</p>\n<ul>\n<li>创建父类对象（父类对象创建也是如此）</li>\n<li>加载类对象 : 静态代码块</li>\n<li>默认初始化 成员变量</li>\n<li>显式初始化成员变量</li>\n<li>实例代码块</li>\n<li>构造方法</li>\n</ul>\n<hr>\n<pre class=\"language-none\"><code class=\"language-none\">1. 什么叫做类与类的继承，作用是什么？\n    1）多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可。\n    2）作用：\n    扩展功能\n    提高代码复用率\n    让类与类之间产生了关系，是多态的前提\n    增强了类的耦合性\n2. 继承后，父类与子类之间，各成员有什么样的影响？\n调用子类，先进行父类的参数定义和构造器构造，再进行子类的参数定义和构造器构造；\n如果子类构造器中没有 super() 语句，或 super() 语句中不含参数；会去寻找父类当中不含参数的构造器；有参数时，寻找有对应参数的父类构造器；\n父类中的函数 protected 参数声明，尽量少用，可以通过父类构造函数使用父类中 private 参数；\n3. 子类中，如何调用父类的成员？如何使用本类的成员？\n    1）直接实例化父类的成员\n    2）如果继承了父类的成员函数（指没有新写覆盖），则直接写成员函数名+参数来调用。\n         如果没法继承（指的是父类的私有成员函数）则不能调用。\n         如果可以继承（父类的保护或公有成员函数），但覆盖了（比如同名重写或虚函数重写）则可用：“ 父类名::成员函数名（参数）； ” 来调用。\n4. 抽象方法与普通成员方法有什么区别？\n5. 抽象类与普通类有什么区别？\n何为抽象类？抽象类是从其他若干个具有相同属性与行为的类中进一步抽象出来的类，可以设计方法，属性，如果把类设计为抽象类，那么这个类是不能被实例化的，只能被继承的子类（子类也可以为抽象类，也可以不是）间接使用，抽象类有构造，是一个完整的类。\n抽象类不能使用new方法进行实例化，没有具体实例对象。抽象类有点类似“模板”的作用，目的是根据其格式来创建和修改新的类。对象不能由抽象类直接创建，只可以通过抽象类派生出新的子类，再由其子类来创建对象。当一个类被声明为抽象类时，要在这个类前面加上修饰符abstract。\n在抽象类中的成员方法可以包括一般方法和抽象方法。抽象方法就是以abstract修饰的方法，这种方法只声明返回的数据类型、方法名称和所需的参数，没有方法体，也就是说抽象方法只需要声明而不需要实现。当一个方法为抽象方法时，意味着这个方法必须被子类的方法所重写，否则其子类的该方法仍然是abstract的，而这个子类也必须是抽象的，即声明为abstract.</code></pre>\n\n<h2 id=\"编码体系\"><a href=\"#编码体系\" class=\"headerlink\" title=\"###编码体系\"></a>###编码体系</h2><p>所有编码无条件兼容ascii码<br>unicode码以\\u开头 以一个十六位的数字代替四个二进制数字，unicode可以显示所有语言<br>utf-8是unicode的一种表现形式</p>\n<h2 id=\"关于Scanner\"><a href=\"#关于Scanner\" class=\"headerlink\" title=\"关于Scanner\"></a>关于Scanner</h2><ol>\n<li>Scanner中的nextInt方法和nextDouble方法：如果使用nextInt方法，如果输入了double型的参数，会报错，但是反之不会 因为int和double的精度不同，java为了不让数据丢失 不会让double进入nextInt方法</li>\n<li>如果先写了nextline,后写nextInt，可以正常运行，但是先写了nextInt 后写了nextline 就不行了 因为nextline检测的是你的回车符，你写了int值之后敲回车 会默认也进行nextline方法，并将值赋值为空。<br>若要避免这种情况，可以将代码修改为：</li>\n</ol>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> ageStr <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token class-name\">Integar</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseint</span><span class=\"token punctuation\">(</span>ageStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sout</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<ol start=\"3\">\n<li>如果输入一串字符 只想得到它的第一个字母：</li>\n</ol>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<hr>\n","more":"</li>\n<li>public private default辨析：</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>访问权限</th>\n<th>本类</th>\n<th>本包的类</th>\n<th>子类</th>\n<th>非子类的外包类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n<td>否</td>\n</tr>\n<tr>\n<td>default</td>\n<td>是</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n</tr>\n<tr>\n<td>private</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n<td>否</td>\n</tr>\n</tbody></table>\n<p>1、public： 所修饰的类、变量、方法，在内外包均具有访问权限；<br>2、protected： 这种权限是为继承而设计的，protected所修饰的成员，对所有子类是可访问的，但只对同包的类是可访问的，对外包的非子类是不可以访问；<br>3、包访问权限（default）： 只对同包的类具有访问的权限，外包的所有类都不能访问；<br>4、private： 私有的权限，只对本类的方法可以使用；</p>\n<hr>\n<p>构造方法：<br>1).构造方法的定义</p>\n<p>它具有与类相同的名称；</p>\n<p>它不含返回值；</p>\n<p>注意：在构造方法里不含返回值的概念是不同于“void”的，在定义构造方法时加了“void”，结果这个方法就不再被自动调了。</p>\n<p>2).构造方法的作用</p>\n<p>当一个类的实例对象刚产生时，这个类的构造方法就会被自动调用，我们可以在这个方法中加入要完成初始化工作的代码。这就好像我们规定每个“人”一出生就必须先洗澡，</p>\n<p>我们就可以在“人”的构造方法中加入完成“洗澡”的程序代码，于是每个“人”一出生就会自动完成“洗澡”，程序就不必再在每个人刚出生时一个一个地告诉他们要“洗澡”了。</p>\n<p>语法格式：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&lt;</span> 修饰符<span class=\"token operator\">></span>  <span class=\"token operator\">&lt;</span>类名<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span> 参数表<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n     <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span> 语句<span class=\"token operator\">></span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> legs<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  legs <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>    <span class=\"token comment\">//构造器</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLegs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  legs <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getLegs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> legs<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//创建Animal类的实例：Animal  a=new Animal(); //调用构造器，将legs初始化为4.</span></code></pre>\n\n<p>3).默认的构造方法</p>\n<p>Java语言中，每个类都至少有一个构造方法；</p>\n<p>如果类的定义者没有显式的定义任何构造方法，系统将自动提供一个默认的构造方法：</p>\n<p>–默认构造方法没有参数</p>\n<p>–默认构造方法没有方法体</p>\n<p>–默认的构造方法：Animal(){ }</p>\n<p> 所以：不编写构造方法就能用new Xxx()创建类的实例。</p>\n<p>Java类中，一旦类的定义者显式定义了一个或多个构造方法，系统将不再提供默认的构造方法；</p>\n<p>4).构造方法重载</p>\n<p>构造方法重载使得对象的创建更加灵活，方便创建各种不同的对象。</p>\n<p>构造方法重载举例：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Date</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>…<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Date</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>…<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>…<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><strong>构造方法重载，参数列表必须不同</strong></p>\n<h3 id=\"类的封装\"><a href=\"#类的封装\" class=\"headerlink\" title=\"类的封装\"></a>类的封装</h3><ol>\n<li>对于新建的类 要封装他 需要在类中的变量的权限改为private 然后对其添加get和set方法</li>\n<li>在写get和set方法时，方法中的参数要顾名思义，不能随便乱写</li>\n<li>bool类型的getter不能用setXXX()，而是要用isXXX()。bool类型取名尽量不要添加is作为开头，因为generator会自动将bool类型的变量的方法命名为isXXX()，容易撞名字。</li>\n<li>对于除了bool类型之外的其他类型，第二个字母最好不要大写。原因同上。</li>\n</ol>\n<h3 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ol>\n<li>构造方法分为无参构造，有参构造，全参构造</li>\n<li>实例化类的时候，就会进行构造方法的调用。</li>\n<li>构造方法是不能写返回值的</li>\n<li>类的构造方法，默认是无参构造，当类中未声明任何构造方法时，才会具备默认的无参构造。</li>\n<li>this关键字<ol>\n<li>引用当前对象</li>\n<li>本类中调用构造方法</li>\n</ol>\n</li>\n<li>普通方法，也叫实例方法，它的执行必须依赖对象。</li>\n<li>可以通过构造方法创建对象，通过关键字new来调用构造方法。</li>\n<li>可以多多使用.var这个小技巧 实例化时会更方便。</li>\n<li>直接用new 例：</li>\n</ol>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<pre><code>这是一个匿名对象。不持有对方的引用。\n</code></pre>\n<ol start=\"10\">\n<li>构造方法的方法名固定，与类名一致。</li>\n<li>构造方法，不能声明返回值，但是它的本质上是有返回值的，返回类的对象的实例</li>\n<li>任何类都必须具有构造方法。当代码中未声明任何构造方法，则有一个著名的默认无参构造，是public级别的。</li>\n<li>编写类的时候不要吝啬this关键字的使用</li>\n<li>构造方法之间的调用：<ol>\n<li>通过this()来调用本类的构造方法，必须放置首行，而且只能有一个（因为如果有多个，就是相当于实例化了多个类的实例）</li>\n<li>调用有参构造，只能调用一次，只要调用一次就会产生一个新的对象。</li>\n<li>构造方法的调用，类内用this()；，类外用new。<br><img src=\"https://gitee.com/mikutown/pic/raw/master/img/20200401225912.png\" alt=\"image.png\"></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"方法的重载\"><a href=\"#方法的重载\" class=\"headerlink\" title=\"方法的重载\"></a>方法的重载</h3><ol>\n<li>一个类中的不一样的方法，恰好方法名相同，签名不同。</li>\n<li>方法签名： 就是方法名和方法的参数列表。java不允许有相同的方法签名出现。<br>example:</li>\n</ol>\n <pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">sout</span><span class=\"token punctuation\">(</span>\"<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">sout</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"静态\"><a href=\"#静态\" class=\"headerlink\" title=\"静态\"></a>静态</h3><ol>\n<li>若要直接在类中调用方法，可以给方法添加static关键字，使其变为静态方法，就可以进行直接调用了，不用实例化再调用。</li>\n<li>静态方法与类行管，它的执行只需要类名，不需要对象。</li>\n<li>不加static就是实例方法 实例方法的执行依赖对象。</li>\n<li>就算是初始化为空的类也可以使用静态方法。即null在代码上可以调用静态方法</li>\n<li>比如就算使用了dog.fn1()；，编译之后还是会编译成Dog.fn1()；fn1是Dog中的静态方法</li>\n<li>静态方法和实例方法之间的调用关系：静态方法不允许调用实例方法，反之可以。</li>\n<li>static和this关键字水火不容 因为this代表当前对象</li>\n</ol>\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><ol>\n<li>初始化对象时，先执行静态代码块，再执行实例代码块，最后执行构造方法。</li>\n<li>代码块：<ol>\n<li>静态代码块：类加载的时候就执行，执行一次。<ol>\n<li>什么时候才会类加载？<ol>\n<li>使用new方法实例化对象时</li>\n<li>使用Class.forName(“类名”)时</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>实例代码块：每创建一个实例执行一次</li>\n<li>代码块的执行都在构造方法之前<br>example:</li>\n</ol>\n</li>\n</ol>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Demo</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"实例代码块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//实例代码块： 创建对象才被调用，每创建一个对象执行一次！</span>\n\n\n    <span class=\"token keyword\">static</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态代码块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 静态代码块：类加载的时候被调用，只调用一次。</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//实例方法：它的执行必须依赖对象</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"说话\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sayStatic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//静态方法：它的执行不必依赖对象</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"说话静态方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"实例方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//实例方法允许调用静态方法</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//fn1(); 这样就不ok</span>\n        <span class=\"token comment\">//这样相当于 this.fn1();</span>\n        <span class=\"token comment\">//static 和 this 是水火不容的</span>\n        <span class=\"token comment\">//静态方法不能调用实例方法</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n\n<p>?</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">DemoTest</span><span class=\"token punctuation\">.</span>java\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Demo</span> demo1<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Demo</span> demo2<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//先执行静态代码块，再执行实例代码块，再执行构造方法</span>\n        <span class=\"token class-name\">Demo</span> demo3<span class=\"token punctuation\">;</span><span class=\"token comment\">//代码块不执行</span>\n        <span class=\"token class-name\">Demo</span> demo4 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//代码块不执行</span>\n        <span class=\"token comment\">//在下列情况 才会执行代码块</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.yys.Demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//限定名，全程 有包有类名</span>\n\n        <span class=\"token class-name\">Class</span> c1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//限定名</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//类名</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Demo</span> demo <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        demo<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">.</span><span class=\"token function\">sayStatic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        demo<span class=\"token punctuation\">.</span><span class=\"token function\">sayStatic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//一样的 编译后都是Demo.sayStatic();</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<hr>\n<h3 id=\"类的继承，抽象及接口\"><a href=\"#类的继承，抽象及接口\" class=\"headerlink\" title=\"类的继承，抽象及接口\"></a>类的继承，抽象及接口</h3><ol>\n<li>继承的目的:为了扩展<ol>\n<li>向上抽象</li>\n<li>向下具化</li>\n</ol>\n</li>\n<li>例子</li>\n</ol>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//Student是子类，继承了父类Person</span></code></pre>\n\n<ol start=\"3\">\n<li>子类中对父类哪些东西是可见的<br>protected修饰的方法<br>protected修饰的方法或变量在子类中（内部）可以访问。相当于 子类+同包，<br><strong>对象与protected无关！</strong></li>\n<li>子类中写的方法可以用@Override进行检测 检测该方法是不是冲写的，父类是不是有这个方法</li>\n<li>方法的重写：<ol>\n<li>方法修饰符不能低于原来 </li>\n<li>如果父类的方法是void，重写的方法必须是void</li>\n<li>如果父类的方法有返回值，重写的方法不能比父类中原方法的返回类型更抽象（）</li>\n<li>抛异常不能比原来更抽象</li>\n</ol>\n</li>\n<li>super作用<ol>\n<li>在子类中访问父类对象</li>\n<li>如果不存在方法的重写，this.调用父类的方法      </li>\n<li>调用父类构造方法</li>\n</ol>\n</li>\n</ol>\n<p>尽量保留默认的无参数构造 不然的话继承时很麻烦 会报错 因为子类构造方法的参数只能比父类的参数更多</p>\n<hr>\n<h3 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h3><p>1).继承的概述<br>多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可。</p>\n<p>2).继承格式<br>通过extends关键字可以实现类与类的继承<br>class &lt;子类名&gt; extends &lt;父类名&gt; {方法体}<br>单独的这个类称为父类，基类或者超类；这多个类可以称为子类或者派生类。<br>子类只能继承父类所有非私有的成员(成员方法和成员变量),子类不能继承父类的构造方法，但是可以通过super关键字去访问父类构造方法。<br>3).继承的效果<br>扩展功能<br>提高代码复用率<br>让类与类之间产生了关系，是多态的前提<br>增强了类的耦合性<br>4).继承的特点<br>Java只支持单继承，不支持多继承;<br>Java支持多层继承(继承体系).<br>5).super关键字<br>调用父类构造方法<br>调用父类成员方法<br>调用父类成员变量<br>6).使用继承注意事项<br>子类中所有的构造方法默认都会访问父类中空参数的构造方法。<br>子类中要使用父类成员变量, 因为子类会继承父类中的数据，可能还会使用父类的数据。所以，子类初始化之前，一定要先完成父类数据的初始化。<br>如果父类没有无参构造方法,子类怎么办?<br>在父类中添加一个无参的构造方法<br>子类通过super去显示调用父类其他的带参的构造方法<br>子类通过this去调用本类的其他构造方法,本类其他构造也必须首先访问了父类构造<br>子类中的成员变量和父类中的成员变量名称一样时,在子类中访问一个变量的查找顺序是怎样的?<br>在子类的方法的局部范围找,有就使用<br>在子类的成员范围找,有就使用<br>在父类的成员范围找,有就使用<br>如果还找不到,就报错</p>\n<hr>\n<h3 id=\"方法的重写\"><a href=\"#方法的重写\" class=\"headerlink\" title=\"方法的重写\"></a>方法的重写</h3><p>1).什么是方法重写?<br>子类中出现了和父类中一模一样的方法声明(方法名,参数列表,返回值类型)，也被称为方法覆盖，方法复写。</p>\n<p>2).方法重写(Override)和方法重载(Overload)的区别?<br>Override是覆盖的意思，也就是重写，它与返回值类型无关，只看参数列表;</p>\n<p>Overload是重载的意思，表示在同一个类中，允许存在一个以上的同名函数，只要他们的参数个数或者参数类型不同即可;</p>\n<p>两者不同主要体现在：目的不同、范围不同、参数要求不同、返回类型不同。</p>\n<p>同:overload用于增加程序的可读性(做法不同,但是做的同一事情)。 override用于提供其超级类已经提供的方法的特定实现。<br>同:overload 在相同的类范围内内执行。 override发生在两类具有继承（继承）的关系。<br>参数要求不同:overload参数必须不同。 override参数必须相同。<br>返回类型不同:overload中可以相同或不同。 override必须是相同的或协变的。<br>3).方法重写的应用?<br>当子类需要父类的功能，但是父类功能不满足自身的时候,可以重写父类中的方法。</p>\n<p>4).方法重写的注意事项<br>父类中私有方法不能被重写。因为父类私有方法子类根本就无法继承；<br>子类重写父类方法时，访问权限不能更低。 最好就一致<br>子类重写父类方法时，如果父类方法带有异常,则子类异常范围必须一致或更小<br>子类重写父类方法的时候，最好声明一模一样</p>\n<h3 id=\"final关键字\"><a href=\"#final关键字\" class=\"headerlink\" title=\"final关键字\"></a>final关键字</h3><p>1).final修饰类被修饰类不能被继承.2).final修饰方法被修饰的方法不能被重写.3).final修饰变量①局部变量——基本类型基本类型的局部变量，被final修饰后，只能赋值一次，不能再更改。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FinalDemo1</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 声明变量，使用final修饰</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 第一次赋值</span>\n        a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 第二次赋值</span>\n        a <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错,不可重新赋值</span>\n        <span class=\"token comment\">// 声明变量，直接赋值，使用final修饰</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 第二次赋值</span>\n        b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错,不可重新赋值</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>② 局部变量——引用类型引用类型的局部变量，被final修饰后，只能指向一个对象，地址不能再更改。但是不影响对象内部的成员变量值的修改。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FinalDemo2</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 创建 User 对象</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">User</span> u <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建 另一个 User对象</span>\n        u <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错，指向了新的对象，地址值改变。</span>\n        <span class=\"token comment\">// 调用setName方法</span>\n        u<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可以修改</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>③成员变量成员变量涉及到初始化的问题，初始化方式有两种，只能二选一：显式初始化：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> USERNAME <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>构造方法初始化：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> USERNAME <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n \n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>USERNAME <span class=\"token operator\">=</span> username<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><strong>被final修饰的常量名称，一般都有书写规范，所有字母都大写，且用下划线式。</strong></p>\n<hr>\n<h3 id=\"对象创建过程\"><a href=\"#对象创建过程\" class=\"headerlink\" title=\"对象创建过程\"></a>对象创建过程</h3><ul>\n<li>创建创建父类对象（父类对象创建也是如此）</li>\n<li>加载类对象 : 静态代码块 </li>\n<li>默认初始化 成员变量 </li>\n<li>显式初始化成员变量 </li>\n<li>实例代码块</li>\n<li>构造方法</li>\n</ul>\n<p>如果想让继承的类构造它的父类的所有参数以及子类独有的参数：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>java\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"姓名:\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>java\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setScore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> score<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">exam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"考试得了：\"</span> <span class=\"token operator\">+</span> score <span class=\"token operator\">+</span> <span class=\"token string\">\"分\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">showMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"同学，\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><strong>在写子类的全参数构造方法时要先用super实例化父类。</strong></p>\n<h3 id=\"对象的创建过程\"><a href=\"#对象的创建过程\" class=\"headerlink\" title=\"对象的创建过程\"></a>对象的创建过程</h3><p>例子：创建一个工具类，一个MyObject对象，一个MyMy对象继承MyObject：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">MyUtils</span><span class=\"token punctuation\">.</span>java\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyUtils</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token keyword\">return</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">MyObject</span><span class=\"token punctuation\">.</span>java\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyObject</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">MyUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"实例代码块： MyObject\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">static</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态代码块： MyObject\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造方法： MyObject\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">MyMy</span><span class=\"token punctuation\">.</span>java\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyMy</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MyObject</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">MyUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"实例代码块： MyMy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">static</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态代码块： MyMy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyMy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造方法： MyMy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span>java\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyMy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>结果：<br>    静态代码块： MyObject<br>    静态代码块： MyMy<br>    实例代码块： MyObject<br>    构造方法： MyObject<br>    实例代码块： MyMy<br>    构造方法： MyMy</p>\n<p>即：</p>\n<ul>\n<li>创建父类对象（父类对象创建也是如此）</li>\n<li>加载类对象 : 静态代码块</li>\n<li>默认初始化 成员变量</li>\n<li>显式初始化成员变量</li>\n<li>实例代码块</li>\n<li>构造方法</li>\n</ul>\n<hr>\n<pre class=\"language-none\"><code class=\"language-none\">1. 什么叫做类与类的继承，作用是什么？\n    1）多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可。\n    2）作用：\n    扩展功能\n    提高代码复用率\n    让类与类之间产生了关系，是多态的前提\n    增强了类的耦合性\n2. 继承后，父类与子类之间，各成员有什么样的影响？\n调用子类，先进行父类的参数定义和构造器构造，再进行子类的参数定义和构造器构造；\n如果子类构造器中没有 super() 语句，或 super() 语句中不含参数；会去寻找父类当中不含参数的构造器；有参数时，寻找有对应参数的父类构造器；\n父类中的函数 protected 参数声明，尽量少用，可以通过父类构造函数使用父类中 private 参数；\n3. 子类中，如何调用父类的成员？如何使用本类的成员？\n    1）直接实例化父类的成员\n    2）如果继承了父类的成员函数（指没有新写覆盖），则直接写成员函数名+参数来调用。\n         如果没法继承（指的是父类的私有成员函数）则不能调用。\n         如果可以继承（父类的保护或公有成员函数），但覆盖了（比如同名重写或虚函数重写）则可用：“ 父类名::成员函数名（参数）； ” 来调用。\n4. 抽象方法与普通成员方法有什么区别？\n5. 抽象类与普通类有什么区别？\n何为抽象类？抽象类是从其他若干个具有相同属性与行为的类中进一步抽象出来的类，可以设计方法，属性，如果把类设计为抽象类，那么这个类是不能被实例化的，只能被继承的子类（子类也可以为抽象类，也可以不是）间接使用，抽象类有构造，是一个完整的类。\n抽象类不能使用new方法进行实例化，没有具体实例对象。抽象类有点类似“模板”的作用，目的是根据其格式来创建和修改新的类。对象不能由抽象类直接创建，只可以通过抽象类派生出新的子类，再由其子类来创建对象。当一个类被声明为抽象类时，要在这个类前面加上修饰符abstract。\n在抽象类中的成员方法可以包括一般方法和抽象方法。抽象方法就是以abstract修饰的方法，这种方法只声明返回的数据类型、方法名称和所需的参数，没有方法体，也就是说抽象方法只需要声明而不需要实现。当一个方法为抽象方法时，意味着这个方法必须被子类的方法所重写，否则其子类的该方法仍然是abstract的，而这个子类也必须是抽象的，即声明为abstract.</code></pre>\n\n<h2 id=\"编码体系\"><a href=\"#编码体系\" class=\"headerlink\" title=\"###编码体系\"></a>###编码体系</h2><p>所有编码无条件兼容ascii码<br>unicode码以\\u开头 以一个十六位的数字代替四个二进制数字，unicode可以显示所有语言<br>utf-8是unicode的一种表现形式</p>\n<h2 id=\"关于Scanner\"><a href=\"#关于Scanner\" class=\"headerlink\" title=\"关于Scanner\"></a>关于Scanner</h2><ol>\n<li>Scanner中的nextInt方法和nextDouble方法：如果使用nextInt方法，如果输入了double型的参数，会报错，但是反之不会 因为int和double的精度不同，java为了不让数据丢失 不会让double进入nextInt方法</li>\n<li>如果先写了nextline,后写nextInt，可以正常运行，但是先写了nextInt 后写了nextline 就不行了 因为nextline检测的是你的回车符，你写了int值之后敲回车 会默认也进行nextline方法，并将值赋值为空。<br>若要避免这种情况，可以将代码修改为：</li>\n</ol>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> ageStr <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token class-name\">Integar</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseint</span><span class=\"token punctuation\">(</span>ageStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sout</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<ol start=\"3\">\n<li>如果输入一串字符 只想得到它的第一个字母：</li>\n</ol>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<hr>","categories":[],"tags":[{"name":"Java","path":"api/tags/Java.json"}]}