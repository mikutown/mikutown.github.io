{"title":"初识Java","slug":"初识Java","date":"2020-03-30T15:56:14.000Z","updated":"2021-01-02T20:15:02.000Z","comments":true,"path":"api/articles/初识Java.json","excerpt":"初识JavaJDK的下载安装jdk下载地址 点击同意协议，然后点击相应的操作系统进行下载。javajdk的教程写java的helloworld","covers":null,"content":"<h1 id=\"初识Java\"><a href=\"#初识Java\" class=\"headerlink\" title=\"初识Java\"></a>初识Java</h1><h2 id=\"JDK的下载安装\"><a href=\"#JDK的下载安装\" class=\"headerlink\" title=\"JDK的下载安装\"></a>JDK的下载安装</h2><p><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">jdk下载地址</a> </p>\n<p>点击同意协议，然后点击相应的操作系统进行下载。</p>\n<p><a href=\"https://jingyan.baidu.com/article/fd8044fa2c22f15031137a2a.html\">javajdk的教程</a></p>\n<h2 id=\"写java的helloworld\"><a href=\"#写java的helloworld\" class=\"headerlink\" title=\"写java的helloworld\"></a>写java的helloworld</h2><a id=\"more\"></a>\n\n<p>A：在任意盘符中创建一个Test.java的文件(这个文件也被称之为Test程序的源文件，我么java程序的源文件都是以.java命名的)。</p>\n<p>B: 定义类(类名必须与源文件前缀名一致)<br>    格式：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span>  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></code></pre>\n<p>C: 写main方法<br>   在大括号中间添加一个主(main)方法&#x2F;函数<br>   格式：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></code></pre>\n<p>D: 写输出语句<br>在主方法的大括号中间添加一行输出语句 格式：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token class-name\">HelloWorld</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span>    \n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> \t\t \n <span class=\"token punctuation\">&#123;</span>        \n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token class-name\">HelloWorld</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n    \n\n      </code></pre>\n<p>E:编译和运行程序<br>使用javac命令编译Test源文件，生成字节码文件(后缀名为.class)javac：将.java文件编译为.class文件语法格式：javac -d destdir srcFile注意：-d destdir是用来指定存放编译生成的.class文件的路径。（若此选项省略，那么默认在当前目录下生成.class文件，并且没有生成包文件夹；当前目录可以用“.”来表示，即：javac -d . srcFile ），srcFile是用来指定存放要编译的java文件路径。进入jdk的bin目录，执行javac命令，执行完成后会得到一个.class文件!</p>\n<p>使用java命令对class字节码文件进行解释运行语法格式：java -classpath 类路径 全类名下午：讲了一个关于classpath参数的案例 在一个文件夹里建立aa.AA bb.BB两个java类 BB调用AA如果想要编译这两个类 要先编译前一个被调用的类 再编译后一个被调用的类<br>AA.java:</p>\n<pre class=\"language-package\" data-language=\"package\"><div class=\"caption\"><span>aa;</span></div><code class=\"language-package\">public class AA&#123;   \n    public static void main(String[] args) \n    &#123;        \n    System.out.println(&quot;aaaaaaa&quot;);           \n    &#125;\n&#125;</code></pre>\n<p>BB.java:</p>\n<pre class=\"language-none\"><code class=\"language-none\">package bb;\npublic class AA&#123;\n    public static void main(String[] args) &#123;\n        aa.AA o &#x3D; new aa.AA();\n        System.out.println(&quot;aaaaaaa&quot;);\n    &#125;\n&#125; </code></pre>\n<h2 id=\"编译运行\"><a href=\"#编译运行\" class=\"headerlink\" title=\"编译运行\"></a>编译运行</h2><p>分别编译AA和BB<br>    把AA编译到C盘<br>    把BB编译到D盘</p>\n<p>分别编译两个类</p>\n<pre class=\"language-javac\" data-language=\"javac\"><div class=\"caption\"><span>-encoding UTF-8 -d c:// aa.java</span></div><code class=\"language-javac\">javac -encoding UTF-8 -d d:&#x2F;&#x2F; -classpath c:&#x2F;&#x2F; BB.java</code></pre>\n<p>或者</p>\n<pre class=\"language-none\"><code class=\"language-none\">javac -encoding UTF-8 -d d:&#x2F;&#x2F; -cp c:&#x2F;&#x2F; BB.java</code></pre>\n<p>运行两个类</p>\n<pre class=\"language-none\"><code class=\"language-none\">D:\\yys\\day01\\bb&gt;java -classpath c:&#x2F;&#x2F; aa.AA\naaaaaaa\n\nD:\\yys\\day01\\bb&gt;java -classpath c:&#x2F;&#x2F;;d:&#x2F;&#x2F; bb.BB\nbbbbbb</code></pre>\n<hr>\n<h2 id=\"打jar包操作\"><a href=\"#打jar包操作\" class=\"headerlink\" title=\"打jar包操作\"></a>打jar包操作</h2><p>可通过将编译后的class文件压缩为jar包进行使用</p>\n<p> jar 是一种普通的zip 压缩文件，只是后缀名是jar,是Java语言中重要的归档方式 。<br> jar cvf mymy.jar *   &#x2F;&#x2F;把当前路径下的所有东西归档到mymy.jar 中。<br> 可执行jar包<br>       写一个有可视化界面的代码</p>\n<pre class=\"language-none\"><code class=\"language-none\">package net.suncaper;public class MainFrame&#123;   \npublic static void main(String[] args)&#123;       \n        System.out.println(&quot;这是带有图形化界面的程序&quot;);        \n        javax.swing.JOptionPane.showMessageDialog(null,&quot;我是一个白痴，很可爱&quot;,&quot;标题&quot;,javax.swing.JOptionPane.PLAIN_MESSAGE);    \n        &#125;\n &#125;</code></pre>\n<p>编译写一个清单文件，目的指定运行的主类<br>Main-Class: net.suncaper.MainFrame<br>语法很严格，中间有一个空格，末尾只能换一样<br>例子:  F:\\ftproot\\class_code\\testcode&gt;jar cvfm myfirstrun.jar ..&#x2F;mainf *<br>运行: java -jar myfirstrun.jar<br>可以编写批处理文件，类似实现可执行文件。</p>\n<hr>\n<h2 id=\"idea的安装使用\"><a href=\"#idea的安装使用\" class=\"headerlink\" title=\"idea的安装使用\"></a>idea的安装使用</h2><p>.IDEA常用快捷键<br>ctrl+Y  ：删除行<br>ctrl+&#x2F;   ：单行注释<br>ctrl+shift +&#x2F;   ：多行注释<br>ctrl + D ：复制行<br>ctrl+shift + 上下方向键  ：交换行<br>ctrl + alt + L ：格式化:<br>ctrl+shift +  F12 ：最大最小化编辑窗口<br>按住鼠标滚轮键：列模式编辑<br>alt + Enter：自动纠错，可以用于自动导入包:<br>alt + insert：代码快速插入生成代码<br>ctlr+h:打开类的继承视图<br>ctrl+ alt + o: 清理import<br>ctrl + F12：查看类的结构<br>ctrl + F: 本文件中搜索<br>ctrl + R: 本文件中替换<br>ctrl + shift + T: 快速创建一个单元测试单元测试</p>\n","more":"<p>A：在任意盘符中创建一个Test.java的文件(这个文件也被称之为Test程序的源文件，我么java程序的源文件都是以.java命名的)。</p>\n<p>B: 定义类(类名必须与源文件前缀名一致)<br>    格式：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span>  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></code></pre>\n<p>C: 写main方法<br>   在大括号中间添加一个主(main)方法&#x2F;函数<br>   格式：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></code></pre>\n<p>D: 写输出语句<br>在主方法的大括号中间添加一行输出语句 格式：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token class-name\">HelloWorld</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span>    \n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> \t\t \n <span class=\"token punctuation\">&#123;</span>        \n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token class-name\">HelloWorld</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n    \n\n      </code></pre>\n<p>E:编译和运行程序<br>使用javac命令编译Test源文件，生成字节码文件(后缀名为.class)javac：将.java文件编译为.class文件语法格式：javac -d destdir srcFile注意：-d destdir是用来指定存放编译生成的.class文件的路径。（若此选项省略，那么默认在当前目录下生成.class文件，并且没有生成包文件夹；当前目录可以用“.”来表示，即：javac -d . srcFile ），srcFile是用来指定存放要编译的java文件路径。进入jdk的bin目录，执行javac命令，执行完成后会得到一个.class文件!</p>\n<p>使用java命令对class字节码文件进行解释运行语法格式：java -classpath 类路径 全类名下午：讲了一个关于classpath参数的案例 在一个文件夹里建立aa.AA bb.BB两个java类 BB调用AA如果想要编译这两个类 要先编译前一个被调用的类 再编译后一个被调用的类<br>AA.java:</p>\n<pre class=\"language-package\" data-language=\"package\"><div class=\"caption\"><span>aa;</span></div><code class=\"language-package\">public class AA&#123;   \n    public static void main(String[] args) \n    &#123;        \n    System.out.println(&quot;aaaaaaa&quot;);           \n    &#125;\n&#125;</code></pre>\n<p>BB.java:</p>\n<pre class=\"language-none\"><code class=\"language-none\">package bb;\npublic class AA&#123;\n    public static void main(String[] args) &#123;\n        aa.AA o &#x3D; new aa.AA();\n        System.out.println(&quot;aaaaaaa&quot;);\n    &#125;\n&#125; </code></pre>\n<h2 id=\"编译运行\"><a href=\"#编译运行\" class=\"headerlink\" title=\"编译运行\"></a>编译运行</h2><p>分别编译AA和BB<br>    把AA编译到C盘<br>    把BB编译到D盘</p>\n<p>分别编译两个类</p>\n<pre class=\"language-javac\" data-language=\"javac\"><div class=\"caption\"><span>-encoding UTF-8 -d c:// aa.java</span></div><code class=\"language-javac\">javac -encoding UTF-8 -d d:&#x2F;&#x2F; -classpath c:&#x2F;&#x2F; BB.java</code></pre>\n<p>或者</p>\n<pre class=\"language-none\"><code class=\"language-none\">javac -encoding UTF-8 -d d:&#x2F;&#x2F; -cp c:&#x2F;&#x2F; BB.java</code></pre>\n<p>运行两个类</p>\n<pre class=\"language-none\"><code class=\"language-none\">D:\\yys\\day01\\bb&gt;java -classpath c:&#x2F;&#x2F; aa.AA\naaaaaaa\n\nD:\\yys\\day01\\bb&gt;java -classpath c:&#x2F;&#x2F;;d:&#x2F;&#x2F; bb.BB\nbbbbbb</code></pre>\n<hr>\n<h2 id=\"打jar包操作\"><a href=\"#打jar包操作\" class=\"headerlink\" title=\"打jar包操作\"></a>打jar包操作</h2><p>可通过将编译后的class文件压缩为jar包进行使用</p>\n<p> jar 是一种普通的zip 压缩文件，只是后缀名是jar,是Java语言中重要的归档方式 。<br> jar cvf mymy.jar *   &#x2F;&#x2F;把当前路径下的所有东西归档到mymy.jar 中。<br> 可执行jar包<br>       写一个有可视化界面的代码</p>\n<pre class=\"language-none\"><code class=\"language-none\">package net.suncaper;public class MainFrame&#123;   \npublic static void main(String[] args)&#123;       \n        System.out.println(&quot;这是带有图形化界面的程序&quot;);        \n        javax.swing.JOptionPane.showMessageDialog(null,&quot;我是一个白痴，很可爱&quot;,&quot;标题&quot;,javax.swing.JOptionPane.PLAIN_MESSAGE);    \n        &#125;\n &#125;</code></pre>\n<p>编译写一个清单文件，目的指定运行的主类<br>Main-Class: net.suncaper.MainFrame<br>语法很严格，中间有一个空格，末尾只能换一样<br>例子:  F:\\ftproot\\class_code\\testcode&gt;jar cvfm myfirstrun.jar ..&#x2F;mainf *<br>运行: java -jar myfirstrun.jar<br>可以编写批处理文件，类似实现可执行文件。</p>\n<hr>\n<h2 id=\"idea的安装使用\"><a href=\"#idea的安装使用\" class=\"headerlink\" title=\"idea的安装使用\"></a>idea的安装使用</h2><p>.IDEA常用快捷键<br>ctrl+Y  ：删除行<br>ctrl+&#x2F;   ：单行注释<br>ctrl+shift +&#x2F;   ：多行注释<br>ctrl + D ：复制行<br>ctrl+shift + 上下方向键  ：交换行<br>ctrl + alt + L ：格式化:<br>ctrl+shift +  F12 ：最大最小化编辑窗口<br>按住鼠标滚轮键：列模式编辑<br>alt + Enter：自动纠错，可以用于自动导入包:<br>alt + insert：代码快速插入生成代码<br>ctlr+h:打开类的继承视图<br>ctrl+ alt + o: 清理import<br>ctrl + F12：查看类的结构<br>ctrl + F: 本文件中搜索<br>ctrl + R: 本文件中替换<br>ctrl + shift + T: 快速创建一个单元测试单元测试</p>","categories":[],"tags":[{"name":"Java","path":"api/tags/Java.json"}]}