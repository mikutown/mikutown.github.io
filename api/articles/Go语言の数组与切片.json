{"title":"Go语言の数组与切片","slug":"Go语言の数组与切片","date":"2021-01-25T05:34:21.000Z","updated":"2021-01-25T12:16:00.788Z","comments":true,"path":"api/articles/Go语言の数组与切片.json","excerpt":"Go语言の数组与切片本文章主要讲Go语言的数组与切片","covers":["https://gitee.com/mikutown/pic/raw/master/img/image-20210125141838794.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210125194444746.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210125194631546.png"],"content":"<h1 id=\"Go语言の数组与切片\"><a href=\"#Go语言の数组与切片\" class=\"headerlink\" title=\"Go语言の数组与切片\"></a>Go语言の数组与切片</h1><ul>\n<li>本文章主要讲Go语言的数组与切片</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"为什么需要数组\"><a href=\"#为什么需要数组\" class=\"headerlink\" title=\"为什么需要数组\"></a>为什么需要数组</h2><ul>\n<li><p>问题</p>\n<p>一个养鸡场有 6 只鸡，它们的体重分别是 3kg,5kg,1kg,3.4kg,2kg,50kg 。请问这六只鸡的总体重是多少?平均体重是多少? 请你编一个程序。=》数组</p>\n</li>\n<li><p>使用传统方法来解决</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\then1 <span class=\"token operator\">:=</span> <span class=\"token number\">3.0</span>\n\then2 <span class=\"token operator\">:=</span> <span class=\"token number\">5.0</span>\n\then3 <span class=\"token operator\">:=</span> <span class=\"token number\">1.0</span>\n\then4 <span class=\"token operator\">:=</span> <span class=\"token number\">3.4</span>\n\then5 <span class=\"token operator\">:=</span> <span class=\"token number\">2.0</span>\n\then6 <span class=\"token operator\">:=</span> <span class=\"token number\">50.0</span>\n\ttotalWeight <span class=\"token operator\">:=</span> hen1 <span class=\"token operator\">+</span> hen2 <span class=\"token operator\">+</span> hen3 <span class=\"token operator\">+</span> hen4 <span class=\"token operator\">+</span> hen5 <span class=\"token operator\">+</span> hen6\n\tavgWeight <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2f\"</span><span class=\"token punctuation\">,</span> totalWeight <span class=\"token operator\">/</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"totalWeight = %v,avgWeight = %v \\n\"</span><span class=\"token punctuation\">,</span> totalWeight<span class=\"token punctuation\">,</span> avgWeight<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\">totalWeight &#x3D; 64.4,avgWeight &#x3D; 10.73 </code></pre>\n<p><strong>说明：</strong></p>\n<ol>\n<li>使用传统方法不利于数据的管理和维护</li>\n<li>传统的方法不够灵活，因此我们需要引出新的数据类型：数组</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"数组介绍\"><a href=\"#数组介绍\" class=\"headerlink\" title=\"数组介绍\"></a>数组介绍</h2><p>​    数组可以存放多个同一类型数据。数组也是一种数据类型，在 Go 中，数组是值类型。</p>\n<h2 id=\"数组的快速入门\"><a href=\"#数组的快速入门\" class=\"headerlink\" title=\"数组的快速入门\"></a>数组的快速入门</h2><p>我们使用数组的方法来解决养鸡场的问题</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> hens <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.0</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.4</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">50.0</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">150.0</span>\n\ttotalWeight <span class=\"token operator\">:=</span> <span class=\"token number\">0.0</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>hens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\ttotalWeight <span class=\"token operator\">+=</span> hens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tavgWeight <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2f\"</span><span class=\"token punctuation\">,</span> totalWeight <span class=\"token operator\">/</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>hens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"totalWeight = %v,avgWeight = %v \\n\"</span><span class=\"token punctuation\">,</span> totalWeight<span class=\"token punctuation\">,</span> avgWeight<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\">totalWeight &#x3D; 214.4,avgWeight &#x3D; 30.63 </code></pre>\n<p>​    <strong>说明：</strong></p>\n<pre><code>1. 使用数组来解决问题，程序的可维护性增加\n2. 方法代码更加清晰，也容易扩展</code></pre>\n<h2 id=\"数组定义和内存布局\"><a href=\"#数组定义和内存布局\" class=\"headerlink\" title=\"数组定义和内存布局\"></a>数组定义和内存布局</h2><ul>\n<li><p>定义</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> 数组名 <span class=\"token punctuation\">[</span>数组大小<span class=\"token punctuation\">]</span>数据类型\n<span class=\"token keyword\">var</span> a <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n<span class=\"token comment\">//赋初值</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span> <span class=\"token comment\">//......</span></code></pre></li>\n<li><p>数组在内存布局（重要）</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210125141838794.png\" alt=\"image-20210125141838794\" loading=\"lazy\"></p>\n<ul>\n<li>对上图的总结：</li>\n</ul>\n<ol>\n<li>数组的地址可以通过数组名来获取 <code>&amp;intArr</code></li>\n<li>数组的第一个元素的地址，就是数组的首地址</li>\n<li>数组的各个元素的地址间隔是依据数组的类型决定，比如 <code>int64-&gt;8 int32-&gt;4...</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> intArr <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token comment\">// int占8个字节</span>\n\t<span class=\"token comment\">//当我们定义完数组后，其实数组的各个元素有默认值 0</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>intArr<span class=\"token punctuation\">)</span>\n\tintArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\tintArr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\tintArr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>intArr<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"intArr的地址=%p intArr[0]的地址=%p intArr[1]的地址=%p intArr[2]的地址=%p \\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>intArr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>intArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>intArr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>intArr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\n[0 0 0]\n[10 20 30]\nintArr的地址&#x3D;0xc0000b8000 intArr[0]的地址&#x3D;0xc0000b8000 intArr[1]的地址&#x3D;0xc0000b8008 intArr[2]的地址&#x3D;0xc0000b8010 </code></pre>\n<h2 id=\"数组的使用\"><a href=\"#数组的使用\" class=\"headerlink\" title=\"数组的使用\"></a>数组的使用</h2><ul>\n<li>访问数组元素</li>\n</ul>\n<p><strong>数组名[下标]</strong> 比如：你要使用a数组的第三个元素 a[2]</p>\n<ul>\n<li>快速入门案例</li>\n</ul>\n<p>从终端循环输入5个成绩，保存到float64数组，并输出。</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">  <span class=\"token keyword\">var</span> score <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入第%d个元素的值\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanln</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>score<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">//变量数组打印</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"score[%d]=%v\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\n请输入第1个元素的值\n5\n请输入第2个元素的值\n4\n请输入第3个元素的值\n3\n请输入第4个元素的值\n2\n请输入第5个元素的值\n1\nscore[0]&#x3D;5      score[1]&#x3D;4      score[2]&#x3D;3      score[3]&#x3D;2      score[4]&#x3D;1 </code></pre>\n\n<ul>\n<li>四种初始化数组的方式</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//四种初始化数组的方式</span>\n\t<span class=\"token keyword\">var</span> numArr01 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numArr01=\"</span><span class=\"token punctuation\">,</span> numArr01<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">var</span> numArr02 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numArr02=\"</span><span class=\"token punctuation\">,</span> numArr02<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//这里的[...]是规定的写法</span>\n\t<span class=\"token keyword\">var</span> numArr03 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numArr03=\"</span><span class=\"token punctuation\">,</span> numArr03<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">var</span> numArr04 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">900</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">999</span><span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numArr04=\"</span><span class=\"token punctuation\">,</span> numArr04<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//类型推导\t</span>\n\tstrArr05 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"rose\"</span><span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"strArr05=\"</span><span class=\"token punctuation\">,</span>strArr05<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\nnumArr01&#x3D; [1 2 3]\nnumArr02&#x3D; [5 6 7]\nnumArr03&#x3D; [8 9 10]\nnumArr04&#x3D; [900 800 999]\nstrArr05&#x3D; [ tom jack rose]</code></pre>\n\n<h2 id=\"数组的遍历\"><a href=\"#数组的遍历\" class=\"headerlink\" title=\"数组的遍历\"></a>数组的遍历</h2><h3 id=\"方式1-常规遍历\"><a href=\"#方式1-常规遍历\" class=\"headerlink\" title=\"方式1-常规遍历\"></a>方式1-常规遍历</h3><p>看上面的，不再赘述</p>\n<h3 id=\"方式2-for-range结构遍历\"><a href=\"#方式2-for-range结构遍历\" class=\"headerlink\" title=\"方式2-for-range结构遍历\"></a>方式2-for-range结构遍历</h3><p>这是Go语言的独有的结构，可以用来遍历访问数组的元素。</p>\n<ul>\n<li>for-range的基本语法</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">for</span> index<span class=\"token punctuation\">,</span> value <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> array01 <span class=\"token punctuation\">&#123;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>说明</p>\n<ol>\n<li>第一个返回值index是数组的下标</li>\n<li>第二个value是在该下标位置的值</li>\n<li>他们都是仅在for循环内部可见的局部变量</li>\n<li>遍历数组元素的时候，如果不想使用下标index，可以直接把下标index标为下划线_</li>\n<li>index和value的名称不是固定的，即程序员可以自行指定，一般命名为index和value</li>\n</ol>\n<ul>\n<li>for-range的案例</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//演示for-range遍历数组</span>\n\theroes <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"宋江\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"吴用\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"卢俊义\"</span><span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> heroes <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=%v v=%v\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"heroes[%d]=%v\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> heroes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> heroes <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"元素的值=%v\\n\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\ni&#x3D;0 v&#x3D;宋江heroes[0]&#x3D;宋江\ni&#x3D;1 v&#x3D;吴用heroes[1]&#x3D;吴用\ni&#x3D;2 v&#x3D;卢俊义heroes[2]&#x3D;卢俊义\n元素的值&#x3D;宋江\n元素的值&#x3D;吴用\n元素的值&#x3D;卢俊义</code></pre>\n\n<h2 id=\"数组使用的注意事项和细节\"><a href=\"#数组使用的注意事项和细节\" class=\"headerlink\" title=\"数组使用的注意事项和细节\"></a>数组使用的注意事项和细节</h2><ol>\n<li>数组是多个相同类型数据的组合，一个数组一旦声明/定义了，其长度是固定的，不能动态变化</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//数组是多个相同类型数据的组合，一个数组一旦声明/定义了，其长度是固定的，不能动态变化。</span>\n\t<span class=\"token keyword\">var</span> arr01 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n\tarr01<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\tarr01<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n\t<span class=\"token comment\">//会报错</span>\n\tarr01<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span> <span class=\"token comment\">//数组类型和初始化的值的类型不匹配哦</span>\n\t<span class=\"token comment\">//其长度是固定的，不能动态变化，否则报越界</span>\n\tarr01<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">890</span> <span class=\"token comment\">//数组不能动态增长</span>\n\t\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>arr01<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"2\">\n<li><p><code>var arr []int</code>这时arr就是一个slice切片，切片后面专门讲解。</p>\n</li>\n<li><p>数组中的元素可以是任何数据类型，包括值类型和引用类型，但是不能混用。</p>\n</li>\n<li><p>数组创建后，如果没有赋值，有默认值（零值）</p>\n<pre class=\"language-none\"><code class=\"language-none\">数组类型数组： 默认值为 0\n字符串数组： 默认值为 &quot;&quot;\nbool数组： 默认值为false</code></pre>\n\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> arr01 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float32</span>\n<span class=\"token keyword\">var</span> arr02 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n<span class=\"token keyword\">var</span> arr03 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr01=%v arr02=%v arr03=%v\\n\"</span><span class=\"token punctuation\">,</span> arr01<span class=\"token punctuation\">,</span> arr02<span class=\"token punctuation\">,</span> arr03<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"5\">\n<li>使用数组的步骤<ol>\n<li>生命数组并开辟空间</li>\n<li>给数组各个元素赋值（默认零值）</li>\n<li>使用数组</li>\n</ol>\n</li>\n<li>数组的下标是从0开始的</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> arr04 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token comment\">// 0-2</span>\n<span class=\"token keyword\">var</span> index <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\narr04<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"tom\"</span> <span class=\"token comment\">//arr04[3]越界奥</span></code></pre>\n\n<ol start=\"7\">\n<li>数组下标必须在指定范围内使用，否则报panic：数组越界，比如<code>var arr [5]int</code> 则有效下标为0-4</li>\n<li>Go的数组属值类型，在默认情况下是值传递，因此会进行值拷贝。数组见不会相互影响</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210125194444746.png\" alt=\"image-20210125194444746\" loading=\"lazy\"></p>\n<ol start=\"9\">\n<li>如想在其它函数中，去修改原来的数组，可以使用引用传递（指针方式）</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210125194631546.png\" alt=\"image-20210125194631546\" loading=\"lazy\"></p>\n<ol start=\"10\">\n<li>长度是数组类型的一部分，在传递函数参数时 需要考虑数组的长度，看下面的案例：</li>\n</ol>\n</li>\n</ul>\n","more":"<h2 id=\"为什么需要数组\"><a href=\"#为什么需要数组\" class=\"headerlink\" title=\"为什么需要数组\"></a>为什么需要数组</h2><ul>\n<li><p>问题</p>\n<p>一个养鸡场有 6 只鸡，它们的体重分别是 3kg,5kg,1kg,3.4kg,2kg,50kg 。请问这六只鸡的总体重是多少?平均体重是多少? 请你编一个程序。=》数组</p>\n</li>\n<li><p>使用传统方法来解决</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\then1 <span class=\"token operator\">:=</span> <span class=\"token number\">3.0</span>\n\then2 <span class=\"token operator\">:=</span> <span class=\"token number\">5.0</span>\n\then3 <span class=\"token operator\">:=</span> <span class=\"token number\">1.0</span>\n\then4 <span class=\"token operator\">:=</span> <span class=\"token number\">3.4</span>\n\then5 <span class=\"token operator\">:=</span> <span class=\"token number\">2.0</span>\n\then6 <span class=\"token operator\">:=</span> <span class=\"token number\">50.0</span>\n\ttotalWeight <span class=\"token operator\">:=</span> hen1 <span class=\"token operator\">+</span> hen2 <span class=\"token operator\">+</span> hen3 <span class=\"token operator\">+</span> hen4 <span class=\"token operator\">+</span> hen5 <span class=\"token operator\">+</span> hen6\n\tavgWeight <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2f\"</span><span class=\"token punctuation\">,</span> totalWeight <span class=\"token operator\">/</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"totalWeight = %v,avgWeight = %v \\n\"</span><span class=\"token punctuation\">,</span> totalWeight<span class=\"token punctuation\">,</span> avgWeight<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\">totalWeight &#x3D; 64.4,avgWeight &#x3D; 10.73 </code></pre>\n<p><strong>说明：</strong></p>\n<ol>\n<li>使用传统方法不利于数据的管理和维护</li>\n<li>传统的方法不够灵活，因此我们需要引出新的数据类型：数组</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"数组介绍\"><a href=\"#数组介绍\" class=\"headerlink\" title=\"数组介绍\"></a>数组介绍</h2><p>​    数组可以存放多个同一类型数据。数组也是一种数据类型，在 Go 中，数组是值类型。</p>\n<h2 id=\"数组的快速入门\"><a href=\"#数组的快速入门\" class=\"headerlink\" title=\"数组的快速入门\"></a>数组的快速入门</h2><p>我们使用数组的方法来解决养鸡场的问题</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> hens <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.0</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.4</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">50.0</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">150.0</span>\n\ttotalWeight <span class=\"token operator\">:=</span> <span class=\"token number\">0.0</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>hens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\ttotalWeight <span class=\"token operator\">+=</span> hens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tavgWeight <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2f\"</span><span class=\"token punctuation\">,</span> totalWeight <span class=\"token operator\">/</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>hens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"totalWeight = %v,avgWeight = %v \\n\"</span><span class=\"token punctuation\">,</span> totalWeight<span class=\"token punctuation\">,</span> avgWeight<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\">totalWeight &#x3D; 214.4,avgWeight &#x3D; 30.63 </code></pre>\n<p>​    <strong>说明：</strong></p>\n<pre><code>1. 使用数组来解决问题，程序的可维护性增加\n2. 方法代码更加清晰，也容易扩展</code></pre>\n<h2 id=\"数组定义和内存布局\"><a href=\"#数组定义和内存布局\" class=\"headerlink\" title=\"数组定义和内存布局\"></a>数组定义和内存布局</h2><ul>\n<li><p>定义</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> 数组名 <span class=\"token punctuation\">[</span>数组大小<span class=\"token punctuation\">]</span>数据类型\n<span class=\"token keyword\">var</span> a <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n<span class=\"token comment\">//赋初值</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span> <span class=\"token comment\">//......</span></code></pre></li>\n<li><p>数组在内存布局（重要）</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210125141838794.png\" alt=\"image-20210125141838794\"></p>\n<ul>\n<li>对上图的总结：</li>\n</ul>\n<ol>\n<li>数组的地址可以通过数组名来获取 <code>&amp;intArr</code></li>\n<li>数组的第一个元素的地址，就是数组的首地址</li>\n<li>数组的各个元素的地址间隔是依据数组的类型决定，比如 <code>int64-&gt;8 int32-&gt;4...</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> intArr <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token comment\">// int占8个字节</span>\n\t<span class=\"token comment\">//当我们定义完数组后，其实数组的各个元素有默认值 0</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>intArr<span class=\"token punctuation\">)</span>\n\tintArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\tintArr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\tintArr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>intArr<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"intArr的地址=%p intArr[0]的地址=%p intArr[1]的地址=%p intArr[2]的地址=%p \\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>intArr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>intArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>intArr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>intArr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\n[0 0 0]\n[10 20 30]\nintArr的地址&#x3D;0xc0000b8000 intArr[0]的地址&#x3D;0xc0000b8000 intArr[1]的地址&#x3D;0xc0000b8008 intArr[2]的地址&#x3D;0xc0000b8010 </code></pre>\n<h2 id=\"数组的使用\"><a href=\"#数组的使用\" class=\"headerlink\" title=\"数组的使用\"></a>数组的使用</h2><ul>\n<li>访问数组元素</li>\n</ul>\n<p><strong>数组名[下标]</strong> 比如：你要使用a数组的第三个元素 a[2]</p>\n<ul>\n<li>快速入门案例</li>\n</ul>\n<p>从终端循环输入5个成绩，保存到float64数组，并输出。</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">  <span class=\"token keyword\">var</span> score <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入第%d个元素的值\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanln</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>score<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">//变量数组打印</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"score[%d]=%v\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\n请输入第1个元素的值\n5\n请输入第2个元素的值\n4\n请输入第3个元素的值\n3\n请输入第4个元素的值\n2\n请输入第5个元素的值\n1\nscore[0]&#x3D;5      score[1]&#x3D;4      score[2]&#x3D;3      score[3]&#x3D;2      score[4]&#x3D;1 </code></pre>\n\n<ul>\n<li>四种初始化数组的方式</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//四种初始化数组的方式</span>\n\t<span class=\"token keyword\">var</span> numArr01 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numArr01=\"</span><span class=\"token punctuation\">,</span> numArr01<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">var</span> numArr02 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numArr02=\"</span><span class=\"token punctuation\">,</span> numArr02<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//这里的[...]是规定的写法</span>\n\t<span class=\"token keyword\">var</span> numArr03 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numArr03=\"</span><span class=\"token punctuation\">,</span> numArr03<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">var</span> numArr04 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">900</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">999</span><span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numArr04=\"</span><span class=\"token punctuation\">,</span> numArr04<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//类型推导\t</span>\n\tstrArr05 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"rose\"</span><span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"strArr05=\"</span><span class=\"token punctuation\">,</span>strArr05<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\nnumArr01&#x3D; [1 2 3]\nnumArr02&#x3D; [5 6 7]\nnumArr03&#x3D; [8 9 10]\nnumArr04&#x3D; [900 800 999]\nstrArr05&#x3D; [ tom jack rose]</code></pre>\n\n<h2 id=\"数组的遍历\"><a href=\"#数组的遍历\" class=\"headerlink\" title=\"数组的遍历\"></a>数组的遍历</h2><h3 id=\"方式1-常规遍历\"><a href=\"#方式1-常规遍历\" class=\"headerlink\" title=\"方式1-常规遍历\"></a>方式1-常规遍历</h3><p>看上面的，不再赘述</p>\n<h3 id=\"方式2-for-range结构遍历\"><a href=\"#方式2-for-range结构遍历\" class=\"headerlink\" title=\"方式2-for-range结构遍历\"></a>方式2-for-range结构遍历</h3><p>这是Go语言的独有的结构，可以用来遍历访问数组的元素。</p>\n<ul>\n<li>for-range的基本语法</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">for</span> index<span class=\"token punctuation\">,</span> value <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> array01 <span class=\"token punctuation\">&#123;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>说明</p>\n<ol>\n<li>第一个返回值index是数组的下标</li>\n<li>第二个value是在该下标位置的值</li>\n<li>他们都是仅在for循环内部可见的局部变量</li>\n<li>遍历数组元素的时候，如果不想使用下标index，可以直接把下标index标为下划线_</li>\n<li>index和value的名称不是固定的，即程序员可以自行指定，一般命名为index和value</li>\n</ol>\n<ul>\n<li>for-range的案例</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//演示for-range遍历数组</span>\n\theroes <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"宋江\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"吴用\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"卢俊义\"</span><span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> heroes <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=%v v=%v\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"heroes[%d]=%v\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> heroes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> heroes <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"元素的值=%v\\n\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\ni&#x3D;0 v&#x3D;宋江heroes[0]&#x3D;宋江\ni&#x3D;1 v&#x3D;吴用heroes[1]&#x3D;吴用\ni&#x3D;2 v&#x3D;卢俊义heroes[2]&#x3D;卢俊义\n元素的值&#x3D;宋江\n元素的值&#x3D;吴用\n元素的值&#x3D;卢俊义</code></pre>\n\n<h2 id=\"数组使用的注意事项和细节\"><a href=\"#数组使用的注意事项和细节\" class=\"headerlink\" title=\"数组使用的注意事项和细节\"></a>数组使用的注意事项和细节</h2><ol>\n<li>数组是多个相同类型数据的组合，一个数组一旦声明/定义了，其长度是固定的，不能动态变化</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//数组是多个相同类型数据的组合，一个数组一旦声明/定义了，其长度是固定的，不能动态变化。</span>\n\t<span class=\"token keyword\">var</span> arr01 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n\tarr01<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\tarr01<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n\t<span class=\"token comment\">//会报错</span>\n\tarr01<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span> <span class=\"token comment\">//数组类型和初始化的值的类型不匹配哦</span>\n\t<span class=\"token comment\">//其长度是固定的，不能动态变化，否则报越界</span>\n\tarr01<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">890</span> <span class=\"token comment\">//数组不能动态增长</span>\n\t\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>arr01<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"2\">\n<li><p><code>var arr []int</code>这时arr就是一个slice切片，切片后面专门讲解。</p>\n</li>\n<li><p>数组中的元素可以是任何数据类型，包括值类型和引用类型，但是不能混用。</p>\n</li>\n<li><p>数组创建后，如果没有赋值，有默认值（零值）</p>\n<pre class=\"language-none\"><code class=\"language-none\">数组类型数组： 默认值为 0\n字符串数组： 默认值为 &quot;&quot;\nbool数组： 默认值为false</code></pre>\n\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> arr01 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float32</span>\n<span class=\"token keyword\">var</span> arr02 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n<span class=\"token keyword\">var</span> arr03 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr01=%v arr02=%v arr03=%v\\n\"</span><span class=\"token punctuation\">,</span> arr01<span class=\"token punctuation\">,</span> arr02<span class=\"token punctuation\">,</span> arr03<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"5\">\n<li>使用数组的步骤<ol>\n<li>生命数组并开辟空间</li>\n<li>给数组各个元素赋值（默认零值）</li>\n<li>使用数组</li>\n</ol>\n</li>\n<li>数组的下标是从0开始的</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> arr04 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token comment\">// 0-2</span>\n<span class=\"token keyword\">var</span> index <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\narr04<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"tom\"</span> <span class=\"token comment\">//arr04[3]越界奥</span></code></pre>\n\n<ol start=\"7\">\n<li>数组下标必须在指定范围内使用，否则报panic：数组越界，比如<code>var arr [5]int</code> 则有效下标为0-4</li>\n<li>Go的数组属值类型，在默认情况下是值传递，因此会进行值拷贝。数组见不会相互影响</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210125194444746.png\" alt=\"image-20210125194444746\"></p>\n<ol start=\"9\">\n<li>如想在其它函数中，去修改原来的数组，可以使用引用传递（指针方式）</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210125194631546.png\" alt=\"image-20210125194631546\"></p>\n<ol start=\"10\">\n<li>长度是数组类型的一部分，在传递函数参数时 需要考虑数组的长度，看下面的案例：</li>\n</ol>\n</li>\n</ul>","categories":[],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}