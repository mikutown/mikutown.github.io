{"title":"Go语言の数组与切片","slug":"Go语言の数组与切片","date":"2021-01-25T05:34:21.000Z","updated":"2021-01-27T05:36:22.370Z","comments":true,"path":"api/articles/Go语言の数组与切片.json","excerpt":"Go语言の数组与切片本文章主要讲Go语言的数组与切片","covers":["https://gitee.com/mikutown/pic/raw/master/img/image-20210125141838794.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210125194444746.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210125194631546.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210127073415872.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210127084544489.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210127085505587.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210127091016998.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210127093344890.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210127132312369.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210127132541123.png"],"content":"<h1 id=\"Go语言の数组与切片\"><a href=\"#Go语言の数组与切片\" class=\"headerlink\" title=\"Go语言の数组与切片\"></a>Go语言の数组与切片</h1><ul>\n<li>本文章主要讲Go语言的数组与切片</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"为什么需要数组\"><a href=\"#为什么需要数组\" class=\"headerlink\" title=\"为什么需要数组\"></a>为什么需要数组</h2><ul>\n<li><p>问题</p>\n<p>一个养鸡场有 6 只鸡，它们的体重分别是 3kg,5kg,1kg,3.4kg,2kg,50kg 。请问这六只鸡的总体重是多少?平均体重是多少? 请你编一个程序。&#x3D;》数组</p>\n</li>\n<li><p>使用传统方法来解决</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\then1 <span class=\"token operator\">:=</span> <span class=\"token number\">3.0</span>\n\then2 <span class=\"token operator\">:=</span> <span class=\"token number\">5.0</span>\n\then3 <span class=\"token operator\">:=</span> <span class=\"token number\">1.0</span>\n\then4 <span class=\"token operator\">:=</span> <span class=\"token number\">3.4</span>\n\then5 <span class=\"token operator\">:=</span> <span class=\"token number\">2.0</span>\n\then6 <span class=\"token operator\">:=</span> <span class=\"token number\">50.0</span>\n\ttotalWeight <span class=\"token operator\">:=</span> hen1 <span class=\"token operator\">+</span> hen2 <span class=\"token operator\">+</span> hen3 <span class=\"token operator\">+</span> hen4 <span class=\"token operator\">+</span> hen5 <span class=\"token operator\">+</span> hen6\n\tavgWeight <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2f\"</span><span class=\"token punctuation\">,</span> totalWeight <span class=\"token operator\">/</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"totalWeight = %v,avgWeight = %v \\n\"</span><span class=\"token punctuation\">,</span> totalWeight<span class=\"token punctuation\">,</span> avgWeight<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\">totalWeight &#x3D; 64.4,avgWeight &#x3D; 10.73 </code></pre>\n<p><strong>说明：</strong></p>\n<ol>\n<li>使用传统方法不利于数据的管理和维护</li>\n<li>传统的方法不够灵活，因此我们需要引出新的数据类型：数组</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"数组介绍\"><a href=\"#数组介绍\" class=\"headerlink\" title=\"数组介绍\"></a>数组介绍</h2><p>​    数组可以存放多个同一类型数据。数组也是一种数据类型，在 Go 中，数组是值类型。</p>\n<h2 id=\"数组的快速入门\"><a href=\"#数组的快速入门\" class=\"headerlink\" title=\"数组的快速入门\"></a>数组的快速入门</h2><p>我们使用数组的方法来解决养鸡场的问题</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> hens <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.0</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.4</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">50.0</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">150.0</span>\n\ttotalWeight <span class=\"token operator\">:=</span> <span class=\"token number\">0.0</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>hens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\ttotalWeight <span class=\"token operator\">+=</span> hens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tavgWeight <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2f\"</span><span class=\"token punctuation\">,</span> totalWeight <span class=\"token operator\">/</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>hens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"totalWeight = %v,avgWeight = %v \\n\"</span><span class=\"token punctuation\">,</span> totalWeight<span class=\"token punctuation\">,</span> avgWeight<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\">totalWeight &#x3D; 214.4,avgWeight &#x3D; 30.63 </code></pre>\n<p>​    <strong>说明：</strong></p>\n<pre><code>1. 使用数组来解决问题，程序的可维护性增加\n2. 方法代码更加清晰，也容易扩展\n</code></pre>\n<h2 id=\"数组定义和内存布局\"><a href=\"#数组定义和内存布局\" class=\"headerlink\" title=\"数组定义和内存布局\"></a>数组定义和内存布局</h2><ul>\n<li><p>定义</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> 数组名 <span class=\"token punctuation\">[</span>数组大小<span class=\"token punctuation\">]</span>数据类型\n<span class=\"token keyword\">var</span> a <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n<span class=\"token comment\">//赋初值</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span> <span class=\"token comment\">//......</span></code></pre></li>\n<li><p>数组在内存布局（重要）</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210125141838794.png\" alt=\"image-20210125141838794\" loading=\"lazy\"></p>\n<ul>\n<li>对上图的总结：</li>\n</ul>\n<ol>\n<li>数组的地址可以通过数组名来获取 <code>&amp;intArr</code></li>\n<li>数组的第一个元素的地址，就是数组的首地址</li>\n<li>数组的各个元素的地址间隔是依据数组的类型决定，比如 <code>int64-&gt;8 int32-&gt;4...</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> intArr <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token comment\">// int占8个字节</span>\n\t<span class=\"token comment\">//当我们定义完数组后，其实数组的各个元素有默认值 0</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>intArr<span class=\"token punctuation\">)</span>\n\tintArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\tintArr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\tintArr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>intArr<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"intArr的地址=%p intArr[0]的地址=%p intArr[1]的地址=%p intArr[2]的地址=%p \\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>intArr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>intArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>intArr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>intArr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\n[0 0 0]\n[10 20 30]\nintArr的地址&#x3D;0xc0000b8000 intArr[0]的地址&#x3D;0xc0000b8000 intArr[1]的地址&#x3D;0xc0000b8008 intArr[2]的地址&#x3D;0xc0000b8010 </code></pre>\n<h2 id=\"数组的使用\"><a href=\"#数组的使用\" class=\"headerlink\" title=\"数组的使用\"></a>数组的使用</h2><ul>\n<li>访问数组元素</li>\n</ul>\n<p><strong>数组名[下标]</strong> 比如：你要使用a数组的第三个元素 a[2]</p>\n<ul>\n<li>快速入门案例</li>\n</ul>\n<p>从终端循环输入5个成绩，保存到float64数组，并输出。</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">  <span class=\"token keyword\">var</span> score <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入第%d个元素的值\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanln</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>score<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">//变量数组打印</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"score[%d]=%v\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\n请输入第1个元素的值\n5\n请输入第2个元素的值\n4\n请输入第3个元素的值\n3\n请输入第4个元素的值\n2\n请输入第5个元素的值\n1\nscore[0]&#x3D;5      score[1]&#x3D;4      score[2]&#x3D;3      score[3]&#x3D;2      score[4]&#x3D;1 </code></pre>\n\n<ul>\n<li>四种初始化数组的方式</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//四种初始化数组的方式</span>\n\t<span class=\"token keyword\">var</span> numArr01 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numArr01=\"</span><span class=\"token punctuation\">,</span> numArr01<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">var</span> numArr02 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numArr02=\"</span><span class=\"token punctuation\">,</span> numArr02<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//这里的[...]是规定的写法</span>\n\t<span class=\"token keyword\">var</span> numArr03 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numArr03=\"</span><span class=\"token punctuation\">,</span> numArr03<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">var</span> numArr04 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">900</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">999</span><span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numArr04=\"</span><span class=\"token punctuation\">,</span> numArr04<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//类型推导\t</span>\n\tstrArr05 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"rose\"</span><span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"strArr05=\"</span><span class=\"token punctuation\">,</span>strArr05<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\nnumArr01&#x3D; [1 2 3]\nnumArr02&#x3D; [5 6 7]\nnumArr03&#x3D; [8 9 10]\nnumArr04&#x3D; [900 800 999]\nstrArr05&#x3D; [ tom jack rose]</code></pre>\n\n<h2 id=\"数组的遍历\"><a href=\"#数组的遍历\" class=\"headerlink\" title=\"数组的遍历\"></a>数组的遍历</h2><h3 id=\"方式1-常规遍历\"><a href=\"#方式1-常规遍历\" class=\"headerlink\" title=\"方式1-常规遍历\"></a>方式1-常规遍历</h3><p>看上面的，不再赘述</p>\n<h3 id=\"方式2-for-range结构遍历\"><a href=\"#方式2-for-range结构遍历\" class=\"headerlink\" title=\"方式2-for-range结构遍历\"></a>方式2-for-range结构遍历</h3><p>这是Go语言的独有的结构，可以用来遍历访问数组的元素。</p>\n<ul>\n<li>for-range的基本语法</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">for</span> index<span class=\"token punctuation\">,</span> value <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> array01 <span class=\"token punctuation\">&#123;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>说明</p>\n<ol>\n<li>第一个返回值index是数组的下标</li>\n<li>第二个value是在该下标位置的值</li>\n<li>他们都是仅在for循环内部可见的局部变量</li>\n<li>遍历数组元素的时候，如果不想使用下标index，可以直接把下标index标为下划线_</li>\n<li>index和value的名称不是固定的，即程序员可以自行指定，一般命名为index和value</li>\n</ol>\n<ul>\n<li>for-range的案例</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//演示for-range遍历数组</span>\n\theroes <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"宋江\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"吴用\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"卢俊义\"</span><span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> heroes <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=%v v=%v\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"heroes[%d]=%v\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> heroes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> heroes <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"元素的值=%v\\n\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\ni&#x3D;0 v&#x3D;宋江heroes[0]&#x3D;宋江\ni&#x3D;1 v&#x3D;吴用heroes[1]&#x3D;吴用\ni&#x3D;2 v&#x3D;卢俊义heroes[2]&#x3D;卢俊义\n元素的值&#x3D;宋江\n元素的值&#x3D;吴用\n元素的值&#x3D;卢俊义</code></pre>\n\n<h2 id=\"数组使用的注意事项和细节\"><a href=\"#数组使用的注意事项和细节\" class=\"headerlink\" title=\"数组使用的注意事项和细节\"></a>数组使用的注意事项和细节</h2><ol>\n<li>数组是多个相同类型数据的组合，一个数组一旦声明&#x2F;定义了，其长度是固定的，不能动态变化</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//数组是多个相同类型数据的组合，一个数组一旦声明/定义了，其长度是固定的，不能动态变化。</span>\n\t<span class=\"token keyword\">var</span> arr01 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n\tarr01<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\tarr01<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n\t<span class=\"token comment\">//会报错</span>\n\tarr01<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span> <span class=\"token comment\">//数组类型和初始化的值的类型不匹配哦</span>\n\t<span class=\"token comment\">//其长度是固定的，不能动态变化，否则报越界</span>\n\tarr01<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">890</span> <span class=\"token comment\">//数组不能动态增长</span>\n\t\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>arr01<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"2\">\n<li><p><code>var arr []int</code>这时arr就是一个slice切片，切片后面专门讲解。</p>\n</li>\n<li><p>数组中的元素可以是任何数据类型，包括值类型和引用类型，但是不能混用。</p>\n</li>\n<li><p>数组创建后，如果没有赋值，有默认值（零值）</p>\n<pre class=\"language-none\"><code class=\"language-none\">数组类型数组： 默认值为 0\n字符串数组： 默认值为 &quot;&quot;\nbool数组： 默认值为false</code></pre></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> arr01 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float32</span>\n<span class=\"token keyword\">var</span> arr02 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n<span class=\"token keyword\">var</span> arr03 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr01=%v arr02=%v arr03=%v\\n\"</span><span class=\"token punctuation\">,</span> arr01<span class=\"token punctuation\">,</span> arr02<span class=\"token punctuation\">,</span> arr03<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"5\">\n<li>使用数组的步骤<ol>\n<li>生命数组并开辟空间</li>\n<li>给数组各个元素赋值（默认零值）</li>\n<li>使用数组</li>\n</ol>\n</li>\n<li>数组的下标是从0开始的</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> arr04 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token comment\">// 0-2</span>\n<span class=\"token keyword\">var</span> index <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\narr04<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"tom\"</span> <span class=\"token comment\">//arr04[3]越界奥</span></code></pre>\n\n<ol start=\"7\">\n<li>数组下标必须在指定范围内使用，否则报panic：数组越界，比如<code>var arr [5]int</code> 则有效下标为0-4</li>\n<li>Go的数组属值类型，在默认情况下是值传递，因此会进行值拷贝。数组见不会相互影响</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210125194444746.png\" alt=\"image-20210125194444746\" loading=\"lazy\"></p>\n<ol start=\"9\">\n<li>如想在其它函数中，去修改原来的数组，可以使用引用传递（指针方式）</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210125194631546.png\" alt=\"image-20210125194631546\" loading=\"lazy\"></p>\n<ol start=\"10\">\n<li>长度是数组类型的一部分，在传递函数参数时 需要考虑数组的长度，看下面的案例：</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210127073415872.png\" alt=\"image-20210127073415872\" loading=\"lazy\"></p>\n</li>\n</ul>\n<h2 id=\"数组的应用案例\"><a href=\"#数组的应用案例\" class=\"headerlink\" title=\"数组的应用案例\"></a>数组的应用案例</h2><ol>\n<li>创建一个byte类型的26个元素的数组，分别放置’A’-‘Z’.使用for循环访问所有元素并打印出来。提示：字符数据运算’A’+1-&gt;’B’</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> arr01 <span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>arr01<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n  \tarr01<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">+</span> <span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token comment\">//要将i转成byte类型</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>arr01<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n  \tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> arr01<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go      \nABCDEFGHIJKLMNOPQRSTUVWXYZ</code></pre>\n<ol start=\"2\">\n<li>请求出一个数组的最大值，并得到对应的下标。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> intArr <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">932</span><span class=\"token punctuation\">,</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">&#125;</span>\n\tmaxVal <span class=\"token operator\">:=</span> intArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\tmaxValIndex <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>intArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> intArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>maxVal <span class=\"token punctuation\">&#123;</span>\n\t\t\tmaxVal <span class=\"token operator\">=</span> intArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t\t\tmaxValIndex <span class=\"token operator\">=</span> i\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"maxVal = %v, maxValIndex = %v \\n\"</span><span class=\"token punctuation\">,</span> maxVal<span class=\"token punctuation\">,</span> maxValIndex<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\nmaxVal &#x3D; 932, maxValIndex &#x3D; 2 </code></pre>\n<ol start=\"3\">\n<li>请求出一个数组的和和平均值 for-range</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> doubleArr2 <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">var</span> sum <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> val <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> doubleArr2 <span class=\"token punctuation\">&#123;</span>\n\t\tsum <span class=\"token operator\">+=</span> val\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">var</span> avg <span class=\"token operator\">=</span> sum <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>doubleArr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum = %v avg = %v\\n\"</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">,</span> avg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\nsum &#x3D; 55 avg &#x3D; 5.5</code></pre>\n<ol start=\"4\">\n<li>要求：随机生成五个数，并将其反转打印，复杂应用。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"time\"</span>\n\t<span class=\"token string\">\"math/rand\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> intArr3 <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n\t<span class=\"token builtin\">len</span> <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>intArr3<span class=\"token punctuation\">)</span>\n\trand<span class=\"token punctuation\">.</span><span class=\"token function\">Seed</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UnixNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t  intArr3<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"交换前：\"</span><span class=\"token punctuation\">,</span>intArr3<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//反转打印</span>\n\ttemp <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t  temp <span class=\"token operator\">=</span> intArr3<span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span>\n\t  intArr3<span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> intArr3<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t  intArr3<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"交换后：\"</span><span class=\"token punctuation\">,</span>intArr3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\n交换前： [76 85 22 96 35]\n交换后： [35 96 22 85 76]\n ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\n交换前： [8 60 13 96 46]\n交换后： [46 96 13 60 8]</code></pre>\n<h2 id=\"为什么需要切片\"><a href=\"#为什么需要切片\" class=\"headerlink\" title=\"为什么需要切片\"></a>为什么需要切片</h2><ul>\n<li><p>需求</p>\n<p>我们需要一个数组用于保存学生的成绩，但是学生的个数是不确定的，怎么办？ 答案：使用切片</p>\n</li>\n</ul>\n<h2 id=\"切片的基本介绍\"><a href=\"#切片的基本介绍\" class=\"headerlink\" title=\"切片的基本介绍\"></a>切片的基本介绍</h2><ol>\n<li><p>切片的英文是 slice</p>\n</li>\n<li><p>切片是数组的一个引用，因此切片是引用类型，在进行传递时，遵守引用传递的机制。</p>\n</li>\n<li><p>切片的使用和数组类似，遍历切片、访问切片的元素和求切片长度 len(slice)都一样。 </p>\n</li>\n<li><p>切片的长度是可以变化的，因此切片是一个可以动态变化数组。</p>\n</li>\n<li><p>切片定义的基本语法:</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//var 切片名 []类型</span>\n<span class=\"token comment\">//比如</span>\n<span class=\"token keyword\">var</span> a <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span></code></pre></li>\n</ol>\n<h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><p>演示一个切片的基本使用：</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> intArr <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">66</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">//声明/定义一个切片</span>\n\t<span class=\"token comment\">//slice := intArr[1:3]</span>\n\t<span class=\"token comment\">//1. slice就是切片名</span>\n\t<span class=\"token comment\">//2. intArr[1:3]表示slice引用到intArr这个数组</span>\n\t<span class=\"token comment\">//3. 引用intArr数组的起始下标为1，最后的下标为3（但是不包含3）</span>\n\tslice <span class=\"token operator\">:=</span> intArr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"intArr:\"</span><span class=\"token punctuation\">,</span> intArr<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice 的元素是 :\"</span><span class=\"token punctuation\">,</span> slice<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 22  33</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice的元素个数:\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice的容量:\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 切片的容量是可以动态变化的</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo03&#x2F;main  go run .&#x2F;main.go\nintArr: [1 22 33 66 99]\nslice 的元素是 : [22 33]\nslice的元素个数: 2\nslice的容量: 4</code></pre>\n<h2 id=\"切片在内存中形式（重要）\"><a href=\"#切片在内存中形式（重要）\" class=\"headerlink\" title=\"切片在内存中形式（重要）\"></a>切片在内存中形式（重要）</h2><ul>\n<li><p>基本介绍</p>\n<p>为了让大家更加深入的理解切片，我们画图分析切片在内存中是如何布局的，这是一个非常重要的知识点：（以前面的案例来分析）</p>\n</li>\n<li><p>画出前面的切片内存布局</p>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210127084544489.png\" alt=\"image-20210127084544489\" loading=\"lazy\"></p>\n<ul>\n<li><p>对上面的分析图总结</p>\n<ol>\n<li>slice的确是一个引用类型</li>\n<li>slice从底层来说，其实就是一个数据结构（strcut结构体）</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> slice <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n  ptr <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n  <span class=\"token builtin\">len</span> <span class=\"token builtin\">int</span>\n  <span class=\"token builtin\">cap</span> <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">&#125;</span></code></pre></li>\n</ul>\n<h2 id=\"切片的使用\"><a href=\"#切片的使用\" class=\"headerlink\" title=\"切片的使用\"></a>切片的使用</h2><ul>\n<li><p>方式1</p>\n<p>第一种方式：定义一个切片，然后让切片去引用一个已经创建好的数组，比如前面的案例就是这样的。</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> arr <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr:\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice 的元素是 :\"</span><span class=\"token punctuation\">,</span> slice<span class=\"token punctuation\">)</span> \nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice的元素个数:\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice的容量:\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></li>\n<li><p>方式2</p>\n<p>第二种方式：通过make来创建切片</p>\n<p>基本语法：<code>var 切片名 []type = make([]type,len,[cap])</code></p>\n<p>参数说明：type就是数据类型，len是大小，cap是指定切片容量，可选，<strong>如果你分配了cap，则要求cap&gt;&#x3D;len</strong></p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> slice <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nslice<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nslice<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token comment\">//对于切片，必须make使用</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice的size=\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice的cap=\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210127085505587.png\" alt=\"image-20210127085505587\" loading=\"lazy\"></p>\n<p>对上面代码的小结：</p>\n<ol>\n<li>通过make方式创建切片可以指定切片的大小和容量</li>\n<li>如果没有给切片的各个元素赋值，那么就会使用默认值【int, float &#x3D;&gt;0     string&#x3D;&gt;””   bool&#x3D;&gt;false】</li>\n<li>通过make方式创建的切片对应的数组是由make底层维护，对外不可见，即只能通过slice去访问各个元素。</li>\n</ol>\n</li>\n<li><p>方式3</p>\n<p>第三种方式：定义一个切片，直接就指定具体数组，使用原理类似make的方式</p>\n<p>案例演示：</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//方式3</span>\n<span class=\"token comment\">//第3种方式：定义一个切片，直接就指定具体数组，使用原理类似make的方式</span>\n<span class=\"token keyword\">var</span> strSlice <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mary\"</span><span class=\"token punctuation\">&#125;</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"strSlice = \"</span><span class=\"token punctuation\">,</span> strSlice<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"strSlice size = \"</span><span class=\"token punctuation\">,</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>strSlice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"strSlice cap = \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>strSlice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></li>\n<li><p>方式1和方式2的区别（面试）</p>\n<p>方式1是直接引用数组，这个数组是事先存在的，程序员是可见的。</p>\n<p>方式2是通过make来创建切片，make也会创建一个数组，是由切片在底层进行维护，程序员是看不见的。make创建切片的示意图：</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210127091016998.png\" alt=\"image-20210127091016998\" loading=\"lazy\"></p>\n</li>\n</ul>\n<h2 id=\"切片的遍历\"><a href=\"#切片的遍历\" class=\"headerlink\" title=\"切片的遍历\"></a>切片的遍历</h2><p>切片的遍历和数组一样，也有两种方式</p>\n<ul>\n<li>for循环常规方式遍历</li>\n<li>for-range结构遍历切片</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">&#125;</span>\n\tslice <span class=\"token operator\">:=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 20,30,40</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice[%v] = %v\\t\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> slice<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> slice <span class=\"token punctuation\">&#123;</span>\n\t  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = %v, v = %v\\t\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo04&#x2F;main  go run .&#x2F;main.go\nslice[0] &#x3D; 20   slice[1] &#x3D; 30   slice[2] &#x3D; 40\ni &#x3D; 0, v &#x3D; 20   i &#x3D; 1, v &#x3D; 30   i &#x3D; 2, v &#x3D; 40</code></pre>\n<h2 id=\"切片的使用的注意事项和细节讨论\"><a href=\"#切片的使用的注意事项和细节讨论\" class=\"headerlink\" title=\"切片的使用的注意事项和细节讨论\"></a>切片的使用的注意事项和细节讨论</h2><ol>\n<li><p>切片初始化时 var slice &#x3D; arr[startIndex:endIndex]</p>\n<pre class=\"language-none\"><code class=\"language-none\">说明:从 arr 数组下标为 startIndex，取到 下标为 endIndex 的元素(不含 arr[endIndex])。</code></pre></li>\n<li><p>切片初始化时，仍然不能越界。范围在 [0-len(arr)] 之间，但是可以动态增长.</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span><span class=\"token operator\">></span> <span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>end<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">:</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span><span class=\"token operator\">></span> <span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span><span class=\"token operator\">></span> <span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></code></pre></li>\n<li><p>cap是一个内置函数，用于统计切片的容量，即最大可以存放多少个元素。</p>\n</li>\n<li><p>切片定义完后，还不能使用，因为本身是一个空的，需要让其引用到一个数组，或者 make一个空间供切片来使用</p>\n</li>\n<li><p>切片可以继续切片【演示】</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">&#125;</span>\n\tslice <span class=\"token operator\">:=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 20,30,40</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice[%v] = %v\\t\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> slice<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> slice <span class=\"token punctuation\">&#123;</span>\n\t  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = %v, v = %v\\t\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//定义slice2</span>\n  slice2 <span class=\"token operator\">:=</span> slice<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// slice [ 20, 30, 40]   [30]</span>\n  slice2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\">// 因为arr， slice和slcie2指向的数据空间是同一个，因此slice2[0]=100</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice2 = \"</span><span class=\"token punctuation\">,</span> slice2<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice = \"</span><span class=\"token punctuation\">,</span>slice<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr = \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre></li>\n<li><p>用append内置函数，可以对切片进行动态追加</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> slice3 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//通过append直接给slice3追加具体的元素</span>\nslice3 <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>slice3<span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">600</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice3=\"</span>，slice3<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 100 200 300 400 500 600</span>\n<span class=\"token comment\">//通过append将切片slice3追加给slice3</span>\nslice3 <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>slice3<span class=\"token punctuation\">,</span> slice3<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//100 200 300 400 500 600 100 200 300 400 500 600</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice3 append slice3 = \"</span><span class=\"token punctuation\">,</span> slice3<span class=\"token punctuation\">)</span></code></pre>\n<p>对上面的代码的小结</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210127093344890.png\" alt=\"image-20210127093344890\" loading=\"lazy\"></p>\n<p>切片append操作的底层原理分析：</p>\n<p>切片append操作的本质就是对数组扩容</p>\n<p>go 底层会创建一下新的数组newArr(安装扩容后大小)</p>\n<p>将 slice 原来包含的元素拷贝到新的数组 newArr<br>slice 重新引用到 newArr<br>注意 newArr 是在底层来维护的，程序员不可见.</p>\n</li>\n<li><p>切片的拷贝操作</p>\n<p>切片使用copy内置函数完成拷贝，举例说明</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> slice4 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> slice5 <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>slice5<span class=\"token punctuation\">,</span> slice4<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice4=\"</span><span class=\"token punctuation\">,</span> slice4<span class=\"token punctuation\">)</span><span class=\"token comment\">// 1 , 2, 3 , 4 , 5</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice5=\"</span><span class=\"token punctuation\">,</span> slice5<span class=\"token punctuation\">)</span><span class=\"token comment\">// 1 ,2, 3,4,5,0,0,0,0,0</span></code></pre>\n<p><strong>对上面代码的说明：</strong></p>\n<ol>\n<li>copy(para1, para2) 参数的数据类型是切片</li>\n<li>按照上面的代码来看, slice4 和 slice5 的数据空间是独立，相互不影响，也就是说 slice4[0]&#x3D; 999,slice5[0] 仍然是 1</li>\n</ol>\n</li>\n<li><p>关于拷贝的注意事项</p>\n<ul>\n<li>下面的代码又没有错误？</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> a <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span><span class=\"token comment\">// [0]</span>\n<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span></code></pre>\n<p>**上面的代码没有问题，可以运行，最后输出的是[1]</p>\n</li>\n<li><p>切片是引用类型，所以在传递时，遵守引用传递机制。看两段代码，并分析底层原理<img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210127132312369.png\" alt=\"image-20210127132312369\" loading=\"lazy\"></p>\n</li>\n</ol>\n<h2 id=\"string和slice\"><a href=\"#string和slice\" class=\"headerlink\" title=\"string和slice\"></a>string和slice</h2><ol>\n<li>string底层是一个byte数组，因此string也可以进行切片处理案例演示:</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//string底层是一个byte数组，因此string也可以进行切片处理</span>\n  str <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello@atguigu\"</span>\n  <span class=\"token comment\">//使用切片获取到 atguigu</span>\n  slice <span class=\"token operator\">:=</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice=\"</span><span class=\"token punctuation\">,</span>slice<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"2\">\n<li>string和切片在内存的形式，以”abcd”画出内存示意图</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210127132541123.png\" alt=\"image-20210127132541123\" loading=\"lazy\"></p>\n<ol start=\"3\">\n<li>string是不可变的，也就是说不能通过str[0]&#x3D;’z’方式来修改字符串</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'z'</span> <span class=\"token comment\">//编译不会通过，会报错，因为string是不可变的</span></code></pre>\n<ol start=\"4\">\n<li>如果需要修改字符串，可以先将string -&gt; []byte  或者 []rune -&gt; 修改 -&gt; 重写转成string</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//如果需要修改字符串，可以先将string -> []byte  或者 []rune -> 修改 -> 重写转成string</span>\n<span class=\"token comment\">//\"hello@atguigu\"=>改成\"zello@atguigu\"</span>\nstr <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello@atguigu\"</span>\narr1 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\narr1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'z'</span>\nstr <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str=\"</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//细节，我们转成[]byte后，可以处理英文和数字，但是不能处理中文</span>\n<span class=\"token comment\">//原因：[]byte字节来处理string中的字符，而一个汉子是3个字节，因此会出现乱码</span>\n<span class=\"token comment\">//解决方法：将string转成[]rune即可，因为[]rune是按字符处理，兼容汉字</span>\narr1 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">rune</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\narr1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'北'</span>\nstr <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str=\"</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"切片的课堂练习\"><a href=\"#切片的课堂练习\" class=\"headerlink\" title=\"切片的课堂练习\"></a>切片的课堂练习</h2><p><strong>题目</strong>：编写一个函数fbn(n int)，要求完成</p>\n<ol>\n<li>可以接收一个 n int</li>\n<li>能够将斐波那契的数列放到切片中</li>\n<li>提示, 斐波那契的数列形式:</li>\n</ol>\n<p><code>arr[0] = 1; arr[1] = 1; arr[2]=2; arr[3] = 3; arr[4]=5; arr[5]=8</code></p>\n<ul>\n<li>代码+思路：</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//声明一个切片，切片大小n</span>\n  fbnSlice <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//第一个数和第二个数的斐波那契数为1</span>\n  fbnSlice<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  fbnSlice<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token comment\">//进行for循环存放斐波那契数列</span>\n  <span class=\"token keyword\">for</span> i<span class=\"token operator\">:=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n    fbnSlice<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fbnSlice<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> fbnSlice<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> fbnSlice\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  fnbSlice <span class=\"token operator\">:=</span> <span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fnbSlice=\"</span><span class=\"token punctuation\">,</span> fnbSlice<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo04&#x2F;main  go run .&#x2F;main.go\nfnbSlice&#x3D; [1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765]</code></pre>\n","more":"<h2 id=\"为什么需要数组\"><a href=\"#为什么需要数组\" class=\"headerlink\" title=\"为什么需要数组\"></a>为什么需要数组</h2><ul>\n<li><p>问题</p>\n<p>一个养鸡场有 6 只鸡，它们的体重分别是 3kg,5kg,1kg,3.4kg,2kg,50kg 。请问这六只鸡的总体重是多少?平均体重是多少? 请你编一个程序。&#x3D;》数组</p>\n</li>\n<li><p>使用传统方法来解决</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\then1 <span class=\"token operator\">:=</span> <span class=\"token number\">3.0</span>\n\then2 <span class=\"token operator\">:=</span> <span class=\"token number\">5.0</span>\n\then3 <span class=\"token operator\">:=</span> <span class=\"token number\">1.0</span>\n\then4 <span class=\"token operator\">:=</span> <span class=\"token number\">3.4</span>\n\then5 <span class=\"token operator\">:=</span> <span class=\"token number\">2.0</span>\n\then6 <span class=\"token operator\">:=</span> <span class=\"token number\">50.0</span>\n\ttotalWeight <span class=\"token operator\">:=</span> hen1 <span class=\"token operator\">+</span> hen2 <span class=\"token operator\">+</span> hen3 <span class=\"token operator\">+</span> hen4 <span class=\"token operator\">+</span> hen5 <span class=\"token operator\">+</span> hen6\n\tavgWeight <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2f\"</span><span class=\"token punctuation\">,</span> totalWeight <span class=\"token operator\">/</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"totalWeight = %v,avgWeight = %v \\n\"</span><span class=\"token punctuation\">,</span> totalWeight<span class=\"token punctuation\">,</span> avgWeight<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\">totalWeight &#x3D; 64.4,avgWeight &#x3D; 10.73 </code></pre>\n<p><strong>说明：</strong></p>\n<ol>\n<li>使用传统方法不利于数据的管理和维护</li>\n<li>传统的方法不够灵活，因此我们需要引出新的数据类型：数组</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"数组介绍\"><a href=\"#数组介绍\" class=\"headerlink\" title=\"数组介绍\"></a>数组介绍</h2><p>​    数组可以存放多个同一类型数据。数组也是一种数据类型，在 Go 中，数组是值类型。</p>\n<h2 id=\"数组的快速入门\"><a href=\"#数组的快速入门\" class=\"headerlink\" title=\"数组的快速入门\"></a>数组的快速入门</h2><p>我们使用数组的方法来解决养鸡场的问题</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> hens <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.0</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.4</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">50.0</span>\n\thens<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">150.0</span>\n\ttotalWeight <span class=\"token operator\">:=</span> <span class=\"token number\">0.0</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>hens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\ttotalWeight <span class=\"token operator\">+=</span> hens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tavgWeight <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2f\"</span><span class=\"token punctuation\">,</span> totalWeight <span class=\"token operator\">/</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>hens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"totalWeight = %v,avgWeight = %v \\n\"</span><span class=\"token punctuation\">,</span> totalWeight<span class=\"token punctuation\">,</span> avgWeight<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\">totalWeight &#x3D; 214.4,avgWeight &#x3D; 30.63 </code></pre>\n<p>​    <strong>说明：</strong></p>\n<pre><code>1. 使用数组来解决问题，程序的可维护性增加\n2. 方法代码更加清晰，也容易扩展\n</code></pre>\n<h2 id=\"数组定义和内存布局\"><a href=\"#数组定义和内存布局\" class=\"headerlink\" title=\"数组定义和内存布局\"></a>数组定义和内存布局</h2><ul>\n<li><p>定义</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> 数组名 <span class=\"token punctuation\">[</span>数组大小<span class=\"token punctuation\">]</span>数据类型\n<span class=\"token keyword\">var</span> a <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n<span class=\"token comment\">//赋初值</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span> <span class=\"token comment\">//......</span></code></pre></li>\n<li><p>数组在内存布局（重要）</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210125141838794.png\" alt=\"image-20210125141838794\"></p>\n<ul>\n<li>对上图的总结：</li>\n</ul>\n<ol>\n<li>数组的地址可以通过数组名来获取 <code>&amp;intArr</code></li>\n<li>数组的第一个元素的地址，就是数组的首地址</li>\n<li>数组的各个元素的地址间隔是依据数组的类型决定，比如 <code>int64-&gt;8 int32-&gt;4...</code></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> intArr <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token comment\">// int占8个字节</span>\n\t<span class=\"token comment\">//当我们定义完数组后，其实数组的各个元素有默认值 0</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>intArr<span class=\"token punctuation\">)</span>\n\tintArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\tintArr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\tintArr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>intArr<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"intArr的地址=%p intArr[0]的地址=%p intArr[1]的地址=%p intArr[2]的地址=%p \\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>intArr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>intArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>intArr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>intArr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\n[0 0 0]\n[10 20 30]\nintArr的地址&#x3D;0xc0000b8000 intArr[0]的地址&#x3D;0xc0000b8000 intArr[1]的地址&#x3D;0xc0000b8008 intArr[2]的地址&#x3D;0xc0000b8010 </code></pre>\n<h2 id=\"数组的使用\"><a href=\"#数组的使用\" class=\"headerlink\" title=\"数组的使用\"></a>数组的使用</h2><ul>\n<li>访问数组元素</li>\n</ul>\n<p><strong>数组名[下标]</strong> 比如：你要使用a数组的第三个元素 a[2]</p>\n<ul>\n<li>快速入门案例</li>\n</ul>\n<p>从终端循环输入5个成绩，保存到float64数组，并输出。</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">  <span class=\"token keyword\">var</span> score <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入第%d个元素的值\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanln</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>score<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">//变量数组打印</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"score[%d]=%v\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\n请输入第1个元素的值\n5\n请输入第2个元素的值\n4\n请输入第3个元素的值\n3\n请输入第4个元素的值\n2\n请输入第5个元素的值\n1\nscore[0]&#x3D;5      score[1]&#x3D;4      score[2]&#x3D;3      score[3]&#x3D;2      score[4]&#x3D;1 </code></pre>\n\n<ul>\n<li>四种初始化数组的方式</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//四种初始化数组的方式</span>\n\t<span class=\"token keyword\">var</span> numArr01 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numArr01=\"</span><span class=\"token punctuation\">,</span> numArr01<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">var</span> numArr02 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numArr02=\"</span><span class=\"token punctuation\">,</span> numArr02<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//这里的[...]是规定的写法</span>\n\t<span class=\"token keyword\">var</span> numArr03 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numArr03=\"</span><span class=\"token punctuation\">,</span> numArr03<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">var</span> numArr04 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">900</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">999</span><span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numArr04=\"</span><span class=\"token punctuation\">,</span> numArr04<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//类型推导\t</span>\n\tstrArr05 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"rose\"</span><span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"strArr05=\"</span><span class=\"token punctuation\">,</span>strArr05<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\nnumArr01&#x3D; [1 2 3]\nnumArr02&#x3D; [5 6 7]\nnumArr03&#x3D; [8 9 10]\nnumArr04&#x3D; [900 800 999]\nstrArr05&#x3D; [ tom jack rose]</code></pre>\n\n<h2 id=\"数组的遍历\"><a href=\"#数组的遍历\" class=\"headerlink\" title=\"数组的遍历\"></a>数组的遍历</h2><h3 id=\"方式1-常规遍历\"><a href=\"#方式1-常规遍历\" class=\"headerlink\" title=\"方式1-常规遍历\"></a>方式1-常规遍历</h3><p>看上面的，不再赘述</p>\n<h3 id=\"方式2-for-range结构遍历\"><a href=\"#方式2-for-range结构遍历\" class=\"headerlink\" title=\"方式2-for-range结构遍历\"></a>方式2-for-range结构遍历</h3><p>这是Go语言的独有的结构，可以用来遍历访问数组的元素。</p>\n<ul>\n<li>for-range的基本语法</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">for</span> index<span class=\"token punctuation\">,</span> value <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> array01 <span class=\"token punctuation\">&#123;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>说明</p>\n<ol>\n<li>第一个返回值index是数组的下标</li>\n<li>第二个value是在该下标位置的值</li>\n<li>他们都是仅在for循环内部可见的局部变量</li>\n<li>遍历数组元素的时候，如果不想使用下标index，可以直接把下标index标为下划线_</li>\n<li>index和value的名称不是固定的，即程序员可以自行指定，一般命名为index和value</li>\n</ol>\n<ul>\n<li>for-range的案例</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//演示for-range遍历数组</span>\n\theroes <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"宋江\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"吴用\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"卢俊义\"</span><span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> heroes <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=%v v=%v\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"heroes[%d]=%v\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> heroes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> heroes <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"元素的值=%v\\n\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\ni&#x3D;0 v&#x3D;宋江heroes[0]&#x3D;宋江\ni&#x3D;1 v&#x3D;吴用heroes[1]&#x3D;吴用\ni&#x3D;2 v&#x3D;卢俊义heroes[2]&#x3D;卢俊义\n元素的值&#x3D;宋江\n元素的值&#x3D;吴用\n元素的值&#x3D;卢俊义</code></pre>\n\n<h2 id=\"数组使用的注意事项和细节\"><a href=\"#数组使用的注意事项和细节\" class=\"headerlink\" title=\"数组使用的注意事项和细节\"></a>数组使用的注意事项和细节</h2><ol>\n<li>数组是多个相同类型数据的组合，一个数组一旦声明&#x2F;定义了，其长度是固定的，不能动态变化</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//数组是多个相同类型数据的组合，一个数组一旦声明/定义了，其长度是固定的，不能动态变化。</span>\n\t<span class=\"token keyword\">var</span> arr01 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n\tarr01<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\tarr01<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n\t<span class=\"token comment\">//会报错</span>\n\tarr01<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span> <span class=\"token comment\">//数组类型和初始化的值的类型不匹配哦</span>\n\t<span class=\"token comment\">//其长度是固定的，不能动态变化，否则报越界</span>\n\tarr01<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">890</span> <span class=\"token comment\">//数组不能动态增长</span>\n\t\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>arr01<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"2\">\n<li><p><code>var arr []int</code>这时arr就是一个slice切片，切片后面专门讲解。</p>\n</li>\n<li><p>数组中的元素可以是任何数据类型，包括值类型和引用类型，但是不能混用。</p>\n</li>\n<li><p>数组创建后，如果没有赋值，有默认值（零值）</p>\n<pre class=\"language-none\"><code class=\"language-none\">数组类型数组： 默认值为 0\n字符串数组： 默认值为 &quot;&quot;\nbool数组： 默认值为false</code></pre></li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> arr01 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float32</span>\n<span class=\"token keyword\">var</span> arr02 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n<span class=\"token keyword\">var</span> arr03 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr01=%v arr02=%v arr03=%v\\n\"</span><span class=\"token punctuation\">,</span> arr01<span class=\"token punctuation\">,</span> arr02<span class=\"token punctuation\">,</span> arr03<span class=\"token punctuation\">)</span></code></pre>\n\n<ol start=\"5\">\n<li>使用数组的步骤<ol>\n<li>生命数组并开辟空间</li>\n<li>给数组各个元素赋值（默认零值）</li>\n<li>使用数组</li>\n</ol>\n</li>\n<li>数组的下标是从0开始的</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> arr04 <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token comment\">// 0-2</span>\n<span class=\"token keyword\">var</span> index <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\narr04<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"tom\"</span> <span class=\"token comment\">//arr04[3]越界奥</span></code></pre>\n\n<ol start=\"7\">\n<li>数组下标必须在指定范围内使用，否则报panic：数组越界，比如<code>var arr [5]int</code> 则有效下标为0-4</li>\n<li>Go的数组属值类型，在默认情况下是值传递，因此会进行值拷贝。数组见不会相互影响</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210125194444746.png\" alt=\"image-20210125194444746\"></p>\n<ol start=\"9\">\n<li>如想在其它函数中，去修改原来的数组，可以使用引用传递（指针方式）</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210125194631546.png\" alt=\"image-20210125194631546\"></p>\n<ol start=\"10\">\n<li>长度是数组类型的一部分，在传递函数参数时 需要考虑数组的长度，看下面的案例：</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210127073415872.png\" alt=\"image-20210127073415872\"></p>\n</li>\n</ul>\n<h2 id=\"数组的应用案例\"><a href=\"#数组的应用案例\" class=\"headerlink\" title=\"数组的应用案例\"></a>数组的应用案例</h2><ol>\n<li>创建一个byte类型的26个元素的数组，分别放置’A’-‘Z’.使用for循环访问所有元素并打印出来。提示：字符数据运算’A’+1-&gt;’B’</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> arr01 <span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>arr01<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n  \tarr01<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">+</span> <span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token comment\">//要将i转成byte类型</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>arr01<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n  \tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> arr01<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go      \nABCDEFGHIJKLMNOPQRSTUVWXYZ</code></pre>\n<ol start=\"2\">\n<li>请求出一个数组的最大值，并得到对应的下标。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> intArr <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">932</span><span class=\"token punctuation\">,</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">&#125;</span>\n\tmaxVal <span class=\"token operator\">:=</span> intArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\tmaxValIndex <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>intArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> intArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>maxVal <span class=\"token punctuation\">&#123;</span>\n\t\t\tmaxVal <span class=\"token operator\">=</span> intArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t\t\tmaxValIndex <span class=\"token operator\">=</span> i\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"maxVal = %v, maxValIndex = %v \\n\"</span><span class=\"token punctuation\">,</span> maxVal<span class=\"token punctuation\">,</span> maxValIndex<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\nmaxVal &#x3D; 932, maxValIndex &#x3D; 2 </code></pre>\n<ol start=\"3\">\n<li>请求出一个数组的和和平均值 for-range</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> doubleArr2 <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">var</span> sum <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> val <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> doubleArr2 <span class=\"token punctuation\">&#123;</span>\n\t\tsum <span class=\"token operator\">+=</span> val\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">var</span> avg <span class=\"token operator\">=</span> sum <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>doubleArr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum = %v avg = %v\\n\"</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">,</span> avg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\nsum &#x3D; 55 avg &#x3D; 5.5</code></pre>\n<ol start=\"4\">\n<li>要求：随机生成五个数，并将其反转打印，复杂应用。</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"time\"</span>\n\t<span class=\"token string\">\"math/rand\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> intArr3 <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n\t<span class=\"token builtin\">len</span> <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>intArr3<span class=\"token punctuation\">)</span>\n\trand<span class=\"token punctuation\">.</span><span class=\"token function\">Seed</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UnixNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t  intArr3<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"交换前：\"</span><span class=\"token punctuation\">,</span>intArr3<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//反转打印</span>\n\ttemp <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t  temp <span class=\"token operator\">=</span> intArr3<span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span>\n\t  intArr3<span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> intArr3<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t  intArr3<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"交换后：\"</span><span class=\"token punctuation\">,</span>intArr3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\n交换前： [76 85 22 96 35]\n交换后： [35 96 22 85 76]\n ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go\n交换前： [8 60 13 96 46]\n交换后： [46 96 13 60 8]</code></pre>\n<h2 id=\"为什么需要切片\"><a href=\"#为什么需要切片\" class=\"headerlink\" title=\"为什么需要切片\"></a>为什么需要切片</h2><ul>\n<li><p>需求</p>\n<p>我们需要一个数组用于保存学生的成绩，但是学生的个数是不确定的，怎么办？ 答案：使用切片</p>\n</li>\n</ul>\n<h2 id=\"切片的基本介绍\"><a href=\"#切片的基本介绍\" class=\"headerlink\" title=\"切片的基本介绍\"></a>切片的基本介绍</h2><ol>\n<li><p>切片的英文是 slice</p>\n</li>\n<li><p>切片是数组的一个引用，因此切片是引用类型，在进行传递时，遵守引用传递的机制。</p>\n</li>\n<li><p>切片的使用和数组类似，遍历切片、访问切片的元素和求切片长度 len(slice)都一样。 </p>\n</li>\n<li><p>切片的长度是可以变化的，因此切片是一个可以动态变化数组。</p>\n</li>\n<li><p>切片定义的基本语法:</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//var 切片名 []类型</span>\n<span class=\"token comment\">//比如</span>\n<span class=\"token keyword\">var</span> a <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span></code></pre></li>\n</ol>\n<h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><p>演示一个切片的基本使用：</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> intArr <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">66</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">//声明/定义一个切片</span>\n\t<span class=\"token comment\">//slice := intArr[1:3]</span>\n\t<span class=\"token comment\">//1. slice就是切片名</span>\n\t<span class=\"token comment\">//2. intArr[1:3]表示slice引用到intArr这个数组</span>\n\t<span class=\"token comment\">//3. 引用intArr数组的起始下标为1，最后的下标为3（但是不包含3）</span>\n\tslice <span class=\"token operator\">:=</span> intArr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"intArr:\"</span><span class=\"token punctuation\">,</span> intArr<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice 的元素是 :\"</span><span class=\"token punctuation\">,</span> slice<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 22  33</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice的元素个数:\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice的容量:\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 切片的容量是可以动态变化的</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo03&#x2F;main  go run .&#x2F;main.go\nintArr: [1 22 33 66 99]\nslice 的元素是 : [22 33]\nslice的元素个数: 2\nslice的容量: 4</code></pre>\n<h2 id=\"切片在内存中形式（重要）\"><a href=\"#切片在内存中形式（重要）\" class=\"headerlink\" title=\"切片在内存中形式（重要）\"></a>切片在内存中形式（重要）</h2><ul>\n<li><p>基本介绍</p>\n<p>为了让大家更加深入的理解切片，我们画图分析切片在内存中是如何布局的，这是一个非常重要的知识点：（以前面的案例来分析）</p>\n</li>\n<li><p>画出前面的切片内存布局</p>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210127084544489.png\" alt=\"image-20210127084544489\"></p>\n<ul>\n<li><p>对上面的分析图总结</p>\n<ol>\n<li>slice的确是一个引用类型</li>\n<li>slice从底层来说，其实就是一个数据结构（strcut结构体）</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> slice <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n  ptr <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n  <span class=\"token builtin\">len</span> <span class=\"token builtin\">int</span>\n  <span class=\"token builtin\">cap</span> <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">&#125;</span></code></pre></li>\n</ul>\n<h2 id=\"切片的使用\"><a href=\"#切片的使用\" class=\"headerlink\" title=\"切片的使用\"></a>切片的使用</h2><ul>\n<li><p>方式1</p>\n<p>第一种方式：定义一个切片，然后让切片去引用一个已经创建好的数组，比如前面的案例就是这样的。</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> arr <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr:\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice 的元素是 :\"</span><span class=\"token punctuation\">,</span> slice<span class=\"token punctuation\">)</span> \nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice的元素个数:\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice的容量:\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></li>\n<li><p>方式2</p>\n<p>第二种方式：通过make来创建切片</p>\n<p>基本语法：<code>var 切片名 []type = make([]type,len,[cap])</code></p>\n<p>参数说明：type就是数据类型，len是大小，cap是指定切片容量，可选，<strong>如果你分配了cap，则要求cap&gt;&#x3D;len</strong></p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> slice <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nslice<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nslice<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token comment\">//对于切片，必须make使用</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice的size=\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice的cap=\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210127085505587.png\" alt=\"image-20210127085505587\"></p>\n<p>对上面代码的小结：</p>\n<ol>\n<li>通过make方式创建切片可以指定切片的大小和容量</li>\n<li>如果没有给切片的各个元素赋值，那么就会使用默认值【int, float &#x3D;&gt;0     string&#x3D;&gt;””   bool&#x3D;&gt;false】</li>\n<li>通过make方式创建的切片对应的数组是由make底层维护，对外不可见，即只能通过slice去访问各个元素。</li>\n</ol>\n</li>\n<li><p>方式3</p>\n<p>第三种方式：定义一个切片，直接就指定具体数组，使用原理类似make的方式</p>\n<p>案例演示：</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//方式3</span>\n<span class=\"token comment\">//第3种方式：定义一个切片，直接就指定具体数组，使用原理类似make的方式</span>\n<span class=\"token keyword\">var</span> strSlice <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mary\"</span><span class=\"token punctuation\">&#125;</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"strSlice = \"</span><span class=\"token punctuation\">,</span> strSlice<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"strSlice size = \"</span><span class=\"token punctuation\">,</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>strSlice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"strSlice cap = \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>strSlice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></li>\n<li><p>方式1和方式2的区别（面试）</p>\n<p>方式1是直接引用数组，这个数组是事先存在的，程序员是可见的。</p>\n<p>方式2是通过make来创建切片，make也会创建一个数组，是由切片在底层进行维护，程序员是看不见的。make创建切片的示意图：</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210127091016998.png\" alt=\"image-20210127091016998\"></p>\n</li>\n</ul>\n<h2 id=\"切片的遍历\"><a href=\"#切片的遍历\" class=\"headerlink\" title=\"切片的遍历\"></a>切片的遍历</h2><p>切片的遍历和数组一样，也有两种方式</p>\n<ul>\n<li>for循环常规方式遍历</li>\n<li>for-range结构遍历切片</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">&#125;</span>\n\tslice <span class=\"token operator\">:=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 20,30,40</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice[%v] = %v\\t\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> slice<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> slice <span class=\"token punctuation\">&#123;</span>\n\t  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = %v, v = %v\\t\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo04&#x2F;main  go run .&#x2F;main.go\nslice[0] &#x3D; 20   slice[1] &#x3D; 30   slice[2] &#x3D; 40\ni &#x3D; 0, v &#x3D; 20   i &#x3D; 1, v &#x3D; 30   i &#x3D; 2, v &#x3D; 40</code></pre>\n<h2 id=\"切片的使用的注意事项和细节讨论\"><a href=\"#切片的使用的注意事项和细节讨论\" class=\"headerlink\" title=\"切片的使用的注意事项和细节讨论\"></a>切片的使用的注意事项和细节讨论</h2><ol>\n<li><p>切片初始化时 var slice &#x3D; arr[startIndex:endIndex]</p>\n<pre class=\"language-none\"><code class=\"language-none\">说明:从 arr 数组下标为 startIndex，取到 下标为 endIndex 的元素(不含 arr[endIndex])。</code></pre></li>\n<li><p>切片初始化时，仍然不能越界。范围在 [0-len(arr)] 之间，但是可以动态增长.</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span><span class=\"token operator\">></span> <span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>end<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">:</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span><span class=\"token operator\">></span> <span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span><span class=\"token operator\">></span> <span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></code></pre></li>\n<li><p>cap是一个内置函数，用于统计切片的容量，即最大可以存放多少个元素。</p>\n</li>\n<li><p>切片定义完后，还不能使用，因为本身是一个空的，需要让其引用到一个数组，或者 make一个空间供切片来使用</p>\n</li>\n<li><p>切片可以继续切片【演示】</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">&#125;</span>\n\tslice <span class=\"token operator\">:=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 20,30,40</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice[%v] = %v\\t\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> slice<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> slice <span class=\"token punctuation\">&#123;</span>\n\t  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = %v, v = %v\\t\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//定义slice2</span>\n  slice2 <span class=\"token operator\">:=</span> slice<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// slice [ 20, 30, 40]   [30]</span>\n  slice2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\">// 因为arr， slice和slcie2指向的数据空间是同一个，因此slice2[0]=100</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice2 = \"</span><span class=\"token punctuation\">,</span> slice2<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice = \"</span><span class=\"token punctuation\">,</span>slice<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr = \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre></li>\n<li><p>用append内置函数，可以对切片进行动态追加</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> slice3 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//通过append直接给slice3追加具体的元素</span>\nslice3 <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>slice3<span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">600</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice3=\"</span>，slice3<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 100 200 300 400 500 600</span>\n<span class=\"token comment\">//通过append将切片slice3追加给slice3</span>\nslice3 <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>slice3<span class=\"token punctuation\">,</span> slice3<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//100 200 300 400 500 600 100 200 300 400 500 600</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice3 append slice3 = \"</span><span class=\"token punctuation\">,</span> slice3<span class=\"token punctuation\">)</span></code></pre>\n<p>对上面的代码的小结</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210127093344890.png\" alt=\"image-20210127093344890\"></p>\n<p>切片append操作的底层原理分析：</p>\n<p>切片append操作的本质就是对数组扩容</p>\n<p>go 底层会创建一下新的数组newArr(安装扩容后大小)</p>\n<p>将 slice 原来包含的元素拷贝到新的数组 newArr<br>slice 重新引用到 newArr<br>注意 newArr 是在底层来维护的，程序员不可见.</p>\n</li>\n<li><p>切片的拷贝操作</p>\n<p>切片使用copy内置函数完成拷贝，举例说明</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> slice4 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> slice5 <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>slice5<span class=\"token punctuation\">,</span> slice4<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice4=\"</span><span class=\"token punctuation\">,</span> slice4<span class=\"token punctuation\">)</span><span class=\"token comment\">// 1 , 2, 3 , 4 , 5</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice5=\"</span><span class=\"token punctuation\">,</span> slice5<span class=\"token punctuation\">)</span><span class=\"token comment\">// 1 ,2, 3,4,5,0,0,0,0,0</span></code></pre>\n<p><strong>对上面代码的说明：</strong></p>\n<ol>\n<li>copy(para1, para2) 参数的数据类型是切片</li>\n<li>按照上面的代码来看, slice4 和 slice5 的数据空间是独立，相互不影响，也就是说 slice4[0]&#x3D; 999,slice5[0] 仍然是 1</li>\n</ol>\n</li>\n<li><p>关于拷贝的注意事项</p>\n<ul>\n<li>下面的代码又没有错误？</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> a <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span><span class=\"token comment\">// [0]</span>\n<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>slice<span class=\"token punctuation\">)</span></code></pre>\n<p>**上面的代码没有问题，可以运行，最后输出的是[1]</p>\n</li>\n<li><p>切片是引用类型，所以在传递时，遵守引用传递机制。看两段代码，并分析底层原理<img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210127132312369.png\" alt=\"image-20210127132312369\"></p>\n</li>\n</ol>\n<h2 id=\"string和slice\"><a href=\"#string和slice\" class=\"headerlink\" title=\"string和slice\"></a>string和slice</h2><ol>\n<li>string底层是一个byte数组，因此string也可以进行切片处理案例演示:</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//string底层是一个byte数组，因此string也可以进行切片处理</span>\n  str <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello@atguigu\"</span>\n  <span class=\"token comment\">//使用切片获取到 atguigu</span>\n  slice <span class=\"token operator\">:=</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slice=\"</span><span class=\"token punctuation\">,</span>slice<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ol start=\"2\">\n<li>string和切片在内存的形式，以”abcd”画出内存示意图</li>\n</ol>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210127132541123.png\" alt=\"image-20210127132541123\"></p>\n<ol start=\"3\">\n<li>string是不可变的，也就是说不能通过str[0]&#x3D;’z’方式来修改字符串</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'z'</span> <span class=\"token comment\">//编译不会通过，会报错，因为string是不可变的</span></code></pre>\n<ol start=\"4\">\n<li>如果需要修改字符串，可以先将string -&gt; []byte  或者 []rune -&gt; 修改 -&gt; 重写转成string</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//如果需要修改字符串，可以先将string -> []byte  或者 []rune -> 修改 -> 重写转成string</span>\n<span class=\"token comment\">//\"hello@atguigu\"=>改成\"zello@atguigu\"</span>\nstr <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello@atguigu\"</span>\narr1 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\narr1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'z'</span>\nstr <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str=\"</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//细节，我们转成[]byte后，可以处理英文和数字，但是不能处理中文</span>\n<span class=\"token comment\">//原因：[]byte字节来处理string中的字符，而一个汉子是3个字节，因此会出现乱码</span>\n<span class=\"token comment\">//解决方法：将string转成[]rune即可，因为[]rune是按字符处理，兼容汉字</span>\narr1 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">rune</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\narr1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'北'</span>\nstr <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str=\"</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"切片的课堂练习\"><a href=\"#切片的课堂练习\" class=\"headerlink\" title=\"切片的课堂练习\"></a>切片的课堂练习</h2><p><strong>题目</strong>：编写一个函数fbn(n int)，要求完成</p>\n<ol>\n<li>可以接收一个 n int</li>\n<li>能够将斐波那契的数列放到切片中</li>\n<li>提示, 斐波那契的数列形式:</li>\n</ol>\n<p><code>arr[0] = 1; arr[1] = 1; arr[2]=2; arr[3] = 3; arr[4]=5; arr[5]=8</code></p>\n<ul>\n<li>代码+思路：</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//声明一个切片，切片大小n</span>\n  fbnSlice <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//第一个数和第二个数的斐波那契数为1</span>\n  fbnSlice<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  fbnSlice<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token comment\">//进行for循环存放斐波那契数列</span>\n  <span class=\"token keyword\">for</span> i<span class=\"token operator\">:=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n    fbnSlice<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fbnSlice<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> fbnSlice<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> fbnSlice\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  fnbSlice <span class=\"token operator\">:=</span> <span class=\"token function\">fbn</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fnbSlice=\"</span><span class=\"token punctuation\">,</span> fnbSlice<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-none\"><code class=\"language-none\"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo04&#x2F;main  go run .&#x2F;main.go\nfnbSlice&#x3D; [1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765]</code></pre>","categories":[],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}