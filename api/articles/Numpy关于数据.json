{"title":"Numpy关于数据","slug":"Numpy关于数据","date":"2022-05-29T11:41:37.000Z","updated":"2022-06-05T09:31:05.983Z","comments":true,"path":"api/articles/Numpy关于数据.json","excerpt":"Numpy关于数据Numpy读取保存数据​        数据一般都被记录在存储当中，我们常见的小规模数据大多是 Excel 的 xlsx，csv, json, 或 txt，log 等等格式。 当我们要处理数据，特别是运算数据的时候，我们都能拿 Python 读取出来。而在大数据这种情况下，数据是存储在 MySQL，Mongodb 等这种数据库中的， 同样，Python 也提供了很多接口来读取这些数据。​        今天我们想聊聊其中的一部分，用 Numpy 来直接读取数据（通常是纯数值形式的数据），并加以运算的流程。而且看看我们可以如何保存 Numpy 里的数据。","covers":["http://cdn.leafii.top/img/20220603170252.png","http://cdn.leafii.top/img/20220604123440.png"],"content":"<h1 id=\"Numpy关于数据\"><a href=\"#Numpy关于数据\" class=\"headerlink\" title=\"Numpy关于数据\"></a>Numpy关于数据</h1><h2 id=\"Numpy读取保存数据\"><a href=\"#Numpy读取保存数据\" class=\"headerlink\" title=\"Numpy读取保存数据\"></a>Numpy读取保存数据</h2><p>​        数据一般都被记录在存储当中，我们常见的小规模数据大多是 Excel 的 xlsx，csv, json, 或 txt，log 等等格式。 当我们要处理数据，特别是运算数据的时候，我们都能拿 Python 读取出来。而在大数据这种情况下，数据是存储在 MySQL，Mongodb 等这种数据库中的， 同样，Python 也提供了很多接口来读取这些数据。</p>\n<p>​        今天我们想聊聊其中的一部分，用 Numpy 来直接读取数据（通常是纯数值形式的数据），并加以运算的流程。而且看看我们可以如何保存 Numpy 里的数据。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"加载常用数据格式\"><a href=\"#加载常用数据格式\" class=\"headerlink\" title=\"加载常用数据格式\"></a>加载常用数据格式</h3><ul>\n<li><code>np.loadtxt(), np.fromstring()</code></li>\n</ul>\n<p>​        一般我们都把数据存放在文件中，数据一般长这样：</p>\n<p>![](<a href=\"http://cdn.leafii.top/img/Screen\">http://cdn.leafii.top/img/Screen</a> Shot 2022-06-02 at 22.36.26.png)</p>\n<p>​        如果用Excel打开数据，也有可能像下面这样：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220603170252.png\" loading=\"lazy\"></p>\n<p>​        下面，请使用已经为你准备好了的数据，从上篇文章的里面拷贝了一份，作为csv格式存起来了，使用以下的代码查看文件中的数据：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data file in directory:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/data.csv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;]\n\n # StudentID, Age, Score\n20131,10,67\n20132,11,88\n20133,12,98\n20134,8,100\n20135,9,75\n20136,12,78</code></pre>\n\n<p>​        如果现在要模拟经常要加载的情况，从文件中加载出来。如果使用纯python，可以一行一行读出来，然后保存在list中；但是也可以直接用numpy的方式读取出来：使用<code>np.loadtxt()</code>功能，我们就可以自定义地读取出来数据了。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>loadtxt<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/data.csv\"</span><span class=\"token punctuation\">,</span> delimiter<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> skiprows<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[20131    10    67]\n [20132    11    88]\n [20133    12    98]\n [20134     8   100]\n [20135     9    75]\n [20136    12    78]]</code></pre>\n\n<p>​        在<code>loadtxt</code>的参数中，我们传入<code>，</code>让numpy在做数据分隔的时候，以逗号作为分隔符。同时<code>skiprow</code>可以skip掉第一行的描述型文字（默认也会自动skip掉第一行），还有读取出来的数据要放到定义好了的&#96;dtype&#x3D;np.int类型的array中，这一行的功能就可以轻松读取这个csv文件的数据了。</p>\n<p>​        请注意：<code>np.loadtxt()</code>为什么不叫<code>np.loadcsv()</code>呢？因为csv数据也属于纯文本数据，如果想要加载后缀名为<code>txt</code>的文件，也是没问题的。以上就是最普通的一种加载数据方式。下面我们来看一种更加有趣的加载过程。能不能直接从字符中加载数据呢？</p>\n<p>​        有时候，我需要对字符串加工处理后，直接读这个加工之后的字符串。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">row_string <span class=\"token operator\">=</span> <span class=\"token string\">\"20131, 10, 67, 20132, 11, 88, 20133, 12, 98, 20134, 8, 100, 20135, 9, 75, 20136, 12, 78\"</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>fromstring<span class=\"token punctuation\">(</span>row_string<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[20131    10    67]\n [20132    11    88]\n [20133    12    98]\n [20134     8   100]\n [20135     9    75]\n [20136    12    78]]</code></pre>\n\n<p>​        请注意，这种方法目前只能读取一个数值序列，读完这个序列之后，可以再使用numpy的<code>reshape</code>方法把数据定义成你想要的样子。另外要注意的一点是对比<code>np.loadtxt(delimiter=&quot;,&quot;)</code>和<code>np.fromstring(sep=&quot;,&quot;)</code>这两个用来判断分隔符的参数，它们的参数命名是不一样的。</p>\n<p>​        numpy可以读取<code>csv</code>和<code>txt</code>格式的数据，但是无法读取Excel中的xlsx数据格式，未来可以使用Pandas库进行xlsx数据格式的读取。</p>\n<h3 id=\"保存数据\"><a href=\"#保存数据\" class=\"headerlink\" title=\"保存数据\"></a>保存数据</h3><p>​        在日常生活中经常会碰到的数据格式，都能用Numpy读，在读取完之后或者处理完数据之后，如果想把数据保存起来，怎么办呢？好在Numpy还是挺人性化的，也有丰富的方法来处理保存数据这件事。</p>\n<ul>\n<li><code>np.savetxt()</code></li>\n</ul>\n<p>​        Numpy存数据，存哪种数据格式，取决于你想不想这份数据被人查看，或者被其他语言编辑，如果想的话，你就会保存成一些通用的数据格式，比如<code>csv</code>或<code>txt</code>。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numpy data:\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>savetxt<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.csv\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> delimiter<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> fmt<span class=\"token operator\">=</span><span class=\"token string\">'%s'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data file in directory:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.csv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">numpy data:\n [[20131    10    67]\n [20132    11    88]\n [20133    12    98]\n [20134     8   100]\n [20135     9    75]\n [20136    12    78]]\ndata file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;]\n\n 20131,10,67\n20132,11,88\n20133,12,98\n20134,8,100\n20135,9,75\n20136,12,78</code></pre>\n\n<ul>\n<li><code>np.save(), np.savez(), np.savez_compressed()</code></li>\n</ul>\n<p>​        还有一些Numpy独有的模式，那就是用二进制的格式保存。如果你没有想让别人看你的数据，你只想自己使用Numpy时加载的话，那你完全就可以用这种方式存储下来。请注意，使用<code>np.save()</code>来保存，保存的是一个以<code>.npy</code>结尾的二进制文件。加载的时候，我们能用<code>np.load()</code>直接加载这个二进制数据文件。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.npy\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data file in directory:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nnpy_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.npy\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>npy_data<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;, &#39;save_data.npy&#39;]\n[[20131    10    67]\n [20132    11    88]\n [20133    12    98]\n [20134     8   100]\n [20135     9    75]\n [20136    12    78]]</code></pre>\n\n<p>​        还有一种神奇的保存方式，在一个numpy文件中保存多个numpy array。有时候，你是分开多个array来存放不同类型的数据，比如机器学习中的traindata和testdata。这时我们能用<code>np.savez()</code>保存一个<code>.npz</code>文件将这两个array同时存储好。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">train_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ntest_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>savez<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.npz\"</span><span class=\"token punctuation\">,</span> train<span class=\"token operator\">=</span>train_data<span class=\"token punctuation\">,</span> test<span class=\"token operator\">=</span>test_data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data file in directory:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;, &#39;save_data.npy&#39;, &#39;save_data.npz&#39;]</code></pre>\n\n<p>​        <code>np.savez()</code> 第二、三个参数名 <code>train=xx</code>, <code>test=xx</code> 其实是可以自定义的，这些参数名会作为之后我们加载回来的索引标签。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">npz_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.npz\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"train:\"</span><span class=\"token punctuation\">,</span> npz_data<span class=\"token punctuation\">[</span><span class=\"token string\">\"train\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test:\"</span><span class=\"token punctuation\">,</span> npz_data<span class=\"token punctuation\">[</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">train: [1 2 3]\ntest: [11 22 33]</code></pre>\n\n<p>用 <code>np.savez()</code> 的时候，还有一个方法可以让你更节省空间，那就是用 <code>np.savez_compressed()</code> 来做一次数据压缩。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span>savez_compressed<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data_compressed.npz\"</span><span class=\"token punctuation\">,</span> train<span class=\"token operator\">=</span>train_data<span class=\"token punctuation\">,</span> test<span class=\"token operator\">=</span>test_data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data file in directory:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nnpz_data_compressed <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/sace_data_compressed.npz\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"train:\"</span><span class=\"token punctuation\">,</span> npz_compressed<span class=\"token punctuation\">[</span><span class=\"token string\">\"train\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test:\"</span><span class=\"token punctuation\">,</span> npz_data_compressed<span class=\"token punctuation\">[</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"compressed file size:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>getsize<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data_compressed.npz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"original file size:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>getsize<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.npz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;, &#39;save_data.npy&#39;, &#39;save_data.npz&#39;, &#39;save_data_compressed.npz&#39;]\ntrain: [1 2 3]\ntest: [11 22 33]\ncompressed file size: 402\noriginal file size: 528</code></pre>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        说了这么多用 numpy 的方式读取与保存的方法，可见 numpy 还是很用心在做数据这件事的。如果你喜欢纯文本，我们看上去比较有意义的存储格式，那你就用 txt 或者 csv 这种方式，如果你追求存储空间和速度，我建议还是用二进制来存储吧~</p>\n<h2 id=\"标准数据生成\"><a href=\"#标准数据生成\" class=\"headerlink\" title=\"标准数据生成\"></a>标准数据生成</h2><p>​        数据是多变的，不光是数据的形态多变，里面的数值也是多变的。通常，我们在创建一个Numpy Array的时候，是想带着一些数值来初始化的，比如我想先要一个全是0的Array</p>\n<p>​        所以这节内容我们来说一说怎么带着数值初始化，可以带着怎样的数值初始化。</p>\n<h3 id=\"创建统一数据\"><a href=\"#创建统一数据\" class=\"headerlink\" title=\"创建统一数据\"></a>创建统一数据</h3><ul>\n<li><code>np.zeros(),np.ones(),np.full()</code></li>\n</ul>\n<p>​        首先来点简单的，初始化Array的时候，让他们全部为某数。最简单的就是全0或者全1的数据。</p>\n<p><img src=\"http://cdn.leafii.top/img/20220604123440.png\" loading=\"lazy\"></p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nzeros <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zeros:\\n\"</span><span class=\"token punctuation\">,</span> zeros<span class=\"token punctuation\">)</span>\n\nones <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nones:\\n\"</span><span class=\"token punctuation\">,</span> ones<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">zeros:\n [[0. 0. 0.]\n [0. 0. 0.]]\n\nones:\n [[1. 1.]\n [1. 1.]\n [1. 1.]]\n</code></pre>\n\n<p>​        当我们创建这些数据时，我们不仅仅是可以给定创建的具体数值是0还是1，而且还能指定这个数据的shape是什么。创建出来之后，就可以把它当作普通的Array数据使用就好了，要<code>reshape，transpose，sum</code>等操作，都是可以进行的。</p>\n<p>​        我们可以创建0或1的数据，那我们能不能创建其他数值的数据？答案是肯定的，使用<code>np.full()</code>功能就好了。同样，我们先输入这份数据的shape，然后指定这份数据全部元素的数值。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">nines <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>full<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nines<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#[[9 9 9]</span>\n<span class=\"token comment\"># [9 9 9]]</span></code></pre>\n\n<p>​        在处理shape的时候，有一件有趣的事：如果我们手头已经有一份数据，我们想创建一个和它类型一样，大小一样的另一份数据，我们可以调用<code>np.xxx_like()</code>这种形式的功能。看下面的例子：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\nones <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>data<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>\nones_like <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones_like<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ones:\"</span><span class=\"token punctuation\">,</span> ones<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> ones<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ones_like:\"</span><span class=\"token punctuation\">,</span> ones_like<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> ones_like<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ones_like value:\\n\"</span><span class=\"token punctuation\">,</span> ones_like<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">ones: (2, 3) int32\nones_like: (2, 3) int32\nones_like value:\n [[1 1 1]\n [1 1 1]]</code></pre>\n\n<ul>\n<li><code>np.zeros_like(),np.ones_like(),np.full_like()</code></li>\n</ul>\n<p>​        因为dtype和shape都和源数据一样，那么它们之间做加减乘除运算就很契合了。其实<code>ones_like()</code>算是一种偷懒功能；同理，我们还有<code>np.zeros_like()</code>和<code>np.full_like()</code>这两种。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>zeros_like<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>full_like<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[0 0 0]\n [0 0 0]]\n[[6 6 6]\n [6 6 6]]</code></pre>\n\n\n\n<h3 id=\"创建规则数据\"><a href=\"#创建规则数据\" class=\"headerlink\" title=\"创建规则数据\"></a>创建规则数据</h3><ul>\n<li><code>np.arange(), np.linspace()</code></li>\n</ul>\n<p>​        而创建有些规律的数据也是Numpy的拿手好戏。首先说一个最常见的<code>arange</code>功能，用来得到一个序列，如：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"python range:\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># python range: [0, 1, 2, 3, 4]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numpy arange:\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># numpy arange: [0 1 2 3 4]</span></code></pre>\n\n<p>​        同样，<code>np.arange()</code>也可以像<code>range()</code>一样，对范围做自定义变更或者跳跃取值。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># (start, end, step)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"python range:\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># python range: [3, 5, 7, 9]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numpy arange:\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># numpy arange: [3 5 7 9]</span></code></pre>\n\n<p>​        还有一个也是用来取一段数字中的值，这个也比较常用，特别是在画折线图的时候，我想要连续在一个区间内取间隔一致的数据点。里面的参数分别代表从start的值到end的值，一共返回这中间num个数据点。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># (start, end, num)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"linspace:\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># linspace: [-1.  -0.5  0.   0.5  1. ]</span></code></pre>\n\n<p>​        更厉害的是，有时候我们会很纠结，上面是在-1 至 1 之间分了 4 个区域。 而我们想在-1 至 1 之间分 5 个区域，怎么搞？加一个 <code>endpoint=False</code> 就可以返回这 5 个区域的结节点了。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5 segments:\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> endpoint<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 5 segments: [-1.  -0.6 -0.2  0.2  0.6]</span></code></pre>\n\n<p>​        还有很多做特殊规则的数据的方式，比如 <code>np.identity()</code>, <code>np.eye()</code>, <code>np.logspace()</code> 等等， 这个教学我先介绍一些常用的，当你有需要的时候，你再单个搜索就行了。</p>\n<h3 id=\"快速创建再添加值\"><a href=\"#快速创建再添加值\" class=\"headerlink\" title=\"快速创建再添加值\"></a>快速创建再添加值</h3><ul>\n<li><code>np.empty(), np.empty_like()</code></li>\n</ul>\n<p>​        和 <code>np.ones()</code> 这种很相似的，有一个叫 <code>np.empty()</code> 功能，我想单独拎出来介绍一下。 如果你对运算速度有要求，你就得仔细听一下。</p>\n<p>​        <code>np.empty()</code> 功能，不会初始化新建 array 里面的数值，所以你会看到这里面的数值都是乱乱的。 <strong>注意，虽然乱乱的，但是它不是随机数哦，你不能把它当随机数使用。</strong> 想用随机数的话，我后面有单独一个教学讲随机数。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[9.03433771e-308 5.09847862e-304 3.53009707e-305]\n [7.52473700e-302 8.90332017e-305 8.01478727e-302]\n [2.34157518e-301 6.86145138e-302 3.06135986e-301]\n [1.17801178e-300 8.83208360e-302 1.14834727e-302]]</code></pre>\n\n<p>​        不能作随机数，又没有具体数值，那么empty为什么存在呢？</p>\n<ol>\n<li>可以把它当成一个placeholder，作为一个容器先放着，之后满满的放数据进去</li>\n<li>创建起来比<code>ones,zeros,full</code>都快一点</li>\n</ol>\n<p>​        所以在这种情况下，我们才想使用<code>np.empty()</code>，编写代码查看用两种方法创建的速度：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\nt0 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _ <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nt1 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _ <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nt2 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ones time:\"</span><span class=\"token punctuation\">,</span> t1 <span class=\"token operator\">-</span> t0<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"empty time:\"</span><span class=\"token punctuation\">,</span> t2 <span class=\"token operator\">-</span> t1<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#ones time: 0.015000104904174805</span>\n<span class=\"token comment\">#empty time: 0.002000093460083008</span></code></pre>\n\n<p>​        因此我们能知道empty比ones快了很多很多，给你看一下它的日常使用场景：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random\n\nempty <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"empty before:\\n\"</span><span class=\"token punctuation\">,</span> empty<span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        empty<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"empty after:\\n\"</span><span class=\"token punctuation\">,</span> empty<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        所以一般当我有一个数据要根据另一份数据生成的时候，无论我初始化是什么值，到最终都要全部被替换的时候，我就喜欢用 <code>np.empty()</code>。 ok，最后说一句，有 <code>np.empty()</code>，我们也有 <code>np.empty_like()</code> 用法和 <code>np.zeros_like()</code> 这种类似，很方便用的。</p>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        现在你能够按自己的想法初始化最符合你需要的数据啦。</p>\n<h2 id=\"随机数和随机操作\"><a href=\"#随机数和随机操作\" class=\"headerlink\" title=\"随机数和随机操作\"></a>随机数和随机操作</h2><p>​        计算机能模拟随机，是一件十分重要的事。因为计算机本来是一种执行确定步骤，返回确定结果的机器。但是你想要它模拟随机，就得有一些特殊处理。 好在 Python 自己有专门处理随机的功能。而 Numpy 作为 Python 的网红库，当然也自带了很丰富的随机功能。比如各式随机数的生成方式， 随机化当前数列等。甚至你还能加随机，复现一些随机后的结果。</p>\n<h3 id=\"多种随机数生成\"><a href=\"#多种随机数生成\" class=\"headerlink\" title=\"多种随机数生成\"></a>多种随机数生成</h3><p>​        提到随机，首先我们想到的当然是生成一批随机数，对这批随机数做计算啦。在深度学习中，这是一件非常重要的事，比如你常会随机生成神经网络的权重，生成遗传算法中的基因序列等等。</p>\n<ul>\n<li><code>np.random.rand(), np.random.random()</code></li>\n</ul>\n<p>​        假设现在没有 Numpy，我们当然也能用 Python 自带的 <code>random</code> 来解决，但是效率会低不少。 用 Python 自带的 <code>random</code>，大概是怎么用的呢？</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 0.5015630814097707</span>\n<span class=\"token comment\"># 10</span></code></pre>\n\n<p>​        但是Python的<code>random</code>没有考虑数组类型的高效数据结构，所以我们在array类型的数据结构时，更喜欢直接使用Numpy来生成。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ndim1<span class=\"token punctuation\">,</span> dim2 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span>dim1<span class=\"token punctuation\">,</span> dim2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\"># 你还可以继续添加dim3等更多</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[0.83325372 0.6412798 ]\n [0.32903089 0.41498545]\n [0.18548333 0.27637162]]</code></pre>\n\n<p>​        <code>np.random.rand()</code>是一种最方便去生成带shape的<code>[0,1)</code>之间取值的Array。还有一种写法可以实现同样目的：<code>np.random.random()</code>，在其中传入一个shape进去。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>dim1<span class=\"token punctuation\">,</span> dim2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[0.51226037 0.13982879]\n [0.75661115 0.49357135]\n [0.01439348 0.00078817]]</code></pre>\n\n<ul>\n<li><code>np.random.randn(), np.random.randint()</code></li>\n</ul>\n<p>​        除了生成<code>[0,1)</code>之间的随机数，Numpy还可以生成其他数值，或使用其他生成规则。比如按照<strong>标准正态分布</strong>去生成。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span>dim1<span class=\"token punctuation\">,</span> dim2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[-1.74779413 -1.81986096]\n [-0.97003389 -0.19717489]\n [ 1.29311087  1.51706469]]</code></pre>\n\n<p>​        使用<code>np.random.randint()</code>生成随机整数：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span>low<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> high<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#[ 5 -2  5  4 -2 -1  1 -2 -1  5]</span></code></pre>\n\n\n\n<h3 id=\"给你施加随机\"><a href=\"#给你施加随机\" class=\"headerlink\" title=\"给你施加随机\"></a>给你施加随机</h3><ul>\n<li><code>np.random.choice()</code></li>\n</ul>\n<p>​        我们已经可以自动生成一批随机数啦，但是 Numpy 的好用功能可不止有这么一些简单的生成功能哦。它还可以对已有的数据做随机化处理。 比如我想随机从一组数据中选择，我就可以用 <code>np.random.choice()</code>。在做遗传算法的时候, 做基因重组配对，就需要经常使用到这个函数。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>aray<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"选一个：\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 选一个： 3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"选多个：\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 选多个： [2 6 1]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不重复地选多个（不放回）：\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> replace<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 不重复地选多个(不放回)： [6 4 2]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"带权重地选择：\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 带权重地选择： [4 6 6 6 6 6 4 6 6 4]</span></code></pre>\n\n<ul>\n<li><code>np.random.shuffle(), np.random.permutation()</code></li>\n</ul>\n<p>​        choice这个功能真的经常会用到。而在机器学习中，你也许会经常在epoch迭代训练数据的时候，碰到shuffle的概念。如果你在机器学习中没弄懂也没关系，给你补充一下。Numpy里也有<code>np.random.shuffle()</code>的功能，就是用来<strong>洗牌</strong>的。请注意：<strong>它会将源数据重新排列，如果你想保留原数据的话，记得使用<code>np.copy(data)</code>备份一下</strong></p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">data_copy <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"源数据：\"</span><span class=\"token punctuation\">,</span> data_copy<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after shuffled:\"</span>， data<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 源数据： [2 1 3 4 6]</span>\n<span class=\"token comment\"># shuffled: [6 2 1 3 4]</span></code></pre>\n\n<p>​        还有一个功能，<code>np.random.permutation()</code>, 它实现的是 <code>np.random.shuffle()</code> 的一种特殊形式。可以说是一种简单处理特殊情况的功能。 它有两个方便之处，1. 直接生成乱序的序列号，2. 对数据乱序。</p>\n<p>而且相比 <code>np.random.shuffle()</code>，<strong>permutation 有一个好处，就是可以返回一个新数据，对原本的数据没有影响。而且还可以处理多维数据。</strong></p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"直接出乱序序列：\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>permutation<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"多维数据在第一维度上乱序：\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>permutation<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">直接出乱序序列： [2 0 8 5 7 6 1 9 3 4]\n多维数据在第一维度上乱序： [[ 6  7]\n [ 2  3]\n [10 11]\n [ 4  5]\n [ 0  1]\n [ 8  9]]</code></pre>\n\n<h3 id=\"随机分布\"><a href=\"#随机分布\" class=\"headerlink\" title=\"随机分布\"></a>随机分布</h3><ul>\n<li><code>np.random.normal(), np.random.uniform()</code></li>\n</ul>\n<p>​        对于统计学或者机器学习，我们在生成数据的时候，有时需要按照特定的统计学分布来生成，比如需要一个正态分布的抽样数据，或者均匀分布的数据抽样结果。 又或者是其他更高级的，比如泊松分布等等，都可以用 Numpy 来实现。这里我们只介绍一下在机器学习中比较常用的 正态分布 和 均匀分布。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># （均值，方差，size）</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正态分布：\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># (最低，最高，size)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"均匀分布:\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>uniform<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">正态分布： [0.94567776 1.12786411 1.31172487 1.20797385 0.65761211 1.35564439\n 1.02341514 0.89390523 1.34336123 1.13994983]\n均匀分布： [-0.15584577  0.49379278 -0.51443373  0.47639447  0.85539253 -0.12520956\n  0.38551024  0.92961516  0.43014289  0.54910227]</code></pre>\n\n<h3 id=\"随机种子的重要性\"><a href=\"#随机种子的重要性\" class=\"headerlink\" title=\"随机种子的重要性\"></a>随机种子的重要性</h3><p>​        在机器学习中，我们要对比两种随机初始化模型的优劣，或者在强化学习中要固定随机环境的随机序列，用于复现当前配置的情况，我们通常要做的事情就是<strong>伪随机</strong>。 简单说，就是每次都是一组随机，但是我可以后续再完整运行一遍一模一样的随机效果。比如生成两遍一模一样的随机序列。</p>\n<ul>\n<li><code>np.random.seed()</code></li>\n</ul>\n<p>​        为了达到这个目的，我们要了解Numpy中的random seed概念，随机种子。当我们把种子固定的时候（用一个数字），同一个种子（数字）产生的随机序列就会一样。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#seed(1) 代表的就是1号随机序列</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[4.17022005e-01 7.20324493e-01 1.14374817e-04]\n [3.02332573e-01 1.46755891e-01 9.23385948e-02]]\n2</code></pre>\n\n<p>​        此时无论你运行多少次上面的代码，你看到的随机结果，都是同一种结果。当你想改变随机种子的时候，可以在<code>seed()</code>中传入不同的数字。</p>\n<p>​        有时候还可以这么用：在同一次执行代码时，重新设定种子，让随机在同一次执行中复现。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#[0.4359949  0.02592623]</span>\n<span class=\"token comment\"># [0.4359949  0.02592623]</span></code></pre>\n\n<p>​        对于同一份代码，两次运行都是一样的结果。</p>\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        你不光可以利用 Numpy 来创建很多种不同的随机数，还能对数据做随机化处理，甚至还能当上帝，控制计算机的随机过程（seed），让电脑可以复现你的随机过程。</p>\n<h2 id=\"对速度有洁癖？快来了解Numpy的View与Copy\"><a href=\"#对速度有洁癖？快来了解Numpy的View与Copy\" class=\"headerlink\" title=\"对速度有洁癖？快来了解Numpy的View与Copy\"></a>对速度有洁癖？快来了解Numpy的View与Copy</h2><p>​        通过这节内容理解Numpy的底层逻辑，在这其中有一个非常重要的概念：那就是<strong>View和Copy</strong>，你会发现，有可能前几天要花10天处理完的数据，学完这个之后，一优化，只需要1小时就搞定了。</p>\n<p>​        <strong>如果你对 Numpy 运算速度有追求，我十分建议你了解接下来的内容。如果你是萌新， 目前阶段不用 Numpy 处理大数据（上百MB 的文件），那下面的内容你可以以后再作了解。</strong></p>\n<h3 id=\"Numpy-Array和Python-List内部结构差别\"><a href=\"#Numpy-Array和Python-List内部结构差别\" class=\"headerlink\" title=\"Numpy Array和Python List内部结构差别\"></a>Numpy Array和Python List内部结构差别</h3><p>以后再学！该开始Pandas了噢！</p>\n","more":"<h3 id=\"加载常用数据格式\"><a href=\"#加载常用数据格式\" class=\"headerlink\" title=\"加载常用数据格式\"></a>加载常用数据格式</h3><ul>\n<li><code>np.loadtxt(), np.fromstring()</code></li>\n</ul>\n<p>​        一般我们都把数据存放在文件中，数据一般长这样：</p>\n<p>![](<a href=\"http://cdn.leafii.top/img/Screen\">http://cdn.leafii.top/img/Screen</a> Shot 2022-06-02 at 22.36.26.png)</p>\n<p>​        如果用Excel打开数据，也有可能像下面这样：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220603170252.png\"></p>\n<p>​        下面，请使用已经为你准备好了的数据，从上篇文章的里面拷贝了一份，作为csv格式存起来了，使用以下的代码查看文件中的数据：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data file in directory:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/data.csv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;]\n\n # StudentID, Age, Score\n20131,10,67\n20132,11,88\n20133,12,98\n20134,8,100\n20135,9,75\n20136,12,78</code></pre>\n\n<p>​        如果现在要模拟经常要加载的情况，从文件中加载出来。如果使用纯python，可以一行一行读出来，然后保存在list中；但是也可以直接用numpy的方式读取出来：使用<code>np.loadtxt()</code>功能，我们就可以自定义地读取出来数据了。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>loadtxt<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/data.csv\"</span><span class=\"token punctuation\">,</span> delimiter<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> skiprows<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[20131    10    67]\n [20132    11    88]\n [20133    12    98]\n [20134     8   100]\n [20135     9    75]\n [20136    12    78]]</code></pre>\n\n<p>​        在<code>loadtxt</code>的参数中，我们传入<code>，</code>让numpy在做数据分隔的时候，以逗号作为分隔符。同时<code>skiprow</code>可以skip掉第一行的描述型文字（默认也会自动skip掉第一行），还有读取出来的数据要放到定义好了的&#96;dtype&#x3D;np.int类型的array中，这一行的功能就可以轻松读取这个csv文件的数据了。</p>\n<p>​        请注意：<code>np.loadtxt()</code>为什么不叫<code>np.loadcsv()</code>呢？因为csv数据也属于纯文本数据，如果想要加载后缀名为<code>txt</code>的文件，也是没问题的。以上就是最普通的一种加载数据方式。下面我们来看一种更加有趣的加载过程。能不能直接从字符中加载数据呢？</p>\n<p>​        有时候，我需要对字符串加工处理后，直接读这个加工之后的字符串。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">row_string <span class=\"token operator\">=</span> <span class=\"token string\">\"20131, 10, 67, 20132, 11, 88, 20133, 12, 98, 20134, 8, 100, 20135, 9, 75, 20136, 12, 78\"</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>fromstring<span class=\"token punctuation\">(</span>row_string<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[20131    10    67]\n [20132    11    88]\n [20133    12    98]\n [20134     8   100]\n [20135     9    75]\n [20136    12    78]]</code></pre>\n\n<p>​        请注意，这种方法目前只能读取一个数值序列，读完这个序列之后，可以再使用numpy的<code>reshape</code>方法把数据定义成你想要的样子。另外要注意的一点是对比<code>np.loadtxt(delimiter=&quot;,&quot;)</code>和<code>np.fromstring(sep=&quot;,&quot;)</code>这两个用来判断分隔符的参数，它们的参数命名是不一样的。</p>\n<p>​        numpy可以读取<code>csv</code>和<code>txt</code>格式的数据，但是无法读取Excel中的xlsx数据格式，未来可以使用Pandas库进行xlsx数据格式的读取。</p>\n<h3 id=\"保存数据\"><a href=\"#保存数据\" class=\"headerlink\" title=\"保存数据\"></a>保存数据</h3><p>​        在日常生活中经常会碰到的数据格式，都能用Numpy读，在读取完之后或者处理完数据之后，如果想把数据保存起来，怎么办呢？好在Numpy还是挺人性化的，也有丰富的方法来处理保存数据这件事。</p>\n<ul>\n<li><code>np.savetxt()</code></li>\n</ul>\n<p>​        Numpy存数据，存哪种数据格式，取决于你想不想这份数据被人查看，或者被其他语言编辑，如果想的话，你就会保存成一些通用的数据格式，比如<code>csv</code>或<code>txt</code>。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numpy data:\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>savetxt<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.csv\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> delimiter<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> fmt<span class=\"token operator\">=</span><span class=\"token string\">'%s'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data file in directory:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.csv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">numpy data:\n [[20131    10    67]\n [20132    11    88]\n [20133    12    98]\n [20134     8   100]\n [20135     9    75]\n [20136    12    78]]\ndata file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;]\n\n 20131,10,67\n20132,11,88\n20133,12,98\n20134,8,100\n20135,9,75\n20136,12,78</code></pre>\n\n<ul>\n<li><code>np.save(), np.savez(), np.savez_compressed()</code></li>\n</ul>\n<p>​        还有一些Numpy独有的模式，那就是用二进制的格式保存。如果你没有想让别人看你的数据，你只想自己使用Numpy时加载的话，那你完全就可以用这种方式存储下来。请注意，使用<code>np.save()</code>来保存，保存的是一个以<code>.npy</code>结尾的二进制文件。加载的时候，我们能用<code>np.load()</code>直接加载这个二进制数据文件。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.npy\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data file in directory:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nnpy_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.npy\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>npy_data<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;, &#39;save_data.npy&#39;]\n[[20131    10    67]\n [20132    11    88]\n [20133    12    98]\n [20134     8   100]\n [20135     9    75]\n [20136    12    78]]</code></pre>\n\n<p>​        还有一种神奇的保存方式，在一个numpy文件中保存多个numpy array。有时候，你是分开多个array来存放不同类型的数据，比如机器学习中的traindata和testdata。这时我们能用<code>np.savez()</code>保存一个<code>.npz</code>文件将这两个array同时存储好。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">train_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ntest_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>savez<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.npz\"</span><span class=\"token punctuation\">,</span> train<span class=\"token operator\">=</span>train_data<span class=\"token punctuation\">,</span> test<span class=\"token operator\">=</span>test_data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data file in directory:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;, &#39;save_data.npy&#39;, &#39;save_data.npz&#39;]</code></pre>\n\n<p>​        <code>np.savez()</code> 第二、三个参数名 <code>train=xx</code>, <code>test=xx</code> 其实是可以自定义的，这些参数名会作为之后我们加载回来的索引标签。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">npz_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.npz\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"train:\"</span><span class=\"token punctuation\">,</span> npz_data<span class=\"token punctuation\">[</span><span class=\"token string\">\"train\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test:\"</span><span class=\"token punctuation\">,</span> npz_data<span class=\"token punctuation\">[</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">train: [1 2 3]\ntest: [11 22 33]</code></pre>\n\n<p>用 <code>np.savez()</code> 的时候，还有一个方法可以让你更节省空间，那就是用 <code>np.savez_compressed()</code> 来做一次数据压缩。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span>savez_compressed<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data_compressed.npz\"</span><span class=\"token punctuation\">,</span> train<span class=\"token operator\">=</span>train_data<span class=\"token punctuation\">,</span> test<span class=\"token operator\">=</span>test_data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data file in directory:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nnpz_data_compressed <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/sace_data_compressed.npz\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"train:\"</span><span class=\"token punctuation\">,</span> npz_compressed<span class=\"token punctuation\">[</span><span class=\"token string\">\"train\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test:\"</span><span class=\"token punctuation\">,</span> npz_data_compressed<span class=\"token punctuation\">[</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"compressed file size:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>getsize<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data_compressed.npz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"original file size:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>getsize<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.npz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;, &#39;save_data.npy&#39;, &#39;save_data.npz&#39;, &#39;save_data_compressed.npz&#39;]\ntrain: [1 2 3]\ntest: [11 22 33]\ncompressed file size: 402\noriginal file size: 528</code></pre>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        说了这么多用 numpy 的方式读取与保存的方法，可见 numpy 还是很用心在做数据这件事的。如果你喜欢纯文本，我们看上去比较有意义的存储格式，那你就用 txt 或者 csv 这种方式，如果你追求存储空间和速度，我建议还是用二进制来存储吧~</p>\n<h2 id=\"标准数据生成\"><a href=\"#标准数据生成\" class=\"headerlink\" title=\"标准数据生成\"></a>标准数据生成</h2><p>​        数据是多变的，不光是数据的形态多变，里面的数值也是多变的。通常，我们在创建一个Numpy Array的时候，是想带着一些数值来初始化的，比如我想先要一个全是0的Array</p>\n<p>​        所以这节内容我们来说一说怎么带着数值初始化，可以带着怎样的数值初始化。</p>\n<h3 id=\"创建统一数据\"><a href=\"#创建统一数据\" class=\"headerlink\" title=\"创建统一数据\"></a>创建统一数据</h3><ul>\n<li><code>np.zeros(),np.ones(),np.full()</code></li>\n</ul>\n<p>​        首先来点简单的，初始化Array的时候，让他们全部为某数。最简单的就是全0或者全1的数据。</p>\n<p><img src=\"http://cdn.leafii.top/img/20220604123440.png\"></p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nzeros <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zeros:\\n\"</span><span class=\"token punctuation\">,</span> zeros<span class=\"token punctuation\">)</span>\n\nones <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nones:\\n\"</span><span class=\"token punctuation\">,</span> ones<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">zeros:\n [[0. 0. 0.]\n [0. 0. 0.]]\n\nones:\n [[1. 1.]\n [1. 1.]\n [1. 1.]]\n</code></pre>\n\n<p>​        当我们创建这些数据时，我们不仅仅是可以给定创建的具体数值是0还是1，而且还能指定这个数据的shape是什么。创建出来之后，就可以把它当作普通的Array数据使用就好了，要<code>reshape，transpose，sum</code>等操作，都是可以进行的。</p>\n<p>​        我们可以创建0或1的数据，那我们能不能创建其他数值的数据？答案是肯定的，使用<code>np.full()</code>功能就好了。同样，我们先输入这份数据的shape，然后指定这份数据全部元素的数值。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">nines <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>full<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nines<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#[[9 9 9]</span>\n<span class=\"token comment\"># [9 9 9]]</span></code></pre>\n\n<p>​        在处理shape的时候，有一件有趣的事：如果我们手头已经有一份数据，我们想创建一个和它类型一样，大小一样的另一份数据，我们可以调用<code>np.xxx_like()</code>这种形式的功能。看下面的例子：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\nones <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>data<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>\nones_like <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones_like<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ones:\"</span><span class=\"token punctuation\">,</span> ones<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> ones<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ones_like:\"</span><span class=\"token punctuation\">,</span> ones_like<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> ones_like<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ones_like value:\\n\"</span><span class=\"token punctuation\">,</span> ones_like<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">ones: (2, 3) int32\nones_like: (2, 3) int32\nones_like value:\n [[1 1 1]\n [1 1 1]]</code></pre>\n\n<ul>\n<li><code>np.zeros_like(),np.ones_like(),np.full_like()</code></li>\n</ul>\n<p>​        因为dtype和shape都和源数据一样，那么它们之间做加减乘除运算就很契合了。其实<code>ones_like()</code>算是一种偷懒功能；同理，我们还有<code>np.zeros_like()</code>和<code>np.full_like()</code>这两种。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>zeros_like<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>full_like<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[0 0 0]\n [0 0 0]]\n[[6 6 6]\n [6 6 6]]</code></pre>\n\n\n\n<h3 id=\"创建规则数据\"><a href=\"#创建规则数据\" class=\"headerlink\" title=\"创建规则数据\"></a>创建规则数据</h3><ul>\n<li><code>np.arange(), np.linspace()</code></li>\n</ul>\n<p>​        而创建有些规律的数据也是Numpy的拿手好戏。首先说一个最常见的<code>arange</code>功能，用来得到一个序列，如：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"python range:\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># python range: [0, 1, 2, 3, 4]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numpy arange:\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># numpy arange: [0 1 2 3 4]</span></code></pre>\n\n<p>​        同样，<code>np.arange()</code>也可以像<code>range()</code>一样，对范围做自定义变更或者跳跃取值。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># (start, end, step)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"python range:\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># python range: [3, 5, 7, 9]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numpy arange:\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># numpy arange: [3 5 7 9]</span></code></pre>\n\n<p>​        还有一个也是用来取一段数字中的值，这个也比较常用，特别是在画折线图的时候，我想要连续在一个区间内取间隔一致的数据点。里面的参数分别代表从start的值到end的值，一共返回这中间num个数据点。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># (start, end, num)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"linspace:\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># linspace: [-1.  -0.5  0.   0.5  1. ]</span></code></pre>\n\n<p>​        更厉害的是，有时候我们会很纠结，上面是在-1 至 1 之间分了 4 个区域。 而我们想在-1 至 1 之间分 5 个区域，怎么搞？加一个 <code>endpoint=False</code> 就可以返回这 5 个区域的结节点了。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5 segments:\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> endpoint<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 5 segments: [-1.  -0.6 -0.2  0.2  0.6]</span></code></pre>\n\n<p>​        还有很多做特殊规则的数据的方式，比如 <code>np.identity()</code>, <code>np.eye()</code>, <code>np.logspace()</code> 等等， 这个教学我先介绍一些常用的，当你有需要的时候，你再单个搜索就行了。</p>\n<h3 id=\"快速创建再添加值\"><a href=\"#快速创建再添加值\" class=\"headerlink\" title=\"快速创建再添加值\"></a>快速创建再添加值</h3><ul>\n<li><code>np.empty(), np.empty_like()</code></li>\n</ul>\n<p>​        和 <code>np.ones()</code> 这种很相似的，有一个叫 <code>np.empty()</code> 功能，我想单独拎出来介绍一下。 如果你对运算速度有要求，你就得仔细听一下。</p>\n<p>​        <code>np.empty()</code> 功能，不会初始化新建 array 里面的数值，所以你会看到这里面的数值都是乱乱的。 <strong>注意，虽然乱乱的，但是它不是随机数哦，你不能把它当随机数使用。</strong> 想用随机数的话，我后面有单独一个教学讲随机数。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[9.03433771e-308 5.09847862e-304 3.53009707e-305]\n [7.52473700e-302 8.90332017e-305 8.01478727e-302]\n [2.34157518e-301 6.86145138e-302 3.06135986e-301]\n [1.17801178e-300 8.83208360e-302 1.14834727e-302]]</code></pre>\n\n<p>​        不能作随机数，又没有具体数值，那么empty为什么存在呢？</p>\n<ol>\n<li>可以把它当成一个placeholder，作为一个容器先放着，之后满满的放数据进去</li>\n<li>创建起来比<code>ones,zeros,full</code>都快一点</li>\n</ol>\n<p>​        所以在这种情况下，我们才想使用<code>np.empty()</code>，编写代码查看用两种方法创建的速度：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\nt0 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _ <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nt1 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _ <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nt2 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ones time:\"</span><span class=\"token punctuation\">,</span> t1 <span class=\"token operator\">-</span> t0<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"empty time:\"</span><span class=\"token punctuation\">,</span> t2 <span class=\"token operator\">-</span> t1<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#ones time: 0.015000104904174805</span>\n<span class=\"token comment\">#empty time: 0.002000093460083008</span></code></pre>\n\n<p>​        因此我们能知道empty比ones快了很多很多，给你看一下它的日常使用场景：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random\n\nempty <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"empty before:\\n\"</span><span class=\"token punctuation\">,</span> empty<span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        empty<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"empty after:\\n\"</span><span class=\"token punctuation\">,</span> empty<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        所以一般当我有一个数据要根据另一份数据生成的时候，无论我初始化是什么值，到最终都要全部被替换的时候，我就喜欢用 <code>np.empty()</code>。 ok，最后说一句，有 <code>np.empty()</code>，我们也有 <code>np.empty_like()</code> 用法和 <code>np.zeros_like()</code> 这种类似，很方便用的。</p>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        现在你能够按自己的想法初始化最符合你需要的数据啦。</p>\n<h2 id=\"随机数和随机操作\"><a href=\"#随机数和随机操作\" class=\"headerlink\" title=\"随机数和随机操作\"></a>随机数和随机操作</h2><p>​        计算机能模拟随机，是一件十分重要的事。因为计算机本来是一种执行确定步骤，返回确定结果的机器。但是你想要它模拟随机，就得有一些特殊处理。 好在 Python 自己有专门处理随机的功能。而 Numpy 作为 Python 的网红库，当然也自带了很丰富的随机功能。比如各式随机数的生成方式， 随机化当前数列等。甚至你还能加随机，复现一些随机后的结果。</p>\n<h3 id=\"多种随机数生成\"><a href=\"#多种随机数生成\" class=\"headerlink\" title=\"多种随机数生成\"></a>多种随机数生成</h3><p>​        提到随机，首先我们想到的当然是生成一批随机数，对这批随机数做计算啦。在深度学习中，这是一件非常重要的事，比如你常会随机生成神经网络的权重，生成遗传算法中的基因序列等等。</p>\n<ul>\n<li><code>np.random.rand(), np.random.random()</code></li>\n</ul>\n<p>​        假设现在没有 Numpy，我们当然也能用 Python 自带的 <code>random</code> 来解决，但是效率会低不少。 用 Python 自带的 <code>random</code>，大概是怎么用的呢？</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 0.5015630814097707</span>\n<span class=\"token comment\"># 10</span></code></pre>\n\n<p>​        但是Python的<code>random</code>没有考虑数组类型的高效数据结构，所以我们在array类型的数据结构时，更喜欢直接使用Numpy来生成。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ndim1<span class=\"token punctuation\">,</span> dim2 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span>dim1<span class=\"token punctuation\">,</span> dim2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\"># 你还可以继续添加dim3等更多</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[0.83325372 0.6412798 ]\n [0.32903089 0.41498545]\n [0.18548333 0.27637162]]</code></pre>\n\n<p>​        <code>np.random.rand()</code>是一种最方便去生成带shape的<code>[0,1)</code>之间取值的Array。还有一种写法可以实现同样目的：<code>np.random.random()</code>，在其中传入一个shape进去。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>dim1<span class=\"token punctuation\">,</span> dim2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[0.51226037 0.13982879]\n [0.75661115 0.49357135]\n [0.01439348 0.00078817]]</code></pre>\n\n<ul>\n<li><code>np.random.randn(), np.random.randint()</code></li>\n</ul>\n<p>​        除了生成<code>[0,1)</code>之间的随机数，Numpy还可以生成其他数值，或使用其他生成规则。比如按照<strong>标准正态分布</strong>去生成。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span>dim1<span class=\"token punctuation\">,</span> dim2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[-1.74779413 -1.81986096]\n [-0.97003389 -0.19717489]\n [ 1.29311087  1.51706469]]</code></pre>\n\n<p>​        使用<code>np.random.randint()</code>生成随机整数：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span>low<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> high<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#[ 5 -2  5  4 -2 -1  1 -2 -1  5]</span></code></pre>\n\n\n\n<h3 id=\"给你施加随机\"><a href=\"#给你施加随机\" class=\"headerlink\" title=\"给你施加随机\"></a>给你施加随机</h3><ul>\n<li><code>np.random.choice()</code></li>\n</ul>\n<p>​        我们已经可以自动生成一批随机数啦，但是 Numpy 的好用功能可不止有这么一些简单的生成功能哦。它还可以对已有的数据做随机化处理。 比如我想随机从一组数据中选择，我就可以用 <code>np.random.choice()</code>。在做遗传算法的时候, 做基因重组配对，就需要经常使用到这个函数。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>aray<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"选一个：\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 选一个： 3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"选多个：\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 选多个： [2 6 1]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不重复地选多个（不放回）：\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> replace<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 不重复地选多个(不放回)： [6 4 2]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"带权重地选择：\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 带权重地选择： [4 6 6 6 6 6 4 6 6 4]</span></code></pre>\n\n<ul>\n<li><code>np.random.shuffle(), np.random.permutation()</code></li>\n</ul>\n<p>​        choice这个功能真的经常会用到。而在机器学习中，你也许会经常在epoch迭代训练数据的时候，碰到shuffle的概念。如果你在机器学习中没弄懂也没关系，给你补充一下。Numpy里也有<code>np.random.shuffle()</code>的功能，就是用来<strong>洗牌</strong>的。请注意：<strong>它会将源数据重新排列，如果你想保留原数据的话，记得使用<code>np.copy(data)</code>备份一下</strong></p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">data_copy <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"源数据：\"</span><span class=\"token punctuation\">,</span> data_copy<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after shuffled:\"</span>， data<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 源数据： [2 1 3 4 6]</span>\n<span class=\"token comment\"># shuffled: [6 2 1 3 4]</span></code></pre>\n\n<p>​        还有一个功能，<code>np.random.permutation()</code>, 它实现的是 <code>np.random.shuffle()</code> 的一种特殊形式。可以说是一种简单处理特殊情况的功能。 它有两个方便之处，1. 直接生成乱序的序列号，2. 对数据乱序。</p>\n<p>而且相比 <code>np.random.shuffle()</code>，<strong>permutation 有一个好处，就是可以返回一个新数据，对原本的数据没有影响。而且还可以处理多维数据。</strong></p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"直接出乱序序列：\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>permutation<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"多维数据在第一维度上乱序：\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>permutation<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">直接出乱序序列： [2 0 8 5 7 6 1 9 3 4]\n多维数据在第一维度上乱序： [[ 6  7]\n [ 2  3]\n [10 11]\n [ 4  5]\n [ 0  1]\n [ 8  9]]</code></pre>\n\n<h3 id=\"随机分布\"><a href=\"#随机分布\" class=\"headerlink\" title=\"随机分布\"></a>随机分布</h3><ul>\n<li><code>np.random.normal(), np.random.uniform()</code></li>\n</ul>\n<p>​        对于统计学或者机器学习，我们在生成数据的时候，有时需要按照特定的统计学分布来生成，比如需要一个正态分布的抽样数据，或者均匀分布的数据抽样结果。 又或者是其他更高级的，比如泊松分布等等，都可以用 Numpy 来实现。这里我们只介绍一下在机器学习中比较常用的 正态分布 和 均匀分布。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># （均值，方差，size）</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正态分布：\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># (最低，最高，size)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"均匀分布:\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>uniform<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">正态分布： [0.94567776 1.12786411 1.31172487 1.20797385 0.65761211 1.35564439\n 1.02341514 0.89390523 1.34336123 1.13994983]\n均匀分布： [-0.15584577  0.49379278 -0.51443373  0.47639447  0.85539253 -0.12520956\n  0.38551024  0.92961516  0.43014289  0.54910227]</code></pre>\n\n<h3 id=\"随机种子的重要性\"><a href=\"#随机种子的重要性\" class=\"headerlink\" title=\"随机种子的重要性\"></a>随机种子的重要性</h3><p>​        在机器学习中，我们要对比两种随机初始化模型的优劣，或者在强化学习中要固定随机环境的随机序列，用于复现当前配置的情况，我们通常要做的事情就是<strong>伪随机</strong>。 简单说，就是每次都是一组随机，但是我可以后续再完整运行一遍一模一样的随机效果。比如生成两遍一模一样的随机序列。</p>\n<ul>\n<li><code>np.random.seed()</code></li>\n</ul>\n<p>​        为了达到这个目的，我们要了解Numpy中的random seed概念，随机种子。当我们把种子固定的时候（用一个数字），同一个种子（数字）产生的随机序列就会一样。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#seed(1) 代表的就是1号随机序列</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[4.17022005e-01 7.20324493e-01 1.14374817e-04]\n [3.02332573e-01 1.46755891e-01 9.23385948e-02]]\n2</code></pre>\n\n<p>​        此时无论你运行多少次上面的代码，你看到的随机结果，都是同一种结果。当你想改变随机种子的时候，可以在<code>seed()</code>中传入不同的数字。</p>\n<p>​        有时候还可以这么用：在同一次执行代码时，重新设定种子，让随机在同一次执行中复现。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#[0.4359949  0.02592623]</span>\n<span class=\"token comment\"># [0.4359949  0.02592623]</span></code></pre>\n\n<p>​        对于同一份代码，两次运行都是一样的结果。</p>\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        你不光可以利用 Numpy 来创建很多种不同的随机数，还能对数据做随机化处理，甚至还能当上帝，控制计算机的随机过程（seed），让电脑可以复现你的随机过程。</p>\n<h2 id=\"对速度有洁癖？快来了解Numpy的View与Copy\"><a href=\"#对速度有洁癖？快来了解Numpy的View与Copy\" class=\"headerlink\" title=\"对速度有洁癖？快来了解Numpy的View与Copy\"></a>对速度有洁癖？快来了解Numpy的View与Copy</h2><p>​        通过这节内容理解Numpy的底层逻辑，在这其中有一个非常重要的概念：那就是<strong>View和Copy</strong>，你会发现，有可能前几天要花10天处理完的数据，学完这个之后，一优化，只需要1小时就搞定了。</p>\n<p>​        <strong>如果你对 Numpy 运算速度有追求，我十分建议你了解接下来的内容。如果你是萌新， 目前阶段不用 Numpy 处理大数据（上百MB 的文件），那下面的内容你可以以后再作了解。</strong></p>\n<h3 id=\"Numpy-Array和Python-List内部结构差别\"><a href=\"#Numpy-Array和Python-List内部结构差别\" class=\"headerlink\" title=\"Numpy Array和Python List内部结构差别\"></a>Numpy Array和Python List内部结构差别</h3><p>以后再学！该开始Pandas了噢！</p>","categories":[],"tags":[{"name":"python","path":"api/tags/python.json"},{"name":"机器学习基础","path":"api/tags/机器学习基础.json"}]}