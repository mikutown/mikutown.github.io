{"title":"Numpy读取保存数据","slug":"Numpy关于数据","date":"2022-05-29T11:41:37.000Z","updated":"2022-06-03T15:24:04.596Z","comments":true,"path":"api/articles/Numpy关于数据.json","excerpt":"Numpy关于数据的知识Numpy读取保存数据​        数据一般都被记录在存储当中，我们常见的小规模数据大多是 Excel 的 xlsx，csv, json, 或 txt，log 等等格式。 当我们要处理数据，特别是运算数据的时候，我们都能拿 Python 读取出来。而在大数据这种情况下，数据是存储在 MySQL，Mongodb 等这种数据库中的， 同样，Python 也提供了很多接口来读取这些数据。​        今天我们想聊聊其中的一部分，用 Numpy 来直接读取数据（通常是纯数值形式的数据），并加以运算的流程。而且看看我们可以如何保存 Numpy 里的数据。","covers":["http://cdn.leafii.top/img/20220603170252.png"],"content":"<h1 id=\"Numpy关于数据的知识\"><a href=\"#Numpy关于数据的知识\" class=\"headerlink\" title=\"Numpy关于数据的知识\"></a>Numpy关于数据的知识</h1><h2 id=\"Numpy读取保存数据\"><a href=\"#Numpy读取保存数据\" class=\"headerlink\" title=\"Numpy读取保存数据\"></a>Numpy读取保存数据</h2><p>​        数据一般都被记录在存储当中，我们常见的小规模数据大多是 Excel 的 xlsx，csv, json, 或 txt，log 等等格式。 当我们要处理数据，特别是运算数据的时候，我们都能拿 Python 读取出来。而在大数据这种情况下，数据是存储在 MySQL，Mongodb 等这种数据库中的， 同样，Python 也提供了很多接口来读取这些数据。</p>\n<p>​        今天我们想聊聊其中的一部分，用 Numpy 来直接读取数据（通常是纯数值形式的数据），并加以运算的流程。而且看看我们可以如何保存 Numpy 里的数据。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"加载常用数据格式\"><a href=\"#加载常用数据格式\" class=\"headerlink\" title=\"加载常用数据格式\"></a>加载常用数据格式</h3><ul>\n<li><code>np.loadtxt(), np.fromstring()</code></li>\n</ul>\n<p>​        一般我们都把数据存放在文件中，数据一般长这样：</p>\n<p>![](<a href=\"http://cdn.leafii.top/img/Screen\">http://cdn.leafii.top/img/Screen</a> Shot 2022-06-02 at 22.36.26.png)</p>\n<p>​        如果用Excel打开数据，也有可能像下面这样：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220603170252.png\" loading=\"lazy\"></p>\n<p>​        下面，请使用已经为你准备好了的数据，从上篇文章的里面拷贝了一份，作为csv格式存起来了，使用以下的代码查看文件中的数据：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data file in directory:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/data.csv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;]\n\n # StudentID, Age, Score\n20131,10,67\n20132,11,88\n20133,12,98\n20134,8,100\n20135,9,75\n20136,12,78</code></pre>\n\n<p>​        如果现在要模拟经常要加载的情况，从文件中加载出来。如果使用纯python，可以一行一行读出来，然后保存在list中；但是也可以直接用numpy的方式读取出来：使用<code>np.loadtxt()</code>功能，我们就可以自定义地读取出来数据了。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>loadtxt<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/data.csv\"</span><span class=\"token punctuation\">,</span> delimiter<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> skiprows<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[20131    10    67]\n [20132    11    88]\n [20133    12    98]\n [20134     8   100]\n [20135     9    75]\n [20136    12    78]]</code></pre>\n\n<p>​        在<code>loadtxt</code>的参数中，我们传入<code>，</code>让numpy在做数据分隔的时候，以逗号作为分隔符。同时<code>skiprow</code>可以skip掉第一行的描述型文字（默认也会自动skip掉第一行），还有读取出来的数据要放到定义好了的&#96;dtype&#x3D;np.int类型的array中，这一行的功能就可以轻松读取这个csv文件的数据了。</p>\n<p>​        请注意：<code>np.loadtxt()</code>为什么不叫<code>np.loadcsv()</code>呢？因为csv数据也属于纯文本数据，如果想要加载后缀名为<code>txt</code>的文件，也是没问题的。以上就是最普通的一种加载数据方式。下面我们来看一种更加有趣的加载过程。能不能直接从字符中加载数据呢？</p>\n<p>​        有时候，我需要对字符串加工处理后，直接读这个加工之后的字符串。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">row_string <span class=\"token operator\">=</span> <span class=\"token string\">\"20131, 10, 67, 20132, 11, 88, 20133, 12, 98, 20134, 8, 100, 20135, 9, 75, 20136, 12, 78\"</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>fromstring<span class=\"token punctuation\">(</span>row_string<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[20131    10    67]\n [20132    11    88]\n [20133    12    98]\n [20134     8   100]\n [20135     9    75]\n [20136    12    78]]</code></pre>\n\n<p>​        请注意，这种方法目前只能读取一个数值序列，读完这个序列之后，可以再使用numpy的<code>reshape</code>方法把数据定义成你想要的样子。另外要注意的一点是对比<code>np.loadtxt(delimiter=&quot;,&quot;)</code>和<code>np.fromstring(sep=&quot;,&quot;)</code>这两个用来判断分隔符的参数，它们的参数命名是不一样的。</p>\n<p>​        numpy可以读取<code>csv</code>和<code>txt</code>格式的数据，但是无法读取Excel中的xlsx数据格式，未来可以使用Pandas库进行xlsx数据格式的读取。</p>\n<h3 id=\"保存数据\"><a href=\"#保存数据\" class=\"headerlink\" title=\"保存数据\"></a>保存数据</h3><p>​        在日常生活中经常会碰到的数据格式，都能用Numpy读，在读取完之后或者处理完数据之后，如果想把数据保存起来，怎么办呢？好在Numpy还是挺人性化的，也有丰富的方法来处理保存数据这件事。</p>\n<p>​        Numpy存数据，存哪种数据格式，取决于你想不想这份数据被人查看，或者被其他语言编辑，如果想的话，你就会保存成一些通用的数据格式，比如<code>csv</code>或<code>txt</code>。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numpy data:\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>savetxt<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.csv\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> delimiter<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> fmt<span class=\"token operator\">=</span><span class=\"token string\">'%s'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data file in directory:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.csv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">numpy data:\n [[20131    10    67]\n [20132    11    88]\n [20133    12    98]\n [20134     8   100]\n [20135     9    75]\n [20136    12    78]]\ndata file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;]\n\n 20131,10,67\n20132,11,88\n20133,12,98\n20134,8,100\n20135,9,75\n20136,12,78</code></pre>\n\n<p>​        还有一些Numpy独有的模式，那就是用二进制的格式保存。如果你没有想让别人看你的数据，你只想自己使用Numpy时加载的话，那你完全就可以用这种方式存储下来。请注意，使用<code>np.save()</code>来保存，保存的是一个以<code>.npy</code>结尾的二进制文件。加载的时候，我们能用<code>np.load()</code>直接加载这个二进制数据文件。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.npy\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data file in directory:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nnpy_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.npy\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>npy_data<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;, &#39;save_data.npy&#39;]\n[[20131    10    67]\n [20132    11    88]\n [20133    12    98]\n [20134     8   100]\n [20135     9    75]\n [20136    12    78]]</code></pre>\n\n<p>​        还有一种神奇的保存方式，在一个numpy文件中保存多个numpy array。有时候，你是分开多个array来存放不同类型的数据，比如机器学习中的traindata和testdata。这时我们能用<code>np.savez()</code>保存一个<code>.npz</code>文件将这两个array同时存储好。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">train_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ntest_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>savez<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.npz\"</span><span class=\"token punctuation\">,</span> train<span class=\"token operator\">=</span>train_data<span class=\"token punctuation\">,</span> test<span class=\"token operator\">=</span>test_data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data file in directory:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;, &#39;save_data.npy&#39;, &#39;save_data.npz&#39;]</code></pre>\n\n<p>​        <code>np.savez()</code> 第二、三个参数名 <code>train=xx</code>, <code>test=xx</code> 其实是可以自定义的，这些参数名会作为之后我们加载回来的索引标签。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">npz_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.npz\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"train:\"</span><span class=\"token punctuation\">,</span> npz_data<span class=\"token punctuation\">[</span><span class=\"token string\">\"train\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test:\"</span><span class=\"token punctuation\">,</span> npz_data<span class=\"token punctuation\">[</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">train: [1 2 3]\ntest: [11 22 33]</code></pre>\n\n<p>用 <code>np.savez()</code> 的时候，还有一个方法可以让你更节省空间，那就是用 <code>np.savez_compressed()</code> 来做一次数据压缩。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span>savez_compressed<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data_compressed.npz\"</span><span class=\"token punctuation\">,</span> train<span class=\"token operator\">=</span>train_data<span class=\"token punctuation\">,</span> test<span class=\"token operator\">=</span>test_data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data file in directory:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nnpz_data_compressed <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/sace_data_compressed.npz\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"train:\"</span><span class=\"token punctuation\">,</span> npz_compressed<span class=\"token punctuation\">[</span><span class=\"token string\">\"train\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test:\"</span><span class=\"token punctuation\">,</span> npz_data_compressed<span class=\"token punctuation\">[</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"compressed file size:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>getsize<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data_compressed.npz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"original file size:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>getsize<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.npz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;, &#39;save_data.npy&#39;, &#39;save_data.npz&#39;, &#39;save_data_compressed.npz&#39;]\ntrain: [1 2 3]\ntest: [11 22 33]\ncompressed file size: 402\noriginal file size: 528</code></pre>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        说了这么多用 numpy 的方式读取与保存的方法，可见 numpy 还是很用心在做数据这件事的。如果你喜欢纯文本，我们看上去比较有意义的存储格式，那你就用 txt 或者 csv 这种方式，如果你追求存储空间和速度，我建议还是用二进制来存储吧~</p>\n","more":"<h3 id=\"加载常用数据格式\"><a href=\"#加载常用数据格式\" class=\"headerlink\" title=\"加载常用数据格式\"></a>加载常用数据格式</h3><ul>\n<li><code>np.loadtxt(), np.fromstring()</code></li>\n</ul>\n<p>​        一般我们都把数据存放在文件中，数据一般长这样：</p>\n<p>![](<a href=\"http://cdn.leafii.top/img/Screen\">http://cdn.leafii.top/img/Screen</a> Shot 2022-06-02 at 22.36.26.png)</p>\n<p>​        如果用Excel打开数据，也有可能像下面这样：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220603170252.png\"></p>\n<p>​        下面，请使用已经为你准备好了的数据，从上篇文章的里面拷贝了一份，作为csv格式存起来了，使用以下的代码查看文件中的数据：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data file in directory:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/data.csv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;]\n\n # StudentID, Age, Score\n20131,10,67\n20132,11,88\n20133,12,98\n20134,8,100\n20135,9,75\n20136,12,78</code></pre>\n\n<p>​        如果现在要模拟经常要加载的情况，从文件中加载出来。如果使用纯python，可以一行一行读出来，然后保存在list中；但是也可以直接用numpy的方式读取出来：使用<code>np.loadtxt()</code>功能，我们就可以自定义地读取出来数据了。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>loadtxt<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/data.csv\"</span><span class=\"token punctuation\">,</span> delimiter<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> skiprows<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[20131    10    67]\n [20132    11    88]\n [20133    12    98]\n [20134     8   100]\n [20135     9    75]\n [20136    12    78]]</code></pre>\n\n<p>​        在<code>loadtxt</code>的参数中，我们传入<code>，</code>让numpy在做数据分隔的时候，以逗号作为分隔符。同时<code>skiprow</code>可以skip掉第一行的描述型文字（默认也会自动skip掉第一行），还有读取出来的数据要放到定义好了的&#96;dtype&#x3D;np.int类型的array中，这一行的功能就可以轻松读取这个csv文件的数据了。</p>\n<p>​        请注意：<code>np.loadtxt()</code>为什么不叫<code>np.loadcsv()</code>呢？因为csv数据也属于纯文本数据，如果想要加载后缀名为<code>txt</code>的文件，也是没问题的。以上就是最普通的一种加载数据方式。下面我们来看一种更加有趣的加载过程。能不能直接从字符中加载数据呢？</p>\n<p>​        有时候，我需要对字符串加工处理后，直接读这个加工之后的字符串。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">row_string <span class=\"token operator\">=</span> <span class=\"token string\">\"20131, 10, 67, 20132, 11, 88, 20133, 12, 98, 20134, 8, 100, 20135, 9, 75, 20136, 12, 78\"</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>fromstring<span class=\"token punctuation\">(</span>row_string<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">[[20131    10    67]\n [20132    11    88]\n [20133    12    98]\n [20134     8   100]\n [20135     9    75]\n [20136    12    78]]</code></pre>\n\n<p>​        请注意，这种方法目前只能读取一个数值序列，读完这个序列之后，可以再使用numpy的<code>reshape</code>方法把数据定义成你想要的样子。另外要注意的一点是对比<code>np.loadtxt(delimiter=&quot;,&quot;)</code>和<code>np.fromstring(sep=&quot;,&quot;)</code>这两个用来判断分隔符的参数，它们的参数命名是不一样的。</p>\n<p>​        numpy可以读取<code>csv</code>和<code>txt</code>格式的数据，但是无法读取Excel中的xlsx数据格式，未来可以使用Pandas库进行xlsx数据格式的读取。</p>\n<h3 id=\"保存数据\"><a href=\"#保存数据\" class=\"headerlink\" title=\"保存数据\"></a>保存数据</h3><p>​        在日常生活中经常会碰到的数据格式，都能用Numpy读，在读取完之后或者处理完数据之后，如果想把数据保存起来，怎么办呢？好在Numpy还是挺人性化的，也有丰富的方法来处理保存数据这件事。</p>\n<p>​        Numpy存数据，存哪种数据格式，取决于你想不想这份数据被人查看，或者被其他语言编辑，如果想的话，你就会保存成一些通用的数据格式，比如<code>csv</code>或<code>txt</code>。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numpy data:\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>savetxt<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.csv\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> delimiter<span class=\"token operator\">=</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> fmt<span class=\"token operator\">=</span><span class=\"token string\">'%s'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data file in directory:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.csv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">numpy data:\n [[20131    10    67]\n [20132    11    88]\n [20133    12    98]\n [20134     8   100]\n [20135     9    75]\n [20136    12    78]]\ndata file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;]\n\n 20131,10,67\n20132,11,88\n20133,12,98\n20134,8,100\n20135,9,75\n20136,12,78</code></pre>\n\n<p>​        还有一些Numpy独有的模式，那就是用二进制的格式保存。如果你没有想让别人看你的数据，你只想自己使用Numpy时加载的话，那你完全就可以用这种方式存储下来。请注意，使用<code>np.save()</code>来保存，保存的是一个以<code>.npy</code>结尾的二进制文件。加载的时候，我们能用<code>np.load()</code>直接加载这个二进制数据文件。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.npy\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data file in directory:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nnpy_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.npy\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>npy_data<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;, &#39;save_data.npy&#39;]\n[[20131    10    67]\n [20132    11    88]\n [20133    12    98]\n [20134     8   100]\n [20135     9    75]\n [20136    12    78]]</code></pre>\n\n<p>​        还有一种神奇的保存方式，在一个numpy文件中保存多个numpy array。有时候，你是分开多个array来存放不同类型的数据，比如机器学习中的traindata和testdata。这时我们能用<code>np.savez()</code>保存一个<code>.npz</code>文件将这两个array同时存储好。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">train_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ntest_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>savez<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.npz\"</span><span class=\"token punctuation\">,</span> train<span class=\"token operator\">=</span>train_data<span class=\"token punctuation\">,</span> test<span class=\"token operator\">=</span>test_data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data file in directory:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;, &#39;save_data.npy&#39;, &#39;save_data.npz&#39;]</code></pre>\n\n<p>​        <code>np.savez()</code> 第二、三个参数名 <code>train=xx</code>, <code>test=xx</code> 其实是可以自定义的，这些参数名会作为之后我们加载回来的索引标签。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">npz_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.npz\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"train:\"</span><span class=\"token punctuation\">,</span> npz_data<span class=\"token punctuation\">[</span><span class=\"token string\">\"train\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test:\"</span><span class=\"token punctuation\">,</span> npz_data<span class=\"token punctuation\">[</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">train: [1 2 3]\ntest: [11 22 33]</code></pre>\n\n<p>用 <code>np.savez()</code> 的时候，还有一个方法可以让你更节省空间，那就是用 <code>np.savez_compressed()</code> 来做一次数据压缩。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span>savez_compressed<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data_compressed.npz\"</span><span class=\"token punctuation\">,</span> train<span class=\"token operator\">=</span>train_data<span class=\"token punctuation\">,</span> test<span class=\"token operator\">=</span>test_data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data file in directory:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nnpz_data_compressed <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/sace_data_compressed.npz\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"train:\"</span><span class=\"token punctuation\">,</span> npz_compressed<span class=\"token punctuation\">[</span><span class=\"token string\">\"train\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test:\"</span><span class=\"token punctuation\">,</span> npz_data_compressed<span class=\"token punctuation\">[</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"compressed file size:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>getsize<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data_compressed.npz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"original file size:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>getsize<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/save_data.npz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;, &#39;save_data.npy&#39;, &#39;save_data.npz&#39;, &#39;save_data_compressed.npz&#39;]\ntrain: [1 2 3]\ntest: [11 22 33]\ncompressed file size: 402\noriginal file size: 528</code></pre>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        说了这么多用 numpy 的方式读取与保存的方法，可见 numpy 还是很用心在做数据这件事的。如果你喜欢纯文本，我们看上去比较有意义的存储格式，那你就用 txt 或者 csv 这种方式，如果你追求存储空间和速度，我建议还是用二进制来存储吧~</p>","categories":[],"tags":[{"name":"python","path":"api/tags/python.json"},{"name":"机器学习基础","path":"api/tags/机器学习基础.json"}]}