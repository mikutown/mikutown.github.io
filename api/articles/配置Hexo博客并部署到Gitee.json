{"title":"配置Hexo博客并部署到Gitee","slug":"配置Hexo博客并部署到Gitee","date":"2020-03-30T15:22:51.000Z","updated":"2022-05-20T08:00:18.870Z","comments":true,"path":"api/articles/配置Hexo博客并部署到Gitee.json","excerpt":"部署hexo静态博客到Gitee中由于不可抗力，Gitee的pages服务无法自定义域名，因此建议直接部署到Github上而不是Gitee中，并自己做好备份","covers":["http://cdn.leafii.top/img/20220520155705.png","http://cdn.leafii.top/img/20220520155731.png","http://cdn.leafii.top/img/20220520155803.png","http://cdn.leafii.top/img/20220520155818.png","http://cdn.leafii.top/img/20220520155838.png","http://cdn.leafii.top/img/20220520155855.png"],"content":"<h2 id=\"部署hexo静态博客到Gitee中\"><a href=\"#部署hexo静态博客到Gitee中\" class=\"headerlink\" title=\"部署hexo静态博客到Gitee中\"></a>部署hexo静态博客到Gitee中</h2><p><strong>由于不可抗力，Gitee的pages服务无法自定义域名，因此建议直接部署到Github上而不是Gitee中，并自己做好备份</strong></p>\n<span id=\"more\"></span>\n\n<p><strong>本文章假定你已经使用了nvm安装了nodejs12.14.0，并且已经配置了git以及gitee上的ssh密钥</strong></p>\n<hr>\n<h3 id=\"1-安装Hexo\"><a href=\"#1-安装Hexo\" class=\"headerlink\" title=\"1.安装Hexo\"></a>1.安装Hexo</h3><p>在gitbash或者cmd中输入命令：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo   <span class=\"token comment\"># 通过npm安装hexo</span>\n<span class=\"token comment\"># -g 指定全局安装，可以使用hexo命令</span></code></pre>\n\n<h3 id=\"2-初始化Hexo\"><a href=\"#2-初始化Hexo\" class=\"headerlink\" title=\"2.初始化Hexo\"></a>2.初始化Hexo</h3><p>进入合适的目录（你要存放你hexo博客文件的地方）</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo init blog  <span class=\"token comment\"># 初始化创建，会再桌面创建blog文件夹</span>\n<span class=\"token builtin class-name\">cd</span> blog    <span class=\"token comment\"># 进入blog目录</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span>   <span class=\"token comment\"># 进一步安装hexo所需文件</span></code></pre>\n\n<p>初始化后的文件目录及其功能如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">.\n├── .deploy       #需要部署的文件\n├── node_modules  #Hexo插件\n├── public        #生成的静态网页文件\n├── scaffolds     #模板\n├── source        #博客正文和其他源文件等都应该放在这里\n|   ├── _drafts   #草稿\n|   └── _posts    #文章\n├── themes        #主题\n├── _config.yml   #全局配置文件\n└── package.json</code></pre>\n\n\n\n<h3 id=\"3-启动Hexo\"><a href=\"#3-启动Hexo\" class=\"headerlink\" title=\"3.启动Hexo\"></a>3.启动Hexo</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean   <span class=\"token comment\"># 清除所有记录 /hexo c</span>\nhexo generate  <span class=\"token comment\"># 生成静态网页 /hexo g</span>\nhexo server    <span class=\"token comment\"># 启动服务 /hexo s</span></code></pre>\n\n<p>成功启动后应该是有如下界面：</p>\n<pre class=\"language-none\"><code class=\"language-none\">WARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nWARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; ATTENTION! &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nWARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nWARN   NexT repository is moving here: https:&#x2F;&#x2F;github.com&#x2F;theme-next\nWARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nWARN   It&#39;s rebase to v6.0.0 and future maintenance will resume there\nWARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nINFO  Hexo is running at http:&#x2F;&#x2F;localhost:4000 . Press Ctrl+C to stop.\n</code></pre>\n\n<p>此时访问<a href=\"http://localhost:4000/\">http://localhost:4000</a> 即可在本地访问你的博客了</p>\n<p>如果想要在任何可以上网的设备上访问你的博客，那么你就需要将你的本地Hexo博客部署到Gitee了。</p>\n<h3 id=\"4-部署Hexo博客到码云（Gitee）上\"><a href=\"#4-部署Hexo博客到码云（Gitee）上\" class=\"headerlink\" title=\"4.部署Hexo博客到码云（Gitee）上\"></a>4.部署Hexo博客到码云（Gitee）上</h3><p>码云（gitee）：<strong><a href=\"https://gitee.com/\">https://gitee.com/</a></strong></p>\n<h4 id=\"4-1-注册码云，创建仓库\"><a href=\"#4-1-注册码云，创建仓库\" class=\"headerlink\" title=\"4.1 注册码云，创建仓库\"></a>4.1 注册码云，创建仓库</h4><p>输入仓库名称，其他的保持默认即可。</p>\n<h4 id=\"4-2-生成-x2F-添加SSH公钥\"><a href=\"#4-2-生成-x2F-添加SSH公钥\" class=\"headerlink\" title=\"4.2 生成&#x2F;添加SSH公钥\"></a>4.2 生成&#x2F;添加SSH公钥</h4><p>请查看<a href=\"https://mikutown.gitee.io/blog/2020/12/31/%E9%85%8D%E7%BD%AEgit%E4%B8%8Egitee%E8%BF%9E%E6%8E%A5/#more\">我之前的博客</a></p>\n<h4 id=\"4-3-配置连接Gitee\"><a href=\"#4-3-配置连接Gitee\" class=\"headerlink\" title=\"4.3 配置连接Gitee\"></a>4.3 配置连接Gitee</h4><p>复制我们新创建的仓库的项目地址</p>\n<p>复制URL到hexo的配置文件_config.yml中相应的位置</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git                        <span class=\"token comment\"># type为git</span>\n  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> git@gitee.com<span class=\"token punctuation\">:</span>XXXXXX/blog.git  <span class=\"token comment\"># 仓库的 URL</span>\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master</code></pre>\n\n<p><strong>注意冒号后面一定要有空格</strong></p>\n<h4 id=\"4-4-部署Hexo博客\"><a href=\"#4-4-部署Hexo博客\" class=\"headerlink\" title=\"4.4 部署Hexo博客\"></a>4.4 部署Hexo博客</h4><p>安装自动部署发布工具hexo-deployer-git，不然部署会报错</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git --save</code></pre>\n\n<p>在博客根目录新建deployer.sh文件，输入代码（也就是新建了一个bash脚本文件）</p>\n<pre class=\"language-none\"><code class=\"language-none\">hexo clean\nhexo g \nhexo d</code></pre>\n\n<p>输入之后保存退出，在bash中部署博客就只需要执行以下命令一键部署博客</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sh</span> deployer.sh\t</code></pre>\n\n<p>这个时候在pages里启动博客，可能会无法显示css样式，这个时候你就需要修改你的_config.yml文件了</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># URL</span>\n<span class=\"token comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span>\n<span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mikutown.gitee.io/blog\n<span class=\"token comment\"># 在url后面写你的博客地址</span>\n<span class=\"token key atrule\">root</span><span class=\"token punctuation\">:</span> /blog\n<span class=\"token key atrule\">permalink</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>year/<span class=\"token punctuation\">:</span>month/<span class=\"token punctuation\">:</span>day/<span class=\"token punctuation\">:</span>title/\npermalink_defaults<span class=\"token punctuation\">:</span></code></pre>\n\n\n\n<h3 id=\"5-Gitee-Pages设置\"><a href=\"#5-Gitee-Pages设置\" class=\"headerlink\" title=\"5.Gitee Pages设置\"></a>5.Gitee Pages设置</h3><p>在项目的服务中选择Pages选项，直接使用默认配置，点击启动即可。如下图所示</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520155705.png\" alt=\"如何进入Pages服务\" loading=\"lazy\"></p>\n<p>点击启动后：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520155731.png\" alt=\"Pages服务页面\" loading=\"lazy\"></p>\n<p><strong>博客发布成功之后，可以访问博客地址：xxxxxx，就可通过他提供的博客地址进行访问，预览在线博客啦！！</strong></p>\n<p>如果博客的样式不对，则需要在_config.yml中配置下博客地址和路径：</p>\n<pre class=\"language-none\"><code class=\"language-none\">url: “码云提供给您的博客地址”\nroot: &#x2F;</code></pre>\n\n<p>再执行命令 <code>sh deployer.sh</code> 就可以啦，之后就是美化我们的博客了。</p>\n<h3 id=\"6-博客的美化\"><a href=\"#6-博客的美化\" class=\"headerlink\" title=\"6.博客的美化\"></a>6.博客的美化</h3><p><a href=\"https://hexo.io/themes/\">Hexo博客主题列表</a></p>\n<p>下载自己喜欢的主题，可以去 github 下载压缩包然后<strong>放到博客项目根目录下的 themes 中</strong>。</p>\n<p>然后配置 <strong>_config.yml</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">theme: “您的主题文件夹完整名称”  \n# 这里需要注意:后面要有一个空格，名称要和theme下的主题目录名称相同。</code></pre>\n\n<p>修改完成，本地运行 <code>hexo s</code> 测试成功即可上传部署到 Gitee 然后点击更新即可。</p>\n<h3 id=\"7-自定义博客域名\"><a href=\"#7-自定义博客域名\" class=\"headerlink\" title=\"7.自定义博客域名\"></a>7.自定义博客域名</h3><p>Gitee的Pages服务为每个人的博客都定义了一个地址，在Pages页面有链接，比如我的链接就是<a href=\"https://mikutown.gitee.io/blog\">https://mikutown.gitee.io/blog</a> ，但是有的人拥有自己的域名，希望通过自己的域名访问到自己的博客，怎么办呢？就需要你去配置自定义博客域名了。</p>\n<h4 id=\"7-1-购买域名\"><a href=\"#7-1-购买域名\" class=\"headerlink\" title=\"7.1 购买域名\"></a>7.1 购买域名</h4><p>不做过多解释，自己去买就可以了。</p>\n<h4 id=\"7-2-域名解析\"><a href=\"#7-2-域名解析\" class=\"headerlink\" title=\"7.2 域名解析\"></a>7.2 域名解析</h4><p>因为gitee pages pro功能下线了，无法直接通过年支付99元的方式进行自定义的域名解析，因此在这里我们将自己的域名解析到GitHub，再利用页面跳转实现输入自己的域名进入自己的gitee博客。</p>\n<h5 id=\"7-2-1-Github相关配置\"><a href=\"#7-2-1-Github相关配置\" class=\"headerlink\" title=\"7.2.1 Github相关配置\"></a>7.2.1 Github相关配置</h5><ul>\n<li>注册自己的github账号</li>\n<li>将自己的电脑中的ssh密钥添加到GitHub账号里，并且测试连接ok</li>\n<li><strong>以下操作中你的GitHub用户名均用username代替</strong></li>\n</ul>\n<h5 id=\"7-2-2-新建Github项目\"><a href=\"#7-2-2-新建Github项目\" class=\"headerlink\" title=\"7.2.2 新建Github项目\"></a>7.2.2 新建Github项目</h5><p>新建一个仓库，仓库名称：username.github.io,其他保持默认设置，如图所示：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520155803.png\" loading=\"lazy\"></p>\n<h5 id=\"7-2-3-在本地新建index-html\"><a href=\"#7-2-3-在本地新建index-html\" class=\"headerlink\" title=\"7.2.3 在本地新建index.html\"></a>7.2.3 在本地新建index.html</h5><p>新建的index.html文件放在文件夹名为username.github.io的文件夹中，index.html的内容为</p>\n<pre class=\"language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token operator\">=</span><span class=\"token string\">\"你的Gitee静态博客地址\"</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--顾名思义 这是跳转到你的Gitee静态博客地址的script--></span></code></pre>\n\n<h5 id=\"7-2-4-将文件上传到自己的github仓库了\"><a href=\"#7-2-4-将文件上传到自己的github仓库了\" class=\"headerlink\" title=\"7.2.4 将文件上传到自己的github仓库了\"></a>7.2.4 将文件上传到自己的github仓库了</h5><p>在你的username.github.io文件夹中打开git bash，然后输入如下命令：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init\n<span class=\"token comment\"># 初始化GitHub本地仓库</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token comment\"># 将本地文件夹中的所有文件加到仓库中</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"注释语句\"</span>\n<span class=\"token comment\"># 此处的注释语句就是对刚才的add操作的注释，此处使用commit命令将刚才add的文件commit到仓库，注释语句啥也能写，就是不能留空 不可以留空知道了吗知道了吗知道了吗知道了吗知道了吗</span></code></pre>\n\n<h5 id=\"7-2-5-将Github仓库与本地仓库关联\"><a href=\"#7-2-5-将Github仓库与本地仓库关联\" class=\"headerlink\" title=\"7.2.5 将Github仓库与本地仓库关联\"></a>7.2.5 将Github仓库与本地仓库关联</h5><p>复制GitHub的仓库地址，如图：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520155818.png\" loading=\"lazy\"></p>\n<p>在username.github.io文件夹中启动的gitbash中输入代码</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/username/username.github.io\n<span class=\"token comment\"># 后面的https链接地址换成你自己的仓库url地址，也就是上面红框中标出来的地址</span></code></pre>\n\n<h6 id=\"7-2-6-执行pull与push操作\"><a href=\"#7-2-6-执行pull与push操作\" class=\"headerlink\" title=\"7.2.6 执行pull与push操作\"></a>7.2.6 执行pull与push操作</h6><p>执行以下命令</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin master\n<span class=\"token function\">git</span> push -u origin master</code></pre>\n\n<p>执行完后，如果没有异常，等待执行完就上传成功了，中间可能会让你输入Username和Password，你只要输入github的账号和密码就行了。<br><strong>精髓来了：</strong><br><strong>需要注意的是push和pull类似于栈出栈压栈</strong>，而且它必须是一出一压，不能出出压压，为什么要说这个能，就是在多人共享代码的时候，有多个人同时使用或是有人使用了pull忘记了push了，以后的人再用pull就会出错，解决方案是，如果下一步应该是push了，你就敲出来git push，反之则是git pull。<br>好了，你们这些都做完了后，可以回到浏览器刷新看看是不是已经传上去了，那么最麻烦的一步就ok了，git命令的水还很深，我这一个晚上学得都是皮毛嘻嘻。</p>\n<h5 id=\"7-2-7-在Github仓库中新建CNAME文件\"><a href=\"#7-2-7-在Github仓库中新建CNAME文件\" class=\"headerlink\" title=\"7.2.7 在Github仓库中新建CNAME文件\"></a>7.2.7 在Github仓库中新建CNAME文件</h5><p>在仓库中新建一个CNAME文件，如图所示<img src=\"http://cdn.leafii.top/img/20220520155838.png\" loading=\"lazy\"></p>\n<p>文件名为CNAME，文件内容为你购买的域名，你自己的买的域名如果是leafii.top那就输入leafii.top，个人意见是不要加那些http和&#x2F;这些东西。完成这一步后，你的仓库应该有两个文件了。</p>\n<h5 id=\"7-2-8-进入域名控制台进行域名解析设置\"><a href=\"#7-2-8-进入域名控制台进行域名解析设置\" class=\"headerlink\" title=\"7.2.8 进入域名控制台进行域名解析设置\"></a>7.2.8 进入域名控制台进行域名解析设置</h5><p>我的域名是在阿里云购买，因此以下截图来自阿里云域名控制台，在域名控制台中将@和www的域名的解析类型修改为CNAME，然后将解析地址解析为你的Github仓库名，即username.github.io，如图所示：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520155855.png\" loading=\"lazy\"></p>\n<h5 id=\"7-2-9-解析设置后的操作\"><a href=\"#7-2-9-解析设置后的操作\" class=\"headerlink\" title=\"7.2.9 解析设置后的操作\"></a>7.2.9 解析设置后的操作</h5><p>如果解析设置完毕，等待几分钟再进行是否设置成功的尝试。</p>\n<h5 id=\"7-2-10-大功告成\"><a href=\"#7-2-10-大功告成\" class=\"headerlink\" title=\"7.2.10 大功告成\"></a>7.2.10 大功告成</h5><p>如果你们github上传错了，也可以删除的，这里就不讲了，给你们一个链接<br><a href=\"https://blog.csdn.net/q420225777/article/details/80697077\">https://blog.csdn.net/q420225777/article/details/80697077</a></p>\n<hr>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p><a href=\"https://www.cnblogs.com/yizhixue-hx/p/12638361.html\">Hexo + Gitee搭建个人博客</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_43419816/article/details/106246960\">利用Github实现页面跳转</a></p>\n","more":"<p><strong>本文章假定你已经使用了nvm安装了nodejs12.14.0，并且已经配置了git以及gitee上的ssh密钥</strong></p>\n<hr>\n<h3 id=\"1-安装Hexo\"><a href=\"#1-安装Hexo\" class=\"headerlink\" title=\"1.安装Hexo\"></a>1.安装Hexo</h3><p>在gitbash或者cmd中输入命令：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo   <span class=\"token comment\"># 通过npm安装hexo</span>\n<span class=\"token comment\"># -g 指定全局安装，可以使用hexo命令</span></code></pre>\n\n<h3 id=\"2-初始化Hexo\"><a href=\"#2-初始化Hexo\" class=\"headerlink\" title=\"2.初始化Hexo\"></a>2.初始化Hexo</h3><p>进入合适的目录（你要存放你hexo博客文件的地方）</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo init blog  <span class=\"token comment\"># 初始化创建，会再桌面创建blog文件夹</span>\n<span class=\"token builtin class-name\">cd</span> blog    <span class=\"token comment\"># 进入blog目录</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span>   <span class=\"token comment\"># 进一步安装hexo所需文件</span></code></pre>\n\n<p>初始化后的文件目录及其功能如下：</p>\n<pre class=\"language-none\"><code class=\"language-none\">.\n├── .deploy       #需要部署的文件\n├── node_modules  #Hexo插件\n├── public        #生成的静态网页文件\n├── scaffolds     #模板\n├── source        #博客正文和其他源文件等都应该放在这里\n|   ├── _drafts   #草稿\n|   └── _posts    #文章\n├── themes        #主题\n├── _config.yml   #全局配置文件\n└── package.json</code></pre>\n\n\n\n<h3 id=\"3-启动Hexo\"><a href=\"#3-启动Hexo\" class=\"headerlink\" title=\"3.启动Hexo\"></a>3.启动Hexo</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean   <span class=\"token comment\"># 清除所有记录 /hexo c</span>\nhexo generate  <span class=\"token comment\"># 生成静态网页 /hexo g</span>\nhexo server    <span class=\"token comment\"># 启动服务 /hexo s</span></code></pre>\n\n<p>成功启动后应该是有如下界面：</p>\n<pre class=\"language-none\"><code class=\"language-none\">WARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nWARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; ATTENTION! &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nWARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nWARN   NexT repository is moving here: https:&#x2F;&#x2F;github.com&#x2F;theme-next\nWARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nWARN   It&#39;s rebase to v6.0.0 and future maintenance will resume there\nWARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nINFO  Hexo is running at http:&#x2F;&#x2F;localhost:4000 . Press Ctrl+C to stop.\n</code></pre>\n\n<p>此时访问<a href=\"http://localhost:4000/\">http://localhost:4000</a> 即可在本地访问你的博客了</p>\n<p>如果想要在任何可以上网的设备上访问你的博客，那么你就需要将你的本地Hexo博客部署到Gitee了。</p>\n<h3 id=\"4-部署Hexo博客到码云（Gitee）上\"><a href=\"#4-部署Hexo博客到码云（Gitee）上\" class=\"headerlink\" title=\"4.部署Hexo博客到码云（Gitee）上\"></a>4.部署Hexo博客到码云（Gitee）上</h3><p>码云（gitee）：<strong><a href=\"https://gitee.com/\">https://gitee.com/</a></strong></p>\n<h4 id=\"4-1-注册码云，创建仓库\"><a href=\"#4-1-注册码云，创建仓库\" class=\"headerlink\" title=\"4.1 注册码云，创建仓库\"></a>4.1 注册码云，创建仓库</h4><p>输入仓库名称，其他的保持默认即可。</p>\n<h4 id=\"4-2-生成-x2F-添加SSH公钥\"><a href=\"#4-2-生成-x2F-添加SSH公钥\" class=\"headerlink\" title=\"4.2 生成&#x2F;添加SSH公钥\"></a>4.2 生成&#x2F;添加SSH公钥</h4><p>请查看<a href=\"https://mikutown.gitee.io/blog/2020/12/31/%E9%85%8D%E7%BD%AEgit%E4%B8%8Egitee%E8%BF%9E%E6%8E%A5/#more\">我之前的博客</a></p>\n<h4 id=\"4-3-配置连接Gitee\"><a href=\"#4-3-配置连接Gitee\" class=\"headerlink\" title=\"4.3 配置连接Gitee\"></a>4.3 配置连接Gitee</h4><p>复制我们新创建的仓库的项目地址</p>\n<p>复制URL到hexo的配置文件_config.yml中相应的位置</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git                        <span class=\"token comment\"># type为git</span>\n  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> git@gitee.com<span class=\"token punctuation\">:</span>XXXXXX/blog.git  <span class=\"token comment\"># 仓库的 URL</span>\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master</code></pre>\n\n<p><strong>注意冒号后面一定要有空格</strong></p>\n<h4 id=\"4-4-部署Hexo博客\"><a href=\"#4-4-部署Hexo博客\" class=\"headerlink\" title=\"4.4 部署Hexo博客\"></a>4.4 部署Hexo博客</h4><p>安装自动部署发布工具hexo-deployer-git，不然部署会报错</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git --save</code></pre>\n\n<p>在博客根目录新建deployer.sh文件，输入代码（也就是新建了一个bash脚本文件）</p>\n<pre class=\"language-none\"><code class=\"language-none\">hexo clean\nhexo g \nhexo d</code></pre>\n\n<p>输入之后保存退出，在bash中部署博客就只需要执行以下命令一键部署博客</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sh</span> deployer.sh\t</code></pre>\n\n<p>这个时候在pages里启动博客，可能会无法显示css样式，这个时候你就需要修改你的_config.yml文件了</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># URL</span>\n<span class=\"token comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span>\n<span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mikutown.gitee.io/blog\n<span class=\"token comment\"># 在url后面写你的博客地址</span>\n<span class=\"token key atrule\">root</span><span class=\"token punctuation\">:</span> /blog\n<span class=\"token key atrule\">permalink</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>year/<span class=\"token punctuation\">:</span>month/<span class=\"token punctuation\">:</span>day/<span class=\"token punctuation\">:</span>title/\npermalink_defaults<span class=\"token punctuation\">:</span></code></pre>\n\n\n\n<h3 id=\"5-Gitee-Pages设置\"><a href=\"#5-Gitee-Pages设置\" class=\"headerlink\" title=\"5.Gitee Pages设置\"></a>5.Gitee Pages设置</h3><p>在项目的服务中选择Pages选项，直接使用默认配置，点击启动即可。如下图所示</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520155705.png\" alt=\"如何进入Pages服务\"></p>\n<p>点击启动后：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520155731.png\" alt=\"Pages服务页面\"></p>\n<p><strong>博客发布成功之后，可以访问博客地址：xxxxxx，就可通过他提供的博客地址进行访问，预览在线博客啦！！</strong></p>\n<p>如果博客的样式不对，则需要在_config.yml中配置下博客地址和路径：</p>\n<pre class=\"language-none\"><code class=\"language-none\">url: “码云提供给您的博客地址”\nroot: &#x2F;</code></pre>\n\n<p>再执行命令 <code>sh deployer.sh</code> 就可以啦，之后就是美化我们的博客了。</p>\n<h3 id=\"6-博客的美化\"><a href=\"#6-博客的美化\" class=\"headerlink\" title=\"6.博客的美化\"></a>6.博客的美化</h3><p><a href=\"https://hexo.io/themes/\">Hexo博客主题列表</a></p>\n<p>下载自己喜欢的主题，可以去 github 下载压缩包然后<strong>放到博客项目根目录下的 themes 中</strong>。</p>\n<p>然后配置 <strong>_config.yml</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">theme: “您的主题文件夹完整名称”  \n# 这里需要注意:后面要有一个空格，名称要和theme下的主题目录名称相同。</code></pre>\n\n<p>修改完成，本地运行 <code>hexo s</code> 测试成功即可上传部署到 Gitee 然后点击更新即可。</p>\n<h3 id=\"7-自定义博客域名\"><a href=\"#7-自定义博客域名\" class=\"headerlink\" title=\"7.自定义博客域名\"></a>7.自定义博客域名</h3><p>Gitee的Pages服务为每个人的博客都定义了一个地址，在Pages页面有链接，比如我的链接就是<a href=\"https://mikutown.gitee.io/blog\">https://mikutown.gitee.io/blog</a> ，但是有的人拥有自己的域名，希望通过自己的域名访问到自己的博客，怎么办呢？就需要你去配置自定义博客域名了。</p>\n<h4 id=\"7-1-购买域名\"><a href=\"#7-1-购买域名\" class=\"headerlink\" title=\"7.1 购买域名\"></a>7.1 购买域名</h4><p>不做过多解释，自己去买就可以了。</p>\n<h4 id=\"7-2-域名解析\"><a href=\"#7-2-域名解析\" class=\"headerlink\" title=\"7.2 域名解析\"></a>7.2 域名解析</h4><p>因为gitee pages pro功能下线了，无法直接通过年支付99元的方式进行自定义的域名解析，因此在这里我们将自己的域名解析到GitHub，再利用页面跳转实现输入自己的域名进入自己的gitee博客。</p>\n<h5 id=\"7-2-1-Github相关配置\"><a href=\"#7-2-1-Github相关配置\" class=\"headerlink\" title=\"7.2.1 Github相关配置\"></a>7.2.1 Github相关配置</h5><ul>\n<li>注册自己的github账号</li>\n<li>将自己的电脑中的ssh密钥添加到GitHub账号里，并且测试连接ok</li>\n<li><strong>以下操作中你的GitHub用户名均用username代替</strong></li>\n</ul>\n<h5 id=\"7-2-2-新建Github项目\"><a href=\"#7-2-2-新建Github项目\" class=\"headerlink\" title=\"7.2.2 新建Github项目\"></a>7.2.2 新建Github项目</h5><p>新建一个仓库，仓库名称：username.github.io,其他保持默认设置，如图所示：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520155803.png\"></p>\n<h5 id=\"7-2-3-在本地新建index-html\"><a href=\"#7-2-3-在本地新建index-html\" class=\"headerlink\" title=\"7.2.3 在本地新建index.html\"></a>7.2.3 在本地新建index.html</h5><p>新建的index.html文件放在文件夹名为username.github.io的文件夹中，index.html的内容为</p>\n<pre class=\"language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token operator\">=</span><span class=\"token string\">\"你的Gitee静态博客地址\"</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--顾名思义 这是跳转到你的Gitee静态博客地址的script--></span></code></pre>\n\n<h5 id=\"7-2-4-将文件上传到自己的github仓库了\"><a href=\"#7-2-4-将文件上传到自己的github仓库了\" class=\"headerlink\" title=\"7.2.4 将文件上传到自己的github仓库了\"></a>7.2.4 将文件上传到自己的github仓库了</h5><p>在你的username.github.io文件夹中打开git bash，然后输入如下命令：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init\n<span class=\"token comment\"># 初始化GitHub本地仓库</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token comment\"># 将本地文件夹中的所有文件加到仓库中</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"注释语句\"</span>\n<span class=\"token comment\"># 此处的注释语句就是对刚才的add操作的注释，此处使用commit命令将刚才add的文件commit到仓库，注释语句啥也能写，就是不能留空 不可以留空知道了吗知道了吗知道了吗知道了吗知道了吗</span></code></pre>\n\n<h5 id=\"7-2-5-将Github仓库与本地仓库关联\"><a href=\"#7-2-5-将Github仓库与本地仓库关联\" class=\"headerlink\" title=\"7.2.5 将Github仓库与本地仓库关联\"></a>7.2.5 将Github仓库与本地仓库关联</h5><p>复制GitHub的仓库地址，如图：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520155818.png\"></p>\n<p>在username.github.io文件夹中启动的gitbash中输入代码</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/username/username.github.io\n<span class=\"token comment\"># 后面的https链接地址换成你自己的仓库url地址，也就是上面红框中标出来的地址</span></code></pre>\n\n<h6 id=\"7-2-6-执行pull与push操作\"><a href=\"#7-2-6-执行pull与push操作\" class=\"headerlink\" title=\"7.2.6 执行pull与push操作\"></a>7.2.6 执行pull与push操作</h6><p>执行以下命令</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin master\n<span class=\"token function\">git</span> push -u origin master</code></pre>\n\n<p>执行完后，如果没有异常，等待执行完就上传成功了，中间可能会让你输入Username和Password，你只要输入github的账号和密码就行了。<br><strong>精髓来了：</strong><br><strong>需要注意的是push和pull类似于栈出栈压栈</strong>，而且它必须是一出一压，不能出出压压，为什么要说这个能，就是在多人共享代码的时候，有多个人同时使用或是有人使用了pull忘记了push了，以后的人再用pull就会出错，解决方案是，如果下一步应该是push了，你就敲出来git push，反之则是git pull。<br>好了，你们这些都做完了后，可以回到浏览器刷新看看是不是已经传上去了，那么最麻烦的一步就ok了，git命令的水还很深，我这一个晚上学得都是皮毛嘻嘻。</p>\n<h5 id=\"7-2-7-在Github仓库中新建CNAME文件\"><a href=\"#7-2-7-在Github仓库中新建CNAME文件\" class=\"headerlink\" title=\"7.2.7 在Github仓库中新建CNAME文件\"></a>7.2.7 在Github仓库中新建CNAME文件</h5><p>在仓库中新建一个CNAME文件，如图所示<img src=\"http://cdn.leafii.top/img/20220520155838.png\"></p>\n<p>文件名为CNAME，文件内容为你购买的域名，你自己的买的域名如果是leafii.top那就输入leafii.top，个人意见是不要加那些http和&#x2F;这些东西。完成这一步后，你的仓库应该有两个文件了。</p>\n<h5 id=\"7-2-8-进入域名控制台进行域名解析设置\"><a href=\"#7-2-8-进入域名控制台进行域名解析设置\" class=\"headerlink\" title=\"7.2.8 进入域名控制台进行域名解析设置\"></a>7.2.8 进入域名控制台进行域名解析设置</h5><p>我的域名是在阿里云购买，因此以下截图来自阿里云域名控制台，在域名控制台中将@和www的域名的解析类型修改为CNAME，然后将解析地址解析为你的Github仓库名，即username.github.io，如图所示：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520155855.png\"></p>\n<h5 id=\"7-2-9-解析设置后的操作\"><a href=\"#7-2-9-解析设置后的操作\" class=\"headerlink\" title=\"7.2.9 解析设置后的操作\"></a>7.2.9 解析设置后的操作</h5><p>如果解析设置完毕，等待几分钟再进行是否设置成功的尝试。</p>\n<h5 id=\"7-2-10-大功告成\"><a href=\"#7-2-10-大功告成\" class=\"headerlink\" title=\"7.2.10 大功告成\"></a>7.2.10 大功告成</h5><p>如果你们github上传错了，也可以删除的，这里就不讲了，给你们一个链接<br><a href=\"https://blog.csdn.net/q420225777/article/details/80697077\">https://blog.csdn.net/q420225777/article/details/80697077</a></p>\n<hr>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p><a href=\"https://www.cnblogs.com/yizhixue-hx/p/12638361.html\">Hexo + Gitee搭建个人博客</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_43419816/article/details/106246960\">利用Github实现页面跳转</a></p>","categories":[],"tags":[{"name":"Hexo","path":"api/tags/Hexo.json"}]}