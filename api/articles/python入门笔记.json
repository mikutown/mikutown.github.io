{"title":"python入门笔记","slug":"python入门笔记","date":"2022-04-24T06:15:16.000Z","updated":"2022-04-24T18:31:16.716Z","comments":true,"path":"api/articles/python入门笔记.json","excerpt":"本文章旨在记录本人python基础语法学习的回顾总结。知识点来自B站莫烦python的python基础教程","covers":["https://gitee.com/mikutown/pic/raw/master/img/Screen%20Shot%202022-04-24%20at%2022.50.06.png","https://gitee.com/mikutown/pic/raw/master/img/Screen%20Shot%202022-04-24%20at%2023.07.35.png","https://gitee.com/mikutown/pic/raw/master/img/Screen%20Shot%202022-04-24%20at%2023.31.03.png","https://gitee.com/mikutown/pic/raw/master/img/Screen%20Shot%202022-04-24%20at%2023.36.57.png","https://gitee.com/mikutown/pic/raw/master/img/Screen%20Shot%202022-04-25%20at%2001.02.15.png"],"content":"<p>本文章旨在记录本人python基础语法学习的回顾总结。知识点来自B站莫烦python的<a href=\"https://www.bilibili.com/video/BV1wW411Y7ai\">python基础教程</a><a id=\"more\"></a></p>\n<h2 id=\"python入门笔记\"><a href=\"#python入门笔记\" class=\"headerlink\" title=\"python入门笔记\"></a>python入门笔记</h2><h3 id=\"python的安装\"><a href=\"#python的安装\" class=\"headerlink\" title=\"python的安装\"></a>python的安装</h3><p><a href=\"https://www.python.org/downloads/\">下载链接</a> 按需下载噢，建议直接下载3.5以上的版本，不推荐2.X版本</p>\n<ul>\n<li>macOS下的安装：直接一直点下一步即可</li>\n<li>windows下的安装：点下一步即可，记得勾选“添加到command line…..”的那个选项噢（否则无法正常使用pip3）</li>\n<li>linux下的安装：<a href=\"https://www.jianshu.com/p/fd75a5cfe4dd\">转载一篇博客</a></li>\n</ul>\n<p>安装完成后进入命令行输入python3 显示如下界面：</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/Screen%20Shot%202022-04-24%20at%2022.50.06.png\" alt=\"python3成功安装后iterm界面\" loading=\"lazy\"></p>\n<hr>\n<h3 id=\"print函数\"><a href=\"#print函数\" class=\"headerlink\" title=\"print函数\"></a>print函数</h3><p>直接上代码吧 比较浅显易懂</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">say_hi <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你的第一行代码：\"</span><span class=\"token punctuation\">,</span> say_hi<span class=\"token punctuation\">)</span></code></pre>\n<p>输出结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">你的第一行代码： Hello World</code></pre>\n<hr>\n<h3 id=\"有关数学符号\"><a href=\"#有关数学符号\" class=\"headerlink\" title=\"有关数学符号\"></a>有关数学符号</h3><p>在数学里，“&#x3D;”就是等于的意思 但是在编程环境中“&#x3D;”就是赋值的意思，比如<code>sa y_hi = &quot;Hello World&quot;</code>就是把“Hello World”这个值赋值给名为say_hi的变量。在编程环境中的“&#x3D;&#x3D;”符号，才是用来判断是否相等的，比如<code>123==321</code>就会返回一个False值 QWQ！</p>\n<p>还要记得在python里&#x2F;&#x2F;相当于整除，%相当于取余数噢</p>\n<hr>\n<h3 id=\"自变量variable\"><a href=\"#自变量variable\" class=\"headerlink\" title=\"自变量variable\"></a>自变量variable</h3><p>python不用定义类型，可以直接定义变量</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">apple <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>apple<span class=\"token punctuation\">)</span>\nAPPLE_EGG <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\nappleEgg <span class=\"token operator\">=</span> <span class=\"token number\">12</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>appleEgg<span class=\"token punctuation\">)</span></code></pre>\n<p>如同第二节里的say_hi 一样，apple和say_hi都是变量的名称，定义变量的方式就是如此</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/Screen%20Shot%202022-04-24%20at%2023.07.35.png\" alt=\"运行结果\" loading=\"lazy\"></p>\n<hr>\n<h3 id=\"关于循环与判断\"><a href=\"#关于循环与判断\" class=\"headerlink\" title=\"关于循环与判断\"></a>关于循环与判断</h3><ul>\n<li>while循环</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#while循环</span>\nnum1 <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&lt;=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"现在num的值为：\"</span><span class=\"token punctuation\">,</span>num1<span class=\"token punctuation\">,</span><span class=\"token string\">\"num自增1！\"</span><span class=\"token punctuation\">)</span>\n    num1 <span class=\"token operator\">=</span> num1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre>\n<p>运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">现在num的值为： 3 num自增1！\n现在num的值为： 4 num自增1！\n现在num的值为： 5 num自增1！\n现在num的值为： 6 num自增1！\n现在num的值为： 7 num自增1！\n现在num的值为： 8 num自增1！</code></pre>\n<ul>\n<li>for循环</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#迭代遍历</span>\na_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> a_list<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#使用下标遍历</span>\n<span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a_list<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 关于range：range(1,3) --> 1 2 (左闭右开) len(a_list)就是返回a_list这个list的长度</span></code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/Screen%20Shot%202022-04-24%20at%2023.31.03.png\" alt=\"for循环代码运行结果\" loading=\"lazy\"></p>\n<ul>\n<li>if，if else，if elif else</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">inin <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入一个数字\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> inin <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个数字小于0\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> inin <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个数字等于3\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#else是相对于if来说的</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个数字大于等于0且不等于3\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/Screen%20Shot%202022-04-24%20at%2023.36.57.png\" alt=\"if判断代码运行结果\" loading=\"lazy\"></p>\n<hr>\n<h3 id=\"使用def定义函数\"><a href=\"#使用def定义函数\" class=\"headerlink\" title=\"使用def定义函数\"></a>使用def定义函数</h3><pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\"># a,b为参数 函数可以有返回值也可以没有噢</span>\n    c <span class=\"token operator\">=</span> a<span class=\"token operator\">+</span>b\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#可以通过运行结果看到调用的顺序</span>\n    <span class=\"token keyword\">return</span> c\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">3\n5</code></pre>\n<ul>\n<li>函数默认参数</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span>d<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\">#可以设置函数的参数为默认值，未写明的调用就直接用定义好的调用值</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#请注意未定义好初始值的变量不能在已经定义好初始值的变量后面</span>\nfun1<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nfun1<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>d<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre>\n<p>运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">1 30 20\n1 2 3</code></pre>\n<hr>\n<h3 id=\"全局变量-amp-局部变量\"><a href=\"#全局变量-amp-局部变量\" class=\"headerlink\" title=\"全局变量&amp;局部变量\"></a>全局变量&amp;局部变量</h3><pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">APPLE <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\na <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> a\n    <span class=\"token comment\">#不加global a就会None</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n    <span class=\"token keyword\">global</span> b\n    b <span class=\"token operator\">=</span> <span class=\"token number\">120</span>\n    <span class=\"token string\">'print(a)'</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span><span class=\"token number\">103</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'past a:'</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"later a:\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#通过添加global，使原来是局部变量作用域的变量变为全局变量</span></code></pre>\n<p>运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">past a: None\n123\n120\nlater a: 20</code></pre>\n<hr>\n<h3 id=\"模块安装\"><a href=\"#模块安装\" class=\"headerlink\" title=\"模块安装\"></a>模块安装</h3><ul>\n<li>macOS&#x2F;Linux下的模块安装：使用终端里的iterm即可：</li>\n</ul>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/Screen%20Shot%202022-04-25%20at%2001.02.15.png\" alt=\"Screen Shot 2022-04-25 at 01.02.15\" loading=\"lazy\"></p>\n<ul>\n<li>Windows下的安装：去官网下载</li>\n</ul>\n<hr>\n<h3 id=\"读写文件\"><a href=\"#读写文件\" class=\"headerlink\" title=\"读写文件\"></a>读写文件</h3><ul>\n<li>创建一个文件并向其写入一些文字</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">text <span class=\"token operator\">=</span> <span class=\"token string\">\"This is my first test.\\nThis is next line.\\nThis is last line\"</span>\n<span class=\"token comment\">#\\n代表回车，在文件中就相当于输入一个句子换行</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\nmy_file <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my file.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\nmy_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\nmy_file<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#open函数第一个参数是要打开的文件的文件名，第二个参数是打开方式，w代表写，r代表只读，如果以w方式打开不存在的文件则会直接创建新文件，编辑完文件记得使用close方法保存文件</span></code></pre>\n<ul>\n<li>使用append打开方式（a）向文件末尾添加文字</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">append_text <span class=\"token operator\">=</span> <span class=\"token string\">\"\\nThis is appended file.\"</span>\n<span class=\"token comment\">#a的意思是append</span>\nmy_file <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my file.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\nmy_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>append_text<span class=\"token punctuation\">)</span>\nmy_file<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<ul>\n<li>读取文件并print</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my file.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#content = file.read()</span>\n<span class=\"token comment\">#readline是一行一行读</span>\ncontent <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> content<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\nsecond_read_time <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span>second_read_time<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">This is my first test.\n\nThis is next line.\n\nThis is last line\n\nThis is appended file.\n\nThis is appended file.\n[&#39;This is my first test.\\n&#39;, &#39;This is next line.\\n&#39;, &#39;This is last line\\n&#39;, &#39;This is appended file.\\n&#39;, &#39;This is appended file.&#39;] \n[&#39;This is my first test.\\n&#39;, &#39;This is next line.\\n&#39;, &#39;This is last line\\n&#39;, &#39;This is appended file.\\n&#39;, &#39;This is appended file.&#39;]</code></pre>\n<hr>\n<h3 id=\"类-class\"><a href=\"#类-class\" class=\"headerlink\" title=\"类 class\"></a>类 class</h3><ul>\n<li><p>类的定义：</p>\n<p>一般类名首字母大写 再跟上冒号，比如这样：</p>\n</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">\"Casio Calculator\"</span>\n    price <span class=\"token operator\">=</span> <span class=\"token string\">\"199\"</span>\n    <span class=\"token comment\">#self是类内函数默认参数 self就是类本身 类似与java中的this</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">minus</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> x <span class=\"token operator\">-</span> y\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">times</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> y\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> x <span class=\"token operator\">/</span> y\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre>\n<p>在类里可以定义属性，也可以定义类中的函数，但注意<strong>类中的函数参数列表的第一个参数必须是self，self类似于java对象中的this指针</strong></p>\n<ul>\n<li>类的实例化及调用：</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#类的实例化</span>\ncal <span class=\"token operator\">=</span> Calculator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#类中的元素</span>\ncal<span class=\"token punctuation\">.</span>name\n<span class=\"token comment\">#类中的方法</span>\ncal<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre>\n<ul>\n<li>类的__init__方法</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#name = \"Casio Calculator\"</span>\n    <span class=\"token comment\">#price = \"199\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>price<span class=\"token punctuation\">,</span>height<span class=\"token punctuation\">,</span>width<span class=\"token punctuation\">,</span>weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#init这个函数类似java中类的构造函数,但是类中的元素不像java需要提前定义好 类在初始化时会自动执行__init__()函数QWQ！</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'!!!initinit!!!'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price\n        self<span class=\"token punctuation\">.</span>h <span class=\"token operator\">=</span> height\n        self<span class=\"token punctuation\">.</span>wi <span class=\"token operator\">=</span> width\n        self<span class=\"token punctuation\">.</span>we <span class=\"token operator\">=</span> weight\n    <span class=\"token comment\">#self是类内函数默认参数 self就是类本身 类似与java中的this</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">minus</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> x <span class=\"token operator\">-</span> y\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">times</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> y\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> x <span class=\"token operator\">/</span> y\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> </code></pre>\n<hr>\n<h3 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h3><pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">a_input <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Please give me a number:'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#return a string so it equals '1' not equals 1</span>\n<span class=\"token keyword\">if</span> a_input<span class=\"token operator\">==</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is a good one\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> a_input<span class=\"token operator\">==</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"see you next time\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FKU!\"</span><span class=\"token punctuation\">)</span>\n\nb_input <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Please give me a b number:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#return a string so it equals '1' not equals 1</span>\n<span class=\"token keyword\">if</span> b_input<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is a good one\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> b_input<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"see you next time\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FKU!\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">Please give me a number:1\nthis is a good one\nPlease give me a b number:3\nFKU!</code></pre>\n<p><strong>请注意，python3中的input，默认输入的是字符串，记得转格式再使用</strong></p>\n<hr>\n<h3 id=\"元组-amp-列表-amp-字典\"><a href=\"#元组-amp-列表-amp-字典\" class=\"headerlink\" title=\"元组&amp;列表&amp;字典\"></a>元组&amp;列表&amp;字典</h3><ul>\n<li>元组(tuple)</li>\n</ul>\n<p>元组tuple最大的特征是内容不可变，因此使用频率低，一般常用List</p>\n<ul>\n<li>列表(List)</li>\n</ul>\n<p>列表是我们最常用的一种存储数据机制。它就像一个抽屉一样，存放着各种信息，每一格都是一个存储单元，每一格都可以单独获取。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">files <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"f1.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"f2.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"f3.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"f4.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"f5.txt\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"files[0] \"</span><span class=\"token punctuation\">,</span> files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"files[3] \"</span><span class=\"token punctuation\">,</span> files<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"files[-1] \"</span><span class=\"token punctuation\">,</span> files<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"files[-3] \"</span><span class=\"token punctuation\">,</span> files<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">files[0]  f1.txt\nfiles[3]  f4.txt\nfiles[-1]  f5.txt\nfiles[-3]  f3.txt</code></pre>\n<p>在列表中，既然你已经把东西按顺序存放到抽屉中了，那你就可以按照顺序拿到你存放的东西。 在Python中，我们将上面的数字号叫做 index 索引。现实中第1个位置的东西，在Python中，是第0位。 <strong>所以Python的第一个索引永远都是 0。</strong> 除了正着来取东西，我们完全也可以反着来取东西，第一个反着取的序号是 <strong>-1</strong>。以此类推，-3 这个索引就是倒着数第三个。</p>\n<p>而且在Python中，还很方便的可以一次性拿到多个抽屉的结果。比如下面我们就来演示一下取从多少位到多少位的东西。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"files[:3] \"</span><span class=\"token punctuation\">,</span> files<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"files[2:4] \"</span><span class=\"token punctuation\">,</span> files<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"files[-3:] \"</span><span class=\"token punctuation\">,</span> files<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">files[:3]  [&#39;f1.txt&#39;, &#39;f2.txt&#39;, &#39;f3.txt&#39;]\nfiles[2:4]  [&#39;f3.txt&#39;, &#39;f4.txt&#39;]\nfiles[-3:]  [&#39;f3.txt&#39;, &#39;f4.txt&#39;, &#39;f5.txt&#39;]</code></pre>\n<p><strong>在列表中，你可以存放不同类型的元素，字符，数字，甚至列表里还能有列表。</strong></p>\n<ul>\n<li>多维List</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\nmulti_dim_a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>multi_dim_a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">1\n3</code></pre>\n<ul>\n<li>字典(dictionary)</li>\n</ul>\n<p>key-&gt;value  一一对应 这里的key对应的就是list中的index哦！这个字典中的 key 都是唯一的，如果你的抽屉出现了重名，我相信你应该也不知道到底是哪个抽屉放着想要找的东西吧。 而 value 是多样的，你可以放一个字符，一个数字，甚至一个列表，甚至是另一个字典。当你想要索引的时候，用 key 就能找到里面的内容。同列表，字典也是可以修改的。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">a_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pear'</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'orange'</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span>\nd2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token string\">'abandon'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token string\">'bear'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'ciliba'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a_list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#删除字典元素 del</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">del</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">'orange'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#添加元素的话直接定义就行</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\nd<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#字典里也可以加字典 function</span>\ndd <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pear'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">'orange'</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dd<span class=\"token punctuation\">[</span><span class=\"token string\">'pear'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p> 运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">abandon\n1\n&#123;&#39;apple&#39;: 1, &#39;pear&#39;: 2, &#39;orange&#39;: 3&#125;\n&#123;&#39;apple&#39;: 1, &#39;pear&#39;: 2&#125;\n&#123;&#39;apple&#39;: 1, &#39;pear&#39;: 2&#125;\n&#123;&#39;apple&#39;: 1, &#39;pear&#39;: 2, &#39;b&#39;: 20&#125;\na</code></pre>\n<hr>\n<h3 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h3><ul>\n<li>载入模块</li>\n</ul>\n<p>可以使用<code>import 模块名</code> 来载入模块，也可以用<code>import time as t</code>使t成为被引入模块time的别名，方便调用。如果只想使用一个模块中的部分功能：<code>from time import time,localtime</code>,其中time，localtime就是time模块中的两个方法名。也可以使用from引入模块中的所有方法，引入后调用方法无需输入方法前的模块名，如<code>from time import *</code></p>\n<ul>\n<li>自定义模块</li>\n</ul>\n<p>自己编写的.py文件和当前在编码的文件同路径时，直接使用import引入即可，或者把自己编写的.py文件复制&#x2F;移动到python系统下载其他模块的默认目录中也可以。</p>\n<hr>\n<h3 id=\"continue-amp-break\"><a href=\"#continue-amp-break\" class=\"headerlink\" title=\"continue&amp;break\"></a>continue&amp;break</h3><ul>\n<li>在没有continue，break时：</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n<span class=\"token keyword\">while</span> a<span class=\"token punctuation\">:</span>\n    b <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'type sth:'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> b<span class=\"token operator\">==</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">:</span>\n        a <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finish running\"</span><span class=\"token punctuation\">)</span></code></pre>\n<ul>\n<li>有break时</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    b <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'type sth:'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> b<span class=\"token operator\">==</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"still in while\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finish running\"</span><span class=\"token punctuation\">)</span></code></pre>\n<ul>\n<li>有continue时 continue跳过循环范围内的的后续代码:else … print… 从而不输出still in while</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    b <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'type sth:'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> b<span class=\"token operator\">==</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">:</span>d\n        <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"still in while\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finish running\"</span><span class=\"token punctuation\">)</span></code></pre>\n<hr>\n<h3 id=\"错误处理try\"><a href=\"#错误处理try\" class=\"headerlink\" title=\"错误处理try\"></a>错误处理try</h3><ul>\n<li>没有try时</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'eee.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#如果文件名输入错误，或者文件不存在时会直接报错，影响程序后续执行</span></code></pre>\n<ul>\n<li>使用try</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">filename <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input file name:'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span><span class=\"token string\">'r+'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 捕获错误</span>\n<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'there is no file QWQ'</span><span class=\"token punctuation\">)</span>\n    response <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'do you want to create a new file?(y/n)'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> response <span class=\"token operator\">==</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#如果try成功了</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'aaa'</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<hr>\n<h3 id=\"使用lambda，zip，map\"><a href=\"#使用lambda，zip，map\" class=\"headerlink\" title=\"使用lambda，zip，map\"></a>使用lambda，zip，map</h3><p>map 分两部分 功能和参数合起来，lambda相当于简化的功能&#x2F;函数，zip是迭代器所需要的东西，直接上代码：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#zip是把a和b竖向合并</span>\n<span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#zip返回值是一个功能</span>\nll <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ll<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">##[(1, 4), (2, 5), (3, 6)] 此为print(ll)的结果</span>\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>j <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">## 0.5 8</span>\n\t\t<span class=\"token comment\">## 1.0 10</span>\n\t\t<span class=\"token comment\">## 1.5 12</span>\n<span class=\"token comment\">#能否zip更多元素？</span>\nlll <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lll<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">##[(1, 1, 4), (2, 2, 5), (3, 3, 6)]  此为print(lll)的结果</span>\n<span class=\"token comment\">#lambda:</span>\n\t<span class=\"token comment\"># 未使用lambda</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fun1<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">## 5</span>\n  <span class=\"token comment\"># 使用lambda 可提高代码可读性</span>\nfun2 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">:</span>x<span class=\"token operator\">+</span>y\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fun2<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">## 5</span>\n<span class=\"token comment\">#map</span>\n<span class=\"token comment\">#把已知的功能加上所要给的参数一起输入运算 是一个object</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>fun1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">## [10]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>fun1<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">## [5, 7, 9]</span></code></pre>\n<hr>\n<h3 id=\"深复制-amp-浅复制\"><a href=\"#深复制-amp-浅复制\" class=\"headerlink\" title=\"深复制&amp;浅复制\"></a>深复制&amp;浅复制</h3><ul>\n<li><p>浅复制与深复制的区别：浅拷贝，拷贝父对象不会拷贝子对象，深拷贝的话完全拷贝父及子对象</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> copy\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">=</span> a\n<span class=\"token comment\">#id是在硬盘中的索引</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nb<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">11</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">12</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#改变a的值，b也跟着变</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#浅复制 只复制值 不复制地址</span>\nc <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">22222</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\nd<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\ne <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#True</span>\nd<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\nd<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">333</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#所以浅复制的list中的list是无法幸免的 还是会被同步</span>\ne <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>deepcopy<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#False</span>\n<span class=\"token comment\">#list表有单独索引，这个不一样。但是表内元素索引一样的，说明都指向那个元素，感觉空间节省了。</span></code></pre></li>\n</ul>\n<hr>\n<h3 id=\"pickle存放数据\"><a href=\"#pickle存放数据\" class=\"headerlink\" title=\"pickle存放数据\"></a>pickle存放数据</h3><p>可以使用pickle保存一些你之后想再次利用的数据，以二进制形式保存噢，后缀名一般为.pickle。</p>\n<ul>\n<li>保存数据</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n<span class=\"token comment\">#可以在你想保存运算结果时做到保存和提取的功能</span>\na_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'da'</span><span class=\"token punctuation\">:</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">'23'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'sad'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pickle_example.pickle'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#dump()函数！！file的后缀名记得是.pickle哦</span>\npickle<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>a_dict<span class=\"token punctuation\">,</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<ul>\n<li>从.pickle文件中读取数据</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pickle_example.pickle'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\">#使用with开头的这个句子不用file.close()诶 好神奇qwq！</span>\n<span class=\"token comment\">#file = open('pickle_example.pickle','rb')</span>\n    a_dict1 <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a_dict1<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#file.close()</span></code></pre>\n<hr>\n<h3 id=\"使用set来找不同\"><a href=\"#使用set来找不同\" class=\"headerlink\" title=\"使用set来找不同\"></a>使用set来找不同</h3><pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">char_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>char_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#&#123;'a', 'c', 'b', 'd'&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>char_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#&lt;class 'set'></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#&lt;class 'dict'></span>\nsentence <span class=\"token operator\">=</span> <span class=\"token string\">'Welcome Back to This Tutorial'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>sentence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#&#123;'T', 'W', 'h', 'i', 'r', 'o', 'm', 'a', ' ', 'u', 'e', 'c', 'B', 't', 'l', 's', 'k'&#125;</span>\n<span class=\"token comment\">#print(set([sentence,char_list])) 会报错 不能传列表+列表的形式</span>\nunique_char <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>char_list<span class=\"token punctuation\">)</span>\nunique_char<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>unique_char<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#&#123;'b', 'a', 'x', 'd', 'c'&#125;</span>\n<span class=\"token comment\">#unique_char.add(['a','x']) 也错了捏</span>\n<span class=\"token comment\">#可以减东西吗？qwq</span>\nunique_char<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>unique_char<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#单独去除东西呢？</span>\nunique_char<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#返回值为None哦 打印出的结果就是None</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>unique_char<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#&#123;'a', 'c', 'd', 'b'&#125;</span>\n<span class=\"token comment\">#如果remove一个不存在的元素，就会报错 所以使用discard()</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>unique_char<span class=\"token punctuation\">.</span>discard<span class=\"token punctuation\">(</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>unique_char<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#比较两个set set1=&#123;'b', 'a', 'x', 'd', 'c'&#125; set2 = &#123;'a','e','i'&#125;</span>\nset1 <span class=\"token operator\">=</span> unique_char\nset2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'i'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">.</span>difference<span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#&#123;'e', 'i'&#125; differece是做差 不具备可交换性</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">.</span>difference<span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#&#123;'x', 'b', 'd', 'c'&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">.</span>intersection<span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#&#123;'a'&#125; intersection为取交集</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">.</span>intersection<span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#&#123;'a'&#125;</span></code></pre>\n<hr>\n<h3 id=\"RegEx-正则表达\"><a href=\"#RegEx-正则表达\" class=\"headerlink\" title=\"RegEx 正则表达\"></a>RegEx 正则表达</h3><p>请参考<a href=\"https://mofanpy.com/tutorials/python-basic/interactive-python/regex/\">这个链接</a></p>\n","more":"</p>\n<h2 id=\"python入门笔记\"><a href=\"#python入门笔记\" class=\"headerlink\" title=\"python入门笔记\"></a>python入门笔记</h2><h3 id=\"python的安装\"><a href=\"#python的安装\" class=\"headerlink\" title=\"python的安装\"></a>python的安装</h3><p><a href=\"https://www.python.org/downloads/\">下载链接</a> 按需下载噢，建议直接下载3.5以上的版本，不推荐2.X版本</p>\n<ul>\n<li>macOS下的安装：直接一直点下一步即可</li>\n<li>windows下的安装：点下一步即可，记得勾选“添加到command line…..”的那个选项噢（否则无法正常使用pip3）</li>\n<li>linux下的安装：<a href=\"https://www.jianshu.com/p/fd75a5cfe4dd\">转载一篇博客</a></li>\n</ul>\n<p>安装完成后进入命令行输入python3 显示如下界面：</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/Screen%20Shot%202022-04-24%20at%2022.50.06.png\" alt=\"python3成功安装后iterm界面\"></p>\n<hr>\n<h3 id=\"print函数\"><a href=\"#print函数\" class=\"headerlink\" title=\"print函数\"></a>print函数</h3><p>直接上代码吧 比较浅显易懂</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">say_hi <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你的第一行代码：\"</span><span class=\"token punctuation\">,</span> say_hi<span class=\"token punctuation\">)</span></code></pre>\n<p>输出结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">你的第一行代码： Hello World</code></pre>\n<hr>\n<h3 id=\"有关数学符号\"><a href=\"#有关数学符号\" class=\"headerlink\" title=\"有关数学符号\"></a>有关数学符号</h3><p>在数学里，“&#x3D;”就是等于的意思 但是在编程环境中“&#x3D;”就是赋值的意思，比如<code>sa y_hi = &quot;Hello World&quot;</code>就是把“Hello World”这个值赋值给名为say_hi的变量。在编程环境中的“&#x3D;&#x3D;”符号，才是用来判断是否相等的，比如<code>123==321</code>就会返回一个False值 QWQ！</p>\n<p>还要记得在python里&#x2F;&#x2F;相当于整除，%相当于取余数噢</p>\n<hr>\n<h3 id=\"自变量variable\"><a href=\"#自变量variable\" class=\"headerlink\" title=\"自变量variable\"></a>自变量variable</h3><p>python不用定义类型，可以直接定义变量</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">apple <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>apple<span class=\"token punctuation\">)</span>\nAPPLE_EGG <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\nappleEgg <span class=\"token operator\">=</span> <span class=\"token number\">12</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>appleEgg<span class=\"token punctuation\">)</span></code></pre>\n<p>如同第二节里的say_hi 一样，apple和say_hi都是变量的名称，定义变量的方式就是如此</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/Screen%20Shot%202022-04-24%20at%2023.07.35.png\" alt=\"运行结果\"></p>\n<hr>\n<h3 id=\"关于循环与判断\"><a href=\"#关于循环与判断\" class=\"headerlink\" title=\"关于循环与判断\"></a>关于循环与判断</h3><ul>\n<li>while循环</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#while循环</span>\nnum1 <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&lt;=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"现在num的值为：\"</span><span class=\"token punctuation\">,</span>num1<span class=\"token punctuation\">,</span><span class=\"token string\">\"num自增1！\"</span><span class=\"token punctuation\">)</span>\n    num1 <span class=\"token operator\">=</span> num1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre>\n<p>运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">现在num的值为： 3 num自增1！\n现在num的值为： 4 num自增1！\n现在num的值为： 5 num自增1！\n现在num的值为： 6 num自增1！\n现在num的值为： 7 num自增1！\n现在num的值为： 8 num自增1！</code></pre>\n<ul>\n<li>for循环</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#迭代遍历</span>\na_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> a_list<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#使用下标遍历</span>\n<span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a_list<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 关于range：range(1,3) --> 1 2 (左闭右开) len(a_list)就是返回a_list这个list的长度</span></code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/Screen%20Shot%202022-04-24%20at%2023.31.03.png\" alt=\"for循环代码运行结果\"></p>\n<ul>\n<li>if，if else，if elif else</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">inin <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入一个数字\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> inin <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个数字小于0\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> inin <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个数字等于3\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#else是相对于if来说的</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个数字大于等于0且不等于3\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/Screen%20Shot%202022-04-24%20at%2023.36.57.png\" alt=\"if判断代码运行结果\"></p>\n<hr>\n<h3 id=\"使用def定义函数\"><a href=\"#使用def定义函数\" class=\"headerlink\" title=\"使用def定义函数\"></a>使用def定义函数</h3><pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\"># a,b为参数 函数可以有返回值也可以没有噢</span>\n    c <span class=\"token operator\">=</span> a<span class=\"token operator\">+</span>b\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#可以通过运行结果看到调用的顺序</span>\n    <span class=\"token keyword\">return</span> c\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">3\n5</code></pre>\n<ul>\n<li>函数默认参数</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span>d<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\">#可以设置函数的参数为默认值，未写明的调用就直接用定义好的调用值</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#请注意未定义好初始值的变量不能在已经定义好初始值的变量后面</span>\nfun1<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nfun1<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>d<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre>\n<p>运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">1 30 20\n1 2 3</code></pre>\n<hr>\n<h3 id=\"全局变量-amp-局部变量\"><a href=\"#全局变量-amp-局部变量\" class=\"headerlink\" title=\"全局变量&amp;局部变量\"></a>全局变量&amp;局部变量</h3><pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">APPLE <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\na <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> a\n    <span class=\"token comment\">#不加global a就会None</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n    <span class=\"token keyword\">global</span> b\n    b <span class=\"token operator\">=</span> <span class=\"token number\">120</span>\n    <span class=\"token string\">'print(a)'</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span><span class=\"token number\">103</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'past a:'</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"later a:\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#通过添加global，使原来是局部变量作用域的变量变为全局变量</span></code></pre>\n<p>运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">past a: None\n123\n120\nlater a: 20</code></pre>\n<hr>\n<h3 id=\"模块安装\"><a href=\"#模块安装\" class=\"headerlink\" title=\"模块安装\"></a>模块安装</h3><ul>\n<li>macOS&#x2F;Linux下的模块安装：使用终端里的iterm即可：</li>\n</ul>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/Screen%20Shot%202022-04-25%20at%2001.02.15.png\" alt=\"Screen Shot 2022-04-25 at 01.02.15\"></p>\n<ul>\n<li>Windows下的安装：去官网下载</li>\n</ul>\n<hr>\n<h3 id=\"读写文件\"><a href=\"#读写文件\" class=\"headerlink\" title=\"读写文件\"></a>读写文件</h3><ul>\n<li>创建一个文件并向其写入一些文字</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">text <span class=\"token operator\">=</span> <span class=\"token string\">\"This is my first test.\\nThis is next line.\\nThis is last line\"</span>\n<span class=\"token comment\">#\\n代表回车，在文件中就相当于输入一个句子换行</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\nmy_file <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my file.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\nmy_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\nmy_file<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#open函数第一个参数是要打开的文件的文件名，第二个参数是打开方式，w代表写，r代表只读，如果以w方式打开不存在的文件则会直接创建新文件，编辑完文件记得使用close方法保存文件</span></code></pre>\n<ul>\n<li>使用append打开方式（a）向文件末尾添加文字</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">append_text <span class=\"token operator\">=</span> <span class=\"token string\">\"\\nThis is appended file.\"</span>\n<span class=\"token comment\">#a的意思是append</span>\nmy_file <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my file.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\nmy_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>append_text<span class=\"token punctuation\">)</span>\nmy_file<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<ul>\n<li>读取文件并print</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my file.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#content = file.read()</span>\n<span class=\"token comment\">#readline是一行一行读</span>\ncontent <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> content<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\nsecond_read_time <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span>second_read_time<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">This is my first test.\n\nThis is next line.\n\nThis is last line\n\nThis is appended file.\n\nThis is appended file.\n[&#39;This is my first test.\\n&#39;, &#39;This is next line.\\n&#39;, &#39;This is last line\\n&#39;, &#39;This is appended file.\\n&#39;, &#39;This is appended file.&#39;] \n[&#39;This is my first test.\\n&#39;, &#39;This is next line.\\n&#39;, &#39;This is last line\\n&#39;, &#39;This is appended file.\\n&#39;, &#39;This is appended file.&#39;]</code></pre>\n<hr>\n<h3 id=\"类-class\"><a href=\"#类-class\" class=\"headerlink\" title=\"类 class\"></a>类 class</h3><ul>\n<li><p>类的定义：</p>\n<p>一般类名首字母大写 再跟上冒号，比如这样：</p>\n</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">\"Casio Calculator\"</span>\n    price <span class=\"token operator\">=</span> <span class=\"token string\">\"199\"</span>\n    <span class=\"token comment\">#self是类内函数默认参数 self就是类本身 类似与java中的this</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">minus</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> x <span class=\"token operator\">-</span> y\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">times</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> y\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> x <span class=\"token operator\">/</span> y\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre>\n<p>在类里可以定义属性，也可以定义类中的函数，但注意<strong>类中的函数参数列表的第一个参数必须是self，self类似于java对象中的this指针</strong></p>\n<ul>\n<li>类的实例化及调用：</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#类的实例化</span>\ncal <span class=\"token operator\">=</span> Calculator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#类中的元素</span>\ncal<span class=\"token punctuation\">.</span>name\n<span class=\"token comment\">#类中的方法</span>\ncal<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre>\n<ul>\n<li>类的__init__方法</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#name = \"Casio Calculator\"</span>\n    <span class=\"token comment\">#price = \"199\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>price<span class=\"token punctuation\">,</span>height<span class=\"token punctuation\">,</span>width<span class=\"token punctuation\">,</span>weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#init这个函数类似java中类的构造函数,但是类中的元素不像java需要提前定义好 类在初始化时会自动执行__init__()函数QWQ！</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'!!!initinit!!!'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price\n        self<span class=\"token punctuation\">.</span>h <span class=\"token operator\">=</span> height\n        self<span class=\"token punctuation\">.</span>wi <span class=\"token operator\">=</span> width\n        self<span class=\"token punctuation\">.</span>we <span class=\"token operator\">=</span> weight\n    <span class=\"token comment\">#self是类内函数默认参数 self就是类本身 类似与java中的this</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">minus</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> x <span class=\"token operator\">-</span> y\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">times</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> y\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> x <span class=\"token operator\">/</span> y\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> </code></pre>\n<hr>\n<h3 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h3><pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">a_input <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Please give me a number:'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#return a string so it equals '1' not equals 1</span>\n<span class=\"token keyword\">if</span> a_input<span class=\"token operator\">==</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is a good one\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> a_input<span class=\"token operator\">==</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"see you next time\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FKU!\"</span><span class=\"token punctuation\">)</span>\n\nb_input <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Please give me a b number:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#return a string so it equals '1' not equals 1</span>\n<span class=\"token keyword\">if</span> b_input<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is a good one\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> b_input<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"see you next time\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FKU!\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">Please give me a number:1\nthis is a good one\nPlease give me a b number:3\nFKU!</code></pre>\n<p><strong>请注意，python3中的input，默认输入的是字符串，记得转格式再使用</strong></p>\n<hr>\n<h3 id=\"元组-amp-列表-amp-字典\"><a href=\"#元组-amp-列表-amp-字典\" class=\"headerlink\" title=\"元组&amp;列表&amp;字典\"></a>元组&amp;列表&amp;字典</h3><ul>\n<li>元组(tuple)</li>\n</ul>\n<p>元组tuple最大的特征是内容不可变，因此使用频率低，一般常用List</p>\n<ul>\n<li>列表(List)</li>\n</ul>\n<p>列表是我们最常用的一种存储数据机制。它就像一个抽屉一样，存放着各种信息，每一格都是一个存储单元，每一格都可以单独获取。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">files <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"f1.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"f2.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"f3.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"f4.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"f5.txt\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"files[0] \"</span><span class=\"token punctuation\">,</span> files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"files[3] \"</span><span class=\"token punctuation\">,</span> files<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"files[-1] \"</span><span class=\"token punctuation\">,</span> files<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"files[-3] \"</span><span class=\"token punctuation\">,</span> files<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">files[0]  f1.txt\nfiles[3]  f4.txt\nfiles[-1]  f5.txt\nfiles[-3]  f3.txt</code></pre>\n<p>在列表中，既然你已经把东西按顺序存放到抽屉中了，那你就可以按照顺序拿到你存放的东西。 在Python中，我们将上面的数字号叫做 index 索引。现实中第1个位置的东西，在Python中，是第0位。 <strong>所以Python的第一个索引永远都是 0。</strong> 除了正着来取东西，我们完全也可以反着来取东西，第一个反着取的序号是 <strong>-1</strong>。以此类推，-3 这个索引就是倒着数第三个。</p>\n<p>而且在Python中，还很方便的可以一次性拿到多个抽屉的结果。比如下面我们就来演示一下取从多少位到多少位的东西。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"files[:3] \"</span><span class=\"token punctuation\">,</span> files<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"files[2:4] \"</span><span class=\"token punctuation\">,</span> files<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"files[-3:] \"</span><span class=\"token punctuation\">,</span> files<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">files[:3]  [&#39;f1.txt&#39;, &#39;f2.txt&#39;, &#39;f3.txt&#39;]\nfiles[2:4]  [&#39;f3.txt&#39;, &#39;f4.txt&#39;]\nfiles[-3:]  [&#39;f3.txt&#39;, &#39;f4.txt&#39;, &#39;f5.txt&#39;]</code></pre>\n<p><strong>在列表中，你可以存放不同类型的元素，字符，数字，甚至列表里还能有列表。</strong></p>\n<ul>\n<li>多维List</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\nmulti_dim_a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>multi_dim_a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">1\n3</code></pre>\n<ul>\n<li>字典(dictionary)</li>\n</ul>\n<p>key-&gt;value  一一对应 这里的key对应的就是list中的index哦！这个字典中的 key 都是唯一的，如果你的抽屉出现了重名，我相信你应该也不知道到底是哪个抽屉放着想要找的东西吧。 而 value 是多样的，你可以放一个字符，一个数字，甚至一个列表，甚至是另一个字典。当你想要索引的时候，用 key 就能找到里面的内容。同列表，字典也是可以修改的。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">a_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pear'</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'orange'</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span>\nd2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token string\">'abandon'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token string\">'bear'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'ciliba'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a_list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#删除字典元素 del</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">del</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">'orange'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#添加元素的话直接定义就行</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\nd<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#字典里也可以加字典 function</span>\ndd <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pear'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">'orange'</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dd<span class=\"token punctuation\">[</span><span class=\"token string\">'pear'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p> 运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">abandon\n1\n&#123;&#39;apple&#39;: 1, &#39;pear&#39;: 2, &#39;orange&#39;: 3&#125;\n&#123;&#39;apple&#39;: 1, &#39;pear&#39;: 2&#125;\n&#123;&#39;apple&#39;: 1, &#39;pear&#39;: 2&#125;\n&#123;&#39;apple&#39;: 1, &#39;pear&#39;: 2, &#39;b&#39;: 20&#125;\na</code></pre>\n<hr>\n<h3 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h3><ul>\n<li>载入模块</li>\n</ul>\n<p>可以使用<code>import 模块名</code> 来载入模块，也可以用<code>import time as t</code>使t成为被引入模块time的别名，方便调用。如果只想使用一个模块中的部分功能：<code>from time import time,localtime</code>,其中time，localtime就是time模块中的两个方法名。也可以使用from引入模块中的所有方法，引入后调用方法无需输入方法前的模块名，如<code>from time import *</code></p>\n<ul>\n<li>自定义模块</li>\n</ul>\n<p>自己编写的.py文件和当前在编码的文件同路径时，直接使用import引入即可，或者把自己编写的.py文件复制&#x2F;移动到python系统下载其他模块的默认目录中也可以。</p>\n<hr>\n<h3 id=\"continue-amp-break\"><a href=\"#continue-amp-break\" class=\"headerlink\" title=\"continue&amp;break\"></a>continue&amp;break</h3><ul>\n<li>在没有continue，break时：</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n<span class=\"token keyword\">while</span> a<span class=\"token punctuation\">:</span>\n    b <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'type sth:'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> b<span class=\"token operator\">==</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">:</span>\n        a <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finish running\"</span><span class=\"token punctuation\">)</span></code></pre>\n<ul>\n<li>有break时</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    b <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'type sth:'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> b<span class=\"token operator\">==</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"still in while\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finish running\"</span><span class=\"token punctuation\">)</span></code></pre>\n<ul>\n<li>有continue时 continue跳过循环范围内的的后续代码:else … print… 从而不输出still in while</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    b <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'type sth:'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> b<span class=\"token operator\">==</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">:</span>d\n        <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"still in while\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finish running\"</span><span class=\"token punctuation\">)</span></code></pre>\n<hr>\n<h3 id=\"错误处理try\"><a href=\"#错误处理try\" class=\"headerlink\" title=\"错误处理try\"></a>错误处理try</h3><ul>\n<li>没有try时</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'eee.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#如果文件名输入错误，或者文件不存在时会直接报错，影响程序后续执行</span></code></pre>\n<ul>\n<li>使用try</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">filename <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input file name:'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span><span class=\"token string\">'r+'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 捕获错误</span>\n<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'there is no file QWQ'</span><span class=\"token punctuation\">)</span>\n    response <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'do you want to create a new file?(y/n)'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> response <span class=\"token operator\">==</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#如果try成功了</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'aaa'</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<hr>\n<h3 id=\"使用lambda，zip，map\"><a href=\"#使用lambda，zip，map\" class=\"headerlink\" title=\"使用lambda，zip，map\"></a>使用lambda，zip，map</h3><p>map 分两部分 功能和参数合起来，lambda相当于简化的功能&#x2F;函数，zip是迭代器所需要的东西，直接上代码：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#zip是把a和b竖向合并</span>\n<span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#zip返回值是一个功能</span>\nll <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ll<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">##[(1, 4), (2, 5), (3, 6)] 此为print(ll)的结果</span>\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>j <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">## 0.5 8</span>\n\t\t<span class=\"token comment\">## 1.0 10</span>\n\t\t<span class=\"token comment\">## 1.5 12</span>\n<span class=\"token comment\">#能否zip更多元素？</span>\nlll <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lll<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">##[(1, 1, 4), (2, 2, 5), (3, 3, 6)]  此为print(lll)的结果</span>\n<span class=\"token comment\">#lambda:</span>\n\t<span class=\"token comment\"># 未使用lambda</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fun1<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">## 5</span>\n  <span class=\"token comment\"># 使用lambda 可提高代码可读性</span>\nfun2 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">:</span>x<span class=\"token operator\">+</span>y\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fun2<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">## 5</span>\n<span class=\"token comment\">#map</span>\n<span class=\"token comment\">#把已知的功能加上所要给的参数一起输入运算 是一个object</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>fun1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">## [10]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>fun1<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">## [5, 7, 9]</span></code></pre>\n<hr>\n<h3 id=\"深复制-amp-浅复制\"><a href=\"#深复制-amp-浅复制\" class=\"headerlink\" title=\"深复制&amp;浅复制\"></a>深复制&amp;浅复制</h3><ul>\n<li><p>浅复制与深复制的区别：浅拷贝，拷贝父对象不会拷贝子对象，深拷贝的话完全拷贝父及子对象</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> copy\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">=</span> a\n<span class=\"token comment\">#id是在硬盘中的索引</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nb<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">11</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">12</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#改变a的值，b也跟着变</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#浅复制 只复制值 不复制地址</span>\nc <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">22222</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\nd<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\ne <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#True</span>\nd<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\nd<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">333</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#所以浅复制的list中的list是无法幸免的 还是会被同步</span>\ne <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>deepcopy<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#False</span>\n<span class=\"token comment\">#list表有单独索引，这个不一样。但是表内元素索引一样的，说明都指向那个元素，感觉空间节省了。</span></code></pre></li>\n</ul>\n<hr>\n<h3 id=\"pickle存放数据\"><a href=\"#pickle存放数据\" class=\"headerlink\" title=\"pickle存放数据\"></a>pickle存放数据</h3><p>可以使用pickle保存一些你之后想再次利用的数据，以二进制形式保存噢，后缀名一般为.pickle。</p>\n<ul>\n<li>保存数据</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n<span class=\"token comment\">#可以在你想保存运算结果时做到保存和提取的功能</span>\na_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'da'</span><span class=\"token punctuation\">:</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">'23'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'sad'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pickle_example.pickle'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#dump()函数！！file的后缀名记得是.pickle哦</span>\npickle<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>a_dict<span class=\"token punctuation\">,</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<ul>\n<li>从.pickle文件中读取数据</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pickle_example.pickle'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\">#使用with开头的这个句子不用file.close()诶 好神奇qwq！</span>\n<span class=\"token comment\">#file = open('pickle_example.pickle','rb')</span>\n    a_dict1 <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a_dict1<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#file.close()</span></code></pre>\n<hr>\n<h3 id=\"使用set来找不同\"><a href=\"#使用set来找不同\" class=\"headerlink\" title=\"使用set来找不同\"></a>使用set来找不同</h3><pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">char_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>char_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#&#123;'a', 'c', 'b', 'd'&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>char_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#&lt;class 'set'></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#&lt;class 'dict'></span>\nsentence <span class=\"token operator\">=</span> <span class=\"token string\">'Welcome Back to This Tutorial'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>sentence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#&#123;'T', 'W', 'h', 'i', 'r', 'o', 'm', 'a', ' ', 'u', 'e', 'c', 'B', 't', 'l', 's', 'k'&#125;</span>\n<span class=\"token comment\">#print(set([sentence,char_list])) 会报错 不能传列表+列表的形式</span>\nunique_char <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>char_list<span class=\"token punctuation\">)</span>\nunique_char<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>unique_char<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#&#123;'b', 'a', 'x', 'd', 'c'&#125;</span>\n<span class=\"token comment\">#unique_char.add(['a','x']) 也错了捏</span>\n<span class=\"token comment\">#可以减东西吗？qwq</span>\nunique_char<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>unique_char<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#单独去除东西呢？</span>\nunique_char<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#返回值为None哦 打印出的结果就是None</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>unique_char<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#&#123;'a', 'c', 'd', 'b'&#125;</span>\n<span class=\"token comment\">#如果remove一个不存在的元素，就会报错 所以使用discard()</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>unique_char<span class=\"token punctuation\">.</span>discard<span class=\"token punctuation\">(</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>unique_char<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#比较两个set set1=&#123;'b', 'a', 'x', 'd', 'c'&#125; set2 = &#123;'a','e','i'&#125;</span>\nset1 <span class=\"token operator\">=</span> unique_char\nset2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'i'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">.</span>difference<span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#&#123;'e', 'i'&#125; differece是做差 不具备可交换性</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">.</span>difference<span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#&#123;'x', 'b', 'd', 'c'&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">.</span>intersection<span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#&#123;'a'&#125; intersection为取交集</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">.</span>intersection<span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#&#123;'a'&#125;</span></code></pre>\n<hr>\n<h3 id=\"RegEx-正则表达\"><a href=\"#RegEx-正则表达\" class=\"headerlink\" title=\"RegEx 正则表达\"></a>RegEx 正则表达</h3><p>请参考<a href=\"https://mofanpy.com/tutorials/python-basic/interactive-python/regex/\">这个链接</a></p>","categories":[],"tags":[{"name":"python","path":"api/tags/python.json"}]}