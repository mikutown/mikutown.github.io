{"title":"leetcode26.删除有序数组中的重复项","slug":"leetcode26-删除有序数组中的重复项","date":"2023-10-10T06:41:57.000Z","updated":"2023-10-10T06:45:35.619Z","comments":true,"path":"api/articles/leetcode26-删除有序数组中的重复项.json","excerpt":"题目给你一个 非严格递增排列 的数组 nums ，请你** 原地** 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。然后返回 nums 中唯一元素的个数。考虑 nums 的唯一元素的数量为 k ，你需要做以下事情确保你的题解可以被通过：更改数组 nums ，使 nums 的前 k 个元素包含唯一元素，并按照它们最初在 nums 中出现的顺序排列。nums 的其余元素与 nums 的大小不重要。返回 k 。","covers":null,"content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个 <strong>非严格递增排列</strong> 的数组 <code>nums</code> ，请你**<a href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\"> 原地</a>** 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。然后返回 <code>nums</code> 中唯一元素的个数。</p>\n<p>考虑 <code>nums</code> 的唯一元素的数量为 <code>k</code> ，你需要做以下事情确保你的题解可以被通过：</p>\n<ul>\n<li>更改数组 <code>nums</code> ，使 <code>nums</code> 的前 <code>k</code> 个元素包含唯一元素，并按照它们最初在 <code>nums</code> 中出现的顺序排列。<code>nums</code> 的其余元素与 <code>nums</code> 的大小不重要。</li>\n<li>返回 <code>k</code> 。</li>\n</ul>\n<span id=\"more\"></span>\n\n<p><strong>判题标准:</strong></p>\n<p>系统会用下面的代码来测试你的题解:</p>\n<pre class=\"language-none\"><code class=\"language-none\">int[] nums &#x3D; [...]; &#x2F;&#x2F; 输入数组\nint[] expectedNums &#x3D; [...]; &#x2F;&#x2F; 长度正确的期望答案\n\nint k &#x3D; removeDuplicates(nums); &#x2F;&#x2F; 调用\n\nassert k &#x3D;&#x3D; expectedNums.length;\nfor (int i &#x3D; 0; i &lt; k; i++) &#123;\n    assert nums[i] &#x3D;&#x3D; expectedNums[i];\n&#125;</code></pre>\n\n<p>如果所有断言都通过，那么您的题解将被 <strong>通过</strong>。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：nums &#x3D; [1,1,2]\n输出：2, nums &#x3D; [1,2,_]\n解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：nums &#x3D; [0,0,1,1,1,2,2,3,3,4]\n输出：5, nums &#x3D; [0,1,2,3,4]\n解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li>\n<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>\n<li><code>nums</code> 已按 <strong>非严格递增</strong> 排列</li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ul>\n<li>双指针</li>\n</ul>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    int removeDuplicates(vector&lt;int&gt;&amp; nums) &#123;\n        int n &#x3D; nums.size();\n        if (n&#x3D;&#x3D;1) return n;\n        &#x2F;&#x2F; 初始化双指针\n        int p &#x3D; 0;\n        int q &#x3D; 1;\n        while (q &lt; n) &#123;\n            &#x2F;&#x2F; 1.比较 p 和 q 位置的元素是否相等。\n            &#x2F;&#x2F; 如果相等，q 后移 1 位 \n            if (nums[p] &#x3D;&#x3D; nums[q]) &#123;\n                q &#x3D; q + 1;\n            &#125;\n            &#x2F;&#x2F; 如果不相等，将 q 位置的元素复制到 p+1 位置上，p 后移一位，q 后移 1 位 \n            else &#123;\n                nums[p+1] &#x3D; nums[q];\n                ++p;\n                ++q;\n            &#125;\n            &#x2F;&#x2F; 重复上述过程，直到 q 等于数组长度。\n        &#125;\n        return p + 1;\n    &#125;\n&#125;;</code></pre>\n","more":"<p><strong>判题标准:</strong></p>\n<p>系统会用下面的代码来测试你的题解:</p>\n<pre class=\"language-none\"><code class=\"language-none\">int[] nums &#x3D; [...]; &#x2F;&#x2F; 输入数组\nint[] expectedNums &#x3D; [...]; &#x2F;&#x2F; 长度正确的期望答案\n\nint k &#x3D; removeDuplicates(nums); &#x2F;&#x2F; 调用\n\nassert k &#x3D;&#x3D; expectedNums.length;\nfor (int i &#x3D; 0; i &lt; k; i++) &#123;\n    assert nums[i] &#x3D;&#x3D; expectedNums[i];\n&#125;</code></pre>\n\n<p>如果所有断言都通过，那么您的题解将被 <strong>通过</strong>。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：nums &#x3D; [1,1,2]\n输出：2, nums &#x3D; [1,2,_]\n解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：nums &#x3D; [0,0,1,1,1,2,2,3,3,4]\n输出：5, nums &#x3D; [0,1,2,3,4]\n解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li>\n<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>\n<li><code>nums</code> 已按 <strong>非严格递增</strong> 排列</li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ul>\n<li>双指针</li>\n</ul>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    int removeDuplicates(vector&lt;int&gt;&amp; nums) &#123;\n        int n &#x3D; nums.size();\n        if (n&#x3D;&#x3D;1) return n;\n        &#x2F;&#x2F; 初始化双指针\n        int p &#x3D; 0;\n        int q &#x3D; 1;\n        while (q &lt; n) &#123;\n            &#x2F;&#x2F; 1.比较 p 和 q 位置的元素是否相等。\n            &#x2F;&#x2F; 如果相等，q 后移 1 位 \n            if (nums[p] &#x3D;&#x3D; nums[q]) &#123;\n                q &#x3D; q + 1;\n            &#125;\n            &#x2F;&#x2F; 如果不相等，将 q 位置的元素复制到 p+1 位置上，p 后移一位，q 后移 1 位 \n            else &#123;\n                nums[p+1] &#x3D; nums[q];\n                ++p;\n                ++q;\n            &#125;\n            &#x2F;&#x2F; 重复上述过程，直到 q 等于数组长度。\n        &#125;\n        return p + 1;\n    &#125;\n&#125;;</code></pre>","categories":[],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"}]}