{"title":"leetcode:76.最小覆盖子串","slug":"leetcode-76-最小覆盖子串","date":"2023-02-08T18:10:05.000Z","updated":"2023-02-08T18:17:59.114Z","comments":true,"path":"api/articles/leetcode-76-最小覆盖子串.json","excerpt":"题目给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 &quot;&quot; 。注意：对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。如果 s 中存在这样的子串，我们保证它是唯一的答案。","covers":null,"content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>对于 <code>t</code> 中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code> 中该字符数量。</li>\n<li>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</li>\n</ul>\n<span id=\"more\"></span>\n\n<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;ADOBECODEBANC&quot;, t &#x3D; &quot;ABC&quot;\n输出：&quot;BANC&quot;\n解释：最小覆盖子串 &quot;BANC&quot; 包含来自字符串 t 的 &#39;A&#39;、&#39;B&#39; 和 &#39;C&#39;。</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;a&quot;, t &#x3D; &quot;a&quot;\n输出：&quot;a&quot;\n解释：整个字符串 s 是最小覆盖子串。</code></pre>\n\n<p><strong>示例 3:</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入: s &#x3D; &quot;a&quot;, t &#x3D; &quot;aa&quot;\n输出: &quot;&quot;\n解释: t 中两个字符 &#39;a&#39; 均应包含在 s 的子串中，\n因此没有符合条件的子字符串，返回空字符串。</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>m == s.length</code></li>\n<li><code>n == t.length</code></li>\n<li><code>1 &lt;= m, n &lt;= 105</code></li>\n<li><code>s</code> 和 <code>t</code> 由英文字母组成</li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ol>\n<li>滑动窗口</li>\n</ol>\n<p>一个常见的解决方案是使用双指针法和滑动窗口技巧，并利用一个哈希表来维护字符串 <code>t</code> 中字符的出现次数。</p>\n<p>我们用两个指针分别指向当前枚举的子串的左端点和右端点，同时用一个计数器维护当前子串是否已经包含了字符串 <code>t</code> 中的所有字符。</p>\n<p>每当右指针移动到一个字符时，如果该字符在字符串 <code>t</code> 中出现过，则将哈希表中该字符的计数器减一，同时如果该字符的计数器减一后不再为 0，则将计数器减一，表示该字符已经被包含在当前子串中了。</p>\n<p>当计数器变成 0 时，说明当前子串已经包含了字符串 <code>t</code> 中的所有字符，此时开始移动左指针，直到该子串不再包含字符串 <code>t</code> 中的所有字符，此时计数器再次变成非 0 的值，表示当前子串不再完整包含字符串 <code>t</code>。</p>\n<p>在整个过程中，每当移动左指针时，同时记录当前子串的长度是否比之前记录的子串长度更短，如果是，则将当前子串的长度和起始位置记录下来，作为结果的可能。</p>\n<p>这样，我们就可以在 $O(m + n)$ 的时间复杂度内解决此问题。</p>\n<p>C++代码实现如下：</p>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    string minWindow(string s, string t) &#123;\n        unordered_map&lt;char, int&gt; t_map;\n        for (const char&amp; c : t) &#123;\n            ++t_map[c];\n        &#125;\n        int left &#x3D; 0, right &#x3D; 0, count &#x3D; t.length(), min_len &#x3D; INT_MAX, min_start &#x3D; 0;\n        while (right &lt; s.length()) &#123;\n            &#x2F;&#x2F; 右指针右移\n            if (t_map[s[right++]]-- &gt; 0) &#123;\n                --count;\n            &#125;\n\n            while (count &#x3D;&#x3D; 0) &#123;\n                if (right - left &lt; min_len) &#123;\n                    min_len &#x3D; right - left;\n                    min_start &#x3D; left;\n                &#125;\n                &#x2F;&#x2F; 左指针左移\n                if (t_map[s[left++]]++ &#x3D;&#x3D; 0) &#123;\n                    ++count;\n                &#125;\n            &#125;\n        &#125;\n        return min_len &#x3D;&#x3D; INT_MAX ? &quot;&quot; : s.substr(min_start, min_len);\n    &#125;\n&#125;;</code></pre>\n\n","more":"<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;ADOBECODEBANC&quot;, t &#x3D; &quot;ABC&quot;\n输出：&quot;BANC&quot;\n解释：最小覆盖子串 &quot;BANC&quot; 包含来自字符串 t 的 &#39;A&#39;、&#39;B&#39; 和 &#39;C&#39;。</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;a&quot;, t &#x3D; &quot;a&quot;\n输出：&quot;a&quot;\n解释：整个字符串 s 是最小覆盖子串。</code></pre>\n\n<p><strong>示例 3:</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入: s &#x3D; &quot;a&quot;, t &#x3D; &quot;aa&quot;\n输出: &quot;&quot;\n解释: t 中两个字符 &#39;a&#39; 均应包含在 s 的子串中，\n因此没有符合条件的子字符串，返回空字符串。</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>m == s.length</code></li>\n<li><code>n == t.length</code></li>\n<li><code>1 &lt;= m, n &lt;= 105</code></li>\n<li><code>s</code> 和 <code>t</code> 由英文字母组成</li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ol>\n<li>滑动窗口</li>\n</ol>\n<p>一个常见的解决方案是使用双指针法和滑动窗口技巧，并利用一个哈希表来维护字符串 <code>t</code> 中字符的出现次数。</p>\n<p>我们用两个指针分别指向当前枚举的子串的左端点和右端点，同时用一个计数器维护当前子串是否已经包含了字符串 <code>t</code> 中的所有字符。</p>\n<p>每当右指针移动到一个字符时，如果该字符在字符串 <code>t</code> 中出现过，则将哈希表中该字符的计数器减一，同时如果该字符的计数器减一后不再为 0，则将计数器减一，表示该字符已经被包含在当前子串中了。</p>\n<p>当计数器变成 0 时，说明当前子串已经包含了字符串 <code>t</code> 中的所有字符，此时开始移动左指针，直到该子串不再包含字符串 <code>t</code> 中的所有字符，此时计数器再次变成非 0 的值，表示当前子串不再完整包含字符串 <code>t</code>。</p>\n<p>在整个过程中，每当移动左指针时，同时记录当前子串的长度是否比之前记录的子串长度更短，如果是，则将当前子串的长度和起始位置记录下来，作为结果的可能。</p>\n<p>这样，我们就可以在 $O(m + n)$ 的时间复杂度内解决此问题。</p>\n<p>C++代码实现如下：</p>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    string minWindow(string s, string t) &#123;\n        unordered_map&lt;char, int&gt; t_map;\n        for (const char&amp; c : t) &#123;\n            ++t_map[c];\n        &#125;\n        int left &#x3D; 0, right &#x3D; 0, count &#x3D; t.length(), min_len &#x3D; INT_MAX, min_start &#x3D; 0;\n        while (right &lt; s.length()) &#123;\n            &#x2F;&#x2F; 右指针右移\n            if (t_map[s[right++]]-- &gt; 0) &#123;\n                --count;\n            &#125;\n\n            while (count &#x3D;&#x3D; 0) &#123;\n                if (right - left &lt; min_len) &#123;\n                    min_len &#x3D; right - left;\n                    min_start &#x3D; left;\n                &#125;\n                &#x2F;&#x2F; 左指针左移\n                if (t_map[s[left++]]++ &#x3D;&#x3D; 0) &#123;\n                    ++count;\n                &#125;\n            &#125;\n        &#125;\n        return min_len &#x3D;&#x3D; INT_MAX ? &quot;&quot; : s.substr(min_start, min_len);\n    &#125;\n&#125;;</code></pre>","categories":[],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"}]}