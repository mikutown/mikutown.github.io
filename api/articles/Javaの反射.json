{"title":"Javaの反射","slug":"Javaの反射","date":"2020-04-10T17:38:13.000Z","updated":"2021-01-02T19:23:36.000Z","comments":true,"path":"api/articles/Javaの反射.json","excerpt":"Javaの反射反射第一章 反射的理解1.1 正射我们在编写代码时，当需要使用到某一个类的时候，必定先会去了解这是一个什么类，是用来做什么的，有怎么样的功能。之后我们才对这个类进行实例化，之后再使用这个类的实例化对象进行操作。","covers":null,"content":"<h1 id=\"Javaの反射\"><a href=\"#Javaの反射\" class=\"headerlink\" title=\"Javaの反射\"></a>Javaの反射</h1><h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><h3 id=\"第一章-反射的理解\"><a href=\"#第一章-反射的理解\" class=\"headerlink\" title=\"第一章 反射的理解\"></a>第一章 反射的理解</h3><h4 id=\"1-1-正射\"><a href=\"#1-1-正射\" class=\"headerlink\" title=\"1.1 正射\"></a>1.1 正射</h4><p>我们在编写代码时，当需要使用到某一个类的时候，必定先会去了解这是一个什么类，是用来做什么的，有怎么样的功能。之后我们才对这个类进行实例化，之后再使用这个类的实例化对象进行操作。</p>\n<a id=\"more\"></a>\n\n<p>Person person = new Person();<br>person.sleep(“8:00”);</p>\n<h4 id=\"1-2-反射\"><a href=\"#1-2-反射\" class=\"headerlink\" title=\"1.2 反射\"></a>1.2 反射</h4><p>反射则是在代码一开始编写时不知道要初始化的类是什么。因此，自然也无法使用new关键字来创建对象了。而当我们之后得到我们要初始化的类的名称及路径时，我们就可以使用JDK提供的反射API进行反射调用。<br>Class clazz = Class.forName(“com.Person”);<br>Method method = clazz.getMethod(“sleep”, String.class);<br>Constructor constructor = clazz.getConstructor();<br>Object object = constructor.newInstance();<br>method.invoke(object, “8:00”);<br>以上两段代码，其结果都是一样的，但是其实现的过程却有很大的差别：</p>\n<ul>\n<li>第一段代码在未运行前就已经确定了要运行的类（Person）；</li>\n<li>第二段代码则是在整个程序运行时从某些地方（例：配置文件）获取到相应的字符串值才能知道要运行的类（”com.Person”）。<br>第二章 反射常用类和常用函数<br>2.1 获取Class对象<br>在反射中，要获取一个类或调用一个类的方法，首先必须要获取到该类的对象，在Java API中，获取Class类对象三种方法：<br>①：Class.forName(“类的路径名”)；<br>Class clazz = Class.forName(“com.test.domain.Person”);<br>②：利用已有类对象的getClass()方法；<br>Person person = new Person();<br>Class clazz = person.getClass();<br>③：对于在编译前就已经知道的类，可以使用.class属性；<br>Class clazz = Person.class;<br>同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的 Class对象都是同一个。<br>2.2  Constructor类<br>Constructor是构造方法类，类中的每一个构造方法都是Constructor的对象，通过Constructor对象可以实例化对 象。</li>\n<li>Constructor getConstructor(Class… parameterTypes) 根据参数类型获取构造方法对象，只能获得public修饰的构造方法。</li>\n<li>Constructor getDeclaredConstructor(Class… parameterTypes) 根据参数类型获取构造方法对象，包括private修饰的构造方法。</li>\n<li>Constructor[] getConstructors() 获取所有的public修饰的构造方法</li>\n<li>Constructor[] getDeclaredConstructors() 获取所有构造方法，包括privat修饰的<br>2.3 通过反射创建类对象<br>①：通过class对象的newInstance()方法<br>Class clazz = Class.forName(“com.Person”);<br>Person person = (Person)clazz.newInstance();<br>②：通过Constructor对象的newInstance()方法；<br>Class clazz = Class.forName(“com.Person”);<br>Constructor con = clazz.getConstructor();<br>Person person = (Person)con.newInstance();<br>2.4  Method类<br>Method是方法类，类中的每一个方法都是Method的对象，通过Method对象可以调用方法。<br>Class类中与Method相关方法：</li>\n<li>Method getMethod(“方法名”, 方法的参数类型… 类型) 根据方法名和参数类型获得一个方法对象，只能是获取public修饰的</li>\n<li>Method getDeclaredMethod(“方法名”, 方法的参数类型… 类型) 根据方法名和参数类型获得一个方法对象，包括private修饰的</li>\n<li>Method[] getMethods() 获取所有的public修饰的成员方法，包括父类中。</li>\n<li>Method[] getDeclaredMethods() 获取当前类中所有的方法，包含私有的，不包括父类中。<br>Method类中常用方法：</li>\n<li>Object invoke(Object obj, Object… args) 根据参数args调用对象obj的该成员方法 如果obj=null，则表示该方法是静态方法</li>\n<li>void setAccessible(boolean flag) 暴力反射，设置为可以直接调用私有修饰的成员方法<br>2.5 通过反射操作成员变量<br>①：获取所有成员getFields()&amp;getDeclaredFields();<br>使用getFields()方法可以获取Class类的成员变量，但是无法获取私有属性。<br>使用getDeclaredFields()方法可以获取Class类的所有成员变量。<br>Class clazz = Class.forName(“com.Person”);<br>Field[] fields = clazz.getFields();<br>for (Field field : fields) {<br>System.out.print(field.getName());<br>}<br>②：获取单个成员getField(String name)&amp;getDeclared(String name)<br>③：修改成员变量的值set(Object obj, Object value)<br>Class clazz = Class.forName(“com.test.domain.Person”);<br>Person person = (Person)clazz.newInstance();<br>Field field = clazz.getField(“name”);<br>field.set(person, “张三”);<br>④：当属性为private时，这是我们无法直接使用set()方法修改它的值，此时应该使用setAccessible()方法取得访问权限：<br>Class clazz = Class.forName(“com.Person”);<br>Person person = (Person)clazz.newInstance();<br>Field field = clazz.getDeclaredField(“name”);<br>field.setAccessible(true);<br>field.set(person, “张三”);<br>第三章 反射案例<br>需求：写一段程序，在不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法。<br>步骤：</li>\n<li>将需要创建的对象的全类名和需要执行的方法定义在配置文件中</li>\n<li>在程序中加载读取配置文件</li>\n<li>使用反射技术来加载类文件进内存</li>\n<li>创建对象</li>\n<li>执行方法<br>1.pro.properties<br>className=com.Student<br>methodName=sleep<br>2.Student.java<br>public class Student {<br>  public void sleep(){     <pre><code>   System.out.println(&quot;sleep...&quot;);</code></pre>\n }<br>}<br>3.Test.java<br>public class Test {<br>  public static void main(String[] args) {<pre><code>   //1.加载配置文件       \n  //1.1创建Properties对象\n  Properties pro = new Properties();\n  //1.2加载配置文件，转换为一个集合\n  //1.2.1获取class目录下的配置文件\n  ClassLoader classLoader = Test.class.getClassLoader();\n  InputStream is = classLoader.getResourceAsStream(&quot;pro.properties&quot;);\n  pro.load(is);\n  //2.获取配置文件中定义的数据\n  String className = pro.getProperty(&quot;className&quot;);\n  String methodName = pro.getProperty(&quot;methodName&quot;);\n  //3.加载该类进内存\n  Class cls = Class.forName(className);\n  //4.创建对象\n  Object obj = cls.newInstance();\n //5.获取方法对象\n Method method = cls.getMethod(methodName);\n //6.执行方法      \n   method.invoke(obj);\n  &#125;</code></pre>\n  }<br>}</li>\n</ul>\n<h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><h3 id=\"第一章-注解概述\"><a href=\"#第一章-注解概述\" class=\"headerlink\" title=\"第一章  注解概述\"></a>第一章  注解概述</h3><h4 id=\"1-1-定义\"><a href=\"#1-1-定义\" class=\"headerlink\" title=\"1.1 定义\"></a>1.1 定义</h4><p>注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</p>\n<h4 id=\"1-2-作用分类\"><a href=\"#1-2-作用分类\" class=\"headerlink\" title=\"1.2 作用分类\"></a>1.2 作用分类</h4><ul>\n<li>编写文档：通过代码里标识的注解生成文档【例如，生成文档doc文档】</li>\n<li>代码分析：通过代码里标识的注解对代码进行分析【例如，注解的反射】</li>\n<li>编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【例如，Override】</li>\n</ul>\n<h4 id=\"1-3-常见注解\"><a href=\"#1-3-常见注解\" class=\"headerlink\" title=\"1.3 常见注解\"></a>1.3 常见注解</h4><ul>\n<li><p>@author：用来标识作者名。</p>\n</li>\n<li><p>@version：用于标识对象的版本号，适用范围：文件、类、方法。</p>\n</li>\n<li><p>@Override ：用来修饰方法声明，告诉编译器该方法是重写父类中的方法，如果父类不存在该方法，则编译失败。</p>\n</li>\n</ul>\n<h3 id=\"第二章-自定义注解\"><a href=\"#第二章-自定义注解\" class=\"headerlink\" title=\"第二章 自定义注解\"></a>第二章 自定义注解</h3><p>  定义格式：<br>  元注解<br>  public @interface 注解名称{<br>    属性列表;<br>  }<br>  注解本质上就是一个接口，该接口默认继承Annotation接口。</p>\n<h4 id=\"2-1-注解的属性\"><a href=\"#2-1-注解的属性\" class=\"headerlink\" title=\"2.1 注解的属性\"></a>2.1 注解的属性</h4><ul>\n<li><ol>\n<li>属性的作用<br>可以让用户在使用注解时传递参数，让注解的功能更加强大。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>属性的格式<br>格式1：数据类型 属性名();<br>格式2：数据类型 属性名() default 默认值;</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>属性定义示例<br>public @interface Student {<br>String name(); // 姓名<br>int age() default 18; // 年龄<br>String gender() default “男”; // 性别<br>}<br>// 该注解就有了三个属性：name，age，gender</li>\n</ol>\n</li>\n</ul>\n<ol start=\"4\">\n<li>属性适用的数据类型</li>\n</ol>\n<ul>\n<li><p>八种基本数据类型（int,float,boolean,byte,double,char,long,short)</p>\n</li>\n<li><p>String类型，Class类型，枚举类型，注解类型</p>\n</li>\n<li><p>以上所有类型的一维数组</p>\n</li>\n</ul>\n<h4 id=\"2-2-使用自定义注解\"><a href=\"#2-2-使用自定义注解\" class=\"headerlink\" title=\"2.2 使用自定义注解\"></a>2.2 使用自定义注解</h4><p>  定义注解：Book</p>\n<ul>\n<li><p>包含属性：String value() 书名</p>\n</li>\n<li><p>包含属性：double price() 价格，默认值为 100</p>\n</li>\n<li><p>包含属性：String[] authors() 多位作者<br>代码实现：<br>public @interface Book {<br>// 书名<br>String value();<br>// 价格<br>double price() default 100;<br>// 多位作者<br>String[] authors();<br>}<br>使用注解：<br>public class BookShelf {<br>@Book(value = “西游记”,price = 998,authors = {“吴承恩”,”白求恩”})<br>public void showBook(){<br>}<br>}<br>如果属性有默认值，则使用注解的时候，这个属性可以不用赋值。<br>如果属性没有默认值，那么在使用注解时一定要给属性赋值。</p>\n</li>\n</ul>\n<h3 id=\"第三章-注解之元注解\"><a href=\"#第三章-注解之元注解\" class=\"headerlink\" title=\"第三章 注解之元注解\"></a>第三章 注解之元注解</h3><p>  默认情况下，注解可以用在任何地方，比如类，成员方法，构造方法，成员变量等地方。如果要限制注解的使用位置怎么办？那就要学习一个新的知识点：元注解。</p>\n<ul>\n<li><p>@Target</p>\n</li>\n<li><p>@Retention</p>\n</li>\n</ul>\n<h4 id=\"3-1-元注解之-Target\"><a href=\"#3-1-元注解之-Target\" class=\"headerlink\" title=\"3.1 元注解之@Target\"></a>3.1 元注解之@Target</h4><p>  作用：指明此注解用在哪个位置，如果不写默认是任何地方都可以使用。<br>  可选的参数值在枚举类ElemenetType中包括：</p>\n<ul>\n<li><p>TYPE： 用在类,接口上</p>\n</li>\n<li><p>FIELD：用在成员变量上</p>\n</li>\n<li><p>METHOD： 用在方法上</p>\n</li>\n<li><p>PARAMETER：用在参数上</p>\n</li>\n<li><p>CONSTRUCTOR：用在构造方法上</p>\n</li>\n<li><p>LOCAL_VARIABLE：用在局部变量上</p>\n</li>\n</ul>\n<h4 id=\"3-2-元注解之-Retention\"><a href=\"#3-2-元注解之-Retention\" class=\"headerlink\" title=\"3.2 元注解之@Retention\"></a>3.2 元注解之@Retention</h4><p>  作用：定义该注解的生命周期(有效范围)。<br>  可选的参数值在枚举类型RetentionPolicy中包括:</p>\n<ul>\n<li><p>SOURCE：注解只存在于Java源代码中，编译生成的字节码文件中就不存在了。</p>\n</li>\n<li><p>CLASS：注解存在于Java源代码、编译以后的字节码文件中，运行的时候内存中没有，默认值。</p>\n</li>\n<li><p>RUNTIME：注解存在于Java源代码中、编译以后的字节码文件中、运行时内存中，程序可以通过反射获取该注解。</p>\n</li>\n</ul>\n<h4 id=\"3-3-元注解使用示例\"><a href=\"#3-3-元注解使用示例\" class=\"headerlink\" title=\"3.3 元注解使用示例\"></a>3.3 元注解使用示例</h4><p>@Target({ElementType.METHOD,ElementType.TYPE})<br>@interface Stu{<br>String name();<br>}<br>// 类<br>@Stu(name=”jack”)<br>public class AnnotationDemo02 {<br>// 成员变量<br>@Stu(name = “lily”) // 编译失败<br>private String gender;<br>// 成员方法<br>@Stu(name=”rose”)<br>public void test(){<br>}<br>// 构造方法<br>@Stu(name=”lucy”) // 编译失败<br>public AnnotationDemo02(){}<br>}</p>\n<h3 id=\"第四章-注解解析\"><a href=\"#第四章-注解解析\" class=\"headerlink\" title=\"第四章 注解解析\"></a>第四章 注解解析</h3><p>通过java技术获取注解数据的过程叫做注解解析。</p>\n<h4 id=\"4-1-与注解解析相关的接口\"><a href=\"#4-1-与注解解析相关的接口\" class=\"headerlink\" title=\"4.1 与注解解析相关的接口\"></a>4.1 与注解解析相关的接口</h4><ul>\n<li>Anontation：所有注解类型的公共接口，类似所有类的父类是Object。</li>\n<li>AnnotatedElement：定义了与注解解析相关的方法，常用方法以下四个<ul>\n<li>boolean isAnnotationPresent(Class annotationClass); 判断当前对象是否有指定的注解，有则返回true，否则 返回false。</li>\n<li>T getAnnotation(Class<T> annotationClass); 获得当前对象上指定的注解对象。</li>\n<li>Annotation[] getAnnotations(); 获得当前对象及其从父类上继承的所有的注解对象。</li>\n<li>Annotation[] getDeclaredAnnotations();获得当前对象上所有的注解对象，不包括父类的。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-2-获取注解数据的原理\"><a href=\"#4-2-获取注解数据的原理\" class=\"headerlink\" title=\"4.2 获取注解数据的原理\"></a>4.2 获取注解数据的原理</h4><p>注解作用在哪个成员上，就可以通过反射获取该成员的对象，通过该成员对象获取该成员的注解。<br>如注解作用在方法上，就通过方法(Method)对象得到它的注解：<br>// 得到方法对象<br> Method method = clazz.getDeclaredMethod(“方法名”);<br>// 根据注解名得到方法上的注解对象<br>Book book = method.getAnnotation(Book.class);<br>如注解作用在类上，就通过Class对象得到它的注解：<br>// 获得Class对象<br>Class c = 类名.class;<br>// 根据注解的Class获得使用在类上的注解对象<br>Book book = c.getAnnotation(Book.class);</p>\n<h3 id=\"第五章-使用反射获取注解的数据\"><a href=\"#第五章-使用反射获取注解的数据\" class=\"headerlink\" title=\"第五章 使用反射获取注解的数据\"></a>第五章 使用反射获取注解的数据</h3><p>需求说明</p>\n<ol>\n<li>定义注解Book，要求如下：</li>\n</ol>\n<ul>\n<li>包含属性：String value() 书名</li>\n<li>包含属性：double price() 价格，默认值为 100</li>\n<li>包含属性：String[] authors() 多位作者</li>\n<li>限制注解使用的位置：类和成员方法上</li>\n<li>指定注解的有效范围：RUNTIME</li>\n</ul>\n<ol start=\"2\">\n<li><p>定义BookStore类，在类和成员方法上使用Book注解</p>\n</li>\n<li><p>定义TestAnnotation测试类获取Book注解上的数据<br>代码实现<br>注解Book<br>@Target({ElementType.METHOD,ElementType.TYPE})<br>@Retention(RetentionPolicy.RUNTIME)<br>public @interface Book {</p>\n<pre><code> // 书名\n String value();\n // 价格\n double price() default 100;\n // 作者\n String[] authors();</code></pre>\n<p> }<br>BookStore类<br>@Book(value = “红楼梦”,authors = “曹雪芹”,price = 998)<br> public class BookStore {</p>\n<p> @Book(value = “西游记”,authors = “吴承恩”)<br> public void buyBook(){<br> }<br> }<br>TestAnnotation类<br>public class TestAnnotation {<br>public static void main(String[] args) throws Exception{<br>System.out.println(“———获取类上注解的数据———-“);<br>test01();<br>System.out.println(“———获取成员方法上注解的数据———-“);<br>test02();<br>}<br>/**</p>\n</li>\n</ol>\n<ul>\n<li><p>获取BookStore类上使用的Book注解数据<br>*/<br>public static void test01(){<br>// 获得BookStore类对应的Class对象<br>Class c = BookStore.class;<br>// 判断BookStore类是否使用了Book注解<br>if(c.isAnnotationPresent(Book.class)) {<br>// 根据注解Class对象获取注解对象<br>Book book = (Book) c.getAnnotation(Book.class);<br>// 输出book注解属性值<br>System.out.println(“书名：” + book.value());<br>System.out.println(“价格：” + book.price());<br>System.out.println(“作者：” + Arrays.toString(book.authors()));<br>}<br>}<br>/**</p>\n</li>\n<li><p>获取BookStore类成员方法buyBook使用的Book注解数据<br>*/<br>public static void test02() throws Exception{<br>// 获得BookStore类对应的Class对象<br>Class c = BookStore.class;<br>// 获得成员方法buyBook对应的Method对象<br>Method m = c.getMethod(“buyBook”);<br>// 判断成员方法buyBook上是否使用了Book注解<br>if(m.isAnnotationPresent(Book.class)) {<br>// 根据注解Class对象获取注解对象<br>Book book = (Book) m.getAnnotation(Book.class);<br>// 输出book注解属性值<br>System.out.println(“书名：” + book.value());<br>System.out.println(“价格：” + book.price());<br>System.out.println(“作者：” + Arrays.toString(book.authors()));<br>}<br>}<br>}<br>作业<br>1.定义Person类，私有成员变量有name,age,公开成员变量有sex，成员方法包括gette和setter，构造方法有无参和全参，用反射去创建一个Person对象，用2种方式。<br>2.在第一题中加入方法show，打印一串字符串，利用反射执行该方法。<br>4.在第一题基础之上，利用反射设置name为“张三”,sex为“男”。<br>Person.java<br>public class Person {<br>  private String name;<br>  private int age;<br>  private String sex;</p>\n<p>  @Override<br>  public String toString() {</p>\n<pre><code>  return &quot;Person&#123;&quot; +\n          &quot;name=&#39;&quot; + name + &#39;\\&#39;&#39; +\n          &quot;, age=&quot; + age +\n          &quot;, sex=&#39;&quot; + sex + &#39;\\&#39;&#39; +\n          &#39;&#125;&#39;;</code></pre>\n<p>  }</p>\n<p>  public void gogogo(){</p>\n<pre><code>  System.out.println(&quot;通过读取配置文件得到的gogogo方法在运行！&quot;);</code></pre>\n<p>  }</p>\n<p>  public String getName() {</p>\n<pre><code>  return name;</code></pre>\n<p>  }</p>\n<p>  public void setName(String name) {</p>\n<pre><code>  this.name = name;</code></pre>\n<p>  }</p>\n<p>  public int getAge() {</p>\n<pre><code>  return age;</code></pre>\n<p>  }</p>\n<p>  public void setAge(int age) {</p>\n<pre><code>  this.age = age;</code></pre>\n<p>  }</p>\n<p>  public String getSex() {</p>\n<pre><code>  return sex;</code></pre>\n<p>  }</p>\n<p>  public void setSex(String sex) {</p>\n<pre><code>  this.sex = sex;</code></pre>\n<p>  }</p>\n<p>  public Person() {<br>  }</p>\n<p>  public Person(String name, int age, String sex) {</p>\n<pre><code>  this.name = name;\n  this.age = age;\n  this.sex = sex;</code></pre>\n<p>  }<br>  public void show(){</p>\n<pre><code>  System.out.println(&quot;这是一个无参的show方法&quot;);</code></pre>\n<p>  }<br>}<br>public class Demo1 {<br>  public static void main(String[] args) throws Exception{</p>\n<pre><code>  //1.定义Person类，私有成员变量有name,age,公开成员变量有sex，成员方法包括gette和setter，\n  // 构造方法有无参和全参，用反射去创建一个Person对象，用2种方式。\n  //第一种\n  Class clazz = Class.forName(&quot;com.hmwk124.Person&quot;);\n  Person p = (Person)clazz.newInstance();\n  //第二种\n  Class clazz1 = Class.forName(&quot;com.hmwk124.Person&quot;);\n  Constructor constructor = clazz.getConstructor();\n  Person p1 = (Person)constructor.newInstance();\n  //2.在第一题中加入方法show，打印一串字符串，利用反射执行该方法。\n  Method show = clazz1.getMethod(&quot;show&quot;);\n  show.invoke(p1);\n  //4.在第一题基础之上，利用反射设置name为“张三”,sex为“男”。\n  Field name = clazz1.getDeclaredField(&quot;name&quot;);\n  Field sex = clazz1.getDeclaredField(&quot;sex&quot;);\n  name.setAccessible(true);\n  name.set(p1,&quot;张三&quot;);\n  sex.setAccessible(true);\n  sex.set(p1,&quot;男&quot;);\n  Method toString = clazz1.getMethod(&quot;toString&quot;);\n  System.out.println(toString.invoke(p1));</code></pre>\n<p>  }<br>}<br>3.编写一个类A，增加一个实例方法showString,用于打印一条字符串，再编写一个测试类TestA ，在测试类中，用键盘输入一个字符串，该字符串就是类A的全名，使用反射机制创建该类的对象，并调用该对象中的方法showString。<br>//3.编写一个类A，增加一个实例方法showString,用<br>// 于打印一条字符串，再编写一个测试类TestA ，在测试类中，<br>// 用键盘输入一个字符串，该字符串就是类A的全名，使用反射机制创<br>// 建该类的对象，并调用该对象中的方法showString。<br>public class A {<br>  public void showString(){</p>\n<pre><code>  System.out.println(&quot;这是A类的showString方法！&quot;);</code></pre>\n<p>  }<br>}<br>public class TestA {<br>  //3.编写一个类A，增加一个实例方法showString,用<br>  // 于打印一条字符串，再编写一个测试类TestA ，在测试类中，<br>  // 用键盘输入一个字符串，该字符串就是类A的全名，使用反射机制创<br>  // 建该类的对象，并调用该对象中的方法showString。<br>  public static void main(String[] args) {</p>\n<pre><code>  String s;\n  Scanner sc = new Scanner(System.in);\n  System.out.print(&quot;请输入完整的类名：&quot;);\n  s = sc.nextLine();\n  Class clazz = null;\n  try &#123;\n      clazz = Class.forName(s);\n      Constructor constructor = clazz.getConstructor();\n      A a = (A) constructor.newInstance();\n      a.showString();\n  &#125; catch (ClassNotFoundException e) &#123;\n      System.out.println(&quot;找不到该类！&quot;);\n  &#125; catch (NoSuchMethodException e) &#123;\n      e.printStackTrace();\n  &#125; catch (InstantiationException e) &#123;\n      e.printStackTrace();\n  &#125; catch (IllegalAccessException e) &#123;\n      e.printStackTrace();\n  &#125; catch (InvocationTargetException e) &#123;\n      e.printStackTrace();\n  &#125;</code></pre>\n<p>  }<br>}<br>5.在第一题基础上，写一个Properties格式的配置文件，配置类的完整名称和所要执行的方法，写一个程序，读取这个Properties配置文件，获得类的完整名称并加载这个类，并执行读取的方法。<br>public class Demo5 {<br>  //在第一题基础上，写一个Properties格式的配置文件，配置类的完整名<br>  // 称和所要执行的方法，写一个程序，读取这个Properties配置文件，获<br>  // 得类的完整名称并加载这个类，并执行读取的方法。<br>  public static void main(String[] args) throws Exception {</p>\n<pre><code>  Properties pro = new Properties();\n  ClassLoader cll = Demo5.class.getClassLoader();\n  InputStream is = cll.getResourceAsStream(&quot;com/hmwk124/pro.properties&quot;);\n  pro.load(is);\n  String className = pro.getProperty(&quot;className&quot;);\n  String methodName = pro.getProperty(&quot;methodName&quot;);\n  Class clazz = Class.forName(className);\n  Object o = clazz.newInstance();\n  Method method = clazz.getMethod(methodName);\n  method.invoke(o);</code></pre>\n<p>  }<br>}<br>配置文件：<br>className=com.hmwk124.Person<br>methodName=gogogo<br>1.自定义注解Hello，包含属性value，name，age（默认值100），设置只能作用于方法和成员变量，生命周期为RUNTIME,创建普通类Person，类中定义成员变量name，方法show（），分别在之上加入注解，利用反射解析注解。<br>Hello.java<br>@Target({ElementType.METHOD,ElementType.FIELD})<br>@Retention(RetentionPolicy.RUNTIME)<br>public @interface Hello {<br>  String value();<br>  String name();<br>  int age() default 100;<br>}<br>Person.java<br>public class Person {<br>  @Hello(value = “10”,name=”李四”,age = 20)<br>  private String name;<br>  @Hello(value = “100”,name = “张三”,age = 18)<br>  public void show(){<br>  }<br>}<br>Demo6.java<br>public class Demo6 {<br>  public static void main(String[] args) throws Exception {</p>\n<pre><code>  System.out.println(&quot;获取成员变量上注解的数据&quot;);\n  test01();\n  System.out.println(&quot;获取方法上注解的数据&quot;);\n  test02();</code></pre>\n<p>  }<br>  //获取Person类的成员变量上使用的Hello注解数据<br>  public static void test01() throws NoSuchFieldException {</p>\n<pre><code>  Class clazz = Person.class;\n  Field field = (Field) clazz.getDeclaredField(&quot;name&quot;);\n  System.out.println(field.isAnnotationPresent(Hello.class));\n  if(field.isAnnotationPresent(Hello.class))&#123;\n      Hello hello = (Hello)field.getAnnotation(Hello.class);\n      //输出Hello注解属性值\n      System.out.println(&quot;value:&quot; + hello.value());\n      System.out.println(&quot;name:&quot; + hello.name());\n      System.out.println(&quot;age:&quot; + hello.age());\n  &#125;</code></pre>\n<p>  }<br>  //获取方法show上对象的Method对象<br>  public static void test02() throws Exception{</p>\n<pre><code>  Class clazz1 = Person.class;\n  Method show = clazz1.getMethod(&quot;show&quot;);\n  //判断是否使用注解\n  if(show.isAnnotationPresent(Hello.class))&#123;\n      Hello hello = (Hello)show.getAnnotation(Hello.class);\n      //输出注解属性值\n      System.out.println(&quot;value:&quot; + hello.value());\n      System.out.println(&quot;name:&quot; + hello.name());\n      System.out.println(&quot;age:&quot; + hello.age());\n  &#125;</code></pre>\n<p>  }<br>}</p>\n</li>\n</ul>\n","more":"<p>Person person = new Person();<br>person.sleep(“8:00”);</p>\n<h4 id=\"1-2-反射\"><a href=\"#1-2-反射\" class=\"headerlink\" title=\"1.2 反射\"></a>1.2 反射</h4><p>反射则是在代码一开始编写时不知道要初始化的类是什么。因此，自然也无法使用new关键字来创建对象了。而当我们之后得到我们要初始化的类的名称及路径时，我们就可以使用JDK提供的反射API进行反射调用。<br>Class clazz = Class.forName(“com.Person”);<br>Method method = clazz.getMethod(“sleep”, String.class);<br>Constructor constructor = clazz.getConstructor();<br>Object object = constructor.newInstance();<br>method.invoke(object, “8:00”);<br>以上两段代码，其结果都是一样的，但是其实现的过程却有很大的差别：</p>\n<ul>\n<li>第一段代码在未运行前就已经确定了要运行的类（Person）；</li>\n<li>第二段代码则是在整个程序运行时从某些地方（例：配置文件）获取到相应的字符串值才能知道要运行的类（”com.Person”）。<br>第二章 反射常用类和常用函数<br>2.1 获取Class对象<br>在反射中，要获取一个类或调用一个类的方法，首先必须要获取到该类的对象，在Java API中，获取Class类对象三种方法：<br>①：Class.forName(“类的路径名”)；<br>Class clazz = Class.forName(“com.test.domain.Person”);<br>②：利用已有类对象的getClass()方法；<br>Person person = new Person();<br>Class clazz = person.getClass();<br>③：对于在编译前就已经知道的类，可以使用.class属性；<br>Class clazz = Person.class;<br>同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的 Class对象都是同一个。<br>2.2  Constructor类<br>Constructor是构造方法类，类中的每一个构造方法都是Constructor的对象，通过Constructor对象可以实例化对 象。</li>\n<li>Constructor getConstructor(Class… parameterTypes) 根据参数类型获取构造方法对象，只能获得public修饰的构造方法。</li>\n<li>Constructor getDeclaredConstructor(Class… parameterTypes) 根据参数类型获取构造方法对象，包括private修饰的构造方法。</li>\n<li>Constructor[] getConstructors() 获取所有的public修饰的构造方法</li>\n<li>Constructor[] getDeclaredConstructors() 获取所有构造方法，包括privat修饰的<br>2.3 通过反射创建类对象<br>①：通过class对象的newInstance()方法<br>Class clazz = Class.forName(“com.Person”);<br>Person person = (Person)clazz.newInstance();<br>②：通过Constructor对象的newInstance()方法；<br>Class clazz = Class.forName(“com.Person”);<br>Constructor con = clazz.getConstructor();<br>Person person = (Person)con.newInstance();<br>2.4  Method类<br>Method是方法类，类中的每一个方法都是Method的对象，通过Method对象可以调用方法。<br>Class类中与Method相关方法：</li>\n<li>Method getMethod(“方法名”, 方法的参数类型… 类型) 根据方法名和参数类型获得一个方法对象，只能是获取public修饰的</li>\n<li>Method getDeclaredMethod(“方法名”, 方法的参数类型… 类型) 根据方法名和参数类型获得一个方法对象，包括private修饰的</li>\n<li>Method[] getMethods() 获取所有的public修饰的成员方法，包括父类中。</li>\n<li>Method[] getDeclaredMethods() 获取当前类中所有的方法，包含私有的，不包括父类中。<br>Method类中常用方法：</li>\n<li>Object invoke(Object obj, Object… args) 根据参数args调用对象obj的该成员方法 如果obj=null，则表示该方法是静态方法</li>\n<li>void setAccessible(boolean flag) 暴力反射，设置为可以直接调用私有修饰的成员方法<br>2.5 通过反射操作成员变量<br>①：获取所有成员getFields()&amp;getDeclaredFields();<br>使用getFields()方法可以获取Class类的成员变量，但是无法获取私有属性。<br>使用getDeclaredFields()方法可以获取Class类的所有成员变量。<br>Class clazz = Class.forName(“com.Person”);<br>Field[] fields = clazz.getFields();<br>for (Field field : fields) {<br>System.out.print(field.getName());<br>}<br>②：获取单个成员getField(String name)&amp;getDeclared(String name)<br>③：修改成员变量的值set(Object obj, Object value)<br>Class clazz = Class.forName(“com.test.domain.Person”);<br>Person person = (Person)clazz.newInstance();<br>Field field = clazz.getField(“name”);<br>field.set(person, “张三”);<br>④：当属性为private时，这是我们无法直接使用set()方法修改它的值，此时应该使用setAccessible()方法取得访问权限：<br>Class clazz = Class.forName(“com.Person”);<br>Person person = (Person)clazz.newInstance();<br>Field field = clazz.getDeclaredField(“name”);<br>field.setAccessible(true);<br>field.set(person, “张三”);<br>第三章 反射案例<br>需求：写一段程序，在不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法。<br>步骤：</li>\n<li>将需要创建的对象的全类名和需要执行的方法定义在配置文件中</li>\n<li>在程序中加载读取配置文件</li>\n<li>使用反射技术来加载类文件进内存</li>\n<li>创建对象</li>\n<li>执行方法<br>1.pro.properties<br>className=com.Student<br>methodName=sleep<br>2.Student.java<br>public class Student {<br>  public void sleep(){     <pre><code>   System.out.println(&quot;sleep...&quot;);</code></pre>\n }<br>}<br>3.Test.java<br>public class Test {<br>  public static void main(String[] args) {<pre><code>   //1.加载配置文件       \n  //1.1创建Properties对象\n  Properties pro = new Properties();\n  //1.2加载配置文件，转换为一个集合\n  //1.2.1获取class目录下的配置文件\n  ClassLoader classLoader = Test.class.getClassLoader();\n  InputStream is = classLoader.getResourceAsStream(&quot;pro.properties&quot;);\n  pro.load(is);\n  //2.获取配置文件中定义的数据\n  String className = pro.getProperty(&quot;className&quot;);\n  String methodName = pro.getProperty(&quot;methodName&quot;);\n  //3.加载该类进内存\n  Class cls = Class.forName(className);\n  //4.创建对象\n  Object obj = cls.newInstance();\n //5.获取方法对象\n Method method = cls.getMethod(methodName);\n //6.执行方法      \n   method.invoke(obj);\n  &#125;</code></pre>\n  }<br>}</li>\n</ul>\n<h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><h3 id=\"第一章-注解概述\"><a href=\"#第一章-注解概述\" class=\"headerlink\" title=\"第一章  注解概述\"></a>第一章  注解概述</h3><h4 id=\"1-1-定义\"><a href=\"#1-1-定义\" class=\"headerlink\" title=\"1.1 定义\"></a>1.1 定义</h4><p>注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</p>\n<h4 id=\"1-2-作用分类\"><a href=\"#1-2-作用分类\" class=\"headerlink\" title=\"1.2 作用分类\"></a>1.2 作用分类</h4><ul>\n<li>编写文档：通过代码里标识的注解生成文档【例如，生成文档doc文档】</li>\n<li>代码分析：通过代码里标识的注解对代码进行分析【例如，注解的反射】</li>\n<li>编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【例如，Override】</li>\n</ul>\n<h4 id=\"1-3-常见注解\"><a href=\"#1-3-常见注解\" class=\"headerlink\" title=\"1.3 常见注解\"></a>1.3 常见注解</h4><ul>\n<li><p>@author：用来标识作者名。</p>\n</li>\n<li><p>@version：用于标识对象的版本号，适用范围：文件、类、方法。</p>\n</li>\n<li><p>@Override ：用来修饰方法声明，告诉编译器该方法是重写父类中的方法，如果父类不存在该方法，则编译失败。</p>\n</li>\n</ul>\n<h3 id=\"第二章-自定义注解\"><a href=\"#第二章-自定义注解\" class=\"headerlink\" title=\"第二章 自定义注解\"></a>第二章 自定义注解</h3><p>  定义格式：<br>  元注解<br>  public @interface 注解名称{<br>    属性列表;<br>  }<br>  注解本质上就是一个接口，该接口默认继承Annotation接口。</p>\n<h4 id=\"2-1-注解的属性\"><a href=\"#2-1-注解的属性\" class=\"headerlink\" title=\"2.1 注解的属性\"></a>2.1 注解的属性</h4><ul>\n<li><ol>\n<li>属性的作用<br>可以让用户在使用注解时传递参数，让注解的功能更加强大。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>属性的格式<br>格式1：数据类型 属性名();<br>格式2：数据类型 属性名() default 默认值;</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>属性定义示例<br>public @interface Student {<br>String name(); // 姓名<br>int age() default 18; // 年龄<br>String gender() default “男”; // 性别<br>}<br>// 该注解就有了三个属性：name，age，gender</li>\n</ol>\n</li>\n</ul>\n<ol start=\"4\">\n<li>属性适用的数据类型</li>\n</ol>\n<ul>\n<li><p>八种基本数据类型（int,float,boolean,byte,double,char,long,short)</p>\n</li>\n<li><p>String类型，Class类型，枚举类型，注解类型</p>\n</li>\n<li><p>以上所有类型的一维数组</p>\n</li>\n</ul>\n<h4 id=\"2-2-使用自定义注解\"><a href=\"#2-2-使用自定义注解\" class=\"headerlink\" title=\"2.2 使用自定义注解\"></a>2.2 使用自定义注解</h4><p>  定义注解：Book</p>\n<ul>\n<li><p>包含属性：String value() 书名</p>\n</li>\n<li><p>包含属性：double price() 价格，默认值为 100</p>\n</li>\n<li><p>包含属性：String[] authors() 多位作者<br>代码实现：<br>public @interface Book {<br>// 书名<br>String value();<br>// 价格<br>double price() default 100;<br>// 多位作者<br>String[] authors();<br>}<br>使用注解：<br>public class BookShelf {<br>@Book(value = “西游记”,price = 998,authors = {“吴承恩”,”白求恩”})<br>public void showBook(){<br>}<br>}<br>如果属性有默认值，则使用注解的时候，这个属性可以不用赋值。<br>如果属性没有默认值，那么在使用注解时一定要给属性赋值。</p>\n</li>\n</ul>\n<h3 id=\"第三章-注解之元注解\"><a href=\"#第三章-注解之元注解\" class=\"headerlink\" title=\"第三章 注解之元注解\"></a>第三章 注解之元注解</h3><p>  默认情况下，注解可以用在任何地方，比如类，成员方法，构造方法，成员变量等地方。如果要限制注解的使用位置怎么办？那就要学习一个新的知识点：元注解。</p>\n<ul>\n<li><p>@Target</p>\n</li>\n<li><p>@Retention</p>\n</li>\n</ul>\n<h4 id=\"3-1-元注解之-Target\"><a href=\"#3-1-元注解之-Target\" class=\"headerlink\" title=\"3.1 元注解之@Target\"></a>3.1 元注解之@Target</h4><p>  作用：指明此注解用在哪个位置，如果不写默认是任何地方都可以使用。<br>  可选的参数值在枚举类ElemenetType中包括：</p>\n<ul>\n<li><p>TYPE： 用在类,接口上</p>\n</li>\n<li><p>FIELD：用在成员变量上</p>\n</li>\n<li><p>METHOD： 用在方法上</p>\n</li>\n<li><p>PARAMETER：用在参数上</p>\n</li>\n<li><p>CONSTRUCTOR：用在构造方法上</p>\n</li>\n<li><p>LOCAL_VARIABLE：用在局部变量上</p>\n</li>\n</ul>\n<h4 id=\"3-2-元注解之-Retention\"><a href=\"#3-2-元注解之-Retention\" class=\"headerlink\" title=\"3.2 元注解之@Retention\"></a>3.2 元注解之@Retention</h4><p>  作用：定义该注解的生命周期(有效范围)。<br>  可选的参数值在枚举类型RetentionPolicy中包括:</p>\n<ul>\n<li><p>SOURCE：注解只存在于Java源代码中，编译生成的字节码文件中就不存在了。</p>\n</li>\n<li><p>CLASS：注解存在于Java源代码、编译以后的字节码文件中，运行的时候内存中没有，默认值。</p>\n</li>\n<li><p>RUNTIME：注解存在于Java源代码中、编译以后的字节码文件中、运行时内存中，程序可以通过反射获取该注解。</p>\n</li>\n</ul>\n<h4 id=\"3-3-元注解使用示例\"><a href=\"#3-3-元注解使用示例\" class=\"headerlink\" title=\"3.3 元注解使用示例\"></a>3.3 元注解使用示例</h4><p>@Target({ElementType.METHOD,ElementType.TYPE})<br>@interface Stu{<br>String name();<br>}<br>// 类<br>@Stu(name=”jack”)<br>public class AnnotationDemo02 {<br>// 成员变量<br>@Stu(name = “lily”) // 编译失败<br>private String gender;<br>// 成员方法<br>@Stu(name=”rose”)<br>public void test(){<br>}<br>// 构造方法<br>@Stu(name=”lucy”) // 编译失败<br>public AnnotationDemo02(){}<br>}</p>\n<h3 id=\"第四章-注解解析\"><a href=\"#第四章-注解解析\" class=\"headerlink\" title=\"第四章 注解解析\"></a>第四章 注解解析</h3><p>通过java技术获取注解数据的过程叫做注解解析。</p>\n<h4 id=\"4-1-与注解解析相关的接口\"><a href=\"#4-1-与注解解析相关的接口\" class=\"headerlink\" title=\"4.1 与注解解析相关的接口\"></a>4.1 与注解解析相关的接口</h4><ul>\n<li>Anontation：所有注解类型的公共接口，类似所有类的父类是Object。</li>\n<li>AnnotatedElement：定义了与注解解析相关的方法，常用方法以下四个<ul>\n<li>boolean isAnnotationPresent(Class annotationClass); 判断当前对象是否有指定的注解，有则返回true，否则 返回false。</li>\n<li>T getAnnotation(Class<T> annotationClass); 获得当前对象上指定的注解对象。</li>\n<li>Annotation[] getAnnotations(); 获得当前对象及其从父类上继承的所有的注解对象。</li>\n<li>Annotation[] getDeclaredAnnotations();获得当前对象上所有的注解对象，不包括父类的。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-2-获取注解数据的原理\"><a href=\"#4-2-获取注解数据的原理\" class=\"headerlink\" title=\"4.2 获取注解数据的原理\"></a>4.2 获取注解数据的原理</h4><p>注解作用在哪个成员上，就可以通过反射获取该成员的对象，通过该成员对象获取该成员的注解。<br>如注解作用在方法上，就通过方法(Method)对象得到它的注解：<br>// 得到方法对象<br> Method method = clazz.getDeclaredMethod(“方法名”);<br>// 根据注解名得到方法上的注解对象<br>Book book = method.getAnnotation(Book.class);<br>如注解作用在类上，就通过Class对象得到它的注解：<br>// 获得Class对象<br>Class c = 类名.class;<br>// 根据注解的Class获得使用在类上的注解对象<br>Book book = c.getAnnotation(Book.class);</p>\n<h3 id=\"第五章-使用反射获取注解的数据\"><a href=\"#第五章-使用反射获取注解的数据\" class=\"headerlink\" title=\"第五章 使用反射获取注解的数据\"></a>第五章 使用反射获取注解的数据</h3><p>需求说明</p>\n<ol>\n<li>定义注解Book，要求如下：</li>\n</ol>\n<ul>\n<li>包含属性：String value() 书名</li>\n<li>包含属性：double price() 价格，默认值为 100</li>\n<li>包含属性：String[] authors() 多位作者</li>\n<li>限制注解使用的位置：类和成员方法上</li>\n<li>指定注解的有效范围：RUNTIME</li>\n</ul>\n<ol start=\"2\">\n<li><p>定义BookStore类，在类和成员方法上使用Book注解</p>\n</li>\n<li><p>定义TestAnnotation测试类获取Book注解上的数据<br>代码实现<br>注解Book<br>@Target({ElementType.METHOD,ElementType.TYPE})<br>@Retention(RetentionPolicy.RUNTIME)<br>public @interface Book {</p>\n<pre><code> // 书名\n String value();\n // 价格\n double price() default 100;\n // 作者\n String[] authors();</code></pre>\n<p> }<br>BookStore类<br>@Book(value = “红楼梦”,authors = “曹雪芹”,price = 998)<br> public class BookStore {</p>\n<p> @Book(value = “西游记”,authors = “吴承恩”)<br> public void buyBook(){<br> }<br> }<br>TestAnnotation类<br>public class TestAnnotation {<br>public static void main(String[] args) throws Exception{<br>System.out.println(“———获取类上注解的数据———-“);<br>test01();<br>System.out.println(“———获取成员方法上注解的数据———-“);<br>test02();<br>}<br>/**</p>\n</li>\n</ol>\n<ul>\n<li><p>获取BookStore类上使用的Book注解数据<br>*/<br>public static void test01(){<br>// 获得BookStore类对应的Class对象<br>Class c = BookStore.class;<br>// 判断BookStore类是否使用了Book注解<br>if(c.isAnnotationPresent(Book.class)) {<br>// 根据注解Class对象获取注解对象<br>Book book = (Book) c.getAnnotation(Book.class);<br>// 输出book注解属性值<br>System.out.println(“书名：” + book.value());<br>System.out.println(“价格：” + book.price());<br>System.out.println(“作者：” + Arrays.toString(book.authors()));<br>}<br>}<br>/**</p>\n</li>\n<li><p>获取BookStore类成员方法buyBook使用的Book注解数据<br>*/<br>public static void test02() throws Exception{<br>// 获得BookStore类对应的Class对象<br>Class c = BookStore.class;<br>// 获得成员方法buyBook对应的Method对象<br>Method m = c.getMethod(“buyBook”);<br>// 判断成员方法buyBook上是否使用了Book注解<br>if(m.isAnnotationPresent(Book.class)) {<br>// 根据注解Class对象获取注解对象<br>Book book = (Book) m.getAnnotation(Book.class);<br>// 输出book注解属性值<br>System.out.println(“书名：” + book.value());<br>System.out.println(“价格：” + book.price());<br>System.out.println(“作者：” + Arrays.toString(book.authors()));<br>}<br>}<br>}<br>作业<br>1.定义Person类，私有成员变量有name,age,公开成员变量有sex，成员方法包括gette和setter，构造方法有无参和全参，用反射去创建一个Person对象，用2种方式。<br>2.在第一题中加入方法show，打印一串字符串，利用反射执行该方法。<br>4.在第一题基础之上，利用反射设置name为“张三”,sex为“男”。<br>Person.java<br>public class Person {<br>  private String name;<br>  private int age;<br>  private String sex;</p>\n<p>  @Override<br>  public String toString() {</p>\n<pre><code>  return &quot;Person&#123;&quot; +\n          &quot;name=&#39;&quot; + name + &#39;\\&#39;&#39; +\n          &quot;, age=&quot; + age +\n          &quot;, sex=&#39;&quot; + sex + &#39;\\&#39;&#39; +\n          &#39;&#125;&#39;;</code></pre>\n<p>  }</p>\n<p>  public void gogogo(){</p>\n<pre><code>  System.out.println(&quot;通过读取配置文件得到的gogogo方法在运行！&quot;);</code></pre>\n<p>  }</p>\n<p>  public String getName() {</p>\n<pre><code>  return name;</code></pre>\n<p>  }</p>\n<p>  public void setName(String name) {</p>\n<pre><code>  this.name = name;</code></pre>\n<p>  }</p>\n<p>  public int getAge() {</p>\n<pre><code>  return age;</code></pre>\n<p>  }</p>\n<p>  public void setAge(int age) {</p>\n<pre><code>  this.age = age;</code></pre>\n<p>  }</p>\n<p>  public String getSex() {</p>\n<pre><code>  return sex;</code></pre>\n<p>  }</p>\n<p>  public void setSex(String sex) {</p>\n<pre><code>  this.sex = sex;</code></pre>\n<p>  }</p>\n<p>  public Person() {<br>  }</p>\n<p>  public Person(String name, int age, String sex) {</p>\n<pre><code>  this.name = name;\n  this.age = age;\n  this.sex = sex;</code></pre>\n<p>  }<br>  public void show(){</p>\n<pre><code>  System.out.println(&quot;这是一个无参的show方法&quot;);</code></pre>\n<p>  }<br>}<br>public class Demo1 {<br>  public static void main(String[] args) throws Exception{</p>\n<pre><code>  //1.定义Person类，私有成员变量有name,age,公开成员变量有sex，成员方法包括gette和setter，\n  // 构造方法有无参和全参，用反射去创建一个Person对象，用2种方式。\n  //第一种\n  Class clazz = Class.forName(&quot;com.hmwk124.Person&quot;);\n  Person p = (Person)clazz.newInstance();\n  //第二种\n  Class clazz1 = Class.forName(&quot;com.hmwk124.Person&quot;);\n  Constructor constructor = clazz.getConstructor();\n  Person p1 = (Person)constructor.newInstance();\n  //2.在第一题中加入方法show，打印一串字符串，利用反射执行该方法。\n  Method show = clazz1.getMethod(&quot;show&quot;);\n  show.invoke(p1);\n  //4.在第一题基础之上，利用反射设置name为“张三”,sex为“男”。\n  Field name = clazz1.getDeclaredField(&quot;name&quot;);\n  Field sex = clazz1.getDeclaredField(&quot;sex&quot;);\n  name.setAccessible(true);\n  name.set(p1,&quot;张三&quot;);\n  sex.setAccessible(true);\n  sex.set(p1,&quot;男&quot;);\n  Method toString = clazz1.getMethod(&quot;toString&quot;);\n  System.out.println(toString.invoke(p1));</code></pre>\n<p>  }<br>}<br>3.编写一个类A，增加一个实例方法showString,用于打印一条字符串，再编写一个测试类TestA ，在测试类中，用键盘输入一个字符串，该字符串就是类A的全名，使用反射机制创建该类的对象，并调用该对象中的方法showString。<br>//3.编写一个类A，增加一个实例方法showString,用<br>// 于打印一条字符串，再编写一个测试类TestA ，在测试类中，<br>// 用键盘输入一个字符串，该字符串就是类A的全名，使用反射机制创<br>// 建该类的对象，并调用该对象中的方法showString。<br>public class A {<br>  public void showString(){</p>\n<pre><code>  System.out.println(&quot;这是A类的showString方法！&quot;);</code></pre>\n<p>  }<br>}<br>public class TestA {<br>  //3.编写一个类A，增加一个实例方法showString,用<br>  // 于打印一条字符串，再编写一个测试类TestA ，在测试类中，<br>  // 用键盘输入一个字符串，该字符串就是类A的全名，使用反射机制创<br>  // 建该类的对象，并调用该对象中的方法showString。<br>  public static void main(String[] args) {</p>\n<pre><code>  String s;\n  Scanner sc = new Scanner(System.in);\n  System.out.print(&quot;请输入完整的类名：&quot;);\n  s = sc.nextLine();\n  Class clazz = null;\n  try &#123;\n      clazz = Class.forName(s);\n      Constructor constructor = clazz.getConstructor();\n      A a = (A) constructor.newInstance();\n      a.showString();\n  &#125; catch (ClassNotFoundException e) &#123;\n      System.out.println(&quot;找不到该类！&quot;);\n  &#125; catch (NoSuchMethodException e) &#123;\n      e.printStackTrace();\n  &#125; catch (InstantiationException e) &#123;\n      e.printStackTrace();\n  &#125; catch (IllegalAccessException e) &#123;\n      e.printStackTrace();\n  &#125; catch (InvocationTargetException e) &#123;\n      e.printStackTrace();\n  &#125;</code></pre>\n<p>  }<br>}<br>5.在第一题基础上，写一个Properties格式的配置文件，配置类的完整名称和所要执行的方法，写一个程序，读取这个Properties配置文件，获得类的完整名称并加载这个类，并执行读取的方法。<br>public class Demo5 {<br>  //在第一题基础上，写一个Properties格式的配置文件，配置类的完整名<br>  // 称和所要执行的方法，写一个程序，读取这个Properties配置文件，获<br>  // 得类的完整名称并加载这个类，并执行读取的方法。<br>  public static void main(String[] args) throws Exception {</p>\n<pre><code>  Properties pro = new Properties();\n  ClassLoader cll = Demo5.class.getClassLoader();\n  InputStream is = cll.getResourceAsStream(&quot;com/hmwk124/pro.properties&quot;);\n  pro.load(is);\n  String className = pro.getProperty(&quot;className&quot;);\n  String methodName = pro.getProperty(&quot;methodName&quot;);\n  Class clazz = Class.forName(className);\n  Object o = clazz.newInstance();\n  Method method = clazz.getMethod(methodName);\n  method.invoke(o);</code></pre>\n<p>  }<br>}<br>配置文件：<br>className=com.hmwk124.Person<br>methodName=gogogo<br>1.自定义注解Hello，包含属性value，name，age（默认值100），设置只能作用于方法和成员变量，生命周期为RUNTIME,创建普通类Person，类中定义成员变量name，方法show（），分别在之上加入注解，利用反射解析注解。<br>Hello.java<br>@Target({ElementType.METHOD,ElementType.FIELD})<br>@Retention(RetentionPolicy.RUNTIME)<br>public @interface Hello {<br>  String value();<br>  String name();<br>  int age() default 100;<br>}<br>Person.java<br>public class Person {<br>  @Hello(value = “10”,name=”李四”,age = 20)<br>  private String name;<br>  @Hello(value = “100”,name = “张三”,age = 18)<br>  public void show(){<br>  }<br>}<br>Demo6.java<br>public class Demo6 {<br>  public static void main(String[] args) throws Exception {</p>\n<pre><code>  System.out.println(&quot;获取成员变量上注解的数据&quot;);\n  test01();\n  System.out.println(&quot;获取方法上注解的数据&quot;);\n  test02();</code></pre>\n<p>  }<br>  //获取Person类的成员变量上使用的Hello注解数据<br>  public static void test01() throws NoSuchFieldException {</p>\n<pre><code>  Class clazz = Person.class;\n  Field field = (Field) clazz.getDeclaredField(&quot;name&quot;);\n  System.out.println(field.isAnnotationPresent(Hello.class));\n  if(field.isAnnotationPresent(Hello.class))&#123;\n      Hello hello = (Hello)field.getAnnotation(Hello.class);\n      //输出Hello注解属性值\n      System.out.println(&quot;value:&quot; + hello.value());\n      System.out.println(&quot;name:&quot; + hello.name());\n      System.out.println(&quot;age:&quot; + hello.age());\n  &#125;</code></pre>\n<p>  }<br>  //获取方法show上对象的Method对象<br>  public static void test02() throws Exception{</p>\n<pre><code>  Class clazz1 = Person.class;\n  Method show = clazz1.getMethod(&quot;show&quot;);\n  //判断是否使用注解\n  if(show.isAnnotationPresent(Hello.class))&#123;\n      Hello hello = (Hello)show.getAnnotation(Hello.class);\n      //输出注解属性值\n      System.out.println(&quot;value:&quot; + hello.value());\n      System.out.println(&quot;name:&quot; + hello.name());\n      System.out.println(&quot;age:&quot; + hello.age());\n  &#125;</code></pre>\n<p>  }<br>}</p>\n</li>\n</ul>","categories":[],"tags":[{"name":"Java","path":"api/tags/Java.json"}]}