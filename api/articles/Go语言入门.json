{"title":"Go语言入门","slug":"Go语言入门","date":"2021-01-04T10:50:56.000Z","updated":"2022-05-20T07:53:23.757Z","comments":true,"path":"api/articles/Go语言入门.json","excerpt":"Go语言入门本文章通过简单的Go语言代码说明一些Go语言编程的注意事项及知识点","covers":["http://cdn.leafii.top/img/20220520155023.png","http://cdn.leafii.top/img/20220520155039.png","http://cdn.leafii.top/img/20220520155053.png","http://cdn.leafii.top/img/20220520155109.png","http://cdn.leafii.top/img/20220520155120.png","http://cdn.leafii.top/img/20220520155133.png","http://cdn.leafii.top/img/20220520155146.png","http://cdn.leafii.top/img/20220520155203.png","http://cdn.leafii.top/img/20220520155217.png","http://cdn.leafii.top/img/20220520155232.png","http://cdn.leafii.top/img/20220520155252.png","http://cdn.leafii.top/img/20220520155308.png"],"content":"<h1 id=\"Go语言入门\"><a href=\"#Go语言入门\" class=\"headerlink\" title=\"Go语言入门\"></a>Go语言入门</h1><p>本文章通过简单的Go语言代码说明一些Go语言编程的注意事项及知识点</p>\n<span id=\"more\"></span>\n\n<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>要求开发一个hello.go程序，可以在屏幕打印出“hello world”</p>\n<h2 id=\"开发步骤\"><a href=\"#开发步骤\" class=\"headerlink\" title=\"开发步骤\"></a>开发步骤</h2><ol>\n<li><p>在编写Go语言代码时的目录结构：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520155023.png\" loading=\"lazy\"></p>\n</li>\n<li><p>编写代码，代码如下：</p>\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//输出helloworld</span>\n<span class=\"token keyword\">package</span> main\n<span class=\"token comment\">//go文件的后缀是.go</span>\n<span class=\"token comment\">//package main表示hello.go所在包为main包</span>\n<span class=\"token comment\">//在go中每个文件都必须归属于一个包</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n<span class=\"token comment\">//import “fmt”说明引入一个包，包名为fmt，引入目的是使用包内函数（fmt.Println())</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//func main() &#123; </span>\n<span class=\"token comment\">//func表示一个函数，main是主函数，代表程序的入口</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//表示调用fmt的Println输出hello world字符串</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"3\">\n<li>在cmd中通过go build命令对go语言进行编译，生成exe文件，默认生成的exe文件与你的代码文件的名称相同，在Windows系统下是后缀为exe可执行文件，在Linux系统中直接生成可执行文件。执行结果如下图所示：</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520155039.png\" loading=\"lazy\"></p>\n<ol start=\"4\">\n<li>也可以通过go run 命令直接运行hello.go源代码（类似于执行一个脚本文件的形式），执行结果如下图所示：</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520155053.png\" loading=\"lazy\"></p>\n<h2 id=\"Golang代码执行流程分析\"><a href=\"#Golang代码执行流程分析\" class=\"headerlink\" title=\"Golang代码执行流程分析\"></a>Golang代码执行流程分析</h2><ul>\n<li>如果是对源码编译后，再执行，Go的执行流程如下图：</li>\n</ul>\n<p><img src=\"http://cdn.leafii.top/img/20220520155109.png\" loading=\"lazy\"></p>\n<ul>\n<li>如果我们直接对源码进行go run 指令，Go的执行流程如下图:</li>\n</ul>\n<p><img src=\"http://cdn.leafii.top/img/20220520155120.png\" loading=\"lazy\"></p>\n<p><strong>两种执行流程的方式区别</strong></p>\n<pre><code>1. 如果我们先编译生成了可执行文件，那么我们可以将该可执行文件拷贝到没有go开发环境的机器上，仍然可以运行。\n2. 如果我们是直接go run我们写的源代码，那么如果想要在另一台电脑上也运行，那么那台电脑必须安装Go语言的运行环境，否则无法执行。\n3. 在编译时，编译器会将程序运行依赖的库文件也包含在可执行文件中，所以可执行文件变大了很多。（go语言的helloworld代码只有5KB，生成的可执行文件有接近2000KB）\n</code></pre>\n<h2 id=\"编译和运行说明\"><a href=\"#编译和运行说明\" class=\"headerlink\" title=\"编译和运行说明\"></a>编译和运行说明</h2><ol>\n<li>有了Go语言代码的源文件，可以通过编译器将其编译成机器可以识别的二进制码文件</li>\n<li>在该源文件目录下，通过go build 对hello.go文件进行编译，可以指定生成的可执行文件名，在Windows下，必须是.exe的后缀。</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520155133.png\" loading=\"lazy\"></p>\n<ol start=\"3\">\n<li>如果程序没有错误，那么没有任何提示，并会在当前目录中生成一个可执行文件，该文件是一个二进制码文件，也是可以直接执行的程序。</li>\n<li>如果程序有错误，编译时，会在错误的那一行报错。这有助于程序员的调试。</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520155146.png\" loading=\"lazy\"></p>\n<ol start=\"5\">\n<li>运行有两种形式<ul>\n<li>直接运行生成的可执行文件，比如hello.exe</li>\n<li>通过运行工具go run 对源代码文件直接进行运行。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Go语言开发的注意事项\"><a href=\"#Go语言开发的注意事项\" class=\"headerlink\" title=\"Go语言开发的注意事项\"></a>Go语言开发的注意事项</h2><ol>\n<li>Go语言源代码的扩展名为.go</li>\n<li>Go应用程序的执行入口是main()函数。（与java&#x2F;c相同）</li>\n<li>Go语言严格区分大小写</li>\n<li>Go方法由一条条语句构成，每个语句后不需要分号（编译时会自动为每行后添加分号），这也体现了Go语言代码的简洁性。</li>\n<li>Go编译器都是一行一行进行编译的，因此我们一行就写一条语句，不能把多条语句写在同一个，否则会报错。</li>\n<li>Go语言定义的变量或者import的包如果没有被使用到，代码是无法编译通过的。</li>\n<li>大括号必须成对出现!</li>\n</ol>\n<hr>\n<h2 id=\"Go语言的转义字符\"><a href=\"#Go语言的转义字符\" class=\"headerlink\" title=\"Go语言的转义字符\"></a>Go语言的转义字符</h2><p>常用的转义字符如下：</p>\n<ul>\n<li>\\t:表示一个制表符，通常用于排版</li>\n<li>\\n:换行符</li>\n<li>\\:一个\\</li>\n<li>\\“:一个”</li>\n<li>\\r:一个回车</li>\n</ul>\n<p>案例代码：</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span> <span class=\"token comment\">//fmt提供格式化，输入，输出的函数</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//演示转义字符的使用</span>\n\t<span class=\"token comment\">// \\t的使用</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tom\\tjack\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// \\n的使用</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tom\\njack\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// \\\\的使用</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\\\\world\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// \\\"的使用</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qwq\\\"ovo\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// \\r的使用</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"owowo\\rovo\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>运行效果：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520155203.png\" loading=\"lazy\"></p>\n<p><strong>注：换行符是直接换行，而回车是指把光标移到头部，将原来字符串中的语句的头部替换为回车后的字符，就如同示例中的owowo中前半段的owo就被\\r之后的ovo替换了，最后打印出了ovowo</strong></p>\n<h3 id=\"课堂练习\"><a href=\"#课堂练习\" class=\"headerlink\" title=\"课堂练习\"></a>课堂练习</h3><p>要求使用一条输出语句，实现下图中的效果：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520155217.png\" loading=\"lazy\"></p>\n<p>代码：</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"姓名\\t年龄\\t籍贯\\t住址\\njohn\\t12\\t河北\\t北京\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><strong>注：学会查看编译器的报错，自己进行bug的排查</strong></p>\n<hr>\n<h2 id=\"Go语言的注释\"><a href=\"#Go语言的注释\" class=\"headerlink\" title=\"Go语言的注释\"></a>Go语言的注释</h2><h3 id=\"介绍注释\"><a href=\"#介绍注释\" class=\"headerlink\" title=\"介绍注释\"></a>介绍注释</h3><p>用于注解说明解释程序的文字就是注释，<strong>注释提高了代码的阅读性</strong>；</p>\n<p>注释是一个程序员必须要具有的良好的编程习惯。将自己的思想通过注释先整理出来，再用代码去体现。</p>\n<h3 id=\"Go语言中注释的两种形式\"><a href=\"#Go语言中注释的两种形式\" class=\"headerlink\" title=\"Go语言中注释的两种形式\"></a>Go语言中注释的两种形式</h3><ol>\n<li><p>行注释</p>\n<ul>\n<li>基本语法</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//注释内容</span></code></pre>\n\n<ul>\n<li>举例</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//输出helloworld</span>\n<span class=\"token keyword\">package</span> main\n<span class=\"token comment\">//go文件的后缀是.go</span>\n<span class=\"token comment\">//package main表示hello.go所在包为main包</span>\n<span class=\"token comment\">//在go中每个文件都必须归属于一个包</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n<span class=\"token comment\">//import “fmt”说明引入一个包，包名为fmt，引入目的是使用包内函数（fmt.Println())</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//func main() &#123; </span>\n<span class=\"token comment\">//func表示一个函数，main是主函数，代表程序的入口</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//表示调用fmt的Println输出hello world字符串</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n</li>\n<li><p>块注释（多行注释）</p>\n<ul>\n<li>基本语法</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">/*\n注释内容\n*/</span></code></pre>\n\n<ul>\n<li>举例说明</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">/*\n这\n是\n一个\n多行注释\n*/</span></code></pre></li>\n</ol>\n<ul>\n<li>使用细节<ul>\n<li>对于行注释和块注释，被注释的文字，不会被Go编译器执行。</li>\n<li>块注释里不允许有块注释嵌套。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"规范的代码风格\"><a href=\"#规范的代码风格\" class=\"headerlink\" title=\"规范的代码风格\"></a>规范的代码风格</h2><h3 id=\"正确的注释和注释风格\"><a href=\"#正确的注释和注释风格\" class=\"headerlink\" title=\"正确的注释和注释风格\"></a>正确的注释和注释风格</h3><ol>\n<li>Go官方推荐使用行注释来注释整个方法和语句</li>\n<li>可以看Go源码中的注释的风格</li>\n</ol>\n<h3 id=\"正确的缩进和空白\"><a href=\"#正确的缩进和空白\" class=\"headerlink\" title=\"正确的缩进和空白\"></a>正确的缩进和空白</h3><ol>\n<li>在VSCode中，使用tab进行代码缩进，默认整体朝右边移动，使用shift+tab可以真git向左移动。</li>\n<li>使用gofmt来进行代码的格式化，如图所示：</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520155232.png\" loading=\"lazy\"></p>\n<ol start=\"3\">\n<li>运算符两边习惯性各加一个空格，如：2 + 4 * 5</li>\n<li>Go语言代码风格辨析：</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello,Go!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//上面的写法是正确的</span>\n<span class=\"token comment\">//下面的写法是错误的，Go语言不支持这种写法</span>\n<span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"姓名\\t年龄\\t籍贯\\t住址\\njohn\\t12\\t河北\\t北京\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><strong>Go语言设计者希望在一个问题上尽量只有一个解决方法</strong></p>\n<ol start=\"5\">\n<li>一行最长不超过80个字符，超过的请使用换行展示，尽量保持格式优雅。比如：</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHe\\n\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"lloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWor\\n\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"ldHelloWorldHelloWorldHelloWorld\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<hr>\n<h2 id=\"知识点总结-x2F-回顾\"><a href=\"#知识点总结-x2F-回顾\" class=\"headerlink\" title=\"知识点总结&#x2F;回顾\"></a>知识点总结&#x2F;回顾</h2><p><img src=\"http://cdn.leafii.top/img/20220520155252.png\" loading=\"lazy\"></p>\n<p><img src=\"http://cdn.leafii.top/img/20220520155308.png\" loading=\"lazy\"></p>\n<hr>\n<h2 id=\"API-x2F-指南的链接\"><a href=\"#API-x2F-指南的链接\" class=\"headerlink\" title=\"API&#x2F;指南的链接\"></a>API&#x2F;指南的链接</h2><p>Golang简体中文官方编程指南<a href=\"https://tour.go-zh.org/welcome/1\">地址</a></p>\n<p>Golang中文网 <a href=\"https://studygolang.com/pkgdoc\">在线标准库文档</a></p>\n<p>Golang官方标准API文档<a href=\"https://golang.org.pkg/\">地址</a> </p>\n<p><strong>API:application program interface:应用程序编程接口，也就是我们GO各个包里的各个函数</strong></p>\n<p><strong>Golang中调用函数的方式是<code>import 包</code>，然后使用<code>包名.函数名</code> 进行函数的调用</strong></p>\n<hr>\n","more":"<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>要求开发一个hello.go程序，可以在屏幕打印出“hello world”</p>\n<h2 id=\"开发步骤\"><a href=\"#开发步骤\" class=\"headerlink\" title=\"开发步骤\"></a>开发步骤</h2><ol>\n<li><p>在编写Go语言代码时的目录结构：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520155023.png\"></p>\n</li>\n<li><p>编写代码，代码如下：</p>\n</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//输出helloworld</span>\n<span class=\"token keyword\">package</span> main\n<span class=\"token comment\">//go文件的后缀是.go</span>\n<span class=\"token comment\">//package main表示hello.go所在包为main包</span>\n<span class=\"token comment\">//在go中每个文件都必须归属于一个包</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n<span class=\"token comment\">//import “fmt”说明引入一个包，包名为fmt，引入目的是使用包内函数（fmt.Println())</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//func main() &#123; </span>\n<span class=\"token comment\">//func表示一个函数，main是主函数，代表程序的入口</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//表示调用fmt的Println输出hello world字符串</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ol start=\"3\">\n<li>在cmd中通过go build命令对go语言进行编译，生成exe文件，默认生成的exe文件与你的代码文件的名称相同，在Windows系统下是后缀为exe可执行文件，在Linux系统中直接生成可执行文件。执行结果如下图所示：</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520155039.png\"></p>\n<ol start=\"4\">\n<li>也可以通过go run 命令直接运行hello.go源代码（类似于执行一个脚本文件的形式），执行结果如下图所示：</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520155053.png\"></p>\n<h2 id=\"Golang代码执行流程分析\"><a href=\"#Golang代码执行流程分析\" class=\"headerlink\" title=\"Golang代码执行流程分析\"></a>Golang代码执行流程分析</h2><ul>\n<li>如果是对源码编译后，再执行，Go的执行流程如下图：</li>\n</ul>\n<p><img src=\"http://cdn.leafii.top/img/20220520155109.png\"></p>\n<ul>\n<li>如果我们直接对源码进行go run 指令，Go的执行流程如下图:</li>\n</ul>\n<p><img src=\"http://cdn.leafii.top/img/20220520155120.png\"></p>\n<p><strong>两种执行流程的方式区别</strong></p>\n<pre><code>1. 如果我们先编译生成了可执行文件，那么我们可以将该可执行文件拷贝到没有go开发环境的机器上，仍然可以运行。\n2. 如果我们是直接go run我们写的源代码，那么如果想要在另一台电脑上也运行，那么那台电脑必须安装Go语言的运行环境，否则无法执行。\n3. 在编译时，编译器会将程序运行依赖的库文件也包含在可执行文件中，所以可执行文件变大了很多。（go语言的helloworld代码只有5KB，生成的可执行文件有接近2000KB）\n</code></pre>\n<h2 id=\"编译和运行说明\"><a href=\"#编译和运行说明\" class=\"headerlink\" title=\"编译和运行说明\"></a>编译和运行说明</h2><ol>\n<li>有了Go语言代码的源文件，可以通过编译器将其编译成机器可以识别的二进制码文件</li>\n<li>在该源文件目录下，通过go build 对hello.go文件进行编译，可以指定生成的可执行文件名，在Windows下，必须是.exe的后缀。</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520155133.png\"></p>\n<ol start=\"3\">\n<li>如果程序没有错误，那么没有任何提示，并会在当前目录中生成一个可执行文件，该文件是一个二进制码文件，也是可以直接执行的程序。</li>\n<li>如果程序有错误，编译时，会在错误的那一行报错。这有助于程序员的调试。</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520155146.png\"></p>\n<ol start=\"5\">\n<li>运行有两种形式<ul>\n<li>直接运行生成的可执行文件，比如hello.exe</li>\n<li>通过运行工具go run 对源代码文件直接进行运行。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Go语言开发的注意事项\"><a href=\"#Go语言开发的注意事项\" class=\"headerlink\" title=\"Go语言开发的注意事项\"></a>Go语言开发的注意事项</h2><ol>\n<li>Go语言源代码的扩展名为.go</li>\n<li>Go应用程序的执行入口是main()函数。（与java&#x2F;c相同）</li>\n<li>Go语言严格区分大小写</li>\n<li>Go方法由一条条语句构成，每个语句后不需要分号（编译时会自动为每行后添加分号），这也体现了Go语言代码的简洁性。</li>\n<li>Go编译器都是一行一行进行编译的，因此我们一行就写一条语句，不能把多条语句写在同一个，否则会报错。</li>\n<li>Go语言定义的变量或者import的包如果没有被使用到，代码是无法编译通过的。</li>\n<li>大括号必须成对出现!</li>\n</ol>\n<hr>\n<h2 id=\"Go语言的转义字符\"><a href=\"#Go语言的转义字符\" class=\"headerlink\" title=\"Go语言的转义字符\"></a>Go语言的转义字符</h2><p>常用的转义字符如下：</p>\n<ul>\n<li>\\t:表示一个制表符，通常用于排版</li>\n<li>\\n:换行符</li>\n<li>\\:一个\\</li>\n<li>\\“:一个”</li>\n<li>\\r:一个回车</li>\n</ul>\n<p>案例代码：</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span> <span class=\"token comment\">//fmt提供格式化，输入，输出的函数</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//演示转义字符的使用</span>\n\t<span class=\"token comment\">// \\t的使用</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tom\\tjack\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// \\n的使用</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tom\\njack\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// \\\\的使用</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\\\\world\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// \\\"的使用</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qwq\\\"ovo\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// \\r的使用</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"owowo\\rovo\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>运行效果：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520155203.png\"></p>\n<p><strong>注：换行符是直接换行，而回车是指把光标移到头部，将原来字符串中的语句的头部替换为回车后的字符，就如同示例中的owowo中前半段的owo就被\\r之后的ovo替换了，最后打印出了ovowo</strong></p>\n<h3 id=\"课堂练习\"><a href=\"#课堂练习\" class=\"headerlink\" title=\"课堂练习\"></a>课堂练习</h3><p>要求使用一条输出语句，实现下图中的效果：</p>\n<p><img src=\"http://cdn.leafii.top/img/20220520155217.png\"></p>\n<p>代码：</p>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"姓名\\t年龄\\t籍贯\\t住址\\njohn\\t12\\t河北\\t北京\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><strong>注：学会查看编译器的报错，自己进行bug的排查</strong></p>\n<hr>\n<h2 id=\"Go语言的注释\"><a href=\"#Go语言的注释\" class=\"headerlink\" title=\"Go语言的注释\"></a>Go语言的注释</h2><h3 id=\"介绍注释\"><a href=\"#介绍注释\" class=\"headerlink\" title=\"介绍注释\"></a>介绍注释</h3><p>用于注解说明解释程序的文字就是注释，<strong>注释提高了代码的阅读性</strong>；</p>\n<p>注释是一个程序员必须要具有的良好的编程习惯。将自己的思想通过注释先整理出来，再用代码去体现。</p>\n<h3 id=\"Go语言中注释的两种形式\"><a href=\"#Go语言中注释的两种形式\" class=\"headerlink\" title=\"Go语言中注释的两种形式\"></a>Go语言中注释的两种形式</h3><ol>\n<li><p>行注释</p>\n<ul>\n<li>基本语法</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//注释内容</span></code></pre>\n\n<ul>\n<li>举例</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//输出helloworld</span>\n<span class=\"token keyword\">package</span> main\n<span class=\"token comment\">//go文件的后缀是.go</span>\n<span class=\"token comment\">//package main表示hello.go所在包为main包</span>\n<span class=\"token comment\">//在go中每个文件都必须归属于一个包</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n<span class=\"token comment\">//import “fmt”说明引入一个包，包名为fmt，引入目的是使用包内函数（fmt.Println())</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//func main() &#123; </span>\n<span class=\"token comment\">//func表示一个函数，main是主函数，代表程序的入口</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//表示调用fmt的Println输出hello world字符串</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n</li>\n<li><p>块注释（多行注释）</p>\n<ul>\n<li>基本语法</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">/*\n注释内容\n*/</span></code></pre>\n\n<ul>\n<li>举例说明</li>\n</ul>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">/*\n这\n是\n一个\n多行注释\n*/</span></code></pre></li>\n</ol>\n<ul>\n<li>使用细节<ul>\n<li>对于行注释和块注释，被注释的文字，不会被Go编译器执行。</li>\n<li>块注释里不允许有块注释嵌套。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"规范的代码风格\"><a href=\"#规范的代码风格\" class=\"headerlink\" title=\"规范的代码风格\"></a>规范的代码风格</h2><h3 id=\"正确的注释和注释风格\"><a href=\"#正确的注释和注释风格\" class=\"headerlink\" title=\"正确的注释和注释风格\"></a>正确的注释和注释风格</h3><ol>\n<li>Go官方推荐使用行注释来注释整个方法和语句</li>\n<li>可以看Go源码中的注释的风格</li>\n</ol>\n<h3 id=\"正确的缩进和空白\"><a href=\"#正确的缩进和空白\" class=\"headerlink\" title=\"正确的缩进和空白\"></a>正确的缩进和空白</h3><ol>\n<li>在VSCode中，使用tab进行代码缩进，默认整体朝右边移动，使用shift+tab可以真git向左移动。</li>\n<li>使用gofmt来进行代码的格式化，如图所示：</li>\n</ol>\n<p><img src=\"http://cdn.leafii.top/img/20220520155232.png\"></p>\n<ol start=\"3\">\n<li>运算符两边习惯性各加一个空格，如：2 + 4 * 5</li>\n<li>Go语言代码风格辨析：</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello,Go!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//上面的写法是正确的</span>\n<span class=\"token comment\">//下面的写法是错误的，Go语言不支持这种写法</span>\n<span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"姓名\\t年龄\\t籍贯\\t住址\\njohn\\t12\\t河北\\t北京\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><strong>Go语言设计者希望在一个问题上尽量只有一个解决方法</strong></p>\n<ol start=\"5\">\n<li>一行最长不超过80个字符，超过的请使用换行展示，尽量保持格式优雅。比如：</li>\n</ol>\n<pre class=\"language-go\" data-language=\"go\"><code class=\"language-go\">fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHe\\n\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"lloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWor\\n\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"ldHelloWorldHelloWorldHelloWorld\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<hr>\n<h2 id=\"知识点总结-x2F-回顾\"><a href=\"#知识点总结-x2F-回顾\" class=\"headerlink\" title=\"知识点总结&#x2F;回顾\"></a>知识点总结&#x2F;回顾</h2><p><img src=\"http://cdn.leafii.top/img/20220520155252.png\"></p>\n<p><img src=\"http://cdn.leafii.top/img/20220520155308.png\"></p>\n<hr>\n<h2 id=\"API-x2F-指南的链接\"><a href=\"#API-x2F-指南的链接\" class=\"headerlink\" title=\"API&#x2F;指南的链接\"></a>API&#x2F;指南的链接</h2><p>Golang简体中文官方编程指南<a href=\"https://tour.go-zh.org/welcome/1\">地址</a></p>\n<p>Golang中文网 <a href=\"https://studygolang.com/pkgdoc\">在线标准库文档</a></p>\n<p>Golang官方标准API文档<a href=\"https://golang.org.pkg/\">地址</a> </p>\n<p><strong>API:application program interface:应用程序编程接口，也就是我们GO各个包里的各个函数</strong></p>\n<p><strong>Golang中调用函数的方式是<code>import 包</code>，然后使用<code>包名.函数名</code> 进行函数的调用</strong></p>\n<hr>","categories":[],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}