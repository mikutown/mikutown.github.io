{"title":"算法练习-35-Stack应用之逆序输出-(1.3.6)","slug":"算法练习-35-Stack应用之逆序输出-(1.3.6)","date":"2021-02-08T05:45:13.000Z","updated":"2021-02-08T06:00:31.560Z","comments":true,"path":"api/articles/算法练习-35-Stack应用之逆序输出-(1.3.6).json","excerpt":"算法练习-35-Stack应用之逆序输出-(1.3.6)知识点    Queue逆序","covers":null,"content":"<h1 id=\"算法练习-35-Stack应用之逆序输出-1-3-6\"><a href=\"#算法练习-35-Stack应用之逆序输出-1-3-6\" class=\"headerlink\" title=\"算法练习-35-Stack应用之逆序输出-(1.3.6)\"></a>算法练习-35-Stack应用之逆序输出-(1.3.6)</h1><ul>\n<li>知识点    <ul>\n<li>Queue逆序</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><strong>1.3.6 下面这段代码对队列q进行了什么操作？</strong></p>\n<hr>\n<p><strong>1.3.6 What does the following code fragment do to the queue q?</strong></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//q.dequeue():删除最早添加的元素</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//q.enqueue():添加一个元素</span></code></pre>\n<ul>\n<li><p>分析&amp;答案</p>\n<p>队列是先进先出，当队列不为空时，将队列最早添加的元素出队，并将这个元素入栈，直到队列为空为止，此时栈中的元素就是队列中的所有的元素，栈底的元素就是队列最先出队的元素（也是最先入队的元素），于是当上一个while循环结束后，当栈不为空时，将栈顶的元素出栈，并且入队，此时队首的元素就是当初最后一个入队的元素，以此类推，到最后栈为空时，队列中的元素的先后顺序与刚开始的时候相反，即逆序输出了队列元素。</p>\n</li>\n</ul>\n","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><strong>1.3.6 下面这段代码对队列q进行了什么操作？</strong></p>\n<hr>\n<p><strong>1.3.6 What does the following code fragment do to the queue q?</strong></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//q.dequeue():删除最早添加的元素</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//q.enqueue():添加一个元素</span></code></pre>\n<ul>\n<li><p>分析&amp;答案</p>\n<p>队列是先进先出，当队列不为空时，将队列最早添加的元素出队，并将这个元素入栈，直到队列为空为止，此时栈中的元素就是队列中的所有的元素，栈底的元素就是队列最先出队的元素（也是最先入队的元素），于是当上一个while循环结束后，当栈不为空时，将栈顶的元素出栈，并且入队，此时队首的元素就是当初最后一个入队的元素，以此类推，到最后栈为空时，队列中的元素的先后顺序与刚开始的时候相反，即逆序输出了队列元素。</p>\n</li>\n</ul>","categories":[],"tags":[{"name":"算法","path":"api/tags/算法.json"}]}