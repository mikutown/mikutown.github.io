{"title":"leetcode455.分发饼干","slug":"leetcode455-分发饼干","date":"2023-02-19T05:35:55.000Z","updated":"2023-02-19T05:58:44.157Z","comments":true,"path":"api/articles/leetcode455-分发饼干.json","excerpt":"题目假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] &gt;= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。","covers":null,"content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p>\n<p>对每个孩子 <code>i</code>，都有一个胃口值 <code>g[i]</code>，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 <code>j</code>，都有一个尺寸 <code>s[j]</code> 。如果 <code>s[j] &gt;= g[i]</code>，我们可以将这个饼干 <code>j</code> 分配给孩子 <code>i</code> ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p>\n<span id=\"more\"></span> \n\n<p><strong>示例 1:</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入: g &#x3D; [1,2,3], s &#x3D; [1,1]\n输出: 1\n解释: \n你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。\n虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。\n所以你应该输出1。</code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入: g &#x3D; [1,2], s &#x3D; [1,2,3]\n输出: 2\n解释: \n你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。\n你拥有的饼干数量和尺寸都足以让所有孩子满足。\n所以你应该输出2.</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= g.length &lt;= 3 * 104</code></li>\n<li><code>0 &lt;= s.length &lt;= 3 * 104</code></li>\n<li><code>1 &lt;= g[i], s[j] &lt;= 231 - 1</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ol>\n<li>初见思路</li>\n</ol>\n<p>对两个数组进行排序，然后使用双层for循环进行贪心的遍历查找；C++实现代码如下，但是显然还有优化空间。</p>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    int findContentChildren(vector&lt;int&gt;&amp; g, vector&lt;int&gt;&amp; s) &#123;\n        sort(g.begin(), g.end());\n        sort(s.begin(), s.end()); &#x2F;&#x2F;排列数组\n        int result &#x3D; 0;\n        for (int i &#x3D; 0; i &lt; g.size(); i++) &#123;\n            for (int j &#x3D; 0; j &lt; s.size(); j++) &#123;\n                if (s[j] &gt;&#x3D; g[i]) &#123;\n                    &#x2F;&#x2F; 如果满足条件，则result++,且修改s中的数值。\n                    &#x2F;&#x2F; g中的无需修改，因为循环会继续\n                    result++;\n                    s[j] &#x3D; -1;\n                    break;\n                &#125;\n            &#125;\n        &#125;\n        return result;     \n    &#125;\n&#125;;</code></pre>\n\n<ol start=\"2\">\n<li>使用双指针优化刚才的双层for循环，C++代码实现如下：</li>\n</ol>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    int findContentChildren(vector&lt;int&gt;&amp; g, vector&lt;int&gt;&amp; s) &#123;\n        sort(g.begin(), g.end());\n        sort(s.begin(), s.end()); &#x2F;&#x2F;排列数组\n        int result &#x3D; 0;\n        int i &#x3D; 0, j &#x3D; 0;\n        while (i &lt; g.size() &amp;&amp; j &lt; s.size()) &#123;\n            if (s[j] &gt;&#x3D; g[i]) &#123;\n                result++;\n                i++;\n                j++;            \n            &#125;\n            else j++;\n        &#125;\n        return result;     \n    &#125;\n&#125;;</code></pre>\n\n","more":"<p><strong>示例 1:</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入: g &#x3D; [1,2,3], s &#x3D; [1,1]\n输出: 1\n解释: \n你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。\n虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。\n所以你应该输出1。</code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入: g &#x3D; [1,2], s &#x3D; [1,2,3]\n输出: 2\n解释: \n你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。\n你拥有的饼干数量和尺寸都足以让所有孩子满足。\n所以你应该输出2.</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= g.length &lt;= 3 * 104</code></li>\n<li><code>0 &lt;= s.length &lt;= 3 * 104</code></li>\n<li><code>1 &lt;= g[i], s[j] &lt;= 231 - 1</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ol>\n<li>初见思路</li>\n</ol>\n<p>对两个数组进行排序，然后使用双层for循环进行贪心的遍历查找；C++实现代码如下，但是显然还有优化空间。</p>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    int findContentChildren(vector&lt;int&gt;&amp; g, vector&lt;int&gt;&amp; s) &#123;\n        sort(g.begin(), g.end());\n        sort(s.begin(), s.end()); &#x2F;&#x2F;排列数组\n        int result &#x3D; 0;\n        for (int i &#x3D; 0; i &lt; g.size(); i++) &#123;\n            for (int j &#x3D; 0; j &lt; s.size(); j++) &#123;\n                if (s[j] &gt;&#x3D; g[i]) &#123;\n                    &#x2F;&#x2F; 如果满足条件，则result++,且修改s中的数值。\n                    &#x2F;&#x2F; g中的无需修改，因为循环会继续\n                    result++;\n                    s[j] &#x3D; -1;\n                    break;\n                &#125;\n            &#125;\n        &#125;\n        return result;     \n    &#125;\n&#125;;</code></pre>\n\n<ol start=\"2\">\n<li>使用双指针优化刚才的双层for循环，C++代码实现如下：</li>\n</ol>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    int findContentChildren(vector&lt;int&gt;&amp; g, vector&lt;int&gt;&amp; s) &#123;\n        sort(g.begin(), g.end());\n        sort(s.begin(), s.end()); &#x2F;&#x2F;排列数组\n        int result &#x3D; 0;\n        int i &#x3D; 0, j &#x3D; 0;\n        while (i &lt; g.size() &amp;&amp; j &lt; s.size()) &#123;\n            if (s[j] &gt;&#x3D; g[i]) &#123;\n                result++;\n                i++;\n                j++;            \n            &#125;\n            else j++;\n        &#125;\n        return result;     \n    &#125;\n&#125;;</code></pre>","categories":[],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"}]}