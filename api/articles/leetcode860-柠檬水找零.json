{"title":"leetcode860.柠檬水找零","slug":"leetcode860-柠檬水找零","date":"2023-02-20T08:12:25.000Z","updated":"2023-02-20T08:13:18.262Z","comments":true,"path":"api/articles/leetcode860-柠檬水找零.json","excerpt":"题目在柠檬水摊上，每一杯柠檬水的售价为 5 美元。顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。注意，一开始你手头没有任何零钱。给你一个整数数组 bills ，其中 bills[i] 是第 i 位顾客付的账。如果你能给每位顾客正确找零，返回 true ，否则返回 false 。","covers":null,"content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>在柠檬水摊上，每一杯柠檬水的售价为 <code>5</code> 美元。顾客排队购买你的产品，（按账单 <code>bills</code> 支付的顺序）一次购买一杯。</p>\n<p>每位顾客只买一杯柠檬水，然后向你付 <code>5</code> 美元、<code>10</code> 美元或 <code>20</code> 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 <code>5</code> 美元。</p>\n<p>注意，一开始你手头没有任何零钱。</p>\n<p>给你一个整数数组 <code>bills</code> ，其中 <code>bills[i]</code> 是第 <code>i</code> 位顾客付的账。如果你能给每位顾客正确找零，返回 <code>true</code> ，否则返回 <code>false</code> 。</p>\n <span id=\"more\"></span>\n\n<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：bills &#x3D; [5,5,5,10,20]\n输出：true\n解释：\n前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。\n第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。\n第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。\n由于所有客户都得到了正确的找零，所以我们输出 true。</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：bills &#x3D; [5,5,10,10,20]\n输出：false\n解释：\n前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。\n对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。\n对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。\n由于不是每位顾客都得到了正确的找零，所以答案是 false。</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= bills.length &lt;= 105</code></li>\n<li><code>bills[i]</code> 不是 <code>5</code> 就是 <code>10</code> 或是 <code>20</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ol>\n<li>初见思路</li>\n</ol>\n<p>使用一个大小为2的数组存储5元和10元的数量，对数组进行遍历，最后返回相应的值。</p>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    bool lemonadeChange(vector&lt;int&gt;&amp; bills) &#123;\n        vector&lt;int&gt; count(2,0);\n        for (int i &#x3D; 0; i &lt; bills.size(); i++) &#123;\n            if (bills[i] &#x3D;&#x3D; 5) &#123;\n                count[0]++;\n            &#125;\n            else if (bills[i] &#x3D;&#x3D; 10) &#123;\n                if (count[0] !&#x3D; 0) &#123;\n                    count[0]--;\n                    count[1]++;\n                &#125;\n                else return false;\n            &#125;\n            else if (bills[i] &#x3D;&#x3D; 20)&#123;\n                &#x2F;&#x2F;20 usd&#39;s situation\n                if (count[1] &gt; 0 &amp;&amp; count[0] &gt; 0) &#123;\n                    count[0]--;\n                    count[1]--;\n                &#125;\n                else if (count[0] &gt;&#x3D; 3) &#123;\n                    count[0] -&#x3D; 3;\n                &#125;\n                else return false;\n            &#125;\n        &#125;\n        return true;\n    &#125;\n&#125;;</code></pre>\n\n","more":"<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：bills &#x3D; [5,5,5,10,20]\n输出：true\n解释：\n前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。\n第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。\n第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。\n由于所有客户都得到了正确的找零，所以我们输出 true。</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：bills &#x3D; [5,5,10,10,20]\n输出：false\n解释：\n前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。\n对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。\n对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。\n由于不是每位顾客都得到了正确的找零，所以答案是 false。</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= bills.length &lt;= 105</code></li>\n<li><code>bills[i]</code> 不是 <code>5</code> 就是 <code>10</code> 或是 <code>20</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ol>\n<li>初见思路</li>\n</ol>\n<p>使用一个大小为2的数组存储5元和10元的数量，对数组进行遍历，最后返回相应的值。</p>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    bool lemonadeChange(vector&lt;int&gt;&amp; bills) &#123;\n        vector&lt;int&gt; count(2,0);\n        for (int i &#x3D; 0; i &lt; bills.size(); i++) &#123;\n            if (bills[i] &#x3D;&#x3D; 5) &#123;\n                count[0]++;\n            &#125;\n            else if (bills[i] &#x3D;&#x3D; 10) &#123;\n                if (count[0] !&#x3D; 0) &#123;\n                    count[0]--;\n                    count[1]++;\n                &#125;\n                else return false;\n            &#125;\n            else if (bills[i] &#x3D;&#x3D; 20)&#123;\n                &#x2F;&#x2F;20 usd&#39;s situation\n                if (count[1] &gt; 0 &amp;&amp; count[0] &gt; 0) &#123;\n                    count[0]--;\n                    count[1]--;\n                &#125;\n                else if (count[0] &gt;&#x3D; 3) &#123;\n                    count[0] -&#x3D; 3;\n                &#125;\n                else return false;\n            &#125;\n        &#125;\n        return true;\n    &#125;\n&#125;;</code></pre>","categories":[],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"}]}