{"title":"leetcode122.买卖股票的最佳时机II","slug":"leetcode122-买卖股票的最佳时机II","date":"2023-02-16T08:36:11.000Z","updated":"2023-02-16T08:44:30.254Z","comments":true,"path":"api/articles/leetcode122-买卖股票的最佳时机II.json","excerpt":"题目给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。在每一天，你可以决定是否购买和&#x2F;或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。返回 你能获得的 最大 利润 。","covers":["http://cdn.leafii.top/img/image-20230216164402662.png"],"content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个整数数组 <code>prices</code> ，其中 <code>prices[i]</code> 表示某支股票第 <code>i</code> 天的价格。</p>\n<p>在每一天，你可以决定是否购买和&#x2F;或出售股票。你在任何时候 <strong>最多</strong> 只能持有 <strong>一股</strong> 股票。你也可以先购买，然后在 <strong>同一天</strong> 出售。</p>\n<p>返回 <em>你能获得的 <strong>最大</strong> 利润</em> 。</p>\n<span id=\"more\"></span>\n\n<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：prices &#x3D; [7,1,5,3,6,4]\n输出：7\n解释：在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 3 天（股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5 - 1 &#x3D; 4 。\n     随后，在第 4 天（股票价格 &#x3D; 3）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出, 这笔交易所能获得利润 &#x3D; 6 - 3 &#x3D; 3 。\n     总利润为 4 + 3 &#x3D; 7 。</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：prices &#x3D; [1,2,3,4,5]\n输出：4\n解释：在第 1 天（股票价格 &#x3D; 1）的时候买入，在第 5 天 （股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5 - 1 &#x3D; 4 。\n     总利润为 4 。</code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：prices &#x3D; [7,6,4,3,1]\n输出：0\n解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0 。</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= prices.length &lt;= 3 * 104</code></li>\n<li><code>0 &lt;= prices[i] &lt;= 104</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ol>\n<li><p>使用贪心法</p>\n<p>为什么要使用贪心法？因为题目明确暗示了：“你在任何时候 <strong>最多</strong> 只能持有 <strong>一股</strong> 股票。你也可以先购买，然后在 <strong>同一天</strong> 出售。”</p>\n<p>因此解题思路如下：首先定义一个整形变量result用于存储结果，接着从左向右遍历数组price,若<code>price[i] &lt; price[i+1]</code>，则说明第i天的价格低于第i+1天的价格，此时可以在第i天购买股票然后在第i+1天卖出，将卖出的价格减去前一天买入的价格的差值加到result中，然后继续向右遍历，直至遍历结束，返回result.</p>\n</li>\n</ol>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    int maxProfit(vector&lt;int&gt;&amp; prices) &#123;\n        int n &#x3D; prices.size();\n        int result &#x3D; 0;\n        for (int i &#x3D; 0; i &lt; n - 1; i++) &#123;\n            int j &#x3D; i + 1;\n            if (prices[j] &gt; prices[i]) &#123;\n                result &#x3D; result - prices[i] + prices[j];\n            &#125;\n        &#125;\n        return result;\n    &#125;\n&#125;;</code></pre>\n\n<p>虽然走了一些弯路，但是还是做出来了，所以… 稍微得瑟一下：</p>\n<p><img src=\"http://cdn.leafii.top/img/image-20230216164402662.png\" alt=\"image-20230216164402662\" loading=\"lazy\"></p>\n","more":"<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：prices &#x3D; [7,1,5,3,6,4]\n输出：7\n解释：在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 3 天（股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5 - 1 &#x3D; 4 。\n     随后，在第 4 天（股票价格 &#x3D; 3）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出, 这笔交易所能获得利润 &#x3D; 6 - 3 &#x3D; 3 。\n     总利润为 4 + 3 &#x3D; 7 。</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：prices &#x3D; [1,2,3,4,5]\n输出：4\n解释：在第 1 天（股票价格 &#x3D; 1）的时候买入，在第 5 天 （股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5 - 1 &#x3D; 4 。\n     总利润为 4 。</code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：prices &#x3D; [7,6,4,3,1]\n输出：0\n解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0 。</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= prices.length &lt;= 3 * 104</code></li>\n<li><code>0 &lt;= prices[i] &lt;= 104</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ol>\n<li><p>使用贪心法</p>\n<p>为什么要使用贪心法？因为题目明确暗示了：“你在任何时候 <strong>最多</strong> 只能持有 <strong>一股</strong> 股票。你也可以先购买，然后在 <strong>同一天</strong> 出售。”</p>\n<p>因此解题思路如下：首先定义一个整形变量result用于存储结果，接着从左向右遍历数组price,若<code>price[i] &lt; price[i+1]</code>，则说明第i天的价格低于第i+1天的价格，此时可以在第i天购买股票然后在第i+1天卖出，将卖出的价格减去前一天买入的价格的差值加到result中，然后继续向右遍历，直至遍历结束，返回result.</p>\n</li>\n</ol>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    int maxProfit(vector&lt;int&gt;&amp; prices) &#123;\n        int n &#x3D; prices.size();\n        int result &#x3D; 0;\n        for (int i &#x3D; 0; i &lt; n - 1; i++) &#123;\n            int j &#x3D; i + 1;\n            if (prices[j] &gt; prices[i]) &#123;\n                result &#x3D; result - prices[i] + prices[j];\n            &#125;\n        &#125;\n        return result;\n    &#125;\n&#125;;</code></pre>\n\n<p>虽然走了一些弯路，但是还是做出来了，所以… 稍微得瑟一下：</p>\n<p><img src=\"http://cdn.leafii.top/img/image-20230216164402662.png\" alt=\"image-20230216164402662\"></p>","categories":[],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"}]}