{"title":"leetcode100.相同的树","slug":"leetcode100-相同的树","date":"2023-02-13T07:14:04.000Z","updated":"2023-02-13T07:22:47.724Z","comments":true,"path":"api/articles/leetcode100-相同的树.json","excerpt":"题目给你两棵二叉树的根节点 p 和 q ，编写一个函数来检验这两棵树是否相同。如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。","covers":["http://cdn.leafii.top/img/ex1.jpg","http://cdn.leafii.top/img/ex2.jpg","http://cdn.leafii.top/img/ex3.jpg"],"content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你两棵二叉树的根节点 <code>p</code> 和 <code>q</code> ，编写一个函数来检验这两棵树是否相同。</p>\n<p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p>\n<span id=\"more\"></span>\n\n<p><strong>示例 1：</strong></p>\n<p><img src=\"http://cdn.leafii.top/img/ex1.jpg\" alt=\"img\" loading=\"lazy\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：p &#x3D; [1,2,3], q &#x3D; [1,2,3]\n输出：true</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"http://cdn.leafii.top/img/ex2.jpg\" alt=\"img\" loading=\"lazy\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：p &#x3D; [1,2], q &#x3D; [1,null,2]\n输出：false</code></pre>\n\n<p><strong>示例 3：</strong></p>\n<p><img src=\"http://cdn.leafii.top/img/ex3.jpg\" alt=\"img\" loading=\"lazy\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：p &#x3D; [1,2,1], q &#x3D; [1,1,2]\n输出：false</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>两棵树上的节点数目都在范围 <code>[0, 100]</code> 内</li>\n<li><code>-104 &lt;= Node.val &lt;= 104</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><p>解题思路：</p>\n<p>题目要求判断两棵树是否完全相同。</p>\n<p>我们可以使用递归的方法，递归判断两棵树的根节点是否相同，以及它们的左子树和右子树是否相同。</p>\n<p>如果两棵树都为空，则返回 true。如果有一棵树为空，另一棵树不为空，则返回 false。如果两棵树的根节点的值不相等，则返回 false。</p>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;**\n * Definition for a binary tree node.\n * struct TreeNode &#123;\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;\n * &#125;;\n *&#x2F;\nclass Solution &#123;\npublic:\n    &#x2F;&#x2F; 递归函数，判断两棵树是否相同\n    bool isSameTree(TreeNode* p, TreeNode* q) &#123;\n        &#x2F;&#x2F; 如果两棵树都为空，则返回 true\n        if (!p &amp;&amp; !q) return true;\n        &#x2F;&#x2F; 如果有一棵树为空，另一棵树不为空，则返回 false\n        if (!p || !q) return false;\n        &#x2F;&#x2F; 如果两棵树的根节点的值不相等，则返回 false\n        if (p-&gt;val !&#x3D; q-&gt;val) return false;\n        &#x2F;&#x2F; 递归判断两棵树的左子树和右子树是否相同\n        return isSameTree(p-&gt;left, q-&gt;left) &amp;&amp; isSameTree(p-&gt;right, q-&gt;right);\n    &#125;\n&#125;;</code></pre>\n\n<p>可以将代码简化为：</p>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;**\n * Definition for a binary tree node.\n * struct TreeNode &#123;\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;\n * &#125;;\n *&#x2F;\nclass Solution &#123;\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) &#123;\n        &#x2F;&#x2F; 如果两棵树都为空或者都不为空且值相等，则继续递归\n        if (!p &amp;&amp; !q) return true;\n        if (p &amp;&amp; q &amp;&amp; p-&gt;val &#x3D;&#x3D; q-&gt;val)\n            return isSameTree(p-&gt;left, q-&gt;left) &amp;&amp; isSameTree(p-&gt;right, q-&gt;right);\n        &#x2F;&#x2F; 否则，返回 false\n        return false;\n    &#125;\n&#125;;\n</code></pre>\n\n","more":"<p><strong>示例 1：</strong></p>\n<p><img src=\"http://cdn.leafii.top/img/ex1.jpg\" alt=\"img\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：p &#x3D; [1,2,3], q &#x3D; [1,2,3]\n输出：true</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"http://cdn.leafii.top/img/ex2.jpg\" alt=\"img\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：p &#x3D; [1,2], q &#x3D; [1,null,2]\n输出：false</code></pre>\n\n<p><strong>示例 3：</strong></p>\n<p><img src=\"http://cdn.leafii.top/img/ex3.jpg\" alt=\"img\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：p &#x3D; [1,2,1], q &#x3D; [1,1,2]\n输出：false</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>两棵树上的节点数目都在范围 <code>[0, 100]</code> 内</li>\n<li><code>-104 &lt;= Node.val &lt;= 104</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><p>解题思路：</p>\n<p>题目要求判断两棵树是否完全相同。</p>\n<p>我们可以使用递归的方法，递归判断两棵树的根节点是否相同，以及它们的左子树和右子树是否相同。</p>\n<p>如果两棵树都为空，则返回 true。如果有一棵树为空，另一棵树不为空，则返回 false。如果两棵树的根节点的值不相等，则返回 false。</p>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;**\n * Definition for a binary tree node.\n * struct TreeNode &#123;\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;\n * &#125;;\n *&#x2F;\nclass Solution &#123;\npublic:\n    &#x2F;&#x2F; 递归函数，判断两棵树是否相同\n    bool isSameTree(TreeNode* p, TreeNode* q) &#123;\n        &#x2F;&#x2F; 如果两棵树都为空，则返回 true\n        if (!p &amp;&amp; !q) return true;\n        &#x2F;&#x2F; 如果有一棵树为空，另一棵树不为空，则返回 false\n        if (!p || !q) return false;\n        &#x2F;&#x2F; 如果两棵树的根节点的值不相等，则返回 false\n        if (p-&gt;val !&#x3D; q-&gt;val) return false;\n        &#x2F;&#x2F; 递归判断两棵树的左子树和右子树是否相同\n        return isSameTree(p-&gt;left, q-&gt;left) &amp;&amp; isSameTree(p-&gt;right, q-&gt;right);\n    &#125;\n&#125;;</code></pre>\n\n<p>可以将代码简化为：</p>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;**\n * Definition for a binary tree node.\n * struct TreeNode &#123;\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;\n * &#125;;\n *&#x2F;\nclass Solution &#123;\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) &#123;\n        &#x2F;&#x2F; 如果两棵树都为空或者都不为空且值相等，则继续递归\n        if (!p &amp;&amp; !q) return true;\n        if (p &amp;&amp; q &amp;&amp; p-&gt;val &#x3D;&#x3D; q-&gt;val)\n            return isSameTree(p-&gt;left, q-&gt;left) &amp;&amp; isSameTree(p-&gt;right, q-&gt;right);\n        &#x2F;&#x2F; 否则，返回 false\n        return false;\n    &#125;\n&#125;;\n</code></pre>","categories":[],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"}]}