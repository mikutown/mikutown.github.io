{"title":"leetcode:27.移除元素","slug":"leetcode-27-移除元素","date":"2023-01-26T06:02:42.000Z","updated":"2023-01-26T06:20:07.123Z","comments":true,"path":"api/articles/leetcode-27-移除元素.json","excerpt":"题目描述给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。","covers":null,"content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地 </a>修改输入数组</strong>。</p>\n<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>\n<span id=\"more\"></span>\n\n<p><strong>说明:</strong></p>\n<p>为什么返回数值是整数，但输出的答案是数组呢?</p>\n<p>请注意，输入数组是以<strong>「引用」</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>\n<p>你可以想象内部操作如下:</p>\n<pre class=\"language-none\"><code class=\"language-none\">&#x2F;&#x2F; nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝\nint len &#x3D; removeElement(nums, val);\n\n&#x2F;&#x2F; 在函数里修改输入数组对于调用者是可见的。\n&#x2F;&#x2F; 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。\nfor (int i &#x3D; 0; i &lt; len; i++) &#123;\n    print(nums[i]);\n&#125;</code></pre>\n\n<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：nums &#x3D; [3,2,2,3], val &#x3D; 3\n输出：2, nums &#x3D; [2,2]\n解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums &#x3D; [2,2,3,3] 或 nums &#x3D; [2,2,0,0]，也会被视作正确答案。</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2\n输出：5, nums &#x3D; [0,1,4,0,3]\n解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>0 &lt;= nums.length &lt;= 100</code></li>\n<li><code>0 &lt;= nums[i] &lt;= 50</code></li>\n<li><code>0 &lt;= val &lt;= 100</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ol>\n<li><p>双指针直接遍历</p>\n<p>使用双指针，左指针为要被修改的元素，右指针为遍历主体，判断元素是否为<code>val</code>。最后返回left即可。C++代码实现如下：</p>\n</li>\n</ol>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    int removeElement(vector&lt;int&gt;&amp; nums, int val) &#123;\n        &#x2F;&#x2F;双指针\n        int n &#x3D; nums.size();\n        int left &#x3D; 0;\n        for(int right &#x3D; 0; right &lt; n; right++) &#123;\n            if(nums[right] !&#x3D; val) &#123;\n                nums[left] &#x3D; nums[right];\n                left++;\n            &#125;\n        &#125;\n        return left;\n    &#125;\n&#125;;</code></pre>\n\n<ol start=\"2\">\n<li><p>双指针优化</p>\n<p>初始化两个指针时，左指针为0，右指针为数组的最后一个元素，然后从两边向中间遍历.C++代码实现如下：</p>\n</li>\n</ol>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    int removeElement(vector&lt;int&gt;&amp; nums, int val) &#123;\n        int left &#x3D; 0, right &#x3D; nums.size();\n        while(left &lt; right) &#123;\n            if(nums[left] &#x3D;&#x3D; val) &#123;\n                nums[left] &#x3D; nums[right - 1];\n                right--;\n            &#125;\n            else &#123;\n                left++;\n            &#125;\n        &#125;\n        return left;\n    &#125;\n&#125;;</code></pre>\n\n","more":"<p><strong>说明:</strong></p>\n<p>为什么返回数值是整数，但输出的答案是数组呢?</p>\n<p>请注意，输入数组是以<strong>「引用」</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>\n<p>你可以想象内部操作如下:</p>\n<pre class=\"language-none\"><code class=\"language-none\">&#x2F;&#x2F; nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝\nint len &#x3D; removeElement(nums, val);\n\n&#x2F;&#x2F; 在函数里修改输入数组对于调用者是可见的。\n&#x2F;&#x2F; 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。\nfor (int i &#x3D; 0; i &lt; len; i++) &#123;\n    print(nums[i]);\n&#125;</code></pre>\n\n<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：nums &#x3D; [3,2,2,3], val &#x3D; 3\n输出：2, nums &#x3D; [2,2]\n解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums &#x3D; [2,2,3,3] 或 nums &#x3D; [2,2,0,0]，也会被视作正确答案。</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2\n输出：5, nums &#x3D; [0,1,4,0,3]\n解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>0 &lt;= nums.length &lt;= 100</code></li>\n<li><code>0 &lt;= nums[i] &lt;= 50</code></li>\n<li><code>0 &lt;= val &lt;= 100</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ol>\n<li><p>双指针直接遍历</p>\n<p>使用双指针，左指针为要被修改的元素，右指针为遍历主体，判断元素是否为<code>val</code>。最后返回left即可。C++代码实现如下：</p>\n</li>\n</ol>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    int removeElement(vector&lt;int&gt;&amp; nums, int val) &#123;\n        &#x2F;&#x2F;双指针\n        int n &#x3D; nums.size();\n        int left &#x3D; 0;\n        for(int right &#x3D; 0; right &lt; n; right++) &#123;\n            if(nums[right] !&#x3D; val) &#123;\n                nums[left] &#x3D; nums[right];\n                left++;\n            &#125;\n        &#125;\n        return left;\n    &#125;\n&#125;;</code></pre>\n\n<ol start=\"2\">\n<li><p>双指针优化</p>\n<p>初始化两个指针时，左指针为0，右指针为数组的最后一个元素，然后从两边向中间遍历.C++代码实现如下：</p>\n</li>\n</ol>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    int removeElement(vector&lt;int&gt;&amp; nums, int val) &#123;\n        int left &#x3D; 0, right &#x3D; nums.size();\n        while(left &lt; right) &#123;\n            if(nums[left] &#x3D;&#x3D; val) &#123;\n                nums[left] &#x3D; nums[right - 1];\n                right--;\n            &#125;\n            else &#123;\n                left++;\n            &#125;\n        &#125;\n        return left;\n    &#125;\n&#125;;</code></pre>","categories":[],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"}]}