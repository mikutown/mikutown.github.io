{"title":"leetcode1447.最简分数","slug":"leetcode1447-最简分数","date":"2023-11-03T12:21:39.000Z","updated":"2023-11-03T12:22:35.426Z","comments":true,"path":"api/articles/leetcode1447-最简分数.json","excerpt":"题目给你一个整数 n ，请你返回所有 0 到 1 之间（不包括 0 和 1）满足分母小于等于 n 的 最简 分数 。分数可以以 任意 顺序返回。","covers":null,"content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个整数 <code>n</code> ，请你返回所有 0 到 1 之间（不包括 0 和 1）满足分母小于等于 <code>n</code> 的 <strong>最简</strong> 分数 。分数可以以 <strong>任意</strong> 顺序返回。</p>\n <span id=\"more\"></span>\n\n<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 2\n输出：[&quot;1&#x2F;2&quot;]\n解释：&quot;1&#x2F;2&quot; 是唯一一个分母小于等于 2 的最简分数。</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 3\n输出：[&quot;1&#x2F;2&quot;,&quot;1&#x2F;3&quot;,&quot;2&#x2F;3&quot;]</code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 4\n输出：[&quot;1&#x2F;2&quot;,&quot;1&#x2F;3&quot;,&quot;1&#x2F;4&quot;,&quot;2&#x2F;3&quot;,&quot;3&#x2F;4&quot;]\n解释：&quot;2&#x2F;4&quot; 不是最简分数，因为它可以化简为 &quot;1&#x2F;2&quot; 。</code></pre>\n\n<p><strong>示例 4：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 1\n输出：[]</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= n &lt;= 100</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ul>\n<li>利用自己写的最大公约数函数直接求解即可</li>\n</ul>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    int getGCD(int x, int y) &#123;\n        int z &#x3D; y;\n        while (x % y !&#x3D; 0) &#123;\n            z &#x3D; x % y;\n            x &#x3D; y;\n            y &#x3D; z;\n        &#125;\n        return z;\n    &#125;\n    vector&lt;string&gt; simplifiedFractions(int n) &#123;\n        vector&lt;string&gt; results;\n        if (n &gt; 1) &#123;\n            int numerator &#x3D; 1;\n            int denominator &#x3D; 2;\n            for (int numerator &#x3D; 1; numerator &lt;&#x3D; n - 1; numerator++) &#123;\n                for (int denominator &#x3D; numerator + 1; denominator &lt;&#x3D; n; denominator++) &#123;\n                    if(getGCD(numerator, denominator)&#x3D;&#x3D;1) &#123;\n                        &#x2F;&#x2F; 如果是最简分数\n                        string temp &#x3D; to_string(numerator) + &quot;&#x2F;&quot; + to_string(denominator);\n                        results.push_back(temp);\n                    &#125;\n                &#125;\n            &#125;\n        &#125;\n        return results;\n    &#125;\n&#125;;</code></pre>\n\n\n\n","more":"<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 2\n输出：[&quot;1&#x2F;2&quot;]\n解释：&quot;1&#x2F;2&quot; 是唯一一个分母小于等于 2 的最简分数。</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 3\n输出：[&quot;1&#x2F;2&quot;,&quot;1&#x2F;3&quot;,&quot;2&#x2F;3&quot;]</code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 4\n输出：[&quot;1&#x2F;2&quot;,&quot;1&#x2F;3&quot;,&quot;1&#x2F;4&quot;,&quot;2&#x2F;3&quot;,&quot;3&#x2F;4&quot;]\n解释：&quot;2&#x2F;4&quot; 不是最简分数，因为它可以化简为 &quot;1&#x2F;2&quot; 。</code></pre>\n\n<p><strong>示例 4：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 1\n输出：[]</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= n &lt;= 100</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ul>\n<li>利用自己写的最大公约数函数直接求解即可</li>\n</ul>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    int getGCD(int x, int y) &#123;\n        int z &#x3D; y;\n        while (x % y !&#x3D; 0) &#123;\n            z &#x3D; x % y;\n            x &#x3D; y;\n            y &#x3D; z;\n        &#125;\n        return z;\n    &#125;\n    vector&lt;string&gt; simplifiedFractions(int n) &#123;\n        vector&lt;string&gt; results;\n        if (n &gt; 1) &#123;\n            int numerator &#x3D; 1;\n            int denominator &#x3D; 2;\n            for (int numerator &#x3D; 1; numerator &lt;&#x3D; n - 1; numerator++) &#123;\n                for (int denominator &#x3D; numerator + 1; denominator &lt;&#x3D; n; denominator++) &#123;\n                    if(getGCD(numerator, denominator)&#x3D;&#x3D;1) &#123;\n                        &#x2F;&#x2F; 如果是最简分数\n                        string temp &#x3D; to_string(numerator) + &quot;&#x2F;&quot; + to_string(denominator);\n                        results.push_back(temp);\n                    &#125;\n                &#125;\n            &#125;\n        &#125;\n        return results;\n    &#125;\n&#125;;</code></pre>","categories":[],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"}]}