{"title":"leetcode74.搜索二维矩阵","slug":"leetcode74-搜索二维矩阵","date":"2024-01-17T01:28:37.000Z","updated":"2024-01-17T01:31:14.804Z","comments":true,"path":"api/articles/leetcode74-搜索二维矩阵.json","excerpt":"题目给你一个满足下述两条属性的 m x n 整数矩阵：每行中的整数从左到右按非严格递增顺序排列。每行的第一个整数大于前一行的最后一个整数。给你一个整数 target ，如果 target 在矩阵中，返回 true ；否则，返回 false 。","covers":["http://cdn.leafii.top/img/mat.jpg","http://cdn.leafii.top/img/mat2.jpg"],"content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个满足下述两条属性的 <code>m x n</code> 整数矩阵：</p>\n<ul>\n<li>每行中的整数从左到右按非严格递增顺序排列。</li>\n<li>每行的第一个整数大于前一行的最后一个整数。</li>\n</ul>\n<p>给你一个整数 <code>target</code> ，如果 <code>target</code> 在矩阵中，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n <span id=\"more\"></span>\n\n<p><strong>示例 1：</strong></p>\n<p><img src=\"http://cdn.leafii.top/img/mat.jpg\" alt=\"img\" loading=\"lazy\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：matrix &#x3D; [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target &#x3D; 3\n输出：true</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"http://cdn.leafii.top/img/mat2.jpg\" alt=\"img\" loading=\"lazy\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：matrix &#x3D; [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target &#x3D; 13\n输出：false</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>m == matrix.length</code></li>\n<li><code>n == matrix[i].length</code></li>\n<li><code>1 &lt;= m, n &lt;= 100</code></li>\n<li><code>-104 &lt;= matrix[i][j], target &lt;= 104</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ul>\n<li>二分直接求解</li>\n</ul>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    bool searchMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) &#123;\n        int m &#x3D; matrix.size();\n        if (m &#x3D;&#x3D; 0) return false;\n        int n &#x3D; matrix[0].size();\n\n        &#x2F;&#x2F; 选择合适的行\n        int low &#x3D; 0, high &#x3D; m - 1;\n        while (low &lt;&#x3D; high) &#123;\n            int mid &#x3D; low + (high - low) &#x2F; 2;\n            if (matrix[mid][0] &#x3D;&#x3D; target) return true;\n            if (matrix[mid][0] &gt; target) high &#x3D; mid - 1;\n            else if (matrix[mid][n - 1] &lt; target) low &#x3D; mid + 1;\n            else &#123;\n                &#x2F;&#x2F; 执行该行内的二分查找\n                int rowLow &#x3D; 0, rowHigh &#x3D; n - 1;\n                while (rowLow &lt;&#x3D; rowHigh) &#123;\n                    int rowMid &#x3D; rowLow + (rowHigh - rowLow) &#x2F; 2;\n                    if (matrix[mid][rowMid] &#x3D;&#x3D; target) return true;\n                    if (matrix[mid][rowMid] &gt; target) rowHigh &#x3D; rowMid - 1;\n                    else rowLow &#x3D; rowMid + 1;\n                &#125;\n                return false;\n            &#125;\n        &#125;\n        return false;\n    &#125;\n&#125;;</code></pre>\n\n","more":"<p><strong>示例 1：</strong></p>\n<p><img src=\"http://cdn.leafii.top/img/mat.jpg\" alt=\"img\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：matrix &#x3D; [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target &#x3D; 3\n输出：true</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"http://cdn.leafii.top/img/mat2.jpg\" alt=\"img\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：matrix &#x3D; [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target &#x3D; 13\n输出：false</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>m == matrix.length</code></li>\n<li><code>n == matrix[i].length</code></li>\n<li><code>1 &lt;= m, n &lt;= 100</code></li>\n<li><code>-104 &lt;= matrix[i][j], target &lt;= 104</code></li>\n</ul>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ul>\n<li>二分直接求解</li>\n</ul>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    bool searchMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) &#123;\n        int m &#x3D; matrix.size();\n        if (m &#x3D;&#x3D; 0) return false;\n        int n &#x3D; matrix[0].size();\n\n        &#x2F;&#x2F; 选择合适的行\n        int low &#x3D; 0, high &#x3D; m - 1;\n        while (low &lt;&#x3D; high) &#123;\n            int mid &#x3D; low + (high - low) &#x2F; 2;\n            if (matrix[mid][0] &#x3D;&#x3D; target) return true;\n            if (matrix[mid][0] &gt; target) high &#x3D; mid - 1;\n            else if (matrix[mid][n - 1] &lt; target) low &#x3D; mid + 1;\n            else &#123;\n                &#x2F;&#x2F; 执行该行内的二分查找\n                int rowLow &#x3D; 0, rowHigh &#x3D; n - 1;\n                while (rowLow &lt;&#x3D; rowHigh) &#123;\n                    int rowMid &#x3D; rowLow + (rowHigh - rowLow) &#x2F; 2;\n                    if (matrix[mid][rowMid] &#x3D;&#x3D; target) return true;\n                    if (matrix[mid][rowMid] &gt; target) rowHigh &#x3D; rowMid - 1;\n                    else rowLow &#x3D; rowMid + 1;\n                &#125;\n                return false;\n            &#125;\n        &#125;\n        return false;\n    &#125;\n&#125;;</code></pre>","categories":[],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"}]}