{"title":"算法练习-6-二项分布的递归实现(1.1.27)","slug":"算法练习-6-二项分布的递归实现-(1.1.27)","date":"2021-01-15T05:24:58.000Z","updated":"2021-01-15T12:27:41.410Z","comments":true,"path":"api/articles/算法练习-6-二项分布的递归实现-(1.1.27).json","excerpt":"算法练习-6-二项分布的递归实现-(1.1.27)知识点：二项分布","covers":["https://gitee.com/mikutown/pic/raw/master/img/image-20210115135839132.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210115135915178.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210115135935309.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210115135935309.png","https://gitee.com/mikutown/pic/raw/master/img/image-20210115140523866.png"],"content":"<h1 id=\"算法练习-6-二项分布的递归实现-1-1-27\"><a href=\"#算法练习-6-二项分布的递归实现-1-1-27\" class=\"headerlink\" title=\"算法练习-6-二项分布的递归实现-(1.1.27)\"></a>算法练习-6-二项分布的递归实现-(1.1.27)</h1><p>知识点：</p>\n<ul>\n<li>二项分布</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"1-1-27\"><a href=\"#1-1-27\" class=\"headerlink\" title=\"1.1.27\"></a>1.1.27</h2><h3 id=\"二项分布。\"><a href=\"#二项分布。\" class=\"headerlink\" title=\"二项分布。\"></a><strong>二项分布。</strong></h3><p><strong>1.1.27 二项分布。估计用以下代码计算binomial(100, 50)将会产生的递归调用次数:</strong></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> <span class=\"token function\">binomial</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> k <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n        <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> p<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">binomial</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p<span class=\"token operator\">*</span><span class=\"token function\">binomial</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p><strong>将已经计算过的值保存在数组中并给出一个更好的实现。</strong></p>\n<p><strong>1.1.27 Binomial distribution. Estimate the number of recursive calls that would be used by the code to compute binomial(100, 50). Develop a better implementation that is based on saving computed values in an array.</strong></p>\n<ul>\n<li>分析</li>\n</ul>\n<p>二项分布的含义：从N个独立的是&#x2F;非实验中，成功次数的离散概率分布。每次实验的成功概率为p。</p>\n<p>概率质量公式为：<img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210115135839132.png\" alt=\"image-20210115135839132\" loading=\"lazy\"></p>\n<p>对于k&#x3D;0，1，2…n 其中</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210115135915178.png\" alt=\"image-20210115135915178\" loading=\"lazy\"></p>\n<p>补充说明：<img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210115135935309.png\" alt=\"image-20210115135935309\" loading=\"lazy\"></p>\n<p>分析此递归算法：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> k <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n        <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></code></pre>\n<p>表示的就是这三个等式</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210115135935309.png\" alt=\"image-20210115135935309\" loading=\"lazy\"></p>\n<p>而<code> return (1.0 - p)*binomial(N-1, k, p) + p*binomial(N-1, k-1,p);</code>是因为<img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210115140523866.png\" alt=\"image-20210115140523866\" loading=\"lazy\"></p>\n<p>使用循环数组替换递归算法：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> <span class=\"token function\">binomial02</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">N</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;=</span>k<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p<span class=\"token operator\">*</span>b<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">[</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>分析： </p>\n<p>​    我们为数组b分配了（N+1）*（K+1）个大小的空间</p>\n<pre class=\"language-none\"><code class=\"language-none\"> b[0][0]  b[0][1]  b[0][2]  b[0][3]  b[0][4]  b[0][5]\n b[1][0]  b[1][1]  b[1][2]  b[1][3]  b[1][4]  b[1][5]\n b[2][0]  b[2][1]  b[2][2]  b[2][3]  b[2][4]  b[2][5]\n b[3][0]  b[3][1]  b[3][2]  b[3][3]  b[3][4]  b[3][5]\n b[4][0]  b[4][1]  b[4][2]  b[4][3]  b[4][4]  b[4][5]\n b[5][0]  b[5][1]  b[5][2]  b[5][3]  b[5][4]  b[5][5]\n b[6][0]  b[6][1]  b[6][2]  b[6][3]  b[6][4]  b[6][5]\n b[7][0]  b[7][1]  b[7][2]  b[7][3]  b[7][4]  b[7][5]\n b[8][0]  b[8][1]  b[8][2]  b[8][3]  b[8][4]  b[8][5]\n b[9][0]  b[9][1]  b[9][2]  b[9][3]  b[9][4]  b[9][5]\nb[10][0] b[10][1] b[10][2] b[10][3] b[10][4] b[10][5]</code></pre>\n<p>第一个for循环是为第一列进行赋值，双重循环并没有涉及第一行和第一列的赋值。我们可以看出 b[10][5] &#x3D; 0.25 * b[10-1][5-1] + 0.75 * b[10-1][5] ，而b[9][4] &#x3D;  0.25 * b[8][3] + 0.75 * b[8][4]</p>\n<p>b[9][5] &#x3D;  0.25 * b[8][4] + 0.75 * b[8][5]</p>\n<p>相当于 <code>return ( 1.0 - p ) * binomial(n-1, k, p) + p * binomial(n-1, k-1, p);</code> 也就是用循环数组的方式代替了递归调用。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://ddrv.cn/a/63651\">http://ddrv.cn/a/63651</a></p>\n<p><a href=\"https://zhangjia.tv/670.html\">https://zhangjia.tv/670.html</a> </p>\n","more":"<h2 id=\"1-1-27\"><a href=\"#1-1-27\" class=\"headerlink\" title=\"1.1.27\"></a>1.1.27</h2><h3 id=\"二项分布。\"><a href=\"#二项分布。\" class=\"headerlink\" title=\"二项分布。\"></a><strong>二项分布。</strong></h3><p><strong>1.1.27 二项分布。估计用以下代码计算binomial(100, 50)将会产生的递归调用次数:</strong></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> <span class=\"token function\">binomial</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> k <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n        <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> p<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">binomial</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p<span class=\"token operator\">*</span><span class=\"token function\">binomial</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p><strong>将已经计算过的值保存在数组中并给出一个更好的实现。</strong></p>\n<p><strong>1.1.27 Binomial distribution. Estimate the number of recursive calls that would be used by the code to compute binomial(100, 50). Develop a better implementation that is based on saving computed values in an array.</strong></p>\n<ul>\n<li>分析</li>\n</ul>\n<p>二项分布的含义：从N个独立的是&#x2F;非实验中，成功次数的离散概率分布。每次实验的成功概率为p。</p>\n<p>概率质量公式为：<img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210115135839132.png\" alt=\"image-20210115135839132\"></p>\n<p>对于k&#x3D;0，1，2…n 其中</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210115135915178.png\" alt=\"image-20210115135915178\"></p>\n<p>补充说明：<img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210115135935309.png\" alt=\"image-20210115135935309\"></p>\n<p>分析此递归算法：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> k <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n        <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></code></pre>\n<p>表示的就是这三个等式</p>\n<p><img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210115135935309.png\" alt=\"image-20210115135935309\"></p>\n<p>而<code> return (1.0 - p)*binomial(N-1, k, p) + p*binomial(N-1, k-1,p);</code>是因为<img src=\"https://gitee.com/mikutown/pic/raw/master/img/image-20210115140523866.png\" alt=\"image-20210115140523866\"></p>\n<p>使用循环数组替换递归算法：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> <span class=\"token function\">binomial02</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">N</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;=</span>k<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p<span class=\"token operator\">*</span>b<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">[</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>分析： </p>\n<p>​    我们为数组b分配了（N+1）*（K+1）个大小的空间</p>\n<pre class=\"language-none\"><code class=\"language-none\"> b[0][0]  b[0][1]  b[0][2]  b[0][3]  b[0][4]  b[0][5]\n b[1][0]  b[1][1]  b[1][2]  b[1][3]  b[1][4]  b[1][5]\n b[2][0]  b[2][1]  b[2][2]  b[2][3]  b[2][4]  b[2][5]\n b[3][0]  b[3][1]  b[3][2]  b[3][3]  b[3][4]  b[3][5]\n b[4][0]  b[4][1]  b[4][2]  b[4][3]  b[4][4]  b[4][5]\n b[5][0]  b[5][1]  b[5][2]  b[5][3]  b[5][4]  b[5][5]\n b[6][0]  b[6][1]  b[6][2]  b[6][3]  b[6][4]  b[6][5]\n b[7][0]  b[7][1]  b[7][2]  b[7][3]  b[7][4]  b[7][5]\n b[8][0]  b[8][1]  b[8][2]  b[8][3]  b[8][4]  b[8][5]\n b[9][0]  b[9][1]  b[9][2]  b[9][3]  b[9][4]  b[9][5]\nb[10][0] b[10][1] b[10][2] b[10][3] b[10][4] b[10][5]</code></pre>\n<p>第一个for循环是为第一列进行赋值，双重循环并没有涉及第一行和第一列的赋值。我们可以看出 b[10][5] &#x3D; 0.25 * b[10-1][5-1] + 0.75 * b[10-1][5] ，而b[9][4] &#x3D;  0.25 * b[8][3] + 0.75 * b[8][4]</p>\n<p>b[9][5] &#x3D;  0.25 * b[8][4] + 0.75 * b[8][5]</p>\n<p>相当于 <code>return ( 1.0 - p ) * binomial(n-1, k, p) + p * binomial(n-1, k-1, p);</code> 也就是用循环数组的方式代替了递归调用。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://ddrv.cn/a/63651\">http://ddrv.cn/a/63651</a></p>\n<p><a href=\"https://zhangjia.tv/670.html\">https://zhangjia.tv/670.html</a> </p>","categories":[],"tags":[{"name":"算法","path":"api/tags/算法.json"}]}