{"title":"leetcode141.环形链表","slug":"leetcode141-环形链表","date":"2023-03-05T08:19:39.000Z","updated":"2023-03-06T07:24:16.628Z","comments":true,"path":"api/articles/leetcode141-环形链表.json","excerpt":"题目给你一个链表的头节点 head ，判断链表中是否有环。如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。如果链表中存在环 ，则返回 true 。 否则，返回 false 。","covers":["http://cdn.leafii.top/img/circularlinkedlist.png","http://cdn.leafii.top/img/circularlinkedlist_test2.png","http://cdn.leafii.top/img/circularlinkedlist_test3.png"],"content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p>\n<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。<strong>注意：<code>pos</code> 不作为参数进行传递</strong> 。仅仅是为了标识链表的实际情况。</p>\n<p><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p>\n <span id=\"more\"></span>\n\n<p><strong>示例 1：</strong></p>\n<p><img src=\"http://cdn.leafii.top/img/circularlinkedlist.png\" alt=\"img\" loading=\"lazy\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：head &#x3D; [3,2,0,-4], pos &#x3D; 1\n输出：true\n解释：链表中有一个环，其尾部连接到第二个节点。</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"http://cdn.leafii.top/img/circularlinkedlist_test2.png\" alt=\"img\" loading=\"lazy\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：head &#x3D; [1,2], pos &#x3D; 0\n输出：true\n解释：链表中有一个环，其尾部连接到第一个节点。</code></pre>\n\n<p><strong>示例 3：</strong></p>\n<p><img src=\"http://cdn.leafii.top/img/circularlinkedlist_test3.png\" alt=\"img\" loading=\"lazy\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：head &#x3D; [1], pos &#x3D; -1\n输出：false\n解释：链表中没有环。</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>链表中节点的数目范围是 <code>[0, 104]</code></li>\n<li><code>-105 &lt;= Node.val &lt;= 105</code></li>\n<li><code>pos</code> 为 <code>-1</code> 或者链表中的一个 <strong>有效索引</strong> 。</li>\n</ul>\n<p><strong>进阶：</strong>你能用 <code>O(1)</code>（即，常量）内存解决此问题吗？</p>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ol>\n<li>使用快慢指针判断是否存在环，如果快指针走到了链表尾部，则直接返回false，若快指针追上了慢指针，则说明链表存在环。C++代码实现如下：</li>\n</ol>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;**\n * Definition for singly-linked list.\n * struct ListNode &#123;\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) &#123;&#125;\n * &#125;;\n *&#x2F;\nclass Solution &#123;\npublic:\n    bool hasCycle(ListNode *head) &#123;\n        if (head &#x3D;&#x3D; NULL || head-&gt;next &#x3D;&#x3D; NULL) return false;\n        ListNode* slow &#x3D; head;\n        ListNode* fast &#x3D; head-&gt;next;\n        while (fast !&#x3D; slow) &#123;\n            &#x2F;&#x2F; 若fast指针走至链表尾部\n            if (fast &#x3D;&#x3D; NULL || fast-&gt;next &#x3D;&#x3D; NULL) return false;\n            fast &#x3D; fast-&gt;next-&gt;next;\n            slow &#x3D; slow-&gt;next;\n        &#125;\n        return true;\n    &#125;\n&#125;;</code></pre>\n\n","more":"<p><strong>示例 1：</strong></p>\n<p><img src=\"http://cdn.leafii.top/img/circularlinkedlist.png\" alt=\"img\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：head &#x3D; [3,2,0,-4], pos &#x3D; 1\n输出：true\n解释：链表中有一个环，其尾部连接到第二个节点。</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"http://cdn.leafii.top/img/circularlinkedlist_test2.png\" alt=\"img\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：head &#x3D; [1,2], pos &#x3D; 0\n输出：true\n解释：链表中有一个环，其尾部连接到第一个节点。</code></pre>\n\n<p><strong>示例 3：</strong></p>\n<p><img src=\"http://cdn.leafii.top/img/circularlinkedlist_test3.png\" alt=\"img\"></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：head &#x3D; [1], pos &#x3D; -1\n输出：false\n解释：链表中没有环。</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>链表中节点的数目范围是 <code>[0, 104]</code></li>\n<li><code>-105 &lt;= Node.val &lt;= 105</code></li>\n<li><code>pos</code> 为 <code>-1</code> 或者链表中的一个 <strong>有效索引</strong> 。</li>\n</ul>\n<p><strong>进阶：</strong>你能用 <code>O(1)</code>（即，常量）内存解决此问题吗？</p>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ol>\n<li>使用快慢指针判断是否存在环，如果快指针走到了链表尾部，则直接返回false，若快指针追上了慢指针，则说明链表存在环。C++代码实现如下：</li>\n</ol>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;**\n * Definition for singly-linked list.\n * struct ListNode &#123;\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) &#123;&#125;\n * &#125;;\n *&#x2F;\nclass Solution &#123;\npublic:\n    bool hasCycle(ListNode *head) &#123;\n        if (head &#x3D;&#x3D; NULL || head-&gt;next &#x3D;&#x3D; NULL) return false;\n        ListNode* slow &#x3D; head;\n        ListNode* fast &#x3D; head-&gt;next;\n        while (fast !&#x3D; slow) &#123;\n            &#x2F;&#x2F; 若fast指针走至链表尾部\n            if (fast &#x3D;&#x3D; NULL || fast-&gt;next &#x3D;&#x3D; NULL) return false;\n            fast &#x3D; fast-&gt;next-&gt;next;\n            slow &#x3D; slow-&gt;next;\n        &#125;\n        return true;\n    &#125;\n&#125;;</code></pre>","categories":[],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"}]}