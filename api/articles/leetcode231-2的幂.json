{"title":"leetcode231.2的幂","slug":"leetcode231-2的幂","date":"2023-04-17T01:09:01.000Z","updated":"2023-04-17T01:33:35.704Z","comments":true,"path":"api/articles/leetcode231-2的幂.json","excerpt":"题目给你一个整数 n，请你判断该整数是否是 2 的幂次方。如果是，返回 true ；否则，返回 false 。如果存在一个整数 x 使得 $n &#x3D;&#x3D; 2^x$ ，则认为 n 是 2 的幂次方。","covers":null,"content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个整数 <code>n</code>，请你判断该整数是否是 2 的幂次方。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n<p>如果存在一个整数 <code>x</code> 使得 $n &#x3D;&#x3D; 2^x$ ，则认为 <code>n</code> 是 2 的幂次方。</p>\n<span id=\"more\"></span> \n\n<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 1\n输出：true\n解释：20 &#x3D; 1</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 16\n输出：true\n解释：24 &#x3D; 16</code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 3\n输出：false</code></pre>\n\n<p><strong>示例 4：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 4\n输出：true</code></pre>\n\n<p><strong>示例 5：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 5\n输出：false</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>$-2{31} &lt;&#x3D; n &lt;&#x3D; 2^{31} - 1$</li>\n</ul>\n<p><strong>进阶：</strong>你能够不使用循环&#x2F;递归解决此问题吗？</p>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ol>\n<li>递归</li>\n</ol>\n<p>直接递归就好，注意n为0的情况</p>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    bool isPowerOfTwo(int n) &#123;\n        if (n &#x3D;&#x3D; 1) return true; &#x2F;&#x2F; 如果n为1 直接返回true\n        if (n % 2 !&#x3D; 0 || n &#x3D;&#x3D; 0) return false; &#x2F;&#x2F; 如果n无法被2除尽，或者n为0，则直接返回false\n        return isPowerOfTwo(n &#x2F; 2); &#x2F;&#x2F; 否则返回递归的调用函数后的返回值\n    &#125;\n&#125;;</code></pre>\n\n<ol start=\"2\">\n<li>循环</li>\n</ol>\n<p>直接循环就行，简单易懂</p>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    bool isPowerOfTwo(int n) &#123;\n        while (n &gt;&#x3D; 2) &#123;\n            if (n % 2 &#x3D;&#x3D; 0) n &#x2F;&#x3D; 2;\n            else return false; &#x2F;&#x2F; 如果n无法被2除尽，则直接返回false\n        &#125;\n        if (n &#x3D;&#x3D; 1) return true; &#x2F;&#x2F; 如果n为1 直接返回true\n        return false;\n    &#125;\n&#125;;</code></pre>\n\n<ol start=\"3\">\n<li>使用位与运算符和掩码</li>\n</ol>\n<p>在这个题里面只需要检测n为正数且n的二进制里面只有一个1存在即可;</p>\n<p>首先，我们检查n是否为正整数，这可以通过检查n是否大于0来实现。然后，我们需要检查n的二进制表示中只有一个1。如果我们将n减去1，那么所有在原来的二进制表示中为1的位都会变成0，而它后面的所有位都会变成1。例如，如果n的二进制表示为10000，那么n-1的二进制表示为01111。如果我们将n和n-1进行位与运算，结果将为0。因为n的二进制表示中只有一个1，所以n-1的二进制表示中所有的1都位于n的二进制表示中的0的位置上，因此它们不会在位与运算中重叠。如果n的二进制表示中有多个1，则n-1的二进制表示中将有一个以上的1与n的二进制表示中的1重叠，这样位与运算的结果将不为0。</p>\n<p>代码如下：</p>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    bool isPowerOfTwo(int n) &#123;\n        return ((n &gt; 0) &amp;&amp; (n &amp; (n - 1)) &#x3D;&#x3D; 0); &#x2F;&#x2F; 检查n是否为正数，且n的二进制表示只有一个1\n    &#125;\n&#125;;</code></pre>\n\n","more":"<p><strong>示例 1：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 1\n输出：true\n解释：20 &#x3D; 1</code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 16\n输出：true\n解释：24 &#x3D; 16</code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 3\n输出：false</code></pre>\n\n<p><strong>示例 4：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 4\n输出：true</code></pre>\n\n<p><strong>示例 5：</strong></p>\n<pre class=\"language-none\"><code class=\"language-none\">输入：n &#x3D; 5\n输出：false</code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>$-2{31} &lt;&#x3D; n &lt;&#x3D; 2^{31} - 1$</li>\n</ul>\n<p><strong>进阶：</strong>你能够不使用循环&#x2F;递归解决此问题吗？</p>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><ol>\n<li>递归</li>\n</ol>\n<p>直接递归就好，注意n为0的情况</p>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    bool isPowerOfTwo(int n) &#123;\n        if (n &#x3D;&#x3D; 1) return true; &#x2F;&#x2F; 如果n为1 直接返回true\n        if (n % 2 !&#x3D; 0 || n &#x3D;&#x3D; 0) return false; &#x2F;&#x2F; 如果n无法被2除尽，或者n为0，则直接返回false\n        return isPowerOfTwo(n &#x2F; 2); &#x2F;&#x2F; 否则返回递归的调用函数后的返回值\n    &#125;\n&#125;;</code></pre>\n\n<ol start=\"2\">\n<li>循环</li>\n</ol>\n<p>直接循环就行，简单易懂</p>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    bool isPowerOfTwo(int n) &#123;\n        while (n &gt;&#x3D; 2) &#123;\n            if (n % 2 &#x3D;&#x3D; 0) n &#x2F;&#x3D; 2;\n            else return false; &#x2F;&#x2F; 如果n无法被2除尽，则直接返回false\n        &#125;\n        if (n &#x3D;&#x3D; 1) return true; &#x2F;&#x2F; 如果n为1 直接返回true\n        return false;\n    &#125;\n&#125;;</code></pre>\n\n<ol start=\"3\">\n<li>使用位与运算符和掩码</li>\n</ol>\n<p>在这个题里面只需要检测n为正数且n的二进制里面只有一个1存在即可;</p>\n<p>首先，我们检查n是否为正整数，这可以通过检查n是否大于0来实现。然后，我们需要检查n的二进制表示中只有一个1。如果我们将n减去1，那么所有在原来的二进制表示中为1的位都会变成0，而它后面的所有位都会变成1。例如，如果n的二进制表示为10000，那么n-1的二进制表示为01111。如果我们将n和n-1进行位与运算，结果将为0。因为n的二进制表示中只有一个1，所以n-1的二进制表示中所有的1都位于n的二进制表示中的0的位置上，因此它们不会在位与运算中重叠。如果n的二进制表示中有多个1，则n-1的二进制表示中将有一个以上的1与n的二进制表示中的1重叠，这样位与运算的结果将不为0。</p>\n<p>代码如下：</p>\n<pre class=\"language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution &#123;\npublic:\n    bool isPowerOfTwo(int n) &#123;\n        return ((n &gt; 0) &amp;&amp; (n &amp; (n - 1)) &#x3D;&#x3D; 0); &#x2F;&#x2F; 检查n是否为正数，且n的二进制表示只有一个1\n    &#125;\n&#125;;</code></pre>","categories":[],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"}]}