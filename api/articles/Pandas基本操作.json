{"title":"Pandas基本操作","slug":"Pandas基本操作","date":"2022-06-05T15:23:07.000Z","updated":"2022-06-08T06:05:57.298Z","comments":true,"path":"api/articles/Pandas基本操作.json","excerpt":"Pandas基本操作​        本文对Pandas中的一些基本操作进行描述。","covers":null,"content":"<h1 id=\"Pandas基本操作\"><a href=\"#Pandas基本操作\" class=\"headerlink\" title=\"Pandas基本操作\"></a>Pandas基本操作</h1><p>​        本文对Pandas中的一些基本操作进行描述。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"从文件读取数据\"><a href=\"#从文件读取数据\" class=\"headerlink\" title=\"从文件读取数据\"></a>从文件读取数据</h2><p>​        有很多 Pandas 的教学，一开始一般都是开始教 Pandas 的数据结构或者运算方法。 但是我觉得，当你想要使用 Pandas 的时候，<strong>更多是因为你手头有 Excel 数据或者比较格式化的数据， 需要处理分析和表达这些数据。为了解决你这种当务之急，我觉得先解决读取数据这回事。</strong></p>\n<p>​        以下操作需要用到的文件为<code>[&#39;体检数据.xlsx&#39;, &#39;体检数据.csv&#39;, &#39;体检数据_sep.csv&#39;, &#39;体检数据_sep.txt&#39;]</code></p>\n<h3 id=\"Excel文件\"><a href=\"#Excel文件\" class=\"headerlink\" title=\"Excel文件\"></a>Excel文件</h3><p>​        <a href=\"https://mofanpy.com/static/files/%E4%BD%93%E6%A3%80%E6%95%B0%E6%8D%AE.xlsx\">点击下载</a>所需文件，下载后用Excel打开文件后是这样：</p>\n<p>![](<a href=\"http://cdn.leafii.top/img/Screen\">http://cdn.leafii.top/img/Screen</a> Shot 2022-06-05 at 23.31.25.png)</p>\n<ul>\n<li><code>pd.read_excel()</code></li>\n</ul>\n<p>​        将文件放在适宜的目录，我们就可以使用<code>read_excel()</code>方法读出文件了。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据.xlsx\"</span><span class=\"token punctuation\">,</span> index_col<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">    姓名   身高  体重   肺活量\n学号\n1   小明  168  60  3200\n2   小黄  187  80  3800\n3   小花  170  70  3400</code></pre>\n\n<p>​        在函数中的<code>index_col=0</code>就是告诉Pandas，让它使用第一个column（学号）的数据当作row索引。后面还有很多读取的功能里也有一样的参数。</p>\n<ul>\n<li><code>df.to_excel()</code></li>\n</ul>\n<p>​        好，我们既然可以读取Excel文件，那么稍稍修改，再保存起来应该也不成问题。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"体重\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>to_excel<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据_修改.xlsx\"</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        其实在读取和保存 Excel 文件的时候，还有很多额外的参数可供选择，因为太多了，我们这里就先讲最常用的，如果你要深入研究， 可以到他们的官网来看<a href=\"https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html#pandas.read_excel\">官方文档</a>。</p>\n<h3 id=\"csv或txt等纯文本文件\"><a href=\"#csv或txt等纯文本文件\" class=\"headerlink\" title=\"csv或txt等纯文本文件\"></a>csv或txt等纯文本文件</h3><p>​        下载需要的文件：<a href=\"https://mofanpy.com/static/files/%E4%BD%93%E6%A3%80%E6%95%B0%E6%8D%AE.csv\">链接</a>，使用纯文本编辑器打开，就能看到它最原始的样貌了。</p>\n<p>![](<a href=\"http://cdn.leafii.top/img/Screen\">http://cdn.leafii.top/img/Screen</a> Shot 2022-06-05 at 23.44.57.png)</p>\n<ul>\n<li><code>pd.read_csv()</code></li>\n</ul>\n<p>​        使用Python的open打开纯文本文件：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据.csv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\">学号,姓名,身高,体重,肺活量\n1,小明,168,60,3200\n2,小黄,187,80,3800\n3,小花,170,70,3400</code></pre>\n\n<p>​        使用pandas的<code>read_csv()</code>方法：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df_csv <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据.csv\"</span><span class=\"token punctuation\">,</span> index_col<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\ndf_csv</code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\">学号,姓名,身高,体重,肺活量\n1,小明,168,60,3200\n2,小黄,187,80,3800\n3,小花,170,70,3400</code></pre>\n\n<p>​        有的时候，你不能保证别人给你的数据，是不是一份标准格式的数据，比如别人不喜欢用 <code>,</code> 来分隔数据点， 而是喜欢用什么乱七八糟的 <code>=</code> 来分隔。这时，Pandas 帮你考虑到了这种问题， 你可以挑选要用哪个字符来识别这些分隔。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据_sep.csv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndf_csv <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据_sep.csv\"</span><span class=\"token punctuation\">,</span> index_col<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span>\ndf_csv</code></pre>\n\n<p>​        提到 csv，你可能还会想用 Excel 打开看看，但是提到 txt，一般你也不会想用 Excel 打开了吧。用 Pandas 打开一个 txt 文件和打开一个 csv 文件，、 其实本质上是一样的，都是打开一个纯文本文件。所以下面我再打开一下 txt。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据_sep.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndf_txt <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据_sep.txt\"</span><span class=\"token punctuation\">,</span> index_col<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span>\ndf_txt</code></pre>\n\n<ul>\n<li><code>df.to_csv()</code></li>\n</ul>\n<p>​        能打开，我们就能保存，保存方法同样很简单，只需要 <code>df.to_csv()</code> 就好了，甚至，你还能保存到 Excel 文件，在 Pandas 中它们是可以互相转换的。 同理用 <code>read_excel()</code> 打开的，也能存成 <code>to_csv()</code>。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df_txt<span class=\"token punctuation\">.</span>to_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据_sep_修改.csv\"</span><span class=\"token punctuation\">)</span>\ndf_txt<span class=\"token punctuation\">.</span>to_excel<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据_sep_修改.xlsx\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读保存后的 csv\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据_sep_修改.csv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读保存后的 xlsx\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据_sep_修改.xlsx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        做数据分析和机器学习，会用上面的方法来读 Excel 或者是纯文本，我们就已经解决了大部分的需求了。下面我来介绍几个我觉得 Pandas 的额外几个有趣的读取方式。</p>\n<h3 id=\"其它有趣的\"><a href=\"#其它有趣的\" class=\"headerlink\" title=\"其它有趣的\"></a>其它有趣的</h3><ul>\n<li><code>pd.read_clipboard()</code></li>\n</ul>\n<p>​        从剪切板里面读取数据，这个很有意思，使用场景并不多，但是指不定哪天你要用 Python 写 APP 的时候，就能用到这个，不是有很多 APP 会识别你的剪切板， 方便你直接复制数据吗。这个功能说不定就能派上用场。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_clipboard<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<ul>\n<li><code>pd.read_html()</code></li>\n</ul>\n<p>​        另外一个是从网页中获取表格型数据，就像下面这个表格。我们也能用 Pandas 调取解析网页当中的表格数据。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_html<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://mofanpy.com/tutorials/data-manipulation/pandas/read-save/\"</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<p>​        还有一些功能，比如让 Pandas 读数据库，读 Json 等，你都可能在后期自己开发的时候偶尔用到。只要用到的时候，查查 <a href=\"https://pandas.pydata.org/docs/reference/io.html\">Pandas 官方文档</a> 还是很有帮助的。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        大千世界，数据也是多样的，Pandas 量身为你定制了很多读取数据的方法。从做数据分析和机器学习最常用的 Excel、csv、txt 数据等，到 html，剪切板等有趣的数据类型， 一个 Pandas 都可以帮你搞定。了解完读存数据，接下来，我们就来认真了解，数据在 Pandas 中到底是一个什么样的东西。</p>\n<h2 id=\"Pandas中的数据是什么\"><a href=\"#Pandas中的数据是什么\" class=\"headerlink\" title=\"Pandas中的数据是什么\"></a>Pandas中的数据是什么</h2><p>​        上面我们已经提到了在分析数据时最基础的操作就是“用Pandas打开数据文件”，不过我们并没有详细说这份打开的数据它的格式是什么样。但是要了解我们如何更改加工数据，我们必然还是需要了解在Pandas中的数据格式是什么。</p>\n<p>​        简单来说，Pandas支持最好的是一维和二维数组，一维数组就是一个序列，一条数据，而二维数据是我们生活中更加常见的种类，基本上所有Excel数据都是二维数据，有横纵交替，用两个维度来定位这个数据。</p>\n<p>​        下面来说说Pandas中的一维二维数据特性。</p>\n<h3 id=\"数据序列Series\"><a href=\"#数据序列Series\" class=\"headerlink\" title=\"数据序列Series\"></a>数据序列Series</h3><ul>\n<li>创建</li>\n</ul>\n<p>​        一串Python List你肯定不陌生，Pandas中的Series的核心其实就是一串类似于Python List的序列。只是它要比Python List丰富很多，有更多的功能属性。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\nl <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">]</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list:\"</span><span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"series:\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">list: [11, 22, 33]\nseries: 0    11\n1    22\n2    33\ndtype: int64</code></pre>\n\n<p>​        可见Pandas Series和Python List有很大的区别：Pandas Series帮我们额外维护了一份索引。有这个索引的意义是你可以使用自己喜欢的索引来检索数据：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ns</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">a    11\nb    22\nc    33\ndtype: int64</code></pre>\n\n<p>​        所以，只要是有索引形式的结构，都可以搞成 Series，比如下面这样：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\ns</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">a    11\nb    22\nc    33\ndtype: int64</code></pre>\n\n<p>​        后文中的DataFrame也可以使用字典来创建噢。</p>\n<ul>\n<li>转换Numpy</li>\n</ul>\n<p>​        既然Python中的List可以用来创建Series，那么使用Numpy也可以创建：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ns</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">a    0.689052\nb    0.284041\nc    0.616957\ndtype: float64</code></pre>\n\n<p>​        将Series回退到Numpy array或者List：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array:\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>to_numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list:\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>tolist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># array: [11 22 33]</span>\n<span class=\"token comment\"># list: [11, 22, 33]</span></code></pre>\n\n\n\n<h3 id=\"数据表DataFrame\"><a href=\"#数据表DataFrame\" class=\"headerlink\" title=\"数据表DataFrame\"></a>数据表DataFrame</h3><p>​        Pandas首先支持的就是序列数据和表格数据，因为这两种是日常生活中最常用的数据保存和编辑格式了，我们看看如何用Pandas的DataFrame维护一张数据表吧。</p>\n<ul>\n<li>创建</li>\n</ul>\n<p>​        在上一节数据文件读取的教学中，你load到的数据实际上就是一个DataFrame，举个简单的例子，将一个二维数组变成Pandas的DataFrame：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">   0  1\n0  1  2\n1  3  4</code></pre>\n\n<p>​        显然，它创建出来的df在真实数据外围，还包上了一层其他的数据（0，1），在DataFrame中，这是用来索引行&#x2F;列的序号，如果要按位置来选去其中的值，也可以这么干。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#第0行，第1列</span>\n<span class=\"token comment\"># 或 第一个维度中的第0号，第二个维度中的第1号</span>\ndf<span class=\"token punctuation\">.</span>at<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#2</span></code></pre>\n\n<p>​        Pandas 中还有很多方式来选取和改变数据值，请按捺一下激动的小心情， 我们将在下节内容中具体介绍。</p>\n<p>​        自动创建的索引序号并不是很可读。我们还能将这些序号换成人类更好理解的文字标签信息:</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"col1\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"col2\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">   col1  col2\n0     1     2\n1     3     4</code></pre>\n\n<p>​        可以从结果看出，其实字典中的 key 会被当成是数据中的 column，而 value 会被当做是 row，这个非常符合你在 Excel 中的使用习惯。 因为往往随着数据量变大，你用鼠标滚轮滚动查看不同数据的时候，天然的比较喜欢上下查看不同的数据样本，而不是左右查看，所以一般都是左右记的是数据标签（特征）， 上下排列的是不同数据样本。</p>\n<p>​        见识了字典变 DataFrame，其实 Series 也是可以组合变成 DataFrame 的，而且这也非常符合常理， 如果我从 DataFrame 中取出一个 Column， 这不就变成了一条 Series 了吗？</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">\"col1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"取出来之后的 type:\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">\"col1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">0    1\n1    3\nName: col1, dtype: int64\n取出来之后的 type: &lt;class &#39;pandas.core.series.Series&#39;&gt;</code></pre>\n\n<p>​        将两个Series拼接起来：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"col1\"</span><span class=\"token punctuation\">:</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"col2\"</span><span class=\"token punctuation\">:</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">   col1  col2\n0     1     2\n1     3     4</code></pre>\n\n<p>​        来看看 Series 和 DataFrame 构建索引的方式：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"col1\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"col2\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">a    1.0\nb    2.0\nc    3.0\ndtype: float64\n   col1  col2\na     1     2\nb     3     4</code></pre>\n\n<p>​        既然 DataFrame 的 Column 和 Index 这么有意思，十有八九，你会想取出来用一用这些 Column 和 Index，比如你数据比较大的时候，想初步看看这份数据涉及了多少特征， 数据的 index 有多少种的时候，你可以直接获取到这些信息。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">Index([&#39;a&#39;, &#39;b&#39;], dtype&#x3D;&#39;object&#39;)\nIndex([&#39;col1&#39;, &#39;col2&#39;], dtype&#x3D;&#39;object&#39;)</code></pre>\n\n<p>​        如果写前端的朋友，你们时常会遇到 json 形式的数据，比如可以像下面这样处理。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">my_json_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">111</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span>\npd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>my_json_data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rose\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        Pandas 真的用心良苦，为我们广大数据同胞提供了这么多这么丰富的接口。学会这样观看数据，我们在分析和处理数据的时候就更有把握了。</p>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        Pandas 中，为了我们提供了日常最常用的数据存储方式，分别是 Series 的一维数据，和 DataFrame 的二维数据，在机器学习中，我们常会接触到 3 维甚至是更高维度， 但是在分析数据的时候，特别是，要结合 Excel 来分析数据的时候，二维数据才是最常用的。</p>\n<h2 id=\"选取数据\"><a href=\"#选取数据\" class=\"headerlink\" title=\"选取数据\"></a>选取数据</h2><p>​        Pandas的数据结构和你管理Excel很像，特别是DataFrame就约等于Excel当中的sheet。我们非常适应用Excel来选择和修改数据，但是如果把它程序化，用代码来修改和选取的时候，我们该如何操作呢？</p>\n<p>​        Pandas的数据选取和List，Numpy Array还是有挺大差别的，因为它想要维护了很多的人类可读的索引信息，所以它在索引的时候，也有不一样的处理方式，今天我们就来看看Pandas是如何处理数据选取和修改的吧。</p>\n<h3 id=\"多种选取方式\"><a href=\"#多种选取方式\" class=\"headerlink\" title=\"多种选取方式\"></a>多种选取方式</h3><p>​        在Pandas中，有丰富的选取数据方式，这可比List，Dictionary，甚至是Numpy还要多样化。我们既能通过文字标签来定位数据，也能通过数值序号来定位。所以为了实现这种多样性，Pandas对于数据的选取采用了不同类型的处理方法，比如<code>.loc</code>,<code>.iloc</code>等，我们来一一介绍吧。</p>\n<p>​        面对应用比较多的工作学习场景，我先以 Excel 型的表格数据举例，请你帮我构建一下下面这份 DataFrame：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>\n  data<span class=\"token punctuation\">,</span>\n  index<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcdef\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  columns<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ABCD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndf\ndata</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">    A   B   C   D\na -12 -11 -10  -9\nb  -8  -7  -6  -5\nc  -4  -3  -2  -1\nd   0   1   2   3\ne   4   5   6   7\nf   8   9  10  11\narray([[-12, -11, -10,  -9],\n       [ -8,  -7,  -6,  -5],\n       [ -4,  -3,  -2,  -1],\n       [  0,   1,   2,   3],\n       [  4,   5,   6,   7],\n       [  8,   9,  10,  11]])</code></pre>\n\n<h3 id=\"选Column\"><a href=\"#选Column\" class=\"headerlink\" title=\"选Column\"></a>选Column</h3><p>​        看到上面的这份数据之后，我们发现DataFrame会分Column和Row（index）。在机器学习中，通常Column是特征，Row是数据样本，要对某个特征进行分析的时候，比如要做特征数值分布的分析，我们得把特征取出来吧，那么可以进行如下操作：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">[</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">]</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">a   -11\nb    -7\nc    -3\nd     1\ne     5\nf     9\nName: B, dtype: int64</code></pre>\n\n<p>​        选一个就这么简单，但偶尔还想多选几个特征，怎么搞呢？回忆一下之前Numpy中的Array是怎么选的？</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numpy:\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\ndf:\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">numpy:\n [[-10 -11]\n [ -6  -7]\n [ -2  -3]\n [  2   1]\n [  6   5]\n [ 10   9]]\ndf:\n     C   B\na -10 -11\nb  -6  -7\nc  -2  -3\nd   2   1\ne   6   5\nf  10   9</code></pre>\n\n<p>​        现在可以选column了，那意味着肯定能将Index（Row）的信息也一起考虑到数据筛选的工作当中了。</p>\n<h3 id=\"loc\"><a href=\"#loc\" class=\"headerlink\" title=\"loc\"></a>loc</h3><p>​        在Numpy中选取数据一般是按照在维度上的排序来定位的。比如对于你刚刚创建的Numpy数据<code>data</code>：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">array([[-3, -2]])</code></pre>\n\n<p>​        而在DataFrame中，同样是上述功能，你也可以这么干：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">]</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">   B  C  D\nc -3 -2 -1\nd  1  2  3</code></pre>\n\n<p>​        不知道你有没有发现，这个 <code>&quot;c&quot;:&quot;d&quot;</code> 和 <code>&quot;B&quot;:&quot;D&quot;</code> 明明对应的是上面 <code>data</code> 的 <code>[2:3]</code> 和 <code>[1:3]</code>，但为什么它还包含了最后一位的 <code>&quot;d&quot;</code> 和 <code>&quot;D&quot;</code> 呢？这的确是 Pandas 的一个用心良苦，我猜他是为了更贴切 Excel 中的使用原则吧，想一想，如果你像下面这样， 在选择 Excel 要被筛选的数据时，从 b 选到 d，其实你是有包含 d 的。所以我说，Pandas 这么设计，原因之一也应该是为了照顾我们吧。</p>\n<p>​        除了筛选一个片段，还可以像 Numpy 那样单个单个的选取。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numpy:\\n\"</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\ndf:\\n\"</span><span class=\"token punctuation\">,</span>df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">numpy:\n [[ 0  1  2  3]\n [-8 -7 -6 -5]]\n\ndf:\n    A  B  C  D\nd  0  1  2  3\nb -8 -7 -6 -5</code></pre>\n\n<p>​        上面这两个例子，不难看出，Pandas 选取数据的底层逻辑，和 Python Numpy 的类似，都是按维度的先后（先选第一维，再第二，以此类推）， 开始选取。按数据的索引找到维度上的对应索引区域。</p>\n<p>​        下面我再来整个有趣的，如果我不按字母顺序去组织 index，比如从原本的 <code>index=abcdef</code> 换成 <code>index=beacdf</code>， 猜猜下面的这份数据索引会找到哪一份子数据？</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df2 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>\n  data<span class=\"token punctuation\">,</span>\n  index<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"beacdf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  columns<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ABCD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df2<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">    A   B   C   D\nb -12 -11 -10  -9\ne  -8  -7  -6  -5\na  -4  -3  -2  -1\nc   0   1   2   3\nd   4   5   6   7\nf   8   9  10  11\n   A  B  C  D\ne -8 -7 -6 -5\na -4 -3 -2 -1\nc  0  1  2  3</code></pre>\n\n<h3 id=\"iloc\"><a href=\"#iloc\" class=\"headerlink\" title=\"iloc\"></a>iloc</h3><p>​        看完面向 Excel 编程，我们再来回到编程本身，用程序的思维去选取数据。这意味着什么？用最朴素的方法，也是意味着能更快找到数据位置，比如直接用位置信息来筛选。 Numpy 不就是这么干的吗？这时 <code>.iloc</code> 功能就派上用场了。</p>\n<p>​        看看<code>iloc</code>的功能是什么：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numpy:\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\ndf:\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">numpy:\n [[-3 -2]]\n\ndf:\n    B  C\nc -3 -2</code></pre>\n\n<p>​        简直和 Numpy 的模式一模一样，就是结果中多了一个 DataFrame 的标签信息。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numpy:\\n\"</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\ndf:\\n\"</span><span class=\"token punctuation\">,</span>df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">numpy:\n [[ 0  1  2  3]\n [-8 -7 -6 -5]]\n\ndf:\n    A  B  C  D\nd  0  1  2  3\nb -8 -7 -6 -5</code></pre>\n\n<h3 id=\"loc和iloc混搭\"><a href=\"#loc和iloc混搭\" class=\"headerlink\" title=\"loc和iloc混搭\"></a>loc和iloc混搭</h3><p>​        难免有时候，我们需要混搭 loc 和 iloc 的方式，比如我想要选取第 2 到第 4 位数据的 A C 两个特征，这时咋办？ 想想 Pandas 这么牛逼，肯定有办法解决。的确，它解决的方法是采用索引转换的方式，比如我在 <code>.loc</code> 模式下，将序号索引转换成 <code>.loc</code> 的标签索引。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">row_labels <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"row_labels:\\n\"</span><span class=\"token punctuation\">,</span> row_labels<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\ndf:\\n\"</span><span class=\"token punctuation\">,</span>df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span>row_labels<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">row_labels:\n Index([&#39;c&#39;, &#39;d&#39;], dtype&#x3D;&#39;object&#39;)\n\ndf:\n    A  C\nc -4 -2\nd  0  2</code></pre>\n\n<p>​        再看看 Column 的 labels 怎么取:</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">col_labels <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"col_labels:\\n\"</span><span class=\"token punctuation\">,</span> col_labels<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\ndf:\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span>row_labels<span class=\"token punctuation\">,</span> col_labels<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">col_labels:\n Index([&#39;A&#39;, &#39;D&#39;], dtype&#x3D;&#39;object&#39;)\n\ndf:\n    A  D\nc -4 -1\nd  0  3</code></pre>\n\n<p>​        清楚了吧，用 <code>df.index</code> 和 <code>df.columns</code> 来调取到全部的标签，然后在用像 Numpy index 索引的方式把这些标签给筛选出来，放到 <code>.loc</code> 里面用。 那反过来，我想要找 A C 两个特征的 前两个数据，这时咋办？</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">col_index <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">.</span>get_indexer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"col_index:\\n\"</span><span class=\"token punctuation\">,</span> col_index<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\ndf:\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> col_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">col_index:\n [0 1]\n\ndf:\n     A   B\na -12 -11\nb  -8  -7</code></pre>\n\n<p>​        同理，<code>df.index.get_indexer([&quot;a&quot;, &quot;b&quot;])</code> 也可以这样获取到 label 对应的 index 信息。</p>\n<h3 id=\"条件过滤筛选\"><a href=\"#条件过滤筛选\" class=\"headerlink\" title=\"条件过滤筛选\"></a>条件过滤筛选</h3><p>​        按条件过滤其实是一件很有趣的事，因为很多情况我们事先也不知道具体的 index 是什么，我们更想要从某些条件中筛选数据。 下面我举几个例子，大家应该很容易 get 到其中的奥秘。</p>\n<ul>\n<li><strong>选在 A Column 中小于 0 的那些数据</strong></li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">[</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">    A   B   C  D\na -12 -11 -10 -9\nb  -8  -7  -6 -5\nc  -4  -3  -2 -1</code></pre>\n\n<ul>\n<li><strong>选在第一行数据不小于 -10 的数据</strong></li>\n</ul>\n<p>​        这里注意了你可以用两种方式，一种是 <code>~</code> 来表示 <code>非</code> 什么什么，第二种是直接用 <code>&gt;=-10</code> 来筛选。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~:\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n>=:\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">~:\n     C   D\na -10  -9\nb  -6  -5\nc  -2  -1\nd   2   3\ne   6   7\nf  10  11\n\n&gt;&#x3D;:\n     C   D\na -10  -9\nb  -6  -5\nc  -2  -1\nd   2   3\ne   6   7\nf  10  11</code></pre>\n\n<ul>\n<li><strong>选在第一行数据不小于 -10 或小于 -11 的数据</strong></li>\n</ul>\n<p>​        同上面类似的，我还能用或 <code>|</code> 来表示 or 的意思, <code>&amp;</code> 表述 and。比如选在第一行数据不小于 -10 或小于 -11 的数据:</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">i0 <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\ndf<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>i0 <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>i0 <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">    A   C   D\na -12 -10  -9\nb  -8  -6  -5\nc  -4  -2  -1\nd   0   2   3\ne   4   6   7\nf   8  10  11</code></pre>\n\n<p>​        所以你看，你可以用 <code>.loc</code> 或者 <code>.iloc</code> 来做过滤处理。然后用 <code>.loc</code> 来做筛选。为什么用 <code>.iloc</code> 来筛选呢，比如下面这样：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#报错</span></code></pre>\n\n<p>​        这样写居然会导致报错，为什么呢？你分析分析，把 <code>~(df.iloc[0] &lt; -10)</code> 这个筛选条件打印出来看看它是什么值。然后想一想 <code>.iloc</code> 能够接受的值是啥？ 想清楚了，这个问题就迎刃而解了。</p>\n<pre class=\"language-none\"><code class=\"language-none\">A    False\nB    False\nC     True\nD     True\nName: a, dtype: bool</code></pre>\n\n\n\n<h3 id=\"Series和DataFrame类似\"><a href=\"#Series和DataFrame类似\" class=\"headerlink\" title=\"Series和DataFrame类似\"></a>Series和DataFrame类似</h3><p>​        既然二维的 DataFrame 你都已经玩过了，Series 的操作就不在话下了。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">list_data <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>\n  list_data<span class=\"token punctuation\">,</span> \n  index<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcdefgh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ns</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">a   -4\nb   -3\nc   -2\nd   -1\ne    0\nf    1\ng    2\nh    3\ndtype: int64</code></pre>\n\n<ul>\n<li>按标签筛选数据 <code>.loc</code></li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"f\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">a   -4\ng    2\nc   -2\ndtype: int64 \n\nc   -2\nd   -1\ne    0\nf    1\ndtype: int64</code></pre>\n\n<ul>\n<li>按 index 筛选数据 <code>.iloc</code></li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">d   -1\nb   -3\nf    1\ndtype: int64 \n\nc   -2\nd   -1\ndtype: int64</code></pre>\n\n<ul>\n<li><code>iloc</code> 和 <code>loc</code> 互相混用</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">.</span>get_indexer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">c   -2\nd   -1\ndtype: int64 \n\nd   -1\nc   -2\ndtype: int64</code></pre>\n\n<ul>\n<li>按条件过滤筛选</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span>s <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">a   -4\nb   -3\nc   -2\nd   -1\ne    0\nf    1\ng    2\ndtype: int64 \n\nd   -1\ndtype: int64 \n\na   -4\nb   -3\nc   -2\nd   -1\nh    3\ndtype: int64</code></pre>\n\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        Pandas 的数据筛选方法比 Numpy 丰富多了，介绍的篇幅也有点多，我日常用的最多的还是用条件来筛选，比如在处理机器学习的脏数据的时候，要用很多筛选逻辑。 有时甚至我会觉得 Numpy 的筛选方式不够多，专门把 Numpy 数据转换成 Pandas 数据，然后再用 Pandas 提供的丰富工具处理数据，再转回 Numpy。 相信你用熟了之后，数据处理将要简单很多。</p>\n","more":"<h2 id=\"从文件读取数据\"><a href=\"#从文件读取数据\" class=\"headerlink\" title=\"从文件读取数据\"></a>从文件读取数据</h2><p>​        有很多 Pandas 的教学，一开始一般都是开始教 Pandas 的数据结构或者运算方法。 但是我觉得，当你想要使用 Pandas 的时候，<strong>更多是因为你手头有 Excel 数据或者比较格式化的数据， 需要处理分析和表达这些数据。为了解决你这种当务之急，我觉得先解决读取数据这回事。</strong></p>\n<p>​        以下操作需要用到的文件为<code>[&#39;体检数据.xlsx&#39;, &#39;体检数据.csv&#39;, &#39;体检数据_sep.csv&#39;, &#39;体检数据_sep.txt&#39;]</code></p>\n<h3 id=\"Excel文件\"><a href=\"#Excel文件\" class=\"headerlink\" title=\"Excel文件\"></a>Excel文件</h3><p>​        <a href=\"https://mofanpy.com/static/files/%E4%BD%93%E6%A3%80%E6%95%B0%E6%8D%AE.xlsx\">点击下载</a>所需文件，下载后用Excel打开文件后是这样：</p>\n<p>![](<a href=\"http://cdn.leafii.top/img/Screen\">http://cdn.leafii.top/img/Screen</a> Shot 2022-06-05 at 23.31.25.png)</p>\n<ul>\n<li><code>pd.read_excel()</code></li>\n</ul>\n<p>​        将文件放在适宜的目录，我们就可以使用<code>read_excel()</code>方法读出文件了。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据.xlsx\"</span><span class=\"token punctuation\">,</span> index_col<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<p>​        运行结果</p>\n<pre class=\"language-none\"><code class=\"language-none\">    姓名   身高  体重   肺活量\n学号\n1   小明  168  60  3200\n2   小黄  187  80  3800\n3   小花  170  70  3400</code></pre>\n\n<p>​        在函数中的<code>index_col=0</code>就是告诉Pandas，让它使用第一个column（学号）的数据当作row索引。后面还有很多读取的功能里也有一样的参数。</p>\n<ul>\n<li><code>df.to_excel()</code></li>\n</ul>\n<p>​        好，我们既然可以读取Excel文件，那么稍稍修改，再保存起来应该也不成问题。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"体重\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>to_excel<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据_修改.xlsx\"</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        其实在读取和保存 Excel 文件的时候，还有很多额外的参数可供选择，因为太多了，我们这里就先讲最常用的，如果你要深入研究， 可以到他们的官网来看<a href=\"https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html#pandas.read_excel\">官方文档</a>。</p>\n<h3 id=\"csv或txt等纯文本文件\"><a href=\"#csv或txt等纯文本文件\" class=\"headerlink\" title=\"csv或txt等纯文本文件\"></a>csv或txt等纯文本文件</h3><p>​        下载需要的文件：<a href=\"https://mofanpy.com/static/files/%E4%BD%93%E6%A3%80%E6%95%B0%E6%8D%AE.csv\">链接</a>，使用纯文本编辑器打开，就能看到它最原始的样貌了。</p>\n<p>![](<a href=\"http://cdn.leafii.top/img/Screen\">http://cdn.leafii.top/img/Screen</a> Shot 2022-06-05 at 23.44.57.png)</p>\n<ul>\n<li><code>pd.read_csv()</code></li>\n</ul>\n<p>​        使用Python的open打开纯文本文件：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据.csv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\">学号,姓名,身高,体重,肺活量\n1,小明,168,60,3200\n2,小黄,187,80,3800\n3,小花,170,70,3400</code></pre>\n\n<p>​        使用pandas的<code>read_csv()</code>方法：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df_csv <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据.csv\"</span><span class=\"token punctuation\">,</span> index_col<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\ndf_csv</code></pre>\n\n<pre class=\"language-none\"><code class=\"language-none\">学号,姓名,身高,体重,肺活量\n1,小明,168,60,3200\n2,小黄,187,80,3800\n3,小花,170,70,3400</code></pre>\n\n<p>​        有的时候，你不能保证别人给你的数据，是不是一份标准格式的数据，比如别人不喜欢用 <code>,</code> 来分隔数据点， 而是喜欢用什么乱七八糟的 <code>=</code> 来分隔。这时，Pandas 帮你考虑到了这种问题， 你可以挑选要用哪个字符来识别这些分隔。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据_sep.csv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndf_csv <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据_sep.csv\"</span><span class=\"token punctuation\">,</span> index_col<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span>\ndf_csv</code></pre>\n\n<p>​        提到 csv，你可能还会想用 Excel 打开看看，但是提到 txt，一般你也不会想用 Excel 打开了吧。用 Pandas 打开一个 txt 文件和打开一个 csv 文件，、 其实本质上是一样的，都是打开一个纯文本文件。所以下面我再打开一下 txt。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据_sep.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndf_txt <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据_sep.txt\"</span><span class=\"token punctuation\">,</span> index_col<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span>\ndf_txt</code></pre>\n\n<ul>\n<li><code>df.to_csv()</code></li>\n</ul>\n<p>​        能打开，我们就能保存，保存方法同样很简单，只需要 <code>df.to_csv()</code> 就好了，甚至，你还能保存到 Excel 文件，在 Pandas 中它们是可以互相转换的。 同理用 <code>read_excel()</code> 打开的，也能存成 <code>to_csv()</code>。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df_txt<span class=\"token punctuation\">.</span>to_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据_sep_修改.csv\"</span><span class=\"token punctuation\">)</span>\ndf_txt<span class=\"token punctuation\">.</span>to_excel<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据_sep_修改.xlsx\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读保存后的 csv\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据_sep_修改.csv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读保存后的 xlsx\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">\"data/体检数据_sep_修改.xlsx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        做数据分析和机器学习，会用上面的方法来读 Excel 或者是纯文本，我们就已经解决了大部分的需求了。下面我来介绍几个我觉得 Pandas 的额外几个有趣的读取方式。</p>\n<h3 id=\"其它有趣的\"><a href=\"#其它有趣的\" class=\"headerlink\" title=\"其它有趣的\"></a>其它有趣的</h3><ul>\n<li><code>pd.read_clipboard()</code></li>\n</ul>\n<p>​        从剪切板里面读取数据，这个很有意思，使用场景并不多，但是指不定哪天你要用 Python 写 APP 的时候，就能用到这个，不是有很多 APP 会识别你的剪切板， 方便你直接复制数据吗。这个功能说不定就能派上用场。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_clipboard<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<ul>\n<li><code>pd.read_html()</code></li>\n</ul>\n<p>​        另外一个是从网页中获取表格型数据，就像下面这个表格。我们也能用 Pandas 调取解析网页当中的表格数据。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_html<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://mofanpy.com/tutorials/data-manipulation/pandas/read-save/\"</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<p>​        还有一些功能，比如让 Pandas 读数据库，读 Json 等，你都可能在后期自己开发的时候偶尔用到。只要用到的时候，查查 <a href=\"https://pandas.pydata.org/docs/reference/io.html\">Pandas 官方文档</a> 还是很有帮助的。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        大千世界，数据也是多样的，Pandas 量身为你定制了很多读取数据的方法。从做数据分析和机器学习最常用的 Excel、csv、txt 数据等，到 html，剪切板等有趣的数据类型， 一个 Pandas 都可以帮你搞定。了解完读存数据，接下来，我们就来认真了解，数据在 Pandas 中到底是一个什么样的东西。</p>\n<h2 id=\"Pandas中的数据是什么\"><a href=\"#Pandas中的数据是什么\" class=\"headerlink\" title=\"Pandas中的数据是什么\"></a>Pandas中的数据是什么</h2><p>​        上面我们已经提到了在分析数据时最基础的操作就是“用Pandas打开数据文件”，不过我们并没有详细说这份打开的数据它的格式是什么样。但是要了解我们如何更改加工数据，我们必然还是需要了解在Pandas中的数据格式是什么。</p>\n<p>​        简单来说，Pandas支持最好的是一维和二维数组，一维数组就是一个序列，一条数据，而二维数据是我们生活中更加常见的种类，基本上所有Excel数据都是二维数据，有横纵交替，用两个维度来定位这个数据。</p>\n<p>​        下面来说说Pandas中的一维二维数据特性。</p>\n<h3 id=\"数据序列Series\"><a href=\"#数据序列Series\" class=\"headerlink\" title=\"数据序列Series\"></a>数据序列Series</h3><ul>\n<li>创建</li>\n</ul>\n<p>​        一串Python List你肯定不陌生，Pandas中的Series的核心其实就是一串类似于Python List的序列。只是它要比Python List丰富很多，有更多的功能属性。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\nl <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">]</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list:\"</span><span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"series:\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">list: [11, 22, 33]\nseries: 0    11\n1    22\n2    33\ndtype: int64</code></pre>\n\n<p>​        可见Pandas Series和Python List有很大的区别：Pandas Series帮我们额外维护了一份索引。有这个索引的意义是你可以使用自己喜欢的索引来检索数据：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ns</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">a    11\nb    22\nc    33\ndtype: int64</code></pre>\n\n<p>​        所以，只要是有索引形式的结构，都可以搞成 Series，比如下面这样：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\ns</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">a    11\nb    22\nc    33\ndtype: int64</code></pre>\n\n<p>​        后文中的DataFrame也可以使用字典来创建噢。</p>\n<ul>\n<li>转换Numpy</li>\n</ul>\n<p>​        既然Python中的List可以用来创建Series，那么使用Numpy也可以创建：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ns</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">a    0.689052\nb    0.284041\nc    0.616957\ndtype: float64</code></pre>\n\n<p>​        将Series回退到Numpy array或者List：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array:\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>to_numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list:\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>tolist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># array: [11 22 33]</span>\n<span class=\"token comment\"># list: [11, 22, 33]</span></code></pre>\n\n\n\n<h3 id=\"数据表DataFrame\"><a href=\"#数据表DataFrame\" class=\"headerlink\" title=\"数据表DataFrame\"></a>数据表DataFrame</h3><p>​        Pandas首先支持的就是序列数据和表格数据，因为这两种是日常生活中最常用的数据保存和编辑格式了，我们看看如何用Pandas的DataFrame维护一张数据表吧。</p>\n<ul>\n<li>创建</li>\n</ul>\n<p>​        在上一节数据文件读取的教学中，你load到的数据实际上就是一个DataFrame，举个简单的例子，将一个二维数组变成Pandas的DataFrame：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">   0  1\n0  1  2\n1  3  4</code></pre>\n\n<p>​        显然，它创建出来的df在真实数据外围，还包上了一层其他的数据（0，1），在DataFrame中，这是用来索引行&#x2F;列的序号，如果要按位置来选去其中的值，也可以这么干。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#第0行，第1列</span>\n<span class=\"token comment\"># 或 第一个维度中的第0号，第二个维度中的第1号</span>\ndf<span class=\"token punctuation\">.</span>at<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#2</span></code></pre>\n\n<p>​        Pandas 中还有很多方式来选取和改变数据值，请按捺一下激动的小心情， 我们将在下节内容中具体介绍。</p>\n<p>​        自动创建的索引序号并不是很可读。我们还能将这些序号换成人类更好理解的文字标签信息:</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"col1\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"col2\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">   col1  col2\n0     1     2\n1     3     4</code></pre>\n\n<p>​        可以从结果看出，其实字典中的 key 会被当成是数据中的 column，而 value 会被当做是 row，这个非常符合你在 Excel 中的使用习惯。 因为往往随着数据量变大，你用鼠标滚轮滚动查看不同数据的时候，天然的比较喜欢上下查看不同的数据样本，而不是左右查看，所以一般都是左右记的是数据标签（特征）， 上下排列的是不同数据样本。</p>\n<p>​        见识了字典变 DataFrame，其实 Series 也是可以组合变成 DataFrame 的，而且这也非常符合常理， 如果我从 DataFrame 中取出一个 Column， 这不就变成了一条 Series 了吗？</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">\"col1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"取出来之后的 type:\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">\"col1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">0    1\n1    3\nName: col1, dtype: int64\n取出来之后的 type: &lt;class &#39;pandas.core.series.Series&#39;&gt;</code></pre>\n\n<p>​        将两个Series拼接起来：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"col1\"</span><span class=\"token punctuation\">:</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"col2\"</span><span class=\"token punctuation\">:</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\ndf</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">   col1  col2\n0     1     2\n1     3     4</code></pre>\n\n<p>​        来看看 Series 和 DataFrame 构建索引的方式：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"col1\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"col2\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">a    1.0\nb    2.0\nc    3.0\ndtype: float64\n   col1  col2\na     1     2\nb     3     4</code></pre>\n\n<p>​        既然 DataFrame 的 Column 和 Index 这么有意思，十有八九，你会想取出来用一用这些 Column 和 Index，比如你数据比较大的时候，想初步看看这份数据涉及了多少特征， 数据的 index 有多少种的时候，你可以直接获取到这些信息。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">Index([&#39;a&#39;, &#39;b&#39;], dtype&#x3D;&#39;object&#39;)\nIndex([&#39;col1&#39;, &#39;col2&#39;], dtype&#x3D;&#39;object&#39;)</code></pre>\n\n<p>​        如果写前端的朋友，你们时常会遇到 json 形式的数据，比如可以像下面这样处理。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">my_json_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">111</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span>\npd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>my_json_data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rose\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        Pandas 真的用心良苦，为我们广大数据同胞提供了这么多这么丰富的接口。学会这样观看数据，我们在分析和处理数据的时候就更有把握了。</p>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        Pandas 中，为了我们提供了日常最常用的数据存储方式，分别是 Series 的一维数据，和 DataFrame 的二维数据，在机器学习中，我们常会接触到 3 维甚至是更高维度， 但是在分析数据的时候，特别是，要结合 Excel 来分析数据的时候，二维数据才是最常用的。</p>\n<h2 id=\"选取数据\"><a href=\"#选取数据\" class=\"headerlink\" title=\"选取数据\"></a>选取数据</h2><p>​        Pandas的数据结构和你管理Excel很像，特别是DataFrame就约等于Excel当中的sheet。我们非常适应用Excel来选择和修改数据，但是如果把它程序化，用代码来修改和选取的时候，我们该如何操作呢？</p>\n<p>​        Pandas的数据选取和List，Numpy Array还是有挺大差别的，因为它想要维护了很多的人类可读的索引信息，所以它在索引的时候，也有不一样的处理方式，今天我们就来看看Pandas是如何处理数据选取和修改的吧。</p>\n<h3 id=\"多种选取方式\"><a href=\"#多种选取方式\" class=\"headerlink\" title=\"多种选取方式\"></a>多种选取方式</h3><p>​        在Pandas中，有丰富的选取数据方式，这可比List，Dictionary，甚至是Numpy还要多样化。我们既能通过文字标签来定位数据，也能通过数值序号来定位。所以为了实现这种多样性，Pandas对于数据的选取采用了不同类型的处理方法，比如<code>.loc</code>,<code>.iloc</code>等，我们来一一介绍吧。</p>\n<p>​        面对应用比较多的工作学习场景，我先以 Excel 型的表格数据举例，请你帮我构建一下下面这份 DataFrame：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>\n  data<span class=\"token punctuation\">,</span>\n  index<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcdef\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  columns<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ABCD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndf\ndata</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">    A   B   C   D\na -12 -11 -10  -9\nb  -8  -7  -6  -5\nc  -4  -3  -2  -1\nd   0   1   2   3\ne   4   5   6   7\nf   8   9  10  11\narray([[-12, -11, -10,  -9],\n       [ -8,  -7,  -6,  -5],\n       [ -4,  -3,  -2,  -1],\n       [  0,   1,   2,   3],\n       [  4,   5,   6,   7],\n       [  8,   9,  10,  11]])</code></pre>\n\n<h3 id=\"选Column\"><a href=\"#选Column\" class=\"headerlink\" title=\"选Column\"></a>选Column</h3><p>​        看到上面的这份数据之后，我们发现DataFrame会分Column和Row（index）。在机器学习中，通常Column是特征，Row是数据样本，要对某个特征进行分析的时候，比如要做特征数值分布的分析，我们得把特征取出来吧，那么可以进行如下操作：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">[</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">]</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">a   -11\nb    -7\nc    -3\nd     1\ne     5\nf     9\nName: B, dtype: int64</code></pre>\n\n<p>​        选一个就这么简单，但偶尔还想多选几个特征，怎么搞呢？回忆一下之前Numpy中的Array是怎么选的？</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numpy:\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\ndf:\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">numpy:\n [[-10 -11]\n [ -6  -7]\n [ -2  -3]\n [  2   1]\n [  6   5]\n [ 10   9]]\ndf:\n     C   B\na -10 -11\nb  -6  -7\nc  -2  -3\nd   2   1\ne   6   5\nf  10   9</code></pre>\n\n<p>​        现在可以选column了，那意味着肯定能将Index（Row）的信息也一起考虑到数据筛选的工作当中了。</p>\n<h3 id=\"loc\"><a href=\"#loc\" class=\"headerlink\" title=\"loc\"></a>loc</h3><p>​        在Numpy中选取数据一般是按照在维度上的排序来定位的。比如对于你刚刚创建的Numpy数据<code>data</code>：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">array([[-3, -2]])</code></pre>\n\n<p>​        而在DataFrame中，同样是上述功能，你也可以这么干：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">]</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">   B  C  D\nc -3 -2 -1\nd  1  2  3</code></pre>\n\n<p>​        不知道你有没有发现，这个 <code>&quot;c&quot;:&quot;d&quot;</code> 和 <code>&quot;B&quot;:&quot;D&quot;</code> 明明对应的是上面 <code>data</code> 的 <code>[2:3]</code> 和 <code>[1:3]</code>，但为什么它还包含了最后一位的 <code>&quot;d&quot;</code> 和 <code>&quot;D&quot;</code> 呢？这的确是 Pandas 的一个用心良苦，我猜他是为了更贴切 Excel 中的使用原则吧，想一想，如果你像下面这样， 在选择 Excel 要被筛选的数据时，从 b 选到 d，其实你是有包含 d 的。所以我说，Pandas 这么设计，原因之一也应该是为了照顾我们吧。</p>\n<p>​        除了筛选一个片段，还可以像 Numpy 那样单个单个的选取。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numpy:\\n\"</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\ndf:\\n\"</span><span class=\"token punctuation\">,</span>df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">numpy:\n [[ 0  1  2  3]\n [-8 -7 -6 -5]]\n\ndf:\n    A  B  C  D\nd  0  1  2  3\nb -8 -7 -6 -5</code></pre>\n\n<p>​        上面这两个例子，不难看出，Pandas 选取数据的底层逻辑，和 Python Numpy 的类似，都是按维度的先后（先选第一维，再第二，以此类推）， 开始选取。按数据的索引找到维度上的对应索引区域。</p>\n<p>​        下面我再来整个有趣的，如果我不按字母顺序去组织 index，比如从原本的 <code>index=abcdef</code> 换成 <code>index=beacdf</code>， 猜猜下面的这份数据索引会找到哪一份子数据？</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df2 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>\n  data<span class=\"token punctuation\">,</span>\n  index<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"beacdf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  columns<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ABCD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df2<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">    A   B   C   D\nb -12 -11 -10  -9\ne  -8  -7  -6  -5\na  -4  -3  -2  -1\nc   0   1   2   3\nd   4   5   6   7\nf   8   9  10  11\n   A  B  C  D\ne -8 -7 -6 -5\na -4 -3 -2 -1\nc  0  1  2  3</code></pre>\n\n<h3 id=\"iloc\"><a href=\"#iloc\" class=\"headerlink\" title=\"iloc\"></a>iloc</h3><p>​        看完面向 Excel 编程，我们再来回到编程本身，用程序的思维去选取数据。这意味着什么？用最朴素的方法，也是意味着能更快找到数据位置，比如直接用位置信息来筛选。 Numpy 不就是这么干的吗？这时 <code>.iloc</code> 功能就派上用场了。</p>\n<p>​        看看<code>iloc</code>的功能是什么：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numpy:\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\ndf:\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">numpy:\n [[-3 -2]]\n\ndf:\n    B  C\nc -3 -2</code></pre>\n\n<p>​        简直和 Numpy 的模式一模一样，就是结果中多了一个 DataFrame 的标签信息。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numpy:\\n\"</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\ndf:\\n\"</span><span class=\"token punctuation\">,</span>df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">numpy:\n [[ 0  1  2  3]\n [-8 -7 -6 -5]]\n\ndf:\n    A  B  C  D\nd  0  1  2  3\nb -8 -7 -6 -5</code></pre>\n\n<h3 id=\"loc和iloc混搭\"><a href=\"#loc和iloc混搭\" class=\"headerlink\" title=\"loc和iloc混搭\"></a>loc和iloc混搭</h3><p>​        难免有时候，我们需要混搭 loc 和 iloc 的方式，比如我想要选取第 2 到第 4 位数据的 A C 两个特征，这时咋办？ 想想 Pandas 这么牛逼，肯定有办法解决。的确，它解决的方法是采用索引转换的方式，比如我在 <code>.loc</code> 模式下，将序号索引转换成 <code>.loc</code> 的标签索引。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">row_labels <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"row_labels:\\n\"</span><span class=\"token punctuation\">,</span> row_labels<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\ndf:\\n\"</span><span class=\"token punctuation\">,</span>df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span>row_labels<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">row_labels:\n Index([&#39;c&#39;, &#39;d&#39;], dtype&#x3D;&#39;object&#39;)\n\ndf:\n    A  C\nc -4 -2\nd  0  2</code></pre>\n\n<p>​        再看看 Column 的 labels 怎么取:</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">col_labels <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"col_labels:\\n\"</span><span class=\"token punctuation\">,</span> col_labels<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\ndf:\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span>row_labels<span class=\"token punctuation\">,</span> col_labels<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">col_labels:\n Index([&#39;A&#39;, &#39;D&#39;], dtype&#x3D;&#39;object&#39;)\n\ndf:\n    A  D\nc -4 -1\nd  0  3</code></pre>\n\n<p>​        清楚了吧，用 <code>df.index</code> 和 <code>df.columns</code> 来调取到全部的标签，然后在用像 Numpy index 索引的方式把这些标签给筛选出来，放到 <code>.loc</code> 里面用。 那反过来，我想要找 A C 两个特征的 前两个数据，这时咋办？</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">col_index <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">.</span>get_indexer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"col_index:\\n\"</span><span class=\"token punctuation\">,</span> col_index<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\ndf:\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> col_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">col_index:\n [0 1]\n\ndf:\n     A   B\na -12 -11\nb  -8  -7</code></pre>\n\n<p>​        同理，<code>df.index.get_indexer([&quot;a&quot;, &quot;b&quot;])</code> 也可以这样获取到 label 对应的 index 信息。</p>\n<h3 id=\"条件过滤筛选\"><a href=\"#条件过滤筛选\" class=\"headerlink\" title=\"条件过滤筛选\"></a>条件过滤筛选</h3><p>​        按条件过滤其实是一件很有趣的事，因为很多情况我们事先也不知道具体的 index 是什么，我们更想要从某些条件中筛选数据。 下面我举几个例子，大家应该很容易 get 到其中的奥秘。</p>\n<ul>\n<li><strong>选在 A Column 中小于 0 的那些数据</strong></li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">[</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">    A   B   C  D\na -12 -11 -10 -9\nb  -8  -7  -6 -5\nc  -4  -3  -2 -1</code></pre>\n\n<ul>\n<li><strong>选在第一行数据不小于 -10 的数据</strong></li>\n</ul>\n<p>​        这里注意了你可以用两种方式，一种是 <code>~</code> 来表示 <code>非</code> 什么什么，第二种是直接用 <code>&gt;=-10</code> 来筛选。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~:\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n>=:\\n\"</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">~:\n     C   D\na -10  -9\nb  -6  -5\nc  -2  -1\nd   2   3\ne   6   7\nf  10  11\n\n&gt;&#x3D;:\n     C   D\na -10  -9\nb  -6  -5\nc  -2  -1\nd   2   3\ne   6   7\nf  10  11</code></pre>\n\n<ul>\n<li><strong>选在第一行数据不小于 -10 或小于 -11 的数据</strong></li>\n</ul>\n<p>​        同上面类似的，我还能用或 <code>|</code> 来表示 or 的意思, <code>&amp;</code> 表述 and。比如选在第一行数据不小于 -10 或小于 -11 的数据:</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">i0 <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\ndf<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>i0 <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>i0 <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">    A   C   D\na -12 -10  -9\nb  -8  -6  -5\nc  -4  -2  -1\nd   0   2   3\ne   4   6   7\nf   8  10  11</code></pre>\n\n<p>​        所以你看，你可以用 <code>.loc</code> 或者 <code>.iloc</code> 来做过滤处理。然后用 <code>.loc</code> 来做筛选。为什么用 <code>.iloc</code> 来筛选呢，比如下面这样：</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#报错</span></code></pre>\n\n<p>​        这样写居然会导致报错，为什么呢？你分析分析，把 <code>~(df.iloc[0] &lt; -10)</code> 这个筛选条件打印出来看看它是什么值。然后想一想 <code>.iloc</code> 能够接受的值是啥？ 想清楚了，这个问题就迎刃而解了。</p>\n<pre class=\"language-none\"><code class=\"language-none\">A    False\nB    False\nC     True\nD     True\nName: a, dtype: bool</code></pre>\n\n\n\n<h3 id=\"Series和DataFrame类似\"><a href=\"#Series和DataFrame类似\" class=\"headerlink\" title=\"Series和DataFrame类似\"></a>Series和DataFrame类似</h3><p>​        既然二维的 DataFrame 你都已经玩过了，Series 的操作就不在话下了。</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">list_data <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>\n  list_data<span class=\"token punctuation\">,</span> \n  index<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcdefgh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ns</code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">a   -4\nb   -3\nc   -2\nd   -1\ne    0\nf    1\ng    2\nh    3\ndtype: int64</code></pre>\n\n<ul>\n<li>按标签筛选数据 <code>.loc</code></li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"f\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">a   -4\ng    2\nc   -2\ndtype: int64 \n\nc   -2\nd   -1\ne    0\nf    1\ndtype: int64</code></pre>\n\n<ul>\n<li>按 index 筛选数据 <code>.iloc</code></li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">d   -1\nb   -3\nf    1\ndtype: int64 \n\nc   -2\nd   -1\ndtype: int64</code></pre>\n\n<ul>\n<li><code>iloc</code> 和 <code>loc</code> 互相混用</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">.</span>get_indexer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">c   -2\nd   -1\ndtype: int64 \n\nd   -1\nc   -2\ndtype: int64</code></pre>\n\n<ul>\n<li>按条件过滤筛选</li>\n</ul>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span>s <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>​        运行结果：</p>\n<pre class=\"language-none\"><code class=\"language-none\">a   -4\nb   -3\nc   -2\nd   -1\ne    0\nf    1\ng    2\ndtype: int64 \n\nd   -1\ndtype: int64 \n\na   -4\nb   -3\nc   -2\nd   -1\nh    3\ndtype: int64</code></pre>\n\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        Pandas 的数据筛选方法比 Numpy 丰富多了，介绍的篇幅也有点多，我日常用的最多的还是用条件来筛选，比如在处理机器学习的脏数据的时候，要用很多筛选逻辑。 有时甚至我会觉得 Numpy 的筛选方式不够多，专门把 Numpy 数据转换成 Pandas 数据，然后再用 Pandas 提供的丰富工具处理数据，再转回 Numpy。 相信你用熟了之后，数据处理将要简单很多。</p>","categories":[],"tags":[{"name":"python","path":"api/tags/python.json"},{"name":"机器学习基础","path":"api/tags/机器学习基础.json"}]}