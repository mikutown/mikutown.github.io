{"title":"","slug":"算法练习-5-排序预习(1.1.26)","date":"2021-01-15T04:55:50.000Z","updated":"2021-01-15T05:24:10.539Z","comments":true,"path":"api/articles/算法练习-5-排序预习(1.1.26).json","excerpt":null,"covers":null,"content":"<h1 id=\"算法练习-5-排序预习-1-1-26\"><a href=\"#算法练习-5-排序预习-1-1-26\" class=\"headerlink\" title=\"算法练习-5-排序预习(1.1.26)\"></a>算法练习-5-排序预习(1.1.26)</h1><h2 id=\"1-1-26\"><a href=\"#1-1-26\" class=\"headerlink\" title=\"1.1.26\"></a>1.1.26</h2><h3 id=\"将三个数字排序。\"><a href=\"#将三个数字排序。\" class=\"headerlink\" title=\"将三个数字排序。\"></a><strong>将三个数字排序。</strong></h3><p><strong>1.1.26 将三个数字排序。假设 a、b、c 和 t 都是同一种原始数字类型的变量。证明以下代码能够将 a、 b、c 按照升序排列:</strong><br><strong>if (a &gt; b) { t = a; a = b; b = t; }</strong><br><strong>if (a &gt; c) { t = a; a = c; c = t; }</strong><br><strong>if (b &gt; c) { t = b; b = c; c = t; }</strong></p>\n<p><strong>1.1.26 Sorting three numbers. Suppose that the variables a, b, c, and t are all of the same numeric primitive type. Show that the following code puts a, b, and c in ascending order:</strong><br><strong>if (a &gt; b) { t = a; a = b; b = t; }</strong><br><strong>if (a &gt; c) { t = a; a = c; c = t; }</strong><br><strong>if (b &gt; c) { t = b; b = c; c = t; }</strong></p>\n<ul>\n<li>答案</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>leafii<span class=\"token punctuation\">.</span>practice<span class=\"token punctuation\">.</span>charpter01</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sortdemo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"排序前：a=\"</span> <span class=\"token operator\">+</span> a <span class=\"token operator\">+</span> <span class=\"token string\">\" b=\"</span> <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> <span class=\"token string\">\" c=\"</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> t <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span> b <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> t <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> a <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span> c <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> t <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span> b <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span> c <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"排序后：a=\"</span> <span class=\"token operator\">+</span> a <span class=\"token operator\">+</span> <span class=\"token string\">\" b=\"</span> <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> <span class=\"token string\">\" c=\"</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">sortdemo</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>运行结果</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">23\n13\n42\n排序前：a&#x3D;23 b&#x3D;13 c&#x3D;42\n排序后：a&#x3D;13 b&#x3D;23 c&#x3D;42\n43\n23\n12\n排序前：a&#x3D;43 b&#x3D;23 c&#x3D;12\n排序后：a&#x3D;12 b&#x3D;23 c&#x3D;43\n12\n23\n34\n排序前：a&#x3D;12 b&#x3D;23 c&#x3D;34\n排序后：a&#x3D;12 b&#x3D;23 c&#x3D;34\n</code></pre>\n<p>分析代码可知，a在两次与b，c的比较后成为了最小的值</p>\n<p>b在与c比较后又成为了第二小的值 因此最后的结果为c最大，b次之，a最小。</p>\n","more":"<h1 id=\"算法练习-5-排序预习-1-1-26\"><a href=\"#算法练习-5-排序预习-1-1-26\" class=\"headerlink\" title=\"算法练习-5-排序预习(1.1.26)\"></a>算法练习-5-排序预习(1.1.26)</h1><h2 id=\"1-1-26\"><a href=\"#1-1-26\" class=\"headerlink\" title=\"1.1.26\"></a>1.1.26</h2><h3 id=\"将三个数字排序。\"><a href=\"#将三个数字排序。\" class=\"headerlink\" title=\"将三个数字排序。\"></a><strong>将三个数字排序。</strong></h3><p><strong>1.1.26 将三个数字排序。假设 a、b、c 和 t 都是同一种原始数字类型的变量。证明以下代码能够将 a、 b、c 按照升序排列:</strong><br><strong>if (a &gt; b) { t = a; a = b; b = t; }</strong><br><strong>if (a &gt; c) { t = a; a = c; c = t; }</strong><br><strong>if (b &gt; c) { t = b; b = c; c = t; }</strong></p>\n<p><strong>1.1.26 Sorting three numbers. Suppose that the variables a, b, c, and t are all of the same numeric primitive type. Show that the following code puts a, b, and c in ascending order:</strong><br><strong>if (a &gt; b) { t = a; a = b; b = t; }</strong><br><strong>if (a &gt; c) { t = a; a = c; c = t; }</strong><br><strong>if (b &gt; c) { t = b; b = c; c = t; }</strong></p>\n<ul>\n<li>答案</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>leafii<span class=\"token punctuation\">.</span>practice<span class=\"token punctuation\">.</span>charpter01</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sortdemo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"排序前：a=\"</span> <span class=\"token operator\">+</span> a <span class=\"token operator\">+</span> <span class=\"token string\">\" b=\"</span> <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> <span class=\"token string\">\" c=\"</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> t <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span> b <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> t <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> a <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span> c <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> t <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span> b <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span> c <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"排序后：a=\"</span> <span class=\"token operator\">+</span> a <span class=\"token operator\">+</span> <span class=\"token string\">\" b=\"</span> <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> <span class=\"token string\">\" c=\"</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">sortdemo</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<ul>\n<li>运行结果</li>\n</ul>\n<pre class=\"language-none\"><code class=\"language-none\">23\n13\n42\n排序前：a&#x3D;23 b&#x3D;13 c&#x3D;42\n排序后：a&#x3D;13 b&#x3D;23 c&#x3D;42\n43\n23\n12\n排序前：a&#x3D;43 b&#x3D;23 c&#x3D;12\n排序后：a&#x3D;12 b&#x3D;23 c&#x3D;43\n12\n23\n34\n排序前：a&#x3D;12 b&#x3D;23 c&#x3D;34\n排序后：a&#x3D;12 b&#x3D;23 c&#x3D;34\n</code></pre>\n<p>分析代码可知，a在两次与b，c的比较后成为了最小的值</p>\n<p>b在与c比较后又成为了第二小的值 因此最后的结果为c最大，b次之，a最小。</p>\n","categories":[],"tags":[{"name":"算法","path":"api/tags/算法.json"}]}