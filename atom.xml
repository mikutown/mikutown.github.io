<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LeafiiのBlog</title>
  
  
  <link href="https://mikutown.gitee.io/blog/atom.xml" rel="self"/>
  
  <link href="https://mikutown.gitee.io/blog/"/>
  <updated>2021-01-15T12:27:16.338Z</updated>
  <id>https://mikutown.gitee.io/blog/</id>
  
  <author>
    <name>Leafii</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法练习-7-删除有序数组中的重复元素(1.1.28)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/15/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-7-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-(1.1.28)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/15/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-7-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-(1.1.28)/</id>
    <published>2021-01-15T06:13:56.000Z</published>
    <updated>2021-01-15T12:27:16.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-7-删除有序数组中的重复元素-1-1-28"><a href="#算法练习-7-删除有序数组中的重复元素-1-1-28" class="headerlink" title="算法练习-7-删除有序数组中的重复元素-(1.1.28)"></a>算法练习-7-删除有序数组中的重复元素-(1.1.28)</h1><p>知识点</p><ul><li>遍历数组</li><li>打印数组中的每个元素</li></ul><a id="more"></a><h2 id="1-1-28"><a href="#1-1-28" class="headerlink" title="1.1.28"></a>1.1.28</h2><h3 id="删除重复元素。修改BinarySearch类中的测试用例来删去排序之后白名单中的所有重复元素。"><a href="#删除重复元素。修改BinarySearch类中的测试用例来删去排序之后白名单中的所有重复元素。" class="headerlink" title="删除重复元素。修改BinarySearch类中的测试用例来删去排序之后白名单中的所有重复元素。"></a><strong>删除重复元素。修改BinarySearch类中的测试用例来删去排序之后白名单中的所有重复元素。</strong></h3><p><strong>1.1.28 Remove duplicates. Modify the test client in BinarySearch to remove any duplicate keys in the whitelist after the sort.</strong></p><p>（这是一道Leetcode题目，原题描述如下：</p><pre class="language-none"><code class="language-none">Remove Duplicates from Sorted ArrayGiven a sorted array, remove the duplicates in place such that each element appear only once and return the new length.Do not allocate extra space for another array, you must do this in place with constant memory.For example,Given input array nums &#x3D; [1,1,2],Your function should return length &#x3D; 2, with the first two elements of nums being 1 and 2 respectively. It doesn&#39;t matter what you leave beyond the new length.</code></pre><ul><li><p>我自己的思路</p><p>写一个接收数组信息的函数getArr，输入数组大小和数组内容后，使用冒泡排序进行数组的排序，从小到大，方便之后的去重。</p><p>又写了一个生成数组元素个数的count数组的函数getCount，返回一个数组count，count[i]表示数组arr中i元素的数量。</p><p>然后写了一个函数delSurplus，参数是两个数组（arr和count），通过for循环将多余的元素用后面的元素依次覆盖，但是我的方法有个缺点是不支持数组里负数的元素，可以加另一个count进行去重。</p></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdIn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">BinarySearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取key在数组a中的位置，若没有则返回-1     * @param a     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hi <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;=</span> hi<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Key is in a[lo..hi] or not present.</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span>      <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> hi <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> lo <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取key在数组a中的位置，若没有则返回-1     * @param key     * @param a     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 对数组进行冒泡排序     * @param arr     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 生成手动输入后的有序数组     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入数组的大小（一个整数）:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入数组的数字，以空格隔开或者回车隔开:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"将输入的数组排序后:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"arr["</span><span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"]="</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 生成计数数组     * @param arr     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            count<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"计数数组的值为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"count["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 通过count数组删除arr中的重复元素，并返回一个新的数组     * @param arr     * @param count     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">delSurplus</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> del <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                del <span class="token operator">=</span> <span class="token function">rank</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> del<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> array<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token function">getArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token function">getCount</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token function">delSurplus</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"去重后结果为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"array["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果</p><pre class="language-none"><code class="language-none">请输入数组的大小（一个整数）:10请输入数组的数字，以空格隔开或者回车隔开:9 7 7 5 5 4 4 2 2 1将输入的数组排序后:arr[0]&#x3D;1arr[1]&#x3D;2arr[2]&#x3D;2arr[3]&#x3D;4arr[4]&#x3D;4arr[5]&#x3D;5arr[6]&#x3D;5arr[7]&#x3D;7arr[8]&#x3D;7arr[9]&#x3D;9计数数组的值为：count[0]&#x3D;0 count[1]&#x3D;1 count[2]&#x3D;2 count[3]&#x3D;0 count[4]&#x3D;2 count[5]&#x3D;2 count[6]&#x3D;0 count[7]&#x3D;2 count[8]&#x3D;0 count[9]&#x3D;1 去重后结果为：array[0]&#x3D;1 array[1]&#x3D;2 array[2]&#x3D;4 array[3]&#x3D;5 array[4]&#x3D;7 array[5]&#x3D;9 </code></pre><p>参考答案：</p><p>a)实现思路：数组索引从头移至数组倒数第二个，当前数组索引元素值与下一元素值进行比较，相同时将当前元素值标记成标记值。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token class-name">ArrayOfSorted</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ArrayOfSorted</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token class-name">ArrayOfStored</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token class-name">ArraryOfSorted</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>b)在a思路的基础上增加规则：当前元素与下一个元素不同并且当前元素与前一个元素值相同时那么当前元素标记成标记值。当前元素是倒数第二个元素并且与最后一个元素相同，那么将最后一个元素标记成标记值。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token class-name">IsRepeart</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token class-name">ArrayOfSorted</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ArrayOfSorted</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token class-name">ArrayOfStored</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token class-name">ArraryOfSorted</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token class-name">IsRepeart</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token class-name">ArrayOfStored</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token class-name">ArrayOfStored</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">IsRepeart</span><span class="token punctuation">)</span> <span class="token class-name">ArrayOfStored</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token class-name">IsRepeart</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>还有一个思路</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practise_01_01_28</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span><span class="token operator">++</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/longjin2018/p/9848669.html">https://www.cnblogs.com/longjin2018/p/9848669.html</a></p><p><a href="https://xiaozhuanlan.com/topic/6054279138">https://xiaozhuanlan.com/topic/6054279138</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-7-删除有序数组中的重复元素-1-1-28&quot;&gt;&lt;a href=&quot;#算法练习-7-删除有序数组中的重复元素-1-1-28&quot; class=&quot;headerlink&quot; title=&quot;算法练习-7-删除有序数组中的重复元素-(1.1.28)&quot;&gt;&lt;/a&gt;算法练习-7-删除有序数组中的重复元素-(1.1.28)&lt;/h1&gt;&lt;p&gt;知识点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;遍历数组&lt;/li&gt;
&lt;li&gt;打印数组中的每个元素&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-6-二项分布的递归实现(1.1.27)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/15/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-6-%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83%E7%9A%84%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0-(1.1.27)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/15/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-6-%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83%E7%9A%84%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0-(1.1.27)/</id>
    <published>2021-01-15T05:24:58.000Z</published>
    <updated>2021-01-15T12:27:41.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-6-二项分布的递归实现-1-1-27"><a href="#算法练习-6-二项分布的递归实现-1-1-27" class="headerlink" title="算法练习-6-二项分布的递归实现-(1.1.27)"></a>算法练习-6-二项分布的递归实现-(1.1.27)</h1><p>知识点：</p><ul><li>二项分布</li></ul><a id="more"></a><h2 id="1-1-27"><a href="#1-1-27" class="headerlink" title="1.1.27"></a>1.1.27</h2><h3 id="二项分布。"><a href="#二项分布。" class="headerlink" title="二项分布。"></a><strong>二项分布。</strong></h3><p><strong>1.1.27 二项分布。估计用以下代码计算binomial(100, 50)将会产生的递归调用次数:</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">binomial</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> p<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">binomial</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">+</span> p<span class="token operator">*</span><span class="token function">binomial</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>将已经计算过的值保存在数组中并给出一个更好的实现。</strong></p><p><strong>1.1.27 Binomial distribution. Estimate the number of recursive calls that would be used by the code to compute binomial(100, 50). Develop a better implementation that is based on saving computed values in an array.</strong></p><ul><li>分析</li></ul><p>二项分布的含义：从N个独立的是/非实验中，成功次数的离散概率分布。每次实验的成功概率为p。</p><p>概率质量公式为：<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210115135839132.png" alt="image-20210115135839132" loading="lazy"></p><p>对于k=0，1，2…n 其中</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210115135915178.png" alt="image-20210115135915178" loading="lazy"></p><p>补充说明：<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210115135935309.png" alt="image-20210115135935309" loading="lazy"></p><p>分析此递归算法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1.0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span></code></pre><p>表示的就是这三个等式</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210115135935309.png" alt="image-20210115135935309" loading="lazy"></p><p>而<code> return (1.0 - p)*binomial(N-1, k, p) + p*binomial(N-1, k-1,p);</code>是因为<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210115140523866.png" alt="image-20210115140523866" loading="lazy"></p><p>使用循环数组替换递归算法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">binomial02</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token class-name">N</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">-</span>p<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">*</span>b<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">-</span>p<span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> b<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>分析： </p><p>​    我们为数组b分配了（N+1）*（K+1）个大小的空间</p><pre class="language-none"><code class="language-none"> b[0][0]  b[0][1]  b[0][2]  b[0][3]  b[0][4]  b[0][5] b[1][0]  b[1][1]  b[1][2]  b[1][3]  b[1][4]  b[1][5] b[2][0]  b[2][1]  b[2][2]  b[2][3]  b[2][4]  b[2][5] b[3][0]  b[3][1]  b[3][2]  b[3][3]  b[3][4]  b[3][5] b[4][0]  b[4][1]  b[4][2]  b[4][3]  b[4][4]  b[4][5] b[5][0]  b[5][1]  b[5][2]  b[5][3]  b[5][4]  b[5][5] b[6][0]  b[6][1]  b[6][2]  b[6][3]  b[6][4]  b[6][5] b[7][0]  b[7][1]  b[7][2]  b[7][3]  b[7][4]  b[7][5] b[8][0]  b[8][1]  b[8][2]  b[8][3]  b[8][4]  b[8][5] b[9][0]  b[9][1]  b[9][2]  b[9][3]  b[9][4]  b[9][5]b[10][0] b[10][1] b[10][2] b[10][3] b[10][4] b[10][5]</code></pre><p>第一个for循环是为第一列进行赋值，双重循环并没有涉及第一行和第一列的赋值。我们可以看出 b[10][5] = 0.25 * b[10-1][5-1] + 0.75 * b[10-1][5] ，而b[9][4] =  0.25 * b[8][3] + 0.75 * b[8][4]</p><p>b[9][5] =  0.25 * b[8][4] + 0.75 * b[8][5]</p><p>相当于 <code>return ( 1.0 - p ) * binomial(n-1, k, p) + p * binomial(n-1, k-1, p);</code> 也就是用循环数组的方式代替了递归调用。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://ddrv.cn/a/63651">http://ddrv.cn/a/63651</a></p><p><a href="https://zhangjia.tv/670.html">https://zhangjia.tv/670.html</a> </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-6-二项分布的递归实现-1-1-27&quot;&gt;&lt;a href=&quot;#算法练习-6-二项分布的递归实现-1-1-27&quot; class=&quot;headerlink&quot; title=&quot;算法练习-6-二项分布的递归实现-(1.1.27)&quot;&gt;&lt;/a&gt;算法练习-6-二项分布的递归实现-(1.1.27)&lt;/h1&gt;&lt;p&gt;知识点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二项分布&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://mikutown.gitee.io/blog/2021/01/15/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-5-%E6%8E%92%E5%BA%8F%E9%A2%84%E4%B9%A0(1.1.26)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/15/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-5-%E6%8E%92%E5%BA%8F%E9%A2%84%E4%B9%A0(1.1.26)/</id>
    <published>2021-01-15T04:55:50.000Z</published>
    <updated>2021-01-15T05:24:10.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-5-排序预习-1-1-26"><a href="#算法练习-5-排序预习-1-1-26" class="headerlink" title="算法练习-5-排序预习(1.1.26)"></a>算法练习-5-排序预习(1.1.26)</h1><h2 id="1-1-26"><a href="#1-1-26" class="headerlink" title="1.1.26"></a>1.1.26</h2><h3 id="将三个数字排序。"><a href="#将三个数字排序。" class="headerlink" title="将三个数字排序。"></a><strong>将三个数字排序。</strong></h3><p><strong>1.1.26 将三个数字排序。假设 a、b、c 和 t 都是同一种原始数字类型的变量。证明以下代码能够将 a、 b、c 按照升序排列:</strong><br><strong>if (a &gt; b) { t = a; a = b; b = t; }</strong><br><strong>if (a &gt; c) { t = a; a = c; c = t; }</strong><br><strong>if (b &gt; c) { t = b; b = c; c = t; }</strong></p><p><strong>1.1.26 Sorting three numbers. Suppose that the variables a, b, c, and t are all of the same numeric primitive type. Show that the following code puts a, b, and c in ascending order:</strong><br><strong>if (a &gt; b) { t = a; a = b; b = t; }</strong><br><strong>if (a &gt; c) { t = a; a = c; c = t; }</strong><br><strong>if (b &gt; c) { t = b; b = c; c = t; }</strong></p><ul><li>答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sortdemo</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前：a="</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">" b="</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">" c="</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t <span class="token operator">=</span> a<span class="token punctuation">;</span> a <span class="token operator">=</span> b<span class="token punctuation">;</span> b <span class="token operator">=</span> t<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t <span class="token operator">=</span> a<span class="token punctuation">;</span> a <span class="token operator">=</span> c<span class="token punctuation">;</span> c <span class="token operator">=</span> t<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t <span class="token operator">=</span> b<span class="token punctuation">;</span> b <span class="token operator">=</span> c<span class="token punctuation">;</span> c <span class="token operator">=</span> t<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后：a="</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">" b="</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">" c="</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> b <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sortdemo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>运行结果</li></ul><pre class="language-none"><code class="language-none">231342排序前：a&#x3D;23 b&#x3D;13 c&#x3D;42排序后：a&#x3D;13 b&#x3D;23 c&#x3D;42432312排序前：a&#x3D;43 b&#x3D;23 c&#x3D;12排序后：a&#x3D;12 b&#x3D;23 c&#x3D;43122334排序前：a&#x3D;12 b&#x3D;23 c&#x3D;34排序后：a&#x3D;12 b&#x3D;23 c&#x3D;34</code></pre><p>分析代码可知，a在两次与b，c的比较后成为了最小的值</p><p>b在与c比较后又成为了第二小的值 因此最后的结果为c最大，b次之，a最小。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算法练习-5-排序预习-1-1-26&quot;&gt;&lt;a href=&quot;#算法练习-5-排序预习-1-1-26&quot; class=&quot;headerlink&quot; title=&quot;算法练习-5-排序预习(1.1.26)&quot;&gt;&lt;/a&gt;算法练习-5-排序预习(1.1.26)&lt;/h1&gt;&lt;h2 id=</summary>
      
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-4-二分法查找的递归实现（1.1.22-1.1.25)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/12/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-4-%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE%E7%9A%84%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%EF%BC%881.1.22-1.1.25)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/12/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-4-%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE%E7%9A%84%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%EF%BC%881.1.22-1.1.25)/</id>
    <published>2021-01-12T06:16:59.000Z</published>
    <updated>2021-01-12T12:57:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-4-二分法查找的递归实现（1-1-22-1-1-25"><a href="#算法练习-4-二分法查找的递归实现（1-1-22-1-1-25" class="headerlink" title="算法练习-4-二分法查找的递归实现（1.1.22-1.1.25)"></a>算法练习-4-二分法查找的递归实现（1.1.22-1.1.25)</h1><ul><li>知识点<ul><li>二分法查找（BinarySearch)</li><li>递归</li><li>欧几里得算法</li></ul></li></ul><a id="more"></a><h2 id="1-1-22-1-1-25"><a href="#1-1-22-1-1-25" class="headerlink" title="1.1.22-1.1.25"></a>1.1.22-1.1.25</h2><h3 id="使用1-1-6-4-中的-rank-递归方法"><a href="#使用1-1-6-4-中的-rank-递归方法" class="headerlink" title="使用1.1.6.4 中的 rank()递归方法"></a><strong>使用1.1.6.4 中的 rank()递归方法</strong></h3><p>1.1.22 重新实现 BinarySearch 并跟踪该方法的调用。每当该方法被调用时，打印出它的参数 lo 和 hi 并按照递归的深度缩进。提示 :为递归方法加一个参数来保存递归的深度。</p><p><em>1.1.22 Write a version of Binary Search that uses the recursive rank() given on page 25 and traces the method calls. Each time the recursive method is called, print the argument values lo and hi, indented by the depth of the recursion. Hint: Add an argument to the recursive method that keeps track of the depth.</em></p><p>书中的rank方法示例代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">rank</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">//如果key存在于a[]中，它的索引不会小于lo且不会大于hi</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lo <span class="token operator">></span> hi<span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">rank</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> a<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">rank</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> a<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>                           <span class="token keyword">return</span> mid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>关于递归，我们再回顾一下书中关于递归的描述：</p><ul><li>编写递归代码时最重要的有以下三点：<ul><li>递归总有个最简单的情况。</li><li>递归调用总是去尝试解决一个规模更小的子问题，这样递归才能收敛到最简单的情况。</li><li>递归调用的父问题和尝试解决的子问题之间不应该有交集。</li></ul></li></ul><p>答案：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> rank <span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">rank</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> rank <span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> lo<span class="token punctuation">,</span><span class="token keyword">int</span> hi<span class="token punctuation">,</span><span class="token keyword">int</span> deep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hi <span class="token operator">&lt;</span> lo<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> deep <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lo: "</span><span class="token operator">+</span>lo<span class="token operator">+</span><span class="token string">" hi: "</span><span class="token operator">+</span>hi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> rank <span class="token punctuation">(</span>key<span class="token punctuation">,</span>a<span class="token punctuation">,</span>lo<span class="token punctuation">,</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>deep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> rank <span class="token punctuation">(</span>key<span class="token punctuation">,</span>a<span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>hi<span class="token punctuation">,</span>deep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> mid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>测试用例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">rank</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/**打印出的结果  lo: 0  hi: 16    lo: 9  hi: 16      lo: 9  hi: 11**/</span></code></pre><h3 id="为BinarySearch的测试用例添加一个参数："><a href="#为BinarySearch的测试用例添加一个参数：" class="headerlink" title="为BinarySearch的测试用例添加一个参数："></a>为BinarySearch的测试用例添加一个参数：</h3><p>1.1.23 + 打印出标准输入中不在白名单上的值；-，则打印出标准输入中在名单的值。</p><p><em>1.1.23 Add to the BinarySearch test client the ability to respond to a second argument: + to print numbers from standard input that are not in the whitelist, - to print numbers that are in the whitelist.</em></p><p>分析：</p><p>解答这道题需要我们对IDE环境，给读者解释一下这道题的意思，“+”和“-”是作为参数传进来的。当传入的参数是“+”时则打印出标准输入中不在白名单上的值。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>day01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">BinarySearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hi <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;=</span> hi<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Key is in a[lo..hi] or not present.</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span>      <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> hi <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> lo <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//这里参数symbol本来是要传进来的，这里写死，是为了Demo方便</span>        <span class="token keyword">char</span> symbol <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> whitelist <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// sort the array</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>whitelist<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// read integer key from standard input; print if not in whitelist</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> found <span class="token operator">=</span> <span class="token function">rank</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>whitelist<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'+'</span> <span class="token operator">==</span> symbol <span class="token operator">&amp;&amp;</span> found <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">==</span> symbol <span class="token operator">&amp;&amp;</span> found <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="给出使用欧几里得算法105和24的最大公约数的过程中得到的一系列p和q的值。"><a href="#给出使用欧几里得算法105和24的最大公约数的过程中得到的一系列p和q的值。" class="headerlink" title="给出使用欧几里得算法105和24的最大公约数的过程中得到的一系列p和q的值。"></a>给出使用欧几里得算法105和24的最大公约数的过程中得到的一系列p和q的值。</h3><p>1.1.24 扩展算法中的代码得到一个程序Euclid,从命令行接受两个参数，计算它们的最大公约数并打印出每次调用递归方法时的两个参数。使用你的程序计算1 111 111和1 234 567的最大公约数。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practice03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"gcd(105,24)=%d"</span><span class="token punctuation">,</span><span class="token function">gcd</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span><span class="token keyword">int</span> q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p=%d,q=%d"</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> p <span class="token operator">%</span> q<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果</p><pre class="language-none"><code class="language-none">p&#x3D;105,q&#x3D;24p&#x3D;24,q&#x3D;9p&#x3D;9,q&#x3D;6p&#x3D;6,q&#x3D;3p&#x3D;3,q&#x3D;0gcd(105,24)&#x3D;3</code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practice03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"gcd(1111111,1234567)=%d"</span><span class="token punctuation">,</span><span class="token function">gcd</span><span class="token punctuation">(</span><span class="token number">1111111</span><span class="token punctuation">,</span><span class="token number">1234567</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span><span class="token keyword">int</span> q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p=%d,q=%d"</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> p <span class="token operator">%</span> q<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果</p><pre class="language-none"><code class="language-none">p&#x3D;1111111,q&#x3D;1234567p&#x3D;1234567,q&#x3D;1111111p&#x3D;1111111,q&#x3D;123456p&#x3D;123456,q&#x3D;7p&#x3D;7,q&#x3D;4p&#x3D;4,q&#x3D;3p&#x3D;3,q&#x3D;1p&#x3D;1,q&#x3D;0gcd(1111111,1234567)&#x3D;1</code></pre><h3 id="使用数学归纳法"><a href="#使用数学归纳法" class="headerlink" title="使用数学归纳法"></a>使用数学归纳法</h3><p>证明欧几里得算法能够计算任意一堆非负整数p和q的最大公约数。</p><ul><li><p>分析：</p><p>欧几里德的算法关键在于证明等式gcd(a,b)=gcd(b,a mod b)的正确性。</p></li><li><p>定理：</p><p>a，b为正整数，则gcd(a,b)=gcd(b,a mod b) </p></li><li><p>证明：</p><pre class="language-none"><code class="language-none">k,r为整数，设r &#x3D; a mod b,则a可以表示成a&#x3D;kb+r。假设d是&#123;a,b&#125;的一个公约数，则d整除a,d整除b，而r&#x3D;a-kb，因此d整除r，d也是b和r的公约数。 假设d是&#123;b,r&#125;的一个公约数，则d整除b,d整除r，而a&#x3D;kb+r，因此d整除a, d也是a和b的公约数。因此&#123;a,b&#125;和&#123;b,r&#125;的公因子集合是一样的。特别地，&#123;a,b&#125;的最大共因子和&#123;b,r&#125;的最大公因子是一样的，即gcd(a,b)&#x3D;gcd(b,a mod b)。</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2></li></ul><p><a href="https://xiaozhuanlan.com/topic/1539086427">算法练习(4):二分法查找的递归实现(1.1.22-1.1.25) － 小专栏 (xiaozhuanlan.com)</a></p><p><a href="https://www.cnblogs.com/longjin2018/p/9848621.html">Algs4-1.1.24欧几里得算法求最大公约数 - 修电脑的龙生 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-4-二分法查找的递归实现（1-1-22-1-1-25&quot;&gt;&lt;a href=&quot;#算法练习-4-二分法查找的递归实现（1-1-22-1-1-25&quot; class=&quot;headerlink&quot; title=&quot;算法练习-4-二分法查找的递归实现（1.1.22-1.1.25)&quot;&gt;&lt;/a&gt;算法练习-4-二分法查找的递归实现（1.1.22-1.1.25)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;二分法查找（BinarySearch)&lt;/li&gt;
&lt;li&gt;递归&lt;/li&gt;
&lt;li&gt;欧几里得算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Go语言の运算符</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/09/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/09/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2021-01-09T13:43:50.000Z</published>
    <updated>2021-01-11T11:03:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go语言の运算符"><a href="#Go语言の运算符" class="headerlink" title="Go语言の运算符"></a>Go语言の运算符</h1><p>本文介绍了Go语言的运算符</p><a id="more"></a><h2 id="运算符的基本介绍"><a href="#运算符的基本介绍" class="headerlink" title="运算符的基本介绍"></a>运算符的基本介绍</h2><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等等</p><ol><li>算术运算符</li><li>赋值运算符</li><li>比较运算符/关系运算符</li><li>逻辑运算符</li><li>位运算符</li><li>其他运算符</li></ol><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p>算术运算符是对数值类型的变量进行运算的，比如：加减乘除。在Go程序中使用的非常多</p><h3 id="算术运算符的一览表"><a href="#算术运算符的一览表" class="headerlink" title="算术运算符的一览表"></a>算术运算符的一览表</h3><table><thead><tr><th>运算符</th><th>运算</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-4</td><td>-4</td></tr><tr><td>+</td><td>加</td><td>5+5</td><td>10</td></tr><tr><td>-</td><td>减</td><td>6-4</td><td>2</td></tr><tr><td>*</td><td>乘</td><td>3*4</td><td>12</td></tr><tr><td>/</td><td>除</td><td>5/5</td><td>1</td></tr><tr><td>%</td><td>取模（取余）</td><td>7%5</td><td>2</td></tr><tr><td>++</td><td>自增</td><td>a=2 a++</td><td>a=3</td></tr><tr><td>–</td><td>自减</td><td>a=2 a–</td><td>a=1</td></tr><tr><td>+</td><td>字符串相加</td><td>“He” + “llo”</td><td>“Hello”</td></tr></tbody></table><h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><ul><li>案例：演示算术运算符的使用。</li></ul><p>+，-，*，/，%，++，–，重点讲解/、%</p><p>自增：++</p><p>自减：–</p><ul><li>演示/的使用的特点</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//重点讲解 / 、%</span><span class="token comment">//说明：如果运算的数都是整数，那么除后，去掉小数部分，保留整数部分</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">var</span> n1 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">4</span> <span class="token comment">//</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token comment">//如果我们希望保留小数部分，则需要有浮点数参与运算</span><span class="token keyword">var</span> n2 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">10.0</span> <span class="token operator">/</span> <span class="token number">4</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><strong>运行结果</strong></p><pre class="language-none"><code class="language-none">222.5</code></pre><ul><li>演示 % 的使用特点</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//演示 % 的使用</span><span class="token comment">// 看一个公式 a % b = a - a / b * b</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"10 % 3 ="</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">// =-1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"-10 % 3 = "</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// =-10-(-10)/3*3=-10-(-9)=-1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"10 % -3 = "</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// =1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"-10 % -3 = "</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//=-1</span><span class="token punctuation">&#125;</span></code></pre><p><strong>运行结果</strong></p><pre class="language-none"><code class="language-none">10 % 3 &#x3D; 1-10 % 3 &#x3D;  -110 % -3 &#x3D;  1-10 % -3 &#x3D;  -1</code></pre><ul><li>++和–的使用</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//演示 ++ 和 -- 的使用</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>i<span class="token operator">++</span> <span class="token comment">//等价 i = i + 1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment">//11</span>i<span class="token operator">--</span> <span class="token comment">//等价 i = i - 1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment">// 10</span><span class="token punctuation">&#125;</span></code></pre><p><strong>运行结果</strong></p><pre class="language-none"><code class="language-none">i&#x3D; 11i&#x3D; 10</code></pre><h3 id="算术运算符使用的注意事项"><a href="#算术运算符使用的注意事项" class="headerlink" title="算术运算符使用的注意事项"></a>算术运算符使用的注意事项</h3><ol><li>对于除号”/“，它的整数除和小数除是有区别的：整数之间做除法时，只保留整数部分而舍弃小数部分。例如： x:=19/5, 结果是3</li><li>当对一个数取模时，可以等价 a%b=a-a/b*b, 这样我们可以看到 取模的一个本质运算。</li><li>Golang的自增自减只能当作一个独立语言使用时，不能这样使用：</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//在Golang中，++ 和 -- 只能独立使用</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token keyword">var</span> a <span class="token builtin">int</span>a <span class="token operator">=</span> i<span class="token operator">++</span> <span class="token comment">//错误 i++只能独立使用</span>a <span class="token operator">=</span> i<span class="token operator">--</span> <span class="token comment">//错误 i--只能独立使用</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="4"><li>Golang的++和–只能写在变量的后面，不能写在变量的前面，即：只有a++,a–；没有++a,–a</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>i<span class="token operator">++</span><span class="token operator">++</span>i <span class="token comment">//错误，在Golang没有 前++</span>i<span class="token operator">--</span><span class="token operator">--</span>i <span class="token comment">//错误，在Golang没有 前--</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span></code></pre><ol start="5"><li>Golang的设计者去掉 c/java 中的自增自减的容易混淆的写法，让Golang更加简洁，统一。（强制性的）</li></ol><h3 id="课堂练习1"><a href="#课堂练习1" class="headerlink" title="课堂练习1"></a>课堂练习1</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>i <span class="token operator">=</span> i<span class="token operator">++</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">//问 结果是多少，为什么？</span><span class="token comment">//上面的代码报错，因为i=i++编译不通过</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">if</span> i<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">10</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token comment">//问 结果是多少，为什么？</span><span class="token comment">//上面的代码报错，因为i++ > 10编译不通过</span></code></pre><h3 id="课堂练习2"><a href="#课堂练习2" class="headerlink" title="课堂练习2"></a>课堂练习2</h3><ol><li>假如还有97天放假，问:97天相当于几个星期零几天?</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> day <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">97</span><span class="token keyword">var</span> week <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">97</span> <span class="token operator">/</span> <span class="token number">7</span><span class="token keyword">var</span> day <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">97</span> <span class="token operator">%</span> <span class="token number">7</span></code></pre><ul><li>解答</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> day <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">97</span><span class="token keyword">var</span> week <span class="token builtin">int</span> <span class="token operator">=</span> day <span class="token operator">/</span> <span class="token number">7</span><span class="token keyword">var</span> aday <span class="token builtin">int</span> <span class="token operator">=</span> day <span class="token operator">%</span> <span class="token number">7</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>week<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>aday<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/**打印结果：13    6 **/</span></code></pre><ol start="2"><li>定义一个变量保存华氏温度，华氏温度转换摄氏温度的公式为5/9*(华氏温度-100),请求出华氏温度对应的摄氏温度。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> huashi <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">134.2</span><span class="token keyword">var</span> sheshi <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">5.0</span> <span class="token operator">/</span> <span class="token number">9</span> <span class="token operator">*</span> <span class="token punctuation">(</span>huashi <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v 对应的摄氏温度=%v\n"</span><span class="token punctuation">,</span> huashi<span class="token punctuation">,</span> sheshi<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/**134.2 对应的摄氏温度=19**/</span></code></pre><h2 id="关系运算符（比较运算符）"><a href="#关系运算符（比较运算符）" class="headerlink" title="关系运算符（比较运算符）"></a>关系运算符（比较运算符）</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>关系运算符的结果都是bool型，也就是 要么是true，要么是false</li><li>关系表达式常用于<strong>if结构</strong>的条件中或<strong>循环结构</strong>的条件中</li></ol><h3 id="关系运算符一览图"><a href="#关系运算符一览图" class="headerlink" title="关系运算符一览图"></a>关系运算符一览图</h3><table><thead><tr><th>运算符</th><th>运算</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td>==</td><td>相等于</td><td>4==3</td><td>false</td></tr><tr><td>!=</td><td>不等于</td><td>4！=3</td><td>true</td></tr><tr><td>&lt;</td><td>小于</td><td>4&lt;3</td><td>false</td></tr><tr><td>&gt;</td><td>大于</td><td>4&gt;3</td><td>true</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4&lt;=3</td><td>false</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>4&gt;=3</td><td>true</td></tr></tbody></table><h3 id="案例演示-1"><a href="#案例演示-1" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//演示关系运算符的使用</span>varn1int<span class="token operator">=</span><span class="token number">9</span>varn2int<span class="token operator">=</span><span class="token number">8</span>fmt<span class="token punctuation">.</span> <span class="token function">Println</span><span class="token punctuation">(</span>n1 <span class="token operator">==</span> n2<span class="token punctuation">)</span> <span class="token comment">//false</span>fmt<span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token function">Print1n</span><span class="token punctuation">(</span>n1 <span class="token operator">!=</span> n2<span class="token punctuation">)</span> <span class="token comment">//true</span>fmt <span class="token punctuation">.</span><span class="token function">Print1n</span><span class="token punctuation">(</span>n1 <span class="token operator">></span> n2<span class="token punctuation">)</span> <span class="token comment">//true</span>fmt<span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token function">Print1n</span><span class="token punctuation">(</span>n1 <span class="token operator">>=</span> n2<span class="token punctuation">)</span> <span class="token comment">//true</span>fmt <span class="token punctuation">.</span><span class="token function">Print1n</span><span class="token punctuation">(</span>n1 <span class="token operator">&lt;</span> n2<span class="token punctuation">)</span> <span class="token comment">//flase</span>fmt <span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n1 <span class="token operator">&lt;=</span> n2<span class="token punctuation">)</span> <span class="token comment">//flase</span>flag<span class="token operator">:=</span>n1<span class="token operator">></span>n2fmt<span class="token punctuation">.</span> <span class="token function">Print1n</span><span class="token punctuation">(</span><span class="token string">" flag="</span><span class="token punctuation">,</span> f1ag<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> </code></pre><h3 id="关系运算符的细节说明"><a href="#关系运算符的细节说明" class="headerlink" title="关系运算符的细节说明"></a>关系运算符的细节说明</h3><ol><li>关系运算符的结果都是bool型，也就是要么是true，要么是false。</li><li>关系运算符组成的表达式，我们称为关系表达式：a&gt;b</li><li>**比较运算符”==”不能误写成”=” **</li></ol><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>用于连接多个条件（一般来讲就是关系表达式），最终的结果也是一个bool值</p><h3 id="逻辑运算的说明"><a href="#逻辑运算的说明" class="headerlink" title="逻辑运算的说明"></a>逻辑运算的说明</h3><p><strong>假定A值为true，B值为false</strong></p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td><strong>逻辑与</strong>运算符。如果两边的操作数都是true，则为true，否则为false</td><td>（A&amp;&amp;B)为false</td></tr><tr><td>||</td><td><strong>逻辑或</strong>运算符。如果两边的操作数有一个true,则为true，否则为false。</td><td>（A||B）为true</td></tr><tr><td>！</td><td><strong>逻辑非</strong>运算符。如果条件为true，则逻辑为false，否则为true。</td><td>！(A&amp;&amp;B)为true</td></tr></tbody></table><h3 id="案例演示-2"><a href="#案例演示-2" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//演示逻辑运算符的使用8&amp;</span><span class="token keyword">var</span> age <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">40</span><span class="token keyword">if</span> age <span class="token operator">></span><span class="token number">30</span><span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;</span> <span class="token number">50</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span> <span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> age <span class="token operator">></span><span class="token number">30</span><span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;</span> <span class="token number">40</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span> <span class="token function">Print1n</span><span class="token punctuation">(</span> <span class="token string">"ok2"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//演示逻辑运算符的使用</span><span class="token keyword">if</span> age<span class="token operator">></span><span class="token number">38I</span>lage<span class="token operator">&lt;</span><span class="token number">5</span>e<span class="token punctuation">&#123;</span>fmt <span class="token punctuation">.</span> <span class="token function">PrintIn</span><span class="token punctuation">(</span> <span class="token string">"ok3"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> age<span class="token operator">></span><span class="token number">30</span><span class="token operator">|</span>age<span class="token operator">&lt;</span><span class="token number">40</span><span class="token punctuation">&#123;</span>fmt <span class="token punctuation">.</span> <span class="token function">Println</span><span class="token punctuation">(</span> <span class="token string">"ok4"</span> <span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//演示逻辑运算符的使用!</span><span class="token keyword">if</span> age<span class="token operator">></span><span class="token number">30</span><span class="token punctuation">&#123;</span>fmt <span class="token punctuation">.</span> <span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok5"</span> <span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span><span class="token punctuation">(</span>age <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span> <span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok6"</span> <span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="注意事项和细节说明"><a href="#注意事项和细节说明" class="headerlink" title="注意事项和细节说明"></a>注意事项和细节说明</h3><ol><li><p>&amp;&amp;也叫<strong>短路与</strong>：如果<strong>第一个条件为false</strong>，则第二个条件不会判断，最终结果为<strong>false</strong></p></li><li><p>||也叫<strong>短路或</strong>：如果<strong>第一个条件为true</strong>，则第二个条件不会判断，最终结果为<strong>true</strong></p></li><li><p>案例演示</p></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//声明一个函数(测试)</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span> <span class="token string">"test..."</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span><span class="token number">10</span><span class="token comment">//短路与</span><span class="token comment">//说明因为i &lt; 9为false ,因此后面的test() 就不执行</span><span class="token keyword">if</span> i<span class="token operator">&lt;</span><span class="token number">9</span> <span class="token operator">&amp;&amp;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span> <span class="token function">Println</span><span class="token punctuation">(</span> <span class="token string">"ok.."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//说明 因为 i > 9为true ,因此后面的test() 就不执行</span><span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">||</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span> <span class="token function">Print1n</span><span class="token punctuation">(</span> <span class="token string">"hello..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><h3 id="基本的介绍"><a href="#基本的介绍" class="headerlink" title="基本的介绍"></a>基本的介绍</h3><p>赋值运算符就是将某个运算后的值，赋给指定的变量。</p><h3 id="赋值运算符的分类"><a href="#赋值运算符的分类" class="headerlink" title="赋值运算符的分类"></a>赋值运算符的分类</h3><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>简单的赋值运算符，将一个表达式的值赋给一个左值</td><td>C=A+B将A+B表达式结果赋值给C</td></tr><tr><td>+=</td><td>相加后再赋值</td><td>C+=A 等于 C=C+A</td></tr><tr><td>-=</td><td>相减后再赋值</td><td>C-=A 等于 C=C-A</td></tr><tr><td>*=</td><td>相乘后再赋值</td><td>C*=A 等于 C=C*A</td></tr><tr><td>/=</td><td>相除后再赋值</td><td>C/=A 等于 C=C/A</td></tr><tr><td>%=</td><td>求余后再赋值</td><td>C%=A 等于 C=C%A</td></tr><tr><td>&lt;&lt;=</td><td>左移后赋值</td><td>C&lt;&lt;=2 等于 C=C&lt;&lt;2</td></tr><tr><td>&gt;&gt;=</td><td>右移后赋值</td><td>C&gt;&gt;=2 等于 C=C&gt;&gt;2</td></tr><tr><td>&amp;=</td><td>按位与后赋值</td><td>C&amp;=2 等于 C=C&amp;2</td></tr><tr><td>^=</td><td>按位异或后赋值</td><td>C^=2 等于 C=C^2</td></tr><tr><td>|=</td><td>按位或后赋值</td><td>C|=2 等于 C=C|2</td></tr></tbody></table><p>**说明:**后半部分的赋值运算涉及到二进制相关知识哦！</p><h3 id="赋值运算的案例演示"><a href="#赋值运算的案例演示" class="headerlink" title="赋值运算的案例演示"></a>赋值运算的案例演示</h3><ol><li>赋值基本案例</li><li>有两个变量，a和b，要求将其进行交换，最终打印结果</li><li>+=的使用案例</li><li>案例</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//赋值运算符的使用演示</span>    <span class="token comment">//var i int</span>    <span class="token comment">// i = 10 // 基本赋值</span>        <span class="token comment">//有两个变量，a和b，要求将其进行交换，最终打印结果</span>    <span class="token comment">// a = 9, b = 2 ==> a = 2 , b = 9</span>    a <span class="token operator">:=</span> <span class="token number">9</span>    b <span class="token operator">:=</span> <span class="token number">2</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"交换前的情况： a = %v, b = %v\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>    <span class="token comment">//定义一个临时变量</span>    t <span class="token operator">:=</span> a    a <span class="token operator">=</span> b    b <span class="token operator">=</span> t    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"交换后的情况: a = %v, b = %v\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>        <span class="token comment">//复合赋值的操作</span>    a <span class="token operator">+=</span> <span class="token number">17</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a+=17 --> a = a + 17 = %v"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="赋值运算符的特点"><a href="#赋值运算符的特点" class="headerlink" title="赋值运算符的特点"></a>赋值运算符的特点</h3><ol><li>运算顺序从右往左</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> c <span class="token builtin">int</span>c <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">3</span> <span class="token comment">// 赋值运算的执行顺序是从右向左</span></code></pre><ol start="2"><li>赋值运算符的左边 只能是变量，右边可以是变量，表达式，常量值！</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//赋值运算符的左边 只能是变量，右边可以是变量，表达式，常量值！</span><span class="token comment">//表达式:任何有值的都可以看做是表达式</span><span class="token keyword">var</span> d <span class="token builtin">int</span>d <span class="token operator">=</span> a <span class="token comment">//</span>d <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token comment">// =的右边是表达式</span>d <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">90</span> <span class="token comment">// =的右边是表达式</span>d <span class="token operator">=</span> <span class="token number">890</span> <span class="token comment">//890常量</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span></code></pre><ol start="3"><li>复合赋值运算符等价于下面的效果</li></ol><p>a += 3  &lt;==&gt; a = a + 3</p><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p>有两个变量，a和b，要求将其进行交换，但是不允许使用中间变量，最终打印结果</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>a <span class="token operator">=</span> a <span class="token operator">+</span> b    b <span class="token operator">=</span> a <span class="token operator">-</span> b   <span class="token comment">//    = a+b-b = a</span>a <span class="token operator">=</span> a <span class="token operator">-</span> b   <span class="token comment">//    = a+b-a = b</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a = %v b = %v "</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span></code></pre><p>牛牛牛！</p><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算符”&amp;”是双目运算符。其功能是参与运算的两数各对应的二进位相与。运算规则是:同时为1，结果为1,否则为0</td></tr><tr><td>|</td><td>按位或运算符川”是双目运算符。其功能是参 与运算的两数各对应的二进位相或.运算规则是:同时为1，结果为1,否则为0</td></tr><tr><td>^</td><td>按位异或运算符”是双目运算符。其功能是参与运算的两数各对应的二进位相异或。运算规则是:当二进位不同时，结果为1,否则为0</td></tr><tr><td>&lt;&lt;</td><td>左移运算符&lt;&lt;”是双目运算符。其功能把&lt;&lt;”左边的运算数的各二进位全部左移若干位，高位丢弃，低位补0。左移n位就是乘以2的n次方。</td></tr><tr><td>&gt;&gt;</td><td>右移运算符&gt;&gt;”是双目运算符。其功能是把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，右移n位就是除以2的n次方</td></tr></tbody></table><h2 id="其他运算符说明"><a href="#其他运算符说明" class="headerlink" title="其他运算符说明"></a>其他运算符说明</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;</td><td>返回变量存储地址</td><td>&a;将给出变量a的实际地址</td></tr><tr><td>*</td><td>指针变量</td><td>*a;是一个指针变量</td></tr></tbody></table><p>举例说明：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//演示一下 &amp; 和 * 的使用</span>    a <span class="token operator">:=</span> <span class="token number">100</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a的地址="</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span>        <span class="token keyword">var</span> ptr <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ptr指向的值是:"</span> ，<span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="课堂案例"><a href="#课堂案例" class="headerlink" title="课堂案例"></a>课堂案例</h3><ul><li>案例1：求两个数的最大值</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//求两个数的最大值</span>    <span class="token keyword">var</span> n1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">var</span> n2 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">40</span>    <span class="token keyword">var</span> max <span class="token builtin">int</span>    <span class="token keyword">if</span> n1 <span class="token operator">></span> n2<span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> n1    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> n2    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"max="</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li>案例2：求三个数的最大值</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//求两个数的最大值</span>    <span class="token keyword">var</span> n1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">var</span> n2 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">40</span>    <span class="token keyword">var</span> max <span class="token builtin">int</span>    <span class="token keyword">if</span> n1 <span class="token operator">></span> n2<span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> n1    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> n2    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"max="</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span>    <span class="token comment">//求三个数的最大值思路：先求两个数的最大值，再用第三个数与最大值相比，取较大的数。</span>    <span class="token keyword">var</span> n3 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">45</span>    <span class="token keyword">if</span> n3 <span class="token operator">></span> max <span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> n3    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"三个书中最大值是="</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h2><p>Go语言明确不支持三元运算符，官方<a href="https://golang.org/doc/faq#Does_Go_have_a_ternary_form">说明</a></p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210110015532.png" alt="image-20210110015532731" loading="lazy"></p><p>演示在Go语言中实现三元运算符的效果：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> n <span class="token builtin">int</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">var</span> j <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token comment">//传统的三元运算</span><span class="token comment">//n = i > j ? i : j</span><span class="token keyword">if</span> i <span class="token operator">></span> j <span class="token punctuation">&#123;</span>    n <span class="token operator">=</span> i<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    n <span class="token operator">=</span> j<span class="token punctuation">&#125;</span><span class="token keyword">return</span> n <span class="token comment">//12</span></code></pre><h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><h3 id="运算符的优先级的一览表"><a href="#运算符的优先级的一览表" class="headerlink" title="运算符的优先级的一览表"></a>运算符的优先级的一览表</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210110015754.png" alt="image-20210110015754417" loading="lazy"></p><h3 id="对上图的说明"><a href="#对上图的说明" class="headerlink" title="对上图的说明"></a>对上图的说明</h3><ol><li>运算符有不同的优先级，所谓优先级就是表达式运算中的运算顺序。如右表，上一行运算符总优先于下一行。</li><li>只有单目运算符、赋值运算符是从右向左运算的。</li><li>梳理一个大概的优先级：<ol><li>括号，++，–</li><li>单目运算</li><li>算术运算符</li><li>移位运算</li><li>关系运算符</li><li>位运算符</li><li>逻辑运算符</li><li>赋值运算符</li><li>逗号</li></ol></li></ol><h2 id="键盘输入语句"><a href="#键盘输入语句" class="headerlink" title="键盘输入语句"></a>键盘输入语句</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在编程中，需要接收用户输入的数据，就可以使用键盘输入语句来获取。InputDemo.go</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>导入fmt包</li><li>调用fmt包的fmt.Scanln()或者fmt.Scanf()</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210110020421.png" alt="image-20210110020421015" loading="lazy"></p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210110020430.png" alt="image-20210110020430861" loading="lazy"></p><h3 id="案例演示-3"><a href="#案例演示-3" class="headerlink" title="案例演示"></a>案例演示</h3><ul><li>要求：可以从控制台接收用户信息，【姓名，年龄，薪水，是否通过考试】</li></ul><ol><li>使用fmt.Scanln()获取</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//要求：可以从控制台接收用户信息，</span><span class="token comment">//【姓名，年龄，薪水，是否通过考试】</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//1. 先声明需要的变量</span><span class="token keyword">var</span> name <span class="token builtin">string</span><span class="token keyword">var</span> age <span class="token builtin">byte</span><span class="token keyword">var</span> sal <span class="token builtin">float32</span><span class="token keyword">var</span> isPass <span class="token builtin">bool</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入姓名"</span><span class="token punctuation">)</span><span class="token comment">//当程序执行到 fmt.Scanln(&amp;name),程序会停止在这里，等待用户输入，并回车</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>name<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入年龄"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>age<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入薪水"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sal<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入是否通过考试"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>isPass<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"名字是 %v \n年龄是 %v \n薪水是 %v \n是否通过考试 %v\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> isPass<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果</p><pre class="language-none"><code class="language-none">请输入姓名leafii请输入年龄23请输入薪水60000请输入是否通过考试true名字是 leafii年龄是 23薪水是 60000是否通过考试 true</code></pre><ol start="2"><li>使用fmt.Scanf()获取</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//要求：可以从控制台接收用户信息，</span><span class="token comment">//【姓名，年龄，薪水，是否通过考试】</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//1. 先声明需要的变量</span><span class="token keyword">var</span> name <span class="token builtin">string</span><span class="token keyword">var</span> age <span class="token builtin">byte</span><span class="token keyword">var</span> sal <span class="token builtin">float32</span><span class="token keyword">var</span> isPass <span class="token builtin">bool</span><span class="token comment">//方式2：fmt.Scanf，可以按指定的格式输入</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入你的姓名，年龄，薪水，是否通过考试，使用空格隔开"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%s %d %f %t"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sal<span class="token punctuation">,</span> <span class="token operator">&amp;</span>isPass<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"名字是 %v \n年龄是 %v \n薪水是 %v \n是否通过考试 %v\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> isPass<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">请输入你的姓名，年龄，薪水，是否通过考试，使用空格隔开leafii 23 60000 true名字是 leafii年龄是 23薪水是 60000是否通过考试 true</code></pre><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><p>对于整数，有四种表示方式：</p><ul><li>二进制：0，1，满2进1。在Golang中，不能直接使用二进制来表示一个整数，它沿用了c的特点</li><li>十进制：0-9，满10进1.</li><li>八进制：0-7，满8进1.以数字0开头表示。</li><li>十六进制：0-9及A-F，满16进1。以0x 或0X开头表示。（A到F不区分大小写）</li></ul><h3 id="进制的图示"><a href="#进制的图示" class="headerlink" title="进制的图示"></a>进制的图示</h3><table><thead><tr><th>十进制</th><th>十六进制</th><th>八进制</th><th>二进制</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>2</td><td>2</td><td>10</td></tr><tr><td>3</td><td>3</td><td>3</td><td>11</td></tr><tr><td>4</td><td>4</td><td>4</td><td>100</td></tr><tr><td>5</td><td>5</td><td>5</td><td>101</td></tr><tr><td>6</td><td>6</td><td>6</td><td>110</td></tr><tr><td>7</td><td>7</td><td>7</td><td>111</td></tr><tr><td>8</td><td>8</td><td>10</td><td>1000</td></tr><tr><td>9</td><td>9</td><td>11</td><td>1001</td></tr><tr><td>10</td><td>A</td><td>12</td><td>1010</td></tr><tr><td>11</td><td>B</td><td>13</td><td>1011</td></tr><tr><td>12</td><td>C</td><td>14</td><td>1100</td></tr><tr><td>13</td><td>D</td><td>15</td><td>1101</td></tr><tr><td>14</td><td>E</td><td>16</td><td>1110</td></tr><tr><td>15</td><td>F</td><td>17</td><td>1111</td></tr><tr><td>16</td><td>10</td><td>20</td><td>10000</td></tr><tr><td>17</td><td>11</td><td>21</td><td>10001</td></tr></tbody></table><h3 id="进制转换的介绍"><a href="#进制转换的介绍" class="headerlink" title="进制转换的介绍"></a>进制转换的介绍</h3><p>总览:</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210111155242.png" alt="image-20210111155242356" loading="lazy"></p><h3 id="其他进制转十进制"><a href="#其他进制转十进制" class="headerlink" title="其他进制转十进制"></a>其他进制转十进制</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210111155309.png" alt="image-20210111155309501" loading="lazy"></p><h3 id="二进制如何转十进制"><a href="#二进制如何转十进制" class="headerlink" title="二进制如何转十进制"></a>二进制如何转十进制</h3><p>134 = 4 * 1 + 3 * 10 + 10 * 10 = 4 + 30 + 100 = 134</p><ul><li><p><strong>规则：</strong>从最低位开始（右边），将每个位上的数提取出来，乘以2的（位数-1）次方然后<strong>求和</strong>。</p></li><li><p>案例： 请将二进制：1011转成十进制的数</p></li></ul><p>1011 = 1 * 1 + 1 * 2 + 0 * 2  * 2 + 1 * 2 * 2 * 2 = 1 + 2 + 0 + 8 = 11</p><h3 id="八进制转换成十进制实例"><a href="#八进制转换成十进制实例" class="headerlink" title="八进制转换成十进制实例"></a>八进制转换成十进制实例</h3><ul><li><p><strong>规则：</strong>从最低位开始（右边），将每个位上的数提取出来，乘以8的（位数-1）次方然后<strong>求和</strong>。</p></li><li><p>案例:请将0123转成十进制的数</p></li></ul><p>0123 = 3 * 1 + 2 * 8 + 1 * 8 * 8 + 0 * 8 * 8 * 8 = 3 + 16 + 64 = 83</p><h3 id="十六进制转成十进制"><a href="#十六进制转成十进制" class="headerlink" title="十六进制转成十进制"></a>十六进制转成十进制</h3><ul><li><p><strong>规则：</strong>从最低位开始（右边），将每个位上的数提取出来，乘以16的（位数-1）次方然后<strong>求和</strong>。</p></li><li><p>案例：请将0x34A转成十进制的数</p></li></ul><p>0x34A = 10 * 1 + 4 * 16 + 3 * 16 * 16 = 10 + 64 + 768 = 842</p><h3 id="其他进制转成10进制的课堂练习"><a href="#其他进制转成10进制的课堂练习" class="headerlink" title="其他进制转成10进制的课堂练习"></a>其他进制转成10进制的课堂练习</h3><ul><li><p>课堂练习: 请将</p><ul><li>二进制： 110001100 转成十进制</li></ul><p>110001100(2) =1 * 2 <sup>2</sup>+ 1 * 2 <sup>3</sup> + 1 * 2<sup>7</sup> + 1 * 2<sup>8</sup> = 396</p><ul><li>八进制： 02456 转成十进制</li></ul><p>02456(8) = 6 * 1 + 5 * 8 + 4 * 8<sup>2</sup> + 2 * 8<sup>3</sup> =  1326 </p><ul><li>十六进制： 0xA45 转成十进制</li></ul><p>0xA45 (16) =  5 * 1 + 4 * 16 + 10 * 16<sup>2</sup> = 2629</p></li></ul><h3 id="十进制如何转成其他进制"><a href="#十进制如何转成其他进制" class="headerlink" title="十进制如何转成其他进制"></a>十进制如何转成其他进制</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210111162140.png" alt="image-20210111162140694" loading="lazy"></p><h3 id="十进制如何转二进制"><a href="#十进制如何转二进制" class="headerlink" title="十进制如何转二进制"></a>十进制如何转二进制</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210111162210.png" alt="image-20210111162210304" loading="lazy"></p><h3 id="十进制转成八进制"><a href="#十进制转成八进制" class="headerlink" title="十进制转成八进制"></a>十进制转成八进制</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210111162234.png" alt="image-20210111162234098" loading="lazy"></p><h3 id="十进制转十六进制"><a href="#十进制转十六进制" class="headerlink" title="十进制转十六进制"></a>十进制转十六进制</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210111162324.png" alt="image-20210111162324414" loading="lazy"></p><h3 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h3><ul><li><p>请将</p><ul><li>123 转成二进制</li></ul><p>123（10） =   1111011 (2)</p><ul><li>678转成八进制</li></ul><p>678(10) = 1246(8)</p><ul><li>8912 转成十六进制</li></ul><p>8912(10) = 22D0(16)</p></li></ul><h3 id="二进制如何转成八进制、十六进制"><a href="#二进制如何转成八进制、十六进制" class="headerlink" title="二进制如何转成八进制、十六进制"></a>二进制如何转成八进制、十六进制</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210111162531.png" alt="image-20210111162531921" loading="lazy"></p><h3 id="二进制转换成八进制"><a href="#二进制转换成八进制" class="headerlink" title="二进制转换成八进制"></a>二进制转换成八进制</h3><ul><li><p>**规则:**将二进制数每三位一组(从低位开始组合),转成对应的八进制数即可。</p></li><li><p>案例:请将二进制: 11010101 转成八进制<br>11010101= 0325</p></li></ul><h3 id="二进制转成十六进制"><a href="#二进制转成十六进制" class="headerlink" title="二进制转成十六进制"></a>二进制转成十六进制</h3><ul><li><p>**规则:**将二进制数每四位一组(从低位开始组合),转成对应的十六进制数即可。</p></li><li><p>案例:请将二进制: 11010101 转成十六进制</p><p>11010101 = 0xD5</p></li><li><p>课堂练习：请将</p><ul><li>二进制：11100101 转成 八进制</li><li>二进制： 1110010110 转成 十六进制</li></ul></li></ul><h3 id="八进制、十六进制转成二进制"><a href="#八进制、十六进制转成二进制" class="headerlink" title="八进制、十六进制转成二进制"></a>八进制、十六进制转成二进制</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210111162900.png" alt="image-20210111162900928" loading="lazy"></p><h3 id="八进制转成二进制"><a href="#八进制转成二进制" class="headerlink" title="八进制转成二进制"></a>八进制转成二进制</h3><ul><li><p><strong>规则：</strong>将八进制数每一位，转成对应的一个3位的二进制数即可。</p></li><li><p>案例：请将0237转换成二进制</p><p>0237（8） = 10011111（2）</p></li></ul><h3 id="十六进制转成二进制"><a href="#十六进制转成二进制" class="headerlink" title="十六进制转成二进制"></a>十六进制转成二进制</h3><ul><li><p><strong>规则：将十六进制数每一位，转成对应的一个4位的二进制数即可。</strong></p></li><li><p>案例：请将0x237转成二进制</p><p>0x237(16) = 1000110111(2)</p></li></ul><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="位运算的思考题"><a href="#位运算的思考题" class="headerlink" title="位运算的思考题"></a>位运算的思考题</h3><ol><li> 请看下面的代码段，回答a,b,c,d结果是多少？</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">>></span> <span class="token number">2</span>    <span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">>></span> <span class="token number">2</span>    <span class="token keyword">var</span> c <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span>    <span class="token keyword">var</span> d <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span>    <span class="token comment">//a b c d结果是多少？</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b="</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"c="</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"d="</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/*a= 0b= -1c= 4d= -4*/</span></code></pre><ol start="2"><li>请回答在Golang中，下面的表达式运算的结果是：</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token operator">&amp;</span><span class="token number">7</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">^</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/**235-2*/</span></code></pre><h3 id="二进制在运算中的说明"><a href="#二进制在运算中的说明" class="headerlink" title="二进制在运算中的说明"></a>二进制在运算中的说明</h3><p>二进制是逢2进位的进位制，0、1是基本算符。</p><p>现代的电子计算机技术全部采用的是二进制，因为它只使用0、1两个数学符号，非常简单方便，易于用电子方式实现。计算机内部处理的信息，都是采用二进制数来表示的。二进制（Binary）数用0和1两个数字及其组合来表示任何数。进位规则是“逢2进1“，数字1在不同的位上代表不同的值，按从右至左的次序，这个值以二倍递增。</p><p>在计算机的内部，运行各种运算时，都是以二进制的方式来运行。</p><h3 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210111184507.png" loading="lazy"></p><h3 id="位运算符和移位运算符"><a href="#位运算符和移位运算符" class="headerlink" title="位运算符和移位运算符"></a>位运算符和移位运算符</h3><ul><li>Golang有3个位运算<ul><li>按位与&amp;    ：    两位全为1，结果为1，否则为0</li><li>按位或|    ：    两位有一个为1，结果为1，否则为0</li><li>按位异或^    ：    两位一个为0，一个为1，结果为1，否则为0</li></ul></li><li>案例练习</li></ul><p>2&amp;3=?  2|3=?  2^3=?</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//2&amp;3=?  2|3=?  2^3=?</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//2</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//3</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//3</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//-4</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210111184910.png" alt="image-20210111184910568" loading="lazy"></p><ul><li><p>Golang中有两个移位运算符：</p><ul><li>右移运算符   &gt;&gt;:    低位溢出，符号位不变，并用符号位补溢出的高位</li><li>左移运算符    &lt;&lt;:    符号位不变，低位补0</li></ul></li><li><p>案例演示</p><p>a := 1 &gt;&gt; 2   //  0000 0001 =&gt; 0000 0000  = 0</p><p>c := 1 &lt;&lt; 2 // 0000 0001 ==&gt; 0000 0100 =&gt; 4</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Go语言の运算符&quot;&gt;&lt;a href=&quot;#Go语言の运算符&quot; class=&quot;headerlink&quot; title=&quot;Go语言の运算符&quot;&gt;&lt;/a&gt;Go语言の运算符&lt;/h1&gt;&lt;p&gt;本文介绍了Go语言的运算符&lt;/p&gt;</summary>
    
    
    
    
    <category term="Go" scheme="https://mikutown.gitee.io/blog/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-3-递归（1.1.14-1.1.21)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/09/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-3-%E9%80%92%E5%BD%92%EF%BC%881.1.14-1.1.21)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/09/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-3-%E9%80%92%E5%BD%92%EF%BC%881.1.14-1.1.21)/</id>
    <published>2021-01-09T09:39:51.000Z</published>
    <updated>2021-01-09T13:38:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-3-递归（1-1-14-1-1-21"><a href="#算法练习-3-递归（1-1-14-1-1-21" class="headerlink" title="算法练习-3-递归（1.1.14-1.1.21)"></a>算法练习-3-递归（1.1.14-1.1.21)</h1><ul><li>知识点<ul><li>java的基本语法：递归调用</li><li>直方图的预习</li><li>斐波那契数列的递归调用实现以及优化</li></ul></li></ul><a id="more"></a><h2 id="1-1-14-1-1-21"><a href="#1-1-14-1-1-21" class="headerlink" title="1.1.14-1.1.21"></a>1.1.14-1.1.21</h2><h3 id="编写一个静态方法lg"><a href="#编写一个静态方法lg" class="headerlink" title="编写一个静态方法lg()"></a>编写一个静态方法lg()</h3><p>1.1.14接受一个整型参数N，返回不大于log2(N)的最大整数。不要使用Math库</p><ul><li>答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdIn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practice02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lg</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">N</span><span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span>            s<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          a <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">lg</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>运行结果：</li></ul><pre class="language-none"><code class="language-none">4 &#x2F;&#x2F; 输入2 &#x2F;&#x2F; 输出 依次类推628393</code></pre><h3 id="编写一个静态方法-histogram"><a href="#编写一个静态方法-histogram" class="headerlink" title="编写一个静态方法 histogram()"></a><strong>编写一个静态方法 histogram()</strong></h3><p>1.1.15 接受一个整型数组 a[] 和一个整数 M 为参数并返回一个大小为 M 的数组，其中第 i 个元素的值为整数 i 在参数数组中出现的次数。如果 a[] 中的值均在 0 到 M-1之间，返回数组中所有元素之和应该和 a.length 相等。</p><p>英文题目原文：</p><p><strong>1.1.15 Write a static method histogram() that takes an array a[] of int values and an integer M as arguments and returns an array of length M whose i th entry is the number of times the integer i appeared in the argument array. If the values in a[] are all between 0 and M–1, the sum of the values in the returned array should be equal to a.length.</strong></p><ul><li><p>分析</p><p>干就完了！</p></li><li><p>答案</p></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>output<span class="token punctuation">.</span></span><span class="token class-name">FastInfosetStreamWriterOutput</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdIn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdRandom</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practice02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">histogram</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token class-name">M</span><span class="token punctuation">)</span>                b<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的数组中的值均在0到M-1之间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的数组中的值不都在0到M-1之间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入数组大小："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          size <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入数组的值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入M的值:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">M</span><span class="token operator">></span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span>              <span class="token function">histogram</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>运行结果</li></ul><pre class="language-none"><code class="language-none">请输入数组大小：10请输入数组的值：1 2 2 3 3 3 4 4 4 4请输入M的值:110 1 2 3 4 0 0 0 0 0 0 输入的数组中的值均在0到M-1之间请输入数组大小：10请输入数组的值：1 2 2 3 3 3 4 4 4 13请输入M的值:120 1 2 3 3 0 0 0 0 0 0 0 输入的数组中的值不都在0到M-1之间</code></pre><ul><li><p>再分析!</p><p>其实这个题是叫你画一个直方图，来一个简单版本的代码！</p></li><li><p>答案</p></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">histogram</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">M</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length <span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                n<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">M</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m <span class="token operator">=</span> m <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>测试的main函数</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">histogram</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用函数后获取的数组："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span></code></pre><h3 id="给出-exR1-6-的返回值"><a href="#给出-exR1-6-的返回值" class="headerlink" title="给出 exR1(6) 的返回值:"></a><strong>给出 exR1(6) 的返回值:</strong></h3><p>1.1.16</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">exR1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token function">exR1</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token function">exR1</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>分析</p><p>递归的情况：<br>f(6)=f(3)+6+f(4)+6　　<br>因为f(3)=f(0)+3+f(1)+3   f(0)=””    f(1)=f(-2)+1+f(-1)+1=11<br>所以f(6)=31136+f(4)+6<br>又因为f(4)=f(1)+4+f(2)+4    f(1)=11   f(2)=f(-1)+2+f(0)+2=22<br>从而f(6)=311361142246</p></li><li><p>答案</p></li></ul><pre class="language-none"><code class="language-none">311361142246</code></pre><ul><li>补充：很多人（比如我）第一次做的时候把类型弄错了！这是<strong>string拼接而不是int加减！！！！！！</strong></li></ul><h3 id="找出以下递归函数的问题"><a href="#找出以下递归函数的问题" class="headerlink" title="找出以下递归函数的问题:"></a><strong>找出以下递归函数的问题:</strong></h3><p>1.1.17</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">exR2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token function">exR2</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token function">exR2</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>分析/答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">exR2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token function">exR2</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token function">exR2</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">;</span><span class="token comment">//1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//2</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//3</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>第二三行的代码应该先于第一行的代码（注释做标记的行），这样可以减少递归次数，提高函数的运行效率。</p><ul><li>参考答案：<ul><li>这段代码中的基础情况永远不会被访问。调用 exR2(3) 会产生调用 exR2(0)、exR2(-3) 和exR2(-6)，循环往复直到发生 StackOverflowError。</li></ul></li></ul><h3 id="请看以下递归函数"><a href="#请看以下递归函数" class="headerlink" title="请看以下递归函数:"></a><strong>请看以下递归函数:</strong></h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">mystery</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">mystery</span><span class="token punctuation">(</span>a<span class="token operator">+</span>a<span class="token punctuation">,</span> b<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token function">mystery</span><span class="token punctuation">(</span>a<span class="token operator">+</span>a<span class="token punctuation">,</span> b<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>1.1.18<strong>mystery(2, 25) 和 mystery(3, 11) 的返回值是多少?给定正整数 a 和 b，mystery(a,b)计算的结果是什么?将代码中的 + 替换为 * 并将 return 0 改为 return 1，然后回答相同 的问题。</strong></p><ul><li><p>分析</p><ul><li>当代码中为+时</li></ul><ol><li>mystery(2,25) :</li></ol><p>a=2,b=25,因为b!=0且b%2!=0，所以返回mystery(4,12) + 2</p><p>​    mystery(4,12) 中 a=4,b=12,因为b!=0 ，b%2==0，所以return mystery(8,6)</p><p>​    mystery(8,6)中，a=8,b=6  return mystery(16,3)</p><p>​    mystery(16,3)中，a=16,b=3, return mystery(32,1)+16</p><p>​    mystery(32,1)中，a=32,b=1,return mystery(64,0)+32</p><p>​    mystery(64,0)==0</p><p>所以mystery(2,25)=2+16+32+0=50</p></li><li><p>答案：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">mystery</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">mystery</span><span class="token punctuation">(</span>a<span class="token operator">+</span>a<span class="token punctuation">,</span> b<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">mystery</span><span class="token punctuation">(</span>a<span class="token operator">+</span>a<span class="token punctuation">,</span> b<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">mystery1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">mystery1</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token punctuation">,</span> b<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">mystery1</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token punctuation">,</span> b<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">mystery</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出50</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">mystery</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出33</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">mystery1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出33554432</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">mystery1</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出177147</span><span class="token punctuation">&#125;</span><span class="token comment">//这道题目考了一个思想，数据和操作，即第一个参数是数据，第二个参数是操作的。这在实际编程中也是一种解耦的思想</span></code></pre><h3 id="在计算机上运行以下程序"><a href="#在计算机上运行以下程序" class="headerlink" title="在计算机上运行以下程序:"></a><strong>在计算机上运行以下程序:</strong></h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fibonacci</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token class-name">N</span> <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>1.1.19<strong>计算机用这段程序在一个小时之内能够得到 F(N) 结果的最大 N 值是多少?开发 F(N) 的一个更好的实现，用数组保存已经计算过的值。</strong></p><ul><li>具体的值不知道，算到<code>48 4807526976</code>时就已经很慢很慢啦!</li><li>更好的实现</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>output<span class="token punctuation">.</span></span><span class="token class-name">FastInfosetStreamWriterOutput</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdIn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdRandom</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practice02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        if(N==0)</span><span class="token comment">//            return 0;</span><span class="token comment">//        if(N==1)</span><span class="token comment">//            return 1;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token class-name">N</span> <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这样可以飞速得到答案，所以递归程序看上去简单，实际上效率不高哦！</p><h3 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h3><p>1.1.20 编写一个递归的静态方法计算ln(N!)的值</p><ul><li>分析</li></ul><p>利用公式：ln(a+b)=lna + lnb，可以递归计算ln(n!)啦！</p><ul><li>答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token class-name">LogNNN</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token class-name">F</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="编程题-1"><a href="#编程题-1" class="headerlink" title="编程题"></a>编程题</h3><p>1.1.21 编写一段程序，从标准输入按行读取数据，其中每行都包含一个名字和两个整数。然后用printf()打印一张表格，每行的若干列数据包括名字、两个整数和第一个整数除以第二个整数的结果，粗确到小数点后三位。可以用这种程序将棒球球手的击球命中率或者学生的考试分数制成表格。</p><ul><li>答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdIn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practice02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token class-name">F</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//定义行号</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入数据总的行数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        row <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从键盘获取数据行数</span>        <span class="token class-name">String</span> <span class="token class-name">Name</span> <span class="token operator">=</span> <span class="token string">"Name"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> V1 <span class="token operator">=</span> <span class="token string">"Value1"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> V2 <span class="token operator">=</span> <span class="token string">"Value2"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> V3 <span class="token operator">=</span> <span class="token string">"Value3"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> num3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            num2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            num3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入名字 数字1 数字2 格式:\"Jack 100 100\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>num2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//遍历</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-8s%-8s%-8s%-8s"</span><span class="token punctuation">,</span><span class="token class-name">Name</span><span class="token punctuation">,</span>V1<span class="token punctuation">,</span>V2<span class="token punctuation">,</span>V3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//StdOut.println("Name    V1         V2        V3");</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-8s%-8s%-8s%-8.3f"</span><span class="token punctuation">,</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>num2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>num3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>运行效果</li></ul><pre class="language-none"><code class="language-none">请输入数据总的行数:3请输入名字 数字1 数字2 格式:&quot;Jack 100 100&quot;jack 123 321请输入名字 数字1 数字2 格式:&quot;Jack 100 100&quot;rose 321 123请输入名字 数字1 数字2 格式:&quot;Jack 100 100&quot;go 333 111******************************Name    Value1  Value2  Value3  jack    123     321     0.383   rose    321     123     2.610   go      333     111     3.000   ****************************** </code></pre><hr><p>参考:</p><p><a href="https://xiaozhuanlan.com/topic/8356417209">算法练习(3) :递归(1.1.15-1.1.21) － 小专栏 (xiaozhuanlan.com)</a><a href="https://xiaozhuanlan.com/kyson">https://xiaozhuanlan.com/kyson</a>)</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-3-递归（1-1-14-1-1-21&quot;&gt;&lt;a href=&quot;#算法练习-3-递归（1-1-14-1-1-21&quot; class=&quot;headerlink&quot; title=&quot;算法练习-3-递归（1.1.14-1.1.21)&quot;&gt;&lt;/a&gt;算法练习-3-递归（1.1.14-1.1.21)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;java的基本语法：递归调用&lt;/li&gt;
&lt;li&gt;直方图的预习&lt;/li&gt;
&lt;li&gt;斐波那契数列的递归调用实现以及优化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-2-二维数组(1.1.8-1.1.13)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/08/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-2-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84(1.1.8-1.1.13)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/08/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-2-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84(1.1.8-1.1.13)/</id>
    <published>2021-01-08T12:25:52.000Z</published>
    <updated>2021-01-09T13:35:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-2-二维数组-1-1-8-1-1-13"><a href="#算法练习-2-二维数组-1-1-8-1-1-13" class="headerlink" title="算法练习-2-二维数组(1.1.8-1.1.13)"></a>算法练习-2-二维数组(1.1.8-1.1.13)</h1><p><strong>知识点：</strong></p><ul><li><p>java的基本语法</p></li><li><p>十进制与二进制的转换</p></li><li><p>一维数组的逆序输出</p></li><li><p>二位数组的转置（交换行与列）</p><a id="more"></a></li></ul><h2 id="1-1-8-1-1-13"><a href="#1-1-8-1-1-13" class="headerlink" title="1.1.8-1.1.13"></a>1.1.8-1.1.13</h2><h3 id="给出以下表达式的值"><a href="#给出以下表达式的值" class="headerlink" title="给出以下表达式的值:"></a><strong>给出以下表达式的值:</strong></h3><p>1.1.8</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">a<span class="token punctuation">.</span></span> System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">b<span class="token punctuation">.</span></span> System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'b'</span> <span class="token operator">+</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span></span> System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>答案：</li></ul><pre class="language-none"><code class="language-none">b197    &#x2F;&#x2F;98+99e    &#x2F;&#x2F;97+4 --&gt; e</code></pre><h3 id="编写一段代码，"><a href="#编写一段代码，" class="headerlink" title="编写一段代码，"></a><strong>编写一段代码，</strong></h3><p>1.1.9</p><p>将一个正整数 N 用二进制表示并转换为一个 String 类型的值 s</p><ul><li>答案:</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdIn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practice02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//编写一段代码，将一个正整数 N</span>        <span class="token comment">//用二进制表示并转换为一个</span>        <span class="token comment">// String 类型的值 s</span>        <span class="token keyword">int</span> a<span class="token punctuation">;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            a <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> a<span class="token punctuation">;</span>n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>当然 用java自带的Integer类的<code>Integer.toBinaryString(N)</code>可以更加圆满的完成任务，不过我们最好自己去写一个吧，源码<a href="http://grepcode.com/file_/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/lang/Integer.java/?v=source">地址</a></p></li><li><p>这个代码简洁，但是效率很低，我们考虑使用移位运算符实现</p></li></ul><pre class="language-none"><code class="language-none">移位运算符在程序设计中，是位操作运算符的一种。移位运算符可以在二进制的基础上对数字进行平移。按照平移的方向和填充数字的规则分为三种：&lt;&lt;(左移)、&gt;&gt;(带符号右移)和&gt;&gt;&gt;(无符号右移)。</code></pre><p>移位操作符的一个性质就是<strong>右移相当于除以2，左移相当于乘以2</strong></p><ul><li>答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decimalToBinary</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> resultString <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        resultString <span class="token operator">=</span> resultString <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> resultString<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>注：</strong> </p><ul><li><p>&amp;运算</p><p>即与运算符，运算规则：0&amp;0=0，0&amp;1=1，1&amp;0=0，1&amp;1=1 即<strong>两个同时为1，结果为1，否则为0</strong></p></li></ul><p>比如： 3 &amp; 5 &lt;==&gt; 0000 0011   &amp; 0000 0101</p><p>即   0000 0011</p><p>​       0000 0101     结果是  0000 0001  转为十进制：1 即:3&amp;5 = 1</p><ul><li>| 运算</li></ul><p>运算规则：0|0=0，0|1=1，1|1=1，1|0=0 （有1就1）</p><ul><li>^运算</li></ul><p>运算规则：0^0 = 0,0^1=1,1^0=1,1^1=0(相同就0不同就1)</p><h3 id="下面这段代码有什么问题"><a href="#下面这段代码有什么问题" class="headerlink" title="下面这段代码有什么问题?"></a><strong>下面这段代码有什么问题?</strong></h3><p>1.1.10</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span></code></pre><ul><li>答案：</li></ul><pre class="language-none"><code class="language-none">new数组的时候为什么不new!!!java的数组需要分配内存的qaq！这样会产生一个 variable a might not have been initialized 的编译错误。</code></pre><h3 id="编写一段代码"><a href="#编写一段代码" class="headerlink" title="编写一段代码"></a><strong>编写一段代码</strong></h3><p>1.1.11</p><p>打印出一个二维布尔数组的内容。其中，使用 * 表示真，空格表示假。打印出行号和列号</p><ul><li>思路：</li></ul><p>新建一个二维布尔数组，随机初始化真和假，根据真假，遍历进行打印</p><ul><li>答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdRandom</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practice02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * 打印出一个二维布尔数组的内容。         * 其中，使用 * 表示真，空格表示假。         * 打印出行号和列号         */</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> uniform <span class="token operator">=</span> <span class="token class-name">StdRandom</span><span class="token punctuation">.</span><span class="token function">uniform</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>uniform<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                    b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"* "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none"> 0 1 2 3 40*     *   1* * * *   2    * * * 3  *     * 4      *   </code></pre><p><strong>其实还是挺基础的一道题</strong></p><h3 id="以下代码段会打印出什么结果？"><a href="#以下代码段会打印出什么结果？" class="headerlink" title="以下代码段会打印出什么结果？"></a>以下代码段会打印出什么结果？</h3><p>1.1.12</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>          a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">9</span><span class="token operator">-</span>i<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>          a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token comment">//end main</span><span class="token punctuation">&#125;</span><span class="token comment">//end class</span></code></pre><ul><li>答案：</li></ul><pre class="language-none"><code class="language-none">0123456789</code></pre><p>**放烟雾弹是吧，真有你的Robert Sedgewick</p><h3 id="编写一段代码-1"><a href="#编写一段代码-1" class="headerlink" title="编写一段代码"></a>编写一段代码</h3><p>1.1.13</p><p>打印出一个M行N列的二维数组的转置(交换行和列）。</p><ul><li>思路</li></ul><p>先生成一个M行N列的，然后用先N后M遍历输出。</p><ul><li>答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>output<span class="token punctuation">.</span></span><span class="token class-name">FastInfosetStreamWriterOutput</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdRandom</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practice02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">M</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">M</span><span class="token operator">+</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//初始化完成，开始遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token class-name">M</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">10 2 12 3 13 7 0 8 13 8 14 4 7 3 14 4 7 8 2 2 8 11 14 13 11 10 5 10 11 11 8 2 1 13 2 8 6 13 12 10 4 5 4 4 13 8 13 13 6 9 10 7 14 4 8 10 8 8 4 8 2 0 4 7 11 5 2 6 5 13 12 8 7 8 14 10 1 13 4 13 3 13 3 2 13 11 13 12 4 6 13 8 14 2 11 11 2 10 13 9 </code></pre><p>没有写接收参数，再来!</p><ul><li>答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>     <span class="token comment">//初始化</span>     <span class="token keyword">int</span> <span class="token class-name">M</span><span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> <span class="token class-name">N</span><span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>row<span class="token operator">&lt;</span><span class="token class-name">M</span><span class="token punctuation">;</span>row<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>col<span class="token operator">&lt;</span><span class="token class-name">N</span><span class="token punctuation">;</span>col<span class="token operator">++</span><span class="token punctuation">)</span>              array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">=</span>row<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>col<span class="token punctuation">;</span>     <span class="token comment">//打印未转置的元素</span>     <span class="token keyword">int</span> width<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">;</span>     <span class="token class-name">String</span> format<span class="token operator">=</span><span class="token string">"%"</span><span class="token operator">+</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"s"</span><span class="token punctuation">;</span>     <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>col<span class="token operator">&lt;</span><span class="token class-name">N</span><span class="token punctuation">;</span>col<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>row<span class="token operator">&lt;</span><span class="token class-name">M</span><span class="token punctuation">;</span>row<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>col<span class="token operator">&lt;</span><span class="token class-name">N</span><span class="token punctuation">;</span>col<span class="token operator">++</span><span class="token punctuation">)</span>                 <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span>array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token comment">//打印转置后的元素</span>      <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>row<span class="token operator">&lt;</span><span class="token class-name">M</span><span class="token punctuation">;</span>row<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>col<span class="token operator">&lt;</span><span class="token class-name">N</span><span class="token punctuation">;</span>col<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>row<span class="token operator">&lt;</span><span class="token class-name">M</span><span class="token punctuation">;</span>row<span class="token operator">++</span><span class="token punctuation">)</span>                 <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span>array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token comment">//end main</span><span class="token punctuation">&#125;</span><span class="token comment">//end class</span></code></pre><ul><li>运行结果 </li></ul><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210109003554.png" alt="image-20210109003554564" loading="lazy"></p><hr><p>参考：</p><p><a href="https://xiaozhuanlan.com/topic/5147298630">算法练习(2):二维数组(1.1.8-1.1.13) － 小专栏 (xiaozhuanlan.com)</a></p><p><a href="https://www.cnblogs.com/longjin2018/archive/2004/01/13/9848507.html">Algs4-1.1.13编写一段代码，打印出一个M行N列的二维数组的转置(交换行和列） - 修电脑的龙生 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-2-二维数组-1-1-8-1-1-13&quot;&gt;&lt;a href=&quot;#算法练习-2-二维数组-1-1-8-1-1-13&quot; class=&quot;headerlink&quot; title=&quot;算法练习-2-二维数组(1.1.8-1.1.13)&quot;&gt;&lt;/a&gt;算法练习-2-二维数组(1.1.8-1.1.13)&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;知识点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;java的基本语法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;十进制与二进制的转换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一维数组的逆序输出&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;二位数组的转置（交换行与列）&lt;/p&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-1-Java基本语法(1.1.1-1.1.7)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/07/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-1-Java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95(1.1.1-1.1.7)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/07/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-1-Java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95(1.1.1-1.1.7)/</id>
    <published>2021-01-07T13:09:54.000Z</published>
    <updated>2021-01-09T13:34:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-1-Java基本语法-1-1-1-1-1-7"><a href="#算法练习-1-Java基本语法-1-1-1-1-1-7" class="headerlink" title="算法练习-1-Java基本语法(1.1.1-1.1.7)"></a>算法练习-1-Java基本语法(1.1.1-1.1.7)</h1><p>《算法》（第四版）的第一章课后习题1.1.1-1.1.7，希望自己能坚持下去把这本书啃完！</p><p>此博客的习题知识点：</p><ul><li>java基本语法</li><li>斐波那契数列的java表示</li></ul><a id="more"></a><h2 id="1-1-1-1-1-7"><a href="#1-1-1-1-1-7" class="headerlink" title="1.1.1-1.1.7"></a>1.1.1-1.1.7</h2><p><strong>知识点</strong></p><ul><li>java的基本语法</li><li>斐波那契数列的java表示</li></ul><h3 id="给出以下表达式的值："><a href="#给出以下表达式的值：" class="headerlink" title="给出以下表达式的值："></a>给出以下表达式的值：</h3><p>1.1.1</p><p><strong>a.( 0 + 15 ) / 2<br>b.2.0e-6 * 100000000.1<br>c.true &amp;&amp; false || true &amp;&amp; true</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token comment">/*** * @author leafii * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> practice01 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * a.( 0 + 15 ) / 2         * b.2.0e-6 * 100000000.1         * c.true &amp;&amp; false || true &amp;&amp; true         */</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">2e-6</span> <span class="token operator">*</span> <span class="token number">100000000.1</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> c <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b="</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c="</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">a&#x3D;7    整除b&#x3D;200.0000002    2*10的-6 乘以 100000000.1 double类型c&#x3D;true   false &amp;&amp; true</code></pre><h3 id="给出以下表达式的类型和值"><a href="#给出以下表达式的类型和值" class="headerlink" title="给出以下表达式的类型和值:"></a><strong>给出以下表达式的类型和值:</strong></h3><p>1.1.2</p><p><strong>a. (1 + 2.236)/2<br>b. 1 + 2 + 3 + 4.0<br>c. 4.1 &gt;= 4<br>d. 1 + 2 + “3”</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token comment">/*** * @author leafii * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> practice01 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * a. (1 + 2.236)/2         * b. 1 + 2 + 3 + 4.0         * c. 4.1 >= 4         * d. 1 + 2 + "3"          */</span>        <span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2.236</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4.0</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> c <span class="token operator">=</span> <span class="token number">4.1</span> <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> d <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"3"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b="</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c="</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d="</span> <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果</p><pre class="language-none"><code class="language-none">a&#x3D;1.618    3.236&#x2F;2 doubleb&#x3D;10.0     doublec&#x3D;true     d&#x3D;33     3 和 3 拼接</code></pre><h3 id="编写一个程序"><a href="#编写一个程序" class="headerlink" title="编写一个程序"></a><strong>编写一个程序</strong></h3><p>1.1.3</p><p><strong>从命令行得到三个整数参数。如果它们都相等则打印 equal，否则打印 not equal。</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">In</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdIn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token comment">/*** * @author leafii * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> practice01 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * 编写一个程序，从命令行得到三个整数参数。         * 如果它们都相等则打印 equal，         * 否则打印 not equal。         */</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//为了能多重输入，便于测试哦</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"equal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"not equal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果</p><pre class="language-none"><code class="language-none">12 23 34not equal11 11 11equal</code></pre><h3 id="下列语句各有什么问题-如果有的话"><a href="#下列语句各有什么问题-如果有的话" class="headerlink" title="下列语句各有什么问题(如果有的话)?"></a><strong>下列语句各有什么问题(如果有的话)?</strong></h3><p>1.1.4</p><p><strong>a. if (a &gt; b) then c = 0;<br>b. if a &gt; b { c = 0; }<br>c. if (a &gt; b) c = 0;<br>d. if (a &gt; b) c = 0 else b = 0;</strong></p><pre class="language-none"><code class="language-none">a. if (a &gt; b) then c &#x3D; 0;   &#x2F;&#x2F;java中不存在then关键字b. if a &gt; b &#123; c &#x3D; 0; &#125;   &#x2F;&#x2F;没有括号，应该是(a &gt; b)c. if (a &gt; b) c &#x3D; 0;    &#x2F;&#x2F;没问题，不过最好加括号d. if (a &gt; b) c &#x3D; 0 else b &#x3D; 0; &#x2F;&#x2F;有问题 c&#x3D;0没有分号，还有二义性，没加花括号</code></pre><h3 id="编写一段程序"><a href="#编写一段程序" class="headerlink" title="编写一段程序"></a><strong>编写一段程序</strong></h3><p>1.1.5</p><p><strong>如果 double 类型的变量 x 和 y 都严格位于 0 和 1 之间则打印 true，否则打印 false</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">In</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdIn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token comment">/*** * @author leafii * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> practice01 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         如果 double 类型的变量 x 和 y 都严格位于 0 和 1 之间则打印 true，         否则打印 false         */</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> y <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> y<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">0.10.89true1.20.1false0.33.4false</code></pre><h3 id="下面这段程序会打印出什么"><a href="#下面这段程序会打印出什么" class="headerlink" title="下面这段程序会打印出什么?"></a><strong>下面这段程序会打印出什么?</strong></h3><p>1.1.6</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> g <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    f <span class="token operator">=</span> f <span class="token operator">+</span> g<span class="token punctuation">;</span>    g <span class="token operator">=</span> f <span class="token operator">-</span> g<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre><p>答：会打印出</p><pre class="language-none"><code class="language-none">01123581321345589144233377610</code></pre><p>分析如下：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210108020834.png" alt="image-20210108020834693" loading="lazy"></p><p><strong>注：这段代码是用来展示斐波那契数列的哦</strong></p><h3 id="分别给出以下代码段打印出的值"><a href="#分别给出以下代码段打印出的值" class="headerlink" title="分别给出以下代码段打印出的值:"></a><strong>分别给出以下代码段打印出的值:</strong></h3><p>1.1.7</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//a.</span><span class="token keyword">double</span> t <span class="token operator">=</span> <span class="token number">9.0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>t <span class="token operator">-</span> <span class="token number">9.0</span><span class="token operator">/</span>t<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">.001</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">9.0</span><span class="token operator">/</span>t <span class="token operator">+</span> t<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span><span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.5f\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//b.</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        sum<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//c. </span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        sum<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>答案：</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;a. 3.00009&#x2F;&#x2F;b.499500&#x2F;&#x2F;c.10000</code></pre><hr><p>参考：<a href="https://xiaozhuanlan.com/topic/0341275869">算法练习(1):Java 基本语法(1.1.1-1.1.7) － 小专栏 (xiaozhuanlan.com)</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-1-Java基本语法-1-1-1-1-1-7&quot;&gt;&lt;a href=&quot;#算法练习-1-Java基本语法-1-1-1-1-1-7&quot; class=&quot;headerlink&quot; title=&quot;算法练习-1-Java基本语法(1.1.1-1.1.7)&quot;&gt;&lt;/a&gt;算法练习-1-Java基本语法(1.1.1-1.1.7)&lt;/h1&gt;&lt;p&gt;《算法》（第四版）的第一章课后习题1.1.1-1.1.7，希望自己能坚持下去把这本书啃完！&lt;/p&gt;
&lt;p&gt;此博客的习题知识点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java基本语法&lt;/li&gt;
&lt;li&gt;斐波那契数列的java表示&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>《算法》（第四版）环境搭建</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/07/%E3%80%8A%E7%AE%97%E6%B3%95%E3%80%8B%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%89%88%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/07/%E3%80%8A%E7%AE%97%E6%B3%95%E3%80%8B%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%89%88%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2021-01-07T11:43:08.000Z</published>
    <updated>2021-01-07T12:38:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《算法》（第四版）环境搭建"><a href="#《算法》（第四版）环境搭建" class="headerlink" title="《算法》（第四版）环境搭建"></a>《算法》（第四版）环境搭建</h1><p>最近开封了买了很久都没读的《算法》（红色封面的），如果想运行里面的代码需要安装一个与本书搭配的jar包，因此有了这篇博客。</p><a id="more"></a><h2 id="算法运行库的下载和配置"><a href="#算法运行库的下载和配置" class="headerlink" title="算法运行库的下载和配置"></a>算法运行库的下载和配置</h2><ol><li><p>下载作者提供的运行库，下载地址：<a href="http://algs4.cs.princeton.edu/code/">点我</a> 点开页面之后使劲往下翻，翻到下图位置时，就知道点哪个下载了 嘿嘿嘿嘿</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107200929.png" alt="image-20210107200929162" loading="lazy"></p></li></ol><p><strong>我们需要下载两个内容，一个是库，一个是测试的数据。库是algs4.jar，数据是algs4-data.zip。</strong></p><ol start="2"><li>在C盘建立目录<code>C:\Program Files\algs4</code>，然后把algs4.jar放在里面。（什么目录都可以）</li><li>在CLASSPATH环境变量中，添加值<code>C:\Program Files\algs4\algs4.jar</code> (就是刚刚存放algs4.jar的路径)</li></ol><p><strong>注:如果你没有配置过CLASSPATH，请复制以下语句进CLASSPATH，使你的CLASSPATH变成这样</strong></p><pre class="language-none"><code class="language-none">.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;C:\Users\yeyun\alsgs4\algs4.jar</code></pre><h2 id="测试数据的使用"><a href="#测试数据的使用" class="headerlink" title="测试数据的使用"></a>测试数据的使用</h2><ol><li>在idea中创建一个HelloWorld工程，选择你的JDK，下一步。</li><li>为项目添加jar包：File–&gt;Project Strcuture–&gt;Modules，然后点加号，点击，JARS…..,选择你的Jar包的位置，点确定。如图所示：</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107202545.png" alt="image-20210107202545115" loading="lazy"></p><ol start="3"><li>将测试数据解压到src目录下：</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107202658.png" alt="image-20210107202658127" loading="lazy"></p><ol start="4"><li>使用第一章第一节的测试代码：</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>day01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">BinarySearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hi <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;=</span> hi<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Key is in a[lo..hi] or not present.</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span>      <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> hi <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> lo <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// read the integers from a file</span>        <span class="token class-name">In</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">In</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> whitelist <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readAllInts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// sort the array</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>whitelist<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// read integer key from standard input; print if not in whitelist</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">BinarySearch</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>whitelist<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="5"><li>在BinarySearch类所在的文件夹右键，选择open in terminal，输入编译命令:<code>javac BinarySearch.java</code></li><li>在src文件夹上右键，点击open in terminal</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107202831.png" alt="image-20210107202831682" loading="lazy"></p><ol start="6"><li>在命令行中输入命令：<code>java top.leafii.demo.day01.BinarySearch tinyW.txt &lt; tinyT.txt</code>（注意你的包名）</li><li>成功了！运行结果如图所示：</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107203202.png" alt="image-20210107203201972" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;《算法》（第四版）环境搭建&quot;&gt;&lt;a href=&quot;#《算法》（第四版）环境搭建&quot; class=&quot;headerlink&quot; title=&quot;《算法》（第四版）环境搭建&quot;&gt;&lt;/a&gt;《算法》（第四版）环境搭建&lt;/h1&gt;&lt;p&gt;最近开封了买了很久都没读的《算法》（红色封面的），如果想运行里面的代码需要安装一个与本书搭配的jar包，因此有了这篇博客。&lt;/p&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>关于java命令报错 找不到或无法加载主类这件事</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/07/%E5%85%B3%E4%BA%8Ejava%E5%91%BD%E4%BB%A4%E6%8A%A5%E9%94%99-%E6%89%BE%E4%B8%8D%E5%88%B0%E6%88%96%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E4%B8%BB%E7%B1%BB%E8%BF%99%E4%BB%B6%E4%BA%8B/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/07/%E5%85%B3%E4%BA%8Ejava%E5%91%BD%E4%BB%A4%E6%8A%A5%E9%94%99-%E6%89%BE%E4%B8%8D%E5%88%B0%E6%88%96%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E4%B8%BB%E7%B1%BB%E8%BF%99%E4%BB%B6%E4%BA%8B/</id>
    <published>2021-01-07T07:46:37.000Z</published>
    <updated>2021-01-07T11:44:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于java命令报错-找不到或无法加载主类这件事"><a href="#关于java命令报错-找不到或无法加载主类这件事" class="headerlink" title="关于java命令报错 找不到或无法加载主类这件事"></a>关于java命令报错 找不到或无法加载主类这件事</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>今天在配置《算法》（第四版）所需要的环境后，进行java命令+输入输出流文件时报错了！报错如图所示：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107155310.png" alt="image-20210107155303487" loading="lazy"></p><p>咋回事呢？</p><a id="more"></a><h2 id="或许，是因为没有写包名？"><a href="#或许，是因为没有写包名？" class="headerlink" title="或许，是因为没有写包名？"></a>或许，是因为没有写包名？</h2><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107160102.png" alt="image-20210107160102193" loading="lazy"></p><p>还是不行!!!咋回事呢？</p><h2 id="写个HelloWorld试试？可能是java命令出问题了？"><a href="#写个HelloWorld试试？可能是java命令出问题了？" class="headerlink" title="写个HelloWorld试试？可能是java命令出问题了？"></a>写个HelloWorld试试？可能是java命令出问题了？</h2><p>在D盘根目录写一个Hello.java，代码如下（其实就是Helloworld啦）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>然而运行的时候…</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107160522.png" alt="image-20210107160522119" loading="lazy"></p><p>？？？？？？怎么回事呢？</p><h2 id="用家里的Mac的终端试试能不能写Java代码"><a href="#用家里的Mac的终端试试能不能写Java代码" class="headerlink" title="用家里的Mac的终端试试能不能写Java代码"></a>用家里的Mac的终端试试能不能写Java代码</h2><p>可以的，一样的代码，它就能运行，咱就不行，怎么回事呢？</p><h2 id="干脆重新安装JDK试试"><a href="#干脆重新安装JDK试试" class="headerlink" title="干脆重新安装JDK试试!"></a>干脆重新安装JDK试试!</h2><h3 id="卸载旧的JDK"><a href="#卸载旧的JDK" class="headerlink" title="卸载旧的JDK"></a>卸载旧的JDK</h3><p>打开控制面板–&gt;卸载程序–&gt;找到Java开头的两个应用</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107160756.png" alt="image-20210107160756288" loading="lazy"></p><p>给他们都卸载了！</p><p>把环境变量配置的JAVA_HOME,以及Path中的两个java运行路径都删除！</p><h3 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h3><p>当然是去甲骨文官网下载啦，[官网地址](<a href="https://www.oracle.com/java/technologies/javase-downloads.html">Java SE - Downloads | Oracle Technology Network | Oracle</a>)</p><p>选择合适的jdk版本的合适系统的安装包，点击下载，同意协议，登陆账户后自动开始下载</p><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><p>双击安装就好了</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ol><li><p>右键此电脑–&gt;属性–&gt;高级系统设置–&gt;环境变量</p></li><li><p>配置JAVA_HOME(在用户变量里），路径为你的java安装目录，我的安装目录如下</p></li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107162104.png" alt="image-20210107162104115" loading="lazy"></p><ol start="3"><li>配置Path（在系统变量里），路径为jdk和jre的运行目录，我的path配置如下</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107162251.png" alt="image-20210107162250997" loading="lazy"></p><ol start="4"><li>虽然在java1.6以上不需要配置CLASSPATH，但是因为我要配置额外的运行库，所以要在系统变量里配置完整CLASSPATH，值如下</li></ol><pre class="language-none"><code class="language-none">.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code></pre><ol start="5"><li>因为配置了算法第四版的运行库，所以要在CLASSPATH中添加</li></ol><pre class="language-none"><code class="language-none">;C:\Users\yeyun\alsgs4\algs4.jar</code></pre><p><strong>配置结束之后，点击三次确定，打开cmd（或gitbash），输入java -version，如果不报错并显示版本，则配置成功</strong></p><h2 id="现在再试试Helloworld能跑起来吗？"><a href="#现在再试试Helloworld能跑起来吗？" class="headerlink" title="现在再试试Helloworld能跑起来吗？"></a>现在再试试Helloworld能跑起来吗？</h2><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107162614.png" alt="image-20210107162614489" loading="lazy"></p><p>可以的，成功了！，再试试书上的示例代码可以跑起来吗？</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107162638.png" alt="image-20210107162638159" loading="lazy"></p><p>可以了！</p><h2 id="反省问题"><a href="#反省问题" class="headerlink" title="反省问题"></a>反省问题</h2><p>其实jdk并没有问题，因为在idea上运行代码，项目都没有任何问题的，只是在命令行的时候出了问题！那么是哪里出了问题呢？</p><p>是CLASSPATH环境变量配置的问题！以前配置jdk的时候没有配置CLASSPATH，所以以前可以直接用java命令运行，但是现在因为配置了算法第四版的运行库，反而配置了CLASSPATH，但是并没有配置其它的默认的CLASSPATH，导致系统不知道你在运行java命令时的此时的.class文件的目录什么的（和.;这个环境变量内容有关系），配置之后就一切正常了！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果使用java命令运行.class文件时报错：找不到或无法加载主类，请进行如下操作：</p><ol><li><p>检查你运行的类是不是处于某个包内，要在这个包的上一级目录，运行这个包中的类，并且在类名之前加上包名，如<code>java top.leafii.day01.HelloWorld</code> ，这样如果可以运行，那么就是你java命令要运行的包名没有弄清楚</p></li><li><p>检查你的环境变量是否配置正确，如果配置了其它的CLASSPATH，那就把默认的<code>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code>也加上（注意分号)</p></li><li><p>如果实在不知道怎么搞，就重装一遍JDK！不过一般都是上面这两个情况。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;关于java命令报错-找不到或无法加载主类这件事&quot;&gt;&lt;a href=&quot;#关于java命令报错-找不到或无法加载主类这件事&quot; class=&quot;headerlink&quot; title=&quot;关于java命令报错 找不到或无法加载主类这件事&quot;&gt;&lt;/a&gt;关于java命令报错 找不到或无法加载主类这件事&lt;/h1&gt;&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;今天在配置《算法》（第四版）所需要的环境后，进行java命令+输入输出流文件时报错了！报错如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/mikutown/pic/raw/master/img/20210107155310.png&quot; alt=&quot;image-20210107155303487&quot;&gt;&lt;/p&gt;
&lt;p&gt;咋回事呢？&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://mikutown.gitee.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Go语言の变量</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/04/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E5%8F%98%E9%87%8F/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/04/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E5%8F%98%E9%87%8F/</id>
    <published>2021-01-04T13:22:07.000Z</published>
    <updated>2021-01-08T12:19:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go语言の变量"><a href="#Go语言の变量" class="headerlink" title="Go语言の变量"></a>Go语言の变量</h1><p>本文章主要写Go语言中使用的变量类型以及其知识点</p><a id="more"></a><h2 id="为什么需要变量"><a href="#为什么需要变量" class="headerlink" title="为什么需要变量"></a>为什么需要变量</h2><p><strong>因为变量是高级程序语言的程序的基本组成单位，如下面的代码的实例：</strong></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">getVal</span><span class="token punctuation">(</span>num1 <span class="token builtin">int</span><span class="token punctuation">,</span> num2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sum <span class="token operator">:=</span> num1 <span class="token operator">+</span> num2    sub <span class="token operator">:=</span> num2 <span class="token operator">-</span> num1    <span class="token keyword">return</span> sum<span class="token punctuation">,</span> sub<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sum<span class="token punctuation">,</span> sub <span class="token operator">:=</span> <span class="token function">getVal</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sum="</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span><span class="token string">"sub="</span><span class="token punctuation">,</span> sub<span class="token punctuation">)</span>    sum2<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">getVal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token comment">//只取出第一个返回值</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sum="</span><span class="token punctuation">,</span> sum2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>以上代码中的sum,sub都是变量。</p><h2 id="变量的介绍"><a href="#变量的介绍" class="headerlink" title="变量的介绍"></a>变量的介绍</h2><h3 id="变量的概念"><a href="#变量的概念" class="headerlink" title="变量的概念"></a>变量的概念</h3><p>变量相当于内存中一个数据存储空间的表示，你可以把变量看作是一个房间的门牌号，通过门牌号我们可以找到房间，同样的道理，通过变量名可以访问到变量/变量的值。</p><h3 id="变量的使用步骤"><a href="#变量的使用步骤" class="headerlink" title="变量的使用步骤"></a>变量的使用步骤</h3><ol><li>声明变量（也叫定义变量）</li><li>非变量赋值</li><li>使用变量</li></ol><h2 id="变量快速入门案例"><a href="#变量快速入门案例" class="headerlink" title="变量快速入门案例"></a>变量快速入门案例</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//定义变量/声明变量</span><span class="token keyword">var</span> i <span class="token builtin">int</span><span class="token comment">//给i赋值</span>i <span class="token operator">=</span> <span class="token number">10</span><span class="token comment">//使用变量</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104214110.png" alt="image-20210104214110288" loading="lazy"></p><h2 id="变量使用注意事项"><a href="#变量使用注意事项" class="headerlink" title="变量使用注意事项"></a>变量使用注意事项</h2><ol><li>变量表示内存中的一个存储区域</li><li>该区域有自己的名称（变量名）和类型（数据类型）</li></ol><p>示意图:</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104214226.png" alt="image-20210104214226281" loading="lazy"></p><ol start="3"><li><p>Golang变量使用的三种方式</p><ol><li>指定变量类型，声明后若不赋值，使用默认值。<code>var i int</code></li><li>根据值自行判定变量类型（类型推导）<code>var num = 10.11</code></li><li>省略var,注意 := 左侧的变量不应该是已经声明过的，否则会导致编译错误</li></ol><pre class="language-go" data-language="go"><code class="language-go">name <span class="token operator">:=</span> <span class="token string">"tom"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"name="</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span></code></pre></li><li><p>多变量声明</p><p>在编程中，有时我们需要一次性声明多个变量，Golang也提供这样的语法，举例说明:</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//该案例演示golang如何一次性声明多个变量</span>    <span class="token comment">// var n1, n2, n3 int</span>    <span class="token comment">// fmt.Println("n1=",n1, "n2=",n2 ,"n3=",n3)</span>        <span class="token comment">//方式2</span>    <span class="token comment">// var n1, name, n3 = 100, "tom", 888</span>    <span class="token comment">// fmt.Println("n1=",n1, "name=",name ,"n3=",n3)</span>        <span class="token comment">//方式3 同样可以使用类型推导</span>    n1<span class="token punctuation">,</span> name<span class="token punctuation">,</span> n3 <span class="token operator">:=</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"tom~"</span><span class="token punctuation">,</span> <span class="token number">888</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"n1="</span><span class="token punctuation">,</span>n1<span class="token punctuation">,</span> <span class="token string">"name="</span><span class="token punctuation">,</span>name <span class="token punctuation">,</span><span class="token string">"n3="</span><span class="token punctuation">,</span>n3<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span></code></pre><p>​    如何一次性声明多个全局变量【在go中函数外部定义变量就是全局变量】：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//定义全局变量</span><span class="token keyword">var</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">var</span> n2 <span class="token operator">=</span> <span class="token number">200</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token comment">//上面的声明方式，也可以改成一次性声明</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    n3 <span class="token operator">=</span> <span class="token number">300</span>    n4 <span class="token operator">=</span> <span class="token number">900</span>    name2 <span class="token operator">=</span> <span class="token string">"mary"</span><span class="token punctuation">)</span></code></pre><ol start="5"><li>该区域的数据值可以在同一类型范围内不断变化（重点）</li></ol></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">//变量使用的注意事项</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//该区域的数据值可以在同一类型范围内不断变化</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>    i <span class="token operator">=</span> <span class="token number">30</span>    i <span class="token operator">=</span> <span class="token number">50</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">1.2</span><span class="token comment">//int， 原因是不能改变数据类型</span><span class="token punctuation">&#125;</span></code></pre><ol start="6"><li>变量在<strong>同一个作用域</strong>（在一个函数或者代码块）内不能重名</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">59</span>i <span class="token operator">:=</span> <span class="token number">99</span><span class="token comment">//错误!</span></code></pre><h2 id="变量的声明，初始化和赋值"><a href="#变量的声明，初始化和赋值" class="headerlink" title="变量的声明，初始化和赋值"></a>变量的声明，初始化和赋值</h2><ul><li><p>声明变量</p><ul><li>基本语法： var 变量名 数据类型</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token comment">//这就是声明了一个变量，变量名为a</span><span class="token keyword">var</span> num1 <span class="token builtin">float32</span> <span class="token comment">//这也是声明了一个变量，表示一个单精度类型的小数，变量名是num1</span></code></pre></li><li><p>初始化变量</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//在声明变量的时候，就给值</span><span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">45</span> <span class="token comment">//这就是初始化变量a</span><span class="token comment">//使用细节，如过声明时就直接赋值，可以省略数据类型</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">400</span></code></pre></li><li><p>给变量赋值</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//先声明变量</span><span class="token keyword">var</span> num in <span class="token comment">//默认0</span><span class="token comment">//赋值</span>num <span class="token operator">=</span> <span class="token number">780</span> <span class="token comment">//这就是赋值</span></code></pre><h2 id="程序中”-“号的使用"><a href="#程序中”-“号的使用" class="headerlink" title="程序中”+“号的使用"></a>程序中”+“号的使用</h2></li></ul><ol><li>当左右两边都是数值型时，则做加法运算</li><li>当左右两边都是字符串，则做字符串拼接</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">//演示golang中"+"的使用</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">var</span> r <span class="token operator">=</span> i <span class="token operator">+</span> j    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"r="</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>        <span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">"hello"</span>    <span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">"world"</span>    <span class="token keyword">var</span> res <span class="token operator">=</span> str1 <span class="token operator">+</span> str2 <span class="token comment">//做拼接操作</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"res="</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="数据类型的基本介绍"><a href="#数据类型的基本介绍" class="headerlink" title="数据类型的基本介绍"></a>数据类型的基本介绍</h2><ul><li>每一种数据都定义了明确的数据类型，在内存中分配了不同大小的内存空间。</li></ul><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104223253.png" alt="image-20210104223253926" loading="lazy"></p><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>​    简单地说，就是用于存放整数值的，比如0，-1，2345等等。</p><h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//演示Golang中整数类型的使用</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token comment">//测试以下int8的范围 -128~127</span>    <span class="token comment">//其他的 int16,int32,int64,类推...</span>    <span class="token keyword">var</span> j <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token number">127</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"j="</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="整数的各个类型"><a href="#整数的各个类型" class="headerlink" title="整数的各个类型"></a>整数的各个类型</h3><ul><li>整形的类型</li></ul><table><thead><tr><th>类型</th><th>有无符号</th><th>占用存储空间</th><th>表数范围</th></tr></thead><tbody><tr><td>int8</td><td>有</td><td>1字节</td><td>-128~127</td></tr><tr><td>int16</td><td>有</td><td>2字节</td><td>-2<sup>15</sup>~2<sup>15</sup>-1</td></tr><tr><td>int32</td><td>有</td><td>4字节</td><td>-2<sup>31</sup>~2<sup>31</sup>-1</td></tr><tr><td>int64</td><td>有</td><td>8字节</td><td>-2<sup>63</sup>~2<sup>63</sup>-1</td></tr></tbody></table><ul><li>整形的无符号类型</li></ul><table><thead><tr><th>类型</th><th>有无符号</th><th>占用存储空间</th><th>表数范围</th></tr></thead><tbody><tr><td>uint8</td><td>无</td><td>1字节</td><td>0~255</td></tr><tr><td>uint16</td><td>无</td><td>2字节</td><td>0~2<sup>16</sup>-1</td></tr><tr><td>uint32</td><td>无</td><td>4字节</td><td>0~2<sup>32</sup>-1</td></tr><tr><td>uint64</td><td>无</td><td>8字节</td><td>0~2<sup>64</sup>-1</td></tr></tbody></table><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//测试一下uint8的范围（0~255），其他的uint16,uint32,uint64类推即可</span><span class="token keyword">var</span> k <span class="token builtin">uint16</span> <span class="token operator">=</span> <span class="token number">255</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"k="</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span></code></pre><ul><li>int的其他类型的说明：</li></ul><table><thead><tr><th>类型</th><th>有无符号</th><th>占用存储空间</th><th>表数范围</th><th>备注</th></tr></thead><tbody><tr><td>int</td><td>有</td><td>32位系统4个字节<br />64位系统8个字节</td><td>-2<sup>31</sup><del>2<sup>31</sup>-1<br />-2<sup>63</sup></del>2<sup>63</sup>-1</td><td></td></tr><tr><td>uint</td><td>无</td><td>32位系统4个字节<br />64位系统8个字节</td><td>-0<del>2<sup>32</sup>-1<br />0</del>2<sup>64</sup>-1</td><td></td></tr><tr><td>rune</td><td>有</td><td>与int32一样</td><td>-2<sup>31</sup>~2<sup>31</sup>-1</td><td>等价int32，表示一个Unicode码</td></tr><tr><td>byte</td><td>无</td><td>与uint8等价</td><td>0~255</td><td>当要存储字符时选用byte</td></tr></tbody></table><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//int,uint,rune,byte的使用</span><span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">8900</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token keyword">var</span> b <span class="token builtin">uint</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">var</span> c <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token number">255</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b="</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token string">"c="</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></code></pre><h3 id="整形的使用细节"><a href="#整形的使用细节" class="headerlink" title="整形的使用细节"></a>整形的使用细节</h3><ol><li>Golang各整数类型分：有符号和无符号，int uint的大小和系统有关</li><li>Golang的整型默认声明为int型</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//整形的使用细节</span><span class="token keyword">var</span> n1 <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">//? n1是什么类型</span><span class="token comment">//这里我们给大家介绍如何查看某个变量的数据类型</span><span class="token comment">//fmt.Println() 可以用于做格式化输出。</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"n1 的类型 %T \n"</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span></code></pre><ol start="3"><li>如何在程序查看某个变量的字节大小和数据类型 （使用较多）</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//如何在程序查看某个变量的占用字节大小和数据类型 （使用较多）</span><span class="token keyword">var</span> n2 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token comment">//unsafe.Sizeof(n1) 是unsafe包的一个函数，可以返回n1变量占用的字节数</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"n2 的 类型 %Tn2占用的字节数是 %d"</span><span class="token punctuation">,</span> n2<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ol start="4"><li>Golang程序中整型变量在使用时，遵守保小不保大的原则，即：在保证程序正确运行下，尽量使用占用空间小的数据类型。【如：年龄】</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//Golang程序中整型变量在使用时，遵守保小不保大的原则，</span><span class="token comment">//即：在保证程序正确运行下，尽量使用占用空间小的数据类型。</span><span class="token keyword">var</span> age <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token number">90</span></code></pre><ol start="5"><li>bit:计算机中的最小存储单位。byte：计算机中基本存储单元。1 byte = 8 bit</li></ol><h2 id="小数类型-浮点型"><a href="#小数类型-浮点型" class="headerlink" title="小数类型/浮点型"></a>小数类型/浮点型</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>顾名思义，小数类型就是用于存放小数的，如1.2，0.23，-1.91</p><h3 id="案例演示-1"><a href="#案例演示-1" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//演示golang中小数类型使用</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> price <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">89.12</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"price="</span><span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果如下图</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107171749.png" alt="image-20210107171748992" loading="lazy"></p><h3 id="小数类型分类"><a href="#小数类型分类" class="headerlink" title="小数类型分类"></a>小数类型分类</h3><table><thead><tr><th>类型</th><th>占用存储空间</th><th>表数范围</th></tr></thead><tbody><tr><td>单精度float32</td><td>4字节</td><td>-3.403E38~3.403E38</td></tr><tr><td>双精度float64</td><td>8字节</td><td>-1.798E308~1.798E308</td></tr></tbody></table><p><strong>说明</strong>:</p><ol><li>关于浮点数在机器中存放形式的简单说明，浮点数=符号位+指数位+尾数位，浮点数都是有符号的。</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107172259.png" alt="image-20210107172259894" loading="lazy"></p><ol start="2"><li>尾数部分可能丢失，造成精度损失。 -123.0000901</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107172329.png" alt="image-20210107172329694" loading="lazy"></p><p><strong>说明：</strong></p><ul><li>float64的精度比float32的要准确</li><li>如果我们要保存一个精度高的数，则应该选用float64</li></ul><ol start="3"><li>浮点型的存储分为三部分：符号位+指数位+尾数位    在存储过程中，精度会有丢失哦</li></ol><h3 id="浮点型使用细节"><a href="#浮点型使用细节" class="headerlink" title="浮点型使用细节"></a>浮点型使用细节</h3><ol><li><p>Golang浮点类型有固定的范围和字段长度，不受具体的操作系统的影响。</p></li><li><p>Golang的浮点型默认声明为float64类型。</p></li><li><p>浮点型常量有两种表示形式</p><ul><li>十进制数形式：如：5.12        .512（必须有小数点）</li><li>科学计数法形式：如： 5.1234e2 = 5.12 * 10 ^ 2      5.12E-2 = 5.12/(10^2)</li></ul></li><li><p>通常情况下，应该使用float64，因为它精度更高。</p></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//Golang的浮点型默认声明为float64类型</span><span class="token keyword">var</span> num5 <span class="token operator">=</span> <span class="token number">1.1</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"num5的数据类型是 %T \n"</span><span class="token punctuation">,</span> num5<span class="token punctuation">)</span><span class="token comment">//十进制数形式：如：5.12        .512（必须有小数点）</span>num6 <span class="token operator">:=</span> <span class="token number">5.12</span>num7 <span class="token operator">:=</span> <span class="token number">.123</span> <span class="token comment">//->0.123</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"num6="</span><span class="token punctuation">,</span> num6<span class="token punctuation">,</span> <span class="token string">"num7="</span><span class="token punctuation">,</span> num7<span class="token punctuation">)</span><span class="token comment">//科学计数法形式：如： 5.1234e2 = 5.12 * 10 ^ 2      5.12E-2 = 5.12/(10^2)</span>num8 <span class="token operator">:=</span> <span class="token number">5.1234e2</span> <span class="token comment">// 5.1234 * 10 ^ 2</span>num8 <span class="token operator">:=</span> <span class="token number">5.1234E2</span> <span class="token comment">// 5.1234 * 10 ^ 2</span></code></pre><h2 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h2><h3 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>在Golang中没有专门的字符类型，如果要存储单个字符(字母)，一般使用byte来保存。</p><p><strong>字符串就是一串固定长度的字符连接起来的字符序列。</strong>Go的字符串是由单个字节连接起来的。也就是说对于传统的字符串是由字符组成的，而Go的字符串不同，它是由字节组成的。</p><h3 id="案例演示-2"><a href="#案例演示-2" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//演示Golang中字符类型使用</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> c1 <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token keyword">var</span> c2 <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token string">'0'</span>   <span class="token comment">//字符的0</span><span class="token comment">//当我们直接输出byte值，就是输出了对应字符的码值</span><span class="token comment">//'a' ==> </span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"c1="</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"c2="</span><span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token comment">//如果我们希望输出对应字符，需要使用格式化输出</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c1=%c c2=%c\n"</span><span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token comment">//var c3 byte = '北' //overflow溢出</span><span class="token keyword">var</span> c3 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token string">'北'</span> <span class="token comment">//overflow溢出</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c3=%c c3对应码值=%d\n"</span><span class="token punctuation">,</span> c3<span class="token punctuation">,</span> c3<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107183135.png" alt="image-20210107183135116" loading="lazy"></p><p><strong>对上述代码的说明</strong></p><ol><li>如果我们保存的字符在ASCII表中，比如[0-1，a-z,A-Z]  我们可以直接保存到byte中</li><li>如果我们要保存的字符的对应码值大于255，这时我们可以考虑使用int类型保存</li><li>如果我们需要按照字符的方式输出，此时就需要进行格式化输出，即<code>fmt.Printf(&quot;%c&quot;,c1)</code></li></ol><h3 id="字符类型使用细节"><a href="#字符类型使用细节" class="headerlink" title="字符类型使用细节"></a>字符类型使用细节</h3><ol><li>字符常量是用单引号（”)括起来的单个字符。例如<code>var c1 byte = &#39;a&#39;</code>,<code>car c2 int = &#39;中&#39;</code>,<code>var c3 byte = &#39;9&#39;</code></li><li>Go中允许使用转义字符’\‘来将其后面的字符转变为特殊字符型常量。例如：<code>var c3 char = &#39;\n&#39;  </code>（\n表示换行符）</li><li>Go语言的字符使UTF-8编码，如果想查询字符对应的utf8码值，请点击[链接](<a href="http://www.mytju.com/classcode/tools/encode_utf8.asp">查看字符编码（UTF-8） (mytju.com)</a>). 英文字母占1个自己，汉字占3个字节</li><li>在Go中，字符的本质是一个整数，直接输出时，是该字符对应的 UTF-8编码的码值。</li><li>可以直接给某个变量赋一个数字，然后按格式化输出%c,会输出该数字对应的Unicode字符，如</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> c4 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">22269</span> <span class="token comment">//22269 -> '国'</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c4 = %c\n"</span><span class="token punctuation">,</span> c4<span class="token punctuation">)</span></code></pre><ol start="6"><li>字符类型可以进行运算，它相当于一个整数，因为每个字符都有对应的Unicode码。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> n1 <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'a'</span>   <span class="token comment">// 10+97 = 107</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"n1 = %c\n"</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span> <span class="token comment">//输出为k</span></code></pre><h3 id="字符类型本质探讨"><a href="#字符类型本质探讨" class="headerlink" title="字符类型本质探讨"></a>字符类型本质探讨</h3><ol><li>字符型存储到计算机中，需要将字符对应的码值（整数）找出来<ul><li>存储： 字符 –&gt; 对应码值  –&gt; 二进制 –&gt; 存储</li><li>读取： 二进制 –&gt;  码值 –&gt; 字符 –&gt; 读取</li></ul></li><li>字符和码值的对应关系是通过字符编码表决定的（这是规定）</li><li>Go语言的编码都统一成了UTF-8。这非常的方便，再也没有编码乱码的困扰了。</li></ol><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><h3 id="基本介绍-3"><a href="#基本介绍-3" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>布尔类型，又名bool类型，bool类型数据只允许取值true和false</li><li>bool类型占1个字节</li><li>bool类型适用于逻辑运算，一般用于程序流程控制（之后会详细了解）<ul><li>if条件控制语句</li><li>for循环控制语句</li></ul></li></ol><h3 id="案例演示-3"><a href="#案例演示-3" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"unsafe"</span><span class="token punctuation">)</span><span class="token comment">//演示Golang中bool类型的使用</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token boolean">false</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b="</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token comment">//注意事项</span><span class="token comment">//1. bool类型占用的存储空间是1字节</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b 的占用空间 = "</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//2. bool类型只能取true或false</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107185952.png" alt="image-20210107185952514" loading="lazy"></p><h2 id="string类型"><a href="#string类型" class="headerlink" title="string类型"></a>string类型</h2><h3 id="基本介绍-4"><a href="#基本介绍-4" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>字符串就是一串固定长度的字符连接起来的字符序列。Go的字符串是由单个字节连接起来的。Go语言的字符串的字节使用UTF-8编码标识Unicode文本</p><h3 id="案例演示-4"><a href="#案例演示-4" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//演示Golang中string类型的使用</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//string的基本使用</span><span class="token keyword">var</span> address <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"北京长城 厉害了1234 hello world！"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="string的注意事项和细节"><a href="#string的注意事项和细节" class="headerlink" title="string的注意事项和细节"></a>string的注意事项和细节</h3><ol><li>Go语言的字符串的字节使用UTF-8编码标识Unicode文本，这样Golang统一使用UTF-8编码，中文乱码问题不会再困扰程序员。</li><li>字符串一旦赋值了，字符串就不能修改了：在Go中字符串是不可变的。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello"</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span>    <span class="token comment">//这里不能修改str的内容，也就是说Go中的字符串是不可变的</span></code></pre><ol start="3"><li>字符串的两种表示形式<ol><li>双引号，会识别转义字符</li><li>反引号，以字符串的原生形式输出，包括换行和特殊字符，可以实现防止攻击，输出源代码等效果。</li></ol></li></ol><p>【案例演示】</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//演示Golang中string类型的使用</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//string的基本使用</span>address <span class="token operator">:=</span> <span class="token string">"abc\nabc"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>str2 <span class="token operator">:=</span> <span class="token string">`package mainimport ("fmt")//演示Golang中string类型的使用func main() &#123;//string的基本使用var address string = "北京长城 厉害了1234 hello world！"fmt.Println(address)&#125;`</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果:</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107190838.png" alt="image-20210107190838210" loading="lazy"></p><ol start="4"><li>字符串拼接方式</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//字符串拼接方式</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello"</span> <span class="token operator">+</span> <span class="token string">"world"</span>str <span class="token operator">+=</span> <span class="token string">" haha!"</span></code></pre><ol start="5"><li>当一行字符串太长时，需要用到多行字符串，可以如下处理</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//当一个拼接的操作很长时，怎么办？可以分行写，但是注意，需要将+保留在上一行。</span>str4 <span class="token operator">:=</span> <span class="token string">"hello"</span> <span class="token operator">+</span> <span class="token string">"world"</span> <span class="token operator">+</span> <span class="token string">"hello"</span> <span class="token operator">+</span> <span class="token string">"world"</span> <span class="token operator">+</span> <span class="token string">"hello"</span> <span class="token operator">+</span> <span class="token string">"world"</span> <span class="token operator">+</span> <span class="token string">"hello"</span> <span class="token operator">+</span> <span class="token string">"world"</span> <span class="token operator">+</span> <span class="token string">"hello"</span> <span class="token operator">+</span> <span class="token string">"world"</span> <span class="token operator">+</span><span class="token string">"hello"</span> <span class="token operator">+</span> <span class="token string">"world"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span></code></pre><h2 id="基本数据类型的默认值"><a href="#基本数据类型的默认值" class="headerlink" title="基本数据类型的默认值"></a>基本数据类型的默认值</h2><h3 id="基本介绍-5"><a href="#基本介绍-5" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>在Go中，数据类型都有一个默认值，当程序员没有赋值时，就会保留默认值，在Go中，默认值又叫零值。</p><h3 id="基本数据类型的默认值-1"><a href="#基本数据类型的默认值-1" class="headerlink" title="基本数据类型的默认值"></a>基本数据类型的默认值</h3><table><thead><tr><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>整形</td><td>0</td></tr><tr><td>浮点型</td><td>0</td></tr><tr><td>字符串</td><td>“”</td></tr><tr><td>布尔类型</td><td>false</td></tr></tbody></table><h2 id="基本数据类型的相互转换"><a href="#基本数据类型的相互转换" class="headerlink" title="基本数据类型的相互转换"></a>基本数据类型的相互转换</h2><h3 id="基本介绍-6"><a href="#基本介绍-6" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>Golang和java/C不同，Go在不同类型的变量之间赋值时<strong>需要显式转换</strong>。也就是说Golang中的数据类型不能自动转换。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>表达式T(v)将值v转换为类型T</p><p>T:就是数据类型，比如int32,int64.float32等等</p><p>v：就是需要转换的变量</p><h3 id="案例演示-5"><a href="#案例演示-5" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token comment">//希望将 i => float</span><span class="token keyword">var</span> n1 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token function">float32</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">var</span> n2 <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token function">int8</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">var</span> n3 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">//低精度->高精度</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i=%v n1=%v n2=%v n3=%v \n"</span><span class="token punctuation">,</span> i <span class="token punctuation">,</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3<span class="token punctuation">)</span></code></pre><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>Go中，数据类型的转换可以是从 表示范围小–&gt;表示范围大，也可以从 表示范围大–&gt;表示范围小</li><li>被转换的是变量存储的数据（即值），变量本身的数据类型并没有变化！</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token comment">//被转换的是变量存储的数据(即值)，变量本身的数据类型并没有变化</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i type is %T\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment">// int32</span></code></pre><ol start="3"><li>在转换中，比如将 int64 转换成 int8 【-128~127】，编译时不会报错，只是转换的结果按<strong>溢出处理</strong>。和我们希望的结果不一样。因此在转换时，需要考虑范围。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//在转换中，比如将 int64  转成 int8 【-128---127】 ，编译时不会报错，</span><span class="token comment">//只是转换的结果是按溢出处理，和我们希望的结果不一样</span><span class="token keyword">var</span> num1 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">999999</span><span class="token keyword">var</span> num2 <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token function">int8</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token comment">// </span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"num2="</span><span class="token punctuation">,</span> num2<span class="token punctuation">)</span></code></pre><h3 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h3><ul><li>练习1</li></ul><p>如何修改一下代码，使之正确</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> n1 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">12</span>    <span class="token keyword">var</span> n2 <span class="token builtin">int64</span>    <span class="token keyword">var</span> n3 <span class="token builtin">int8</span>    n2 <span class="token operator">=</span> n1 <span class="token operator">+</span> <span class="token number">20</span>    n3 <span class="token operator">=</span> n1 <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">&#125;</span></code></pre><p>答案：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> n1 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">12</span>    <span class="token keyword">var</span> n2 <span class="token builtin">int64</span>    <span class="token keyword">var</span> n3 <span class="token builtin">int8</span>    n2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20</span>     <span class="token comment">//int32 --> int64错误</span>    n3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">int8</span><span class="token punctuation">)</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20</span>      <span class="token comment">//int32 --> int8 错误</span><span class="token punctuation">&#125;</span></code></pre><ul><li>练习2 </li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> n1 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token keyword">var</span> n3 <span class="token builtin">int8</span><span class="token keyword">var</span> n4 <span class="token builtin">int8</span>n4 <span class="token operator">=</span> <span class="token function">int8</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">127</span> <span class="token comment">//编译通过，值溢出</span>n3 <span class="token operator">=</span> <span class="token function">int8</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">128</span> <span class="token comment">//编译不通过</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n4<span class="token punctuation">)</span></code></pre><h2 id="基本数据类型和string的转换"><a href="#基本数据类型和string的转换" class="headerlink" title="基本数据类型和string的转换"></a>基本数据类型和string的转换</h2><h3 id="基本介绍-7"><a href="#基本介绍-7" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>在程序开发中，我们经常将基本数据类型转成string。或者将string转成基本数据类型。</p><h3 id="基本类型转string类型"><a href="#基本类型转string类型" class="headerlink" title="基本类型转string类型"></a>基本类型转string类型</h3><ul><li><p>方式1：fmt.Sprintf(“%参数”，表达式)   【这个比较灵活】</p><ul><li><p>函数的介绍：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//func Sprintf</span><span class="token keyword">func</span> <span class="token function">Sprintf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span>a <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token comment">//Sprintf根据format参数生成格式化的字符串并返回该字符串。</span></code></pre><p><strong>参数需要和表达式的数据类型相匹配</strong></p></li><li><p>案例演示</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//演示Golang中基本数据练习转成string使用</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> num1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token keyword">var</span> num2 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">23.456</span><span class="token keyword">var</span> b <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">var</span> mychar <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token string">'h'</span><span class="token keyword">var</span> str <span class="token builtin">string</span> <span class="token comment">//空的str</span><span class="token comment">//使用第一种方式来转换  fmt.Sprintf方法</span>str <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> num1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str type %T str=%q\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span>str <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> num2<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str type %T str=%q\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span>str <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str type %T str=%q\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> b<span class="token punctuation">)</span>str <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> mychar<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str type %T str=%q\n"</span><span class="token punctuation">,</span> mychar<span class="token punctuation">,</span> mychar<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li>运行结果</li></ul><pre class="language-none"><code class="language-none">str type string str&#x3D;&quot;99&quot;str type string str&#x3D;&quot;%!d(float64&#x3D;23.456)&quot;str type bool str&#x3D;%!q(bool&#x3D;true)str type uint8 str&#x3D;&#39;h&#39;</code></pre></li><li><p>方式2：使用strconv包的函数</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">FormatBool</span><span class="token punctuation">(</span>b <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token keyword">func</span> <span class="token function">FormatFloat</span><span class="token punctuation">(</span>f <span class="token builtin">float64</span><span class="token punctuation">,</span> fmt <span class="token builtin">byte</span><span class="token punctuation">,</span> prec<span class="token punctuation">,</span> bitSize <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token keyword">func</span> <span class="token function">FormatInt</span><span class="token punctuation">(</span>i <span class="token builtin">int64</span><span class="token punctuation">,</span> base <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token keyword">func</span> <span class="token function">FormatUint</span><span class="token punctuation">(</span>i <span class="token builtin">uint64</span><span class="token punctuation">,</span> base <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span></code></pre><ul><li>案例说明</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"strconv"</span><span class="token punctuation">)</span><span class="token comment">//第二种方式strconv函数</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> num3 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token keyword">var</span> num4 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">23.456</span><span class="token keyword">var</span> b2 <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">var</span> str <span class="token builtin">string</span> <span class="token comment">//空str</span>str <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str type %T str=%q\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token comment">//strconv.FormatFloat(num3, 'f', 10, 64)</span><span class="token comment">//说明： 'f'格式 10：表示小数位保留10位 64：表示这个小数是float64</span>str <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatFloat</span><span class="token punctuation">(</span>num4<span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str type %T str=%q\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span>str <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatBool</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str type %T str=%q\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token comment">//strconv包中有一个函数Itoa</span><span class="token keyword">var</span> num5 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">4567</span>str <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>num5<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str type %T str=%q\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li>运行结果</li></ul><pre class="language-none"><code class="language-none">str type string str&#x3D;&quot;99&quot;str type string str&#x3D;&quot;23.4560000000&quot;str type string str&#x3D;&quot;true&quot;str type string str&#x3D;&quot;4567&quot;</code></pre><h3 id="string类型转基本数据类型"><a href="#string类型转基本数据类型" class="headerlink" title="string类型转基本数据类型"></a>string类型转基本数据类型</h3></li><li><p>使用时strconv包的函数</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ParseBool</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span>value <span class="token builtin">bool</span><span class="token punctuation">,</span>err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">ParseFloat</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span>bitSize <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>f <span class="token builtin">float64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">ParseInt</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> base <span class="token builtin">int</span><span class="token punctuation">,</span> bitSize <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token builtin">int64</span><span class="token punctuation">,</span>err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">ParseUint</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">,</span> bitSize <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>n <span class="token builtin">uint64</span><span class="token punctuation">,</span>err <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><ul><li><p>案例演示</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"strconv"</span><span class="token punctuation">)</span><span class="token comment">//第二种方式strconv函数</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> str <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"true"</span><span class="token keyword">var</span> b <span class="token builtin">bool</span><span class="token comment">// b, _ = strconv.ParseBool(str)</span><span class="token comment">//说明</span><span class="token comment">//1. strconv.ParseBool(str) 函数会返回两个值 （value bool,err error)</span><span class="token comment">//2. 因为我只想获取到value bool, 不限孤鸿去err 所以我使用_忽略</span>b <span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseBool</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"b type %T b=%v\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token keyword">var</span> str2 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"1234590"</span><span class="token keyword">var</span> n1 <span class="token builtin">int64</span><span class="token keyword">var</span> n2 <span class="token builtin">int</span>n1<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>n2 <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"n1 type %T n1=%v\n"</span><span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"n2 type %T n2=%v\n"</span><span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token keyword">var</span> str3 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"123.456"</span><span class="token keyword">var</span> f1 <span class="token builtin">float64</span>f1<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span>str3<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"f1 type %T f1=%v\n"</span><span class="token punctuation">,</span> f1<span class="token punctuation">,</span> f1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li>运行结果</li></ul><pre class="language-none"><code class="language-none">b type bool b&#x3D;truen1 type int64 n1&#x3D;1234590n2 type int n2&#x3D;1234590f1 type float64 f1&#x3D;123.456</code></pre></li><li><p>说明一下</p><p><strong>因为返回的是int64或者float64，所以如果希望得到int32，float32等，要进行如下处理：</strong></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> num5 <span class="token builtin">int</span> <span class="token number">32</span>num5 <span class="token operator">=</span> <span class="token function">int32</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></code></pre><h3 id="string转基本数据类型的注意事项"><a href="#string转基本数据类型的注意事项" class="headerlink" title="string转基本数据类型的注意事项"></a>string转基本数据类型的注意事项</h3></li></ul><p>​    在将string类型转成基本数据类型时，要确保string类型能够转成有效的数据，比如我们可以把“123”，转成一个整数，但是我们不能将”hello”转成一个整数，如果这样做，Golang直接将其转成0，其他类型也是一样的道理.float–&gt;0      bool –&gt; false</p><ul><li>案例说明：</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//注意</span><span class="token keyword">var</span> str4 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token keyword">var</span> n3 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">11</span>n3<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>str4<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"n3 type %T n3=%v\n"</span><span class="token punctuation">,</span> n3<span class="token punctuation">,</span> n3<span class="token punctuation">)</span></code></pre><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="基本介绍-8"><a href="#基本介绍-8" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>基本数据类型，变量存的就是值，也叫值类型</li><li>获取变量的地址，用&amp;，比如: var num int, 获取num的地址： &amp;num</li></ol><ul><li>分析一下基本数据类型在内存的布局</li></ul><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210108160654.png" alt="image-20210108160647027" loading="lazy"></p><ol start="3"><li>指针类型，指针变量保存的是一个地址，这个地址指向的空间存的才是值，比如：<code>var ptr *int = &amp;num</code> ，指针在内存的布局如图所示：<img src="https://gitee.com/mikutown/pic/raw/master/img/20210108160833.png" alt="image-20210108160833386" loading="lazy"></li><li>获取指针类型所指向的值，使用：<em>，比如:<code>var ptr *int</code>，使用</em>ptr获取ptr指向的值。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//演示Golang中指针类型</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//基本数据类型在内存布局</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token comment">// i 的地址是什么，&amp;i</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i的地址="</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token comment">//下面的 var ptr *int = &amp;i</span><span class="token comment">//1. ptr是一个指针变量</span><span class="token comment">//2. ptr的类型是 *int</span><span class="token comment">//3. ptr本身的值是 &amp;i</span><span class="token keyword">var</span> ptr <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>ifmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ptr=%v\n"</span><span class="token punctuation">,</span> ptr<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ptr 的地址=%v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ptr<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ptr 指向的值=%v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">ptr&#x3D;0xc000014090ptr 的地址&#x3D;0xc000006030ptr 指向的值&#x3D;10</code></pre><ol start="5"><li>一个案例再说明</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210108161524.png" alt="image-20210108161524000" loading="lazy"></p><h3 id="案例演示-6"><a href="#案例演示-6" class="headerlink" title="案例演示"></a>案例演示</h3><ol><li>写一个程序，获取一个int变量num的地址，并显示到终端</li><li>将num的地址赋给指针ptr，并通过ptr去修改num的值</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//案例演示</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> num <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">9</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"num's address=%v\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token keyword">var</span> ptr <span class="token operator">*</span><span class="token builtin">int</span>ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>num<span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token number">10</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"num=%d\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">num&#39;s address&#x3D;0xc000014090num&#x3D;10</code></pre><h3 id="指针的课堂练习"><a href="#指针的课堂练习" class="headerlink" title="指针的课堂练习"></a>指针的课堂练习</h3><ol><li>这个代码中有无错误？</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">300</span>    <span class="token keyword">var</span> ptr <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> a<span class="token comment">//错误</span>    <span class="token comment">//应该改成 var ptr *int = &amp;a(取地址)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">300</span>    <span class="token keyword">var</span> ptr <span class="token operator">*</span><span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a <span class="token comment">//错误 类型不匹配！</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">300</span>    <span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">400</span>    <span class="token keyword">var</span> ptr <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a <span class="token comment">//OK</span>    <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">//等价于a = 100</span>    ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>b <span class="token comment">// OK</span>    <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token number">200</span> <span class="token comment">//b = 200</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a=%d,b=%d,*ptr=%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//输出什么内容？</span><span class="token comment">/*输出a=100,b=200,*ptr=200*/</span></code></pre><h3 id="指针的使用细节"><a href="#指针的使用细节" class="headerlink" title="指针的使用细节"></a>指针的使用细节</h3><ol><li>值类型，都有对应的指针类型，形式为 *<strong>数据类型</strong>，比如说int的对应的指针就是<em>int,float32对应的指针类型就是 **</em>float32** 依次类推。</li><li>值类型包括：基本数据类型，int 系列，float系列， bool,string，数组和结构体struct</li></ol><h2 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h2><h3 id="值类型和引用类型的说明"><a href="#值类型和引用类型的说明" class="headerlink" title="值类型和引用类型的说明"></a>值类型和引用类型的说明</h3><ol><li>值类型：基本数据类型，int 系列，float系列， bool,string，数组和结构体struct</li><li>引用类型：指针、slice切片、map、管道chan、interface等都是引用类型</li></ol><h3 id="值类型和引用类型的使用特点"><a href="#值类型和引用类型的使用特点" class="headerlink" title="值类型和引用类型的使用特点"></a>值类型和引用类型的使用特点</h3><ol><li>值类型：变量直接存储值，内存通常在栈中分配</li></ol><p>示意图：<img src="https://gitee.com/mikutown/pic/raw/master/img/20210108185224.png" alt="image-20210108185224664" loading="lazy"></p><ol start="2"><li>引用类型：变量存储是一个地址，这个地址对应的空间才真正存储数据（值），内存通常在堆上分配，当没有任何变量引用这个地址时，该地址对应的数据空间就成为一个垃圾，由GC来回收</li></ol><p>示意图：<img src="https://gitee.com/mikutown/pic/raw/master/img/20210108185333.png" alt="image-20210108185333236" loading="lazy"></p><ol start="3"><li>内存的栈区和堆区示意图<img src="https://gitee.com/mikutown/pic/raw/master/img/20210108185352.png" alt="image-20210108185352262" loading="lazy"></li></ol><h2 id="标识符的命名规范"><a href="#标识符的命名规范" class="headerlink" title="标识符的命名规范"></a>标识符的命名规范</h2><h3 id="标识符概念"><a href="#标识符概念" class="headerlink" title="标识符概念"></a>标识符概念</h3><ol><li>Golang对各种变量，方法，函数等命名时使用的字符序列称为标识符</li><li>凡是自己可以取名字的地方都叫标识符</li></ol><h3 id="标识符的命名规则"><a href="#标识符的命名规则" class="headerlink" title="标识符的命名规则"></a>标识符的命名规则</h3><ol><li>由26个英文字母大小写，0-9，_ 组成</li><li>数字不可以开头。<code>var num int //ok</code>     <code>var 3num int  // error</code></li><li>Golang中严格区分大小写。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> num <span class="token builtin">int</span><span class="token keyword">var</span> Num <span class="token builtin">int</span></code></pre><p><strong>说明：</strong>在Golang中，num和Num是两个不同的变量</p><ol start="4"><li>标识符不能包含空格。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//这样8行！</span><span class="token keyword">var</span> ab c <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">30</span></code></pre><ol start="5"><li>下划线”_”本身在Go中是一个特殊的标识符，称为空标识符。可以代表任何其它的标识符，但是它对应的值会被忽略（比如：忽略某个返回值)。所以仅能被作为占位符使用，不能作为标识符使用。</li></ol><pre class="language-Go" data-language="Go"><code class="language-Go">&#x2F;&#x2F; _ 是空标识符，用于占用var _ int &#x3D; 40 &#x2F;&#x2F;errorfmt.Println(_) &#x2F;&#x2F;错的！8行！</code></pre><ol start="6"><li>不能以系统<strong>保留关键字</strong>作为标识符（一共有25个），比如  break, if 等等…</li></ol><h3 id="标识符的案例"><a href="#标识符的案例" class="headerlink" title="标识符的案例"></a>标识符的案例</h3><pre class="language-none"><code class="language-none">hello &#x2F;&#x2F;okhello12 &#x2F;&#x2F;ok1hello &#x2F;&#x2F;error 数字开头不可取！h-b &#x2F;&#x2F;error 不能使用！x h &#x2F;&#x2F;error 不能含有空格h_4 &#x2F;&#x2F;ok_ab &#x2F;&#x2F;okint &#x2F;&#x2F;ok 但是最好别这样使用float32 &#x2F;&#x2F;ok 但是最好别这样使用_ &#x2F;&#x2F;error 不行！Abc &#x2F;&#x2F; ok</code></pre><h3 id="标识符命名注意事项"><a href="#标识符命名注意事项" class="headerlink" title="标识符命名注意事项"></a>标识符命名注意事项</h3><ol><li>包名：保持package的名字和目录保持一致，尽量采取有意义的包名，简短，有意义，不要和标准库冲突 fmt</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210108194237.png" loading="lazy"></p><ol start="2"><li>变量名、函数名、常量名：采用驼峰法</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//举例</span><span class="token keyword">var</span> stuName <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"tom"</span>   <span class="token comment">//形式： xxxYyyZzz...</span><span class="token keyword">var</span> goodPrice <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">1234.5</span></code></pre><ol start="3"><li>如果变量名、函数名、常量名首字母大写，则可以被其他的包访问：如果首字母小写，则只能在本包中使用（注:可以简单的理解成，首字母大写是公开的，首字母小写是私有的），在golang没有public，private等关键字。</li></ol><ul><li>案例演示：</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//路径:../main/main.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"fmt"</span>    <span class="token comment">//为了使用utils.go,引入该文件所在的包(注意你的环境变量)</span><span class="token string">"go_code/chapter03/demo10/model"</span><span class="token punctuation">)</span><span class="token comment">//变量的使用事项</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//该区域的数据值可以在同一类型范围内不断变化</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>i <span class="token operator">=</span> <span class="token number">30</span>i <span class="token operator">=</span> <span class="token number">50</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token comment">//i = 1.2 //int 原因是不能改变数据类型</span><span class="token comment">//变量在同一个作用域（在一个函数或者在代码块内）不能重名</span><span class="token comment">//var i int = 59</span><span class="token comment">//i := 99</span><span class="token comment">// 我们使用utils.go 的heroName 包名，标志符</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>HeroName<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/***********************************************/</span><span class="token comment">// 路径： ../model/utils.go</span><span class="token keyword">package</span> model<span class="token keyword">var</span> HeroName <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"吴用"</span></code></pre><h2 id="系统保留关键字"><a href="#系统保留关键字" class="headerlink" title="系统保留关键字"></a>系统保留关键字</h2><h3 id="保留关键字介绍"><a href="#保留关键字介绍" class="headerlink" title="保留关键字介绍"></a>保留关键字介绍</h3><p>在Go中，为了简化代码编译过程中对代码的解析，其定义的保留关键字只有25个。详见如下</p><table><thead><tr><th>break</th><th>default</th><th>func</th><th>interface</th><th>select</th></tr></thead><tbody><tr><td>case</td><td>defer</td><td>go</td><td>map</td><td>struct</td></tr><tr><td>chan</td><td>else</td><td>goto</td><td>package</td><td>switch</td></tr><tr><td>const</td><td>fallthrough</td><td>if</td><td>range</td><td>type</td></tr><tr><td>continue</td><td>for</td><td>import</td><td>return</td><td>var</td></tr></tbody></table><h2 id="系统的预定义标识符"><a href="#系统的预定义标识符" class="headerlink" title="系统的预定义标识符"></a>系统的预定义标识符</h2><h3 id="预定义标识符介绍"><a href="#预定义标识符介绍" class="headerlink" title="预定义标识符介绍"></a>预定义标识符介绍</h3><p>除了保留关键字外，Go还提供了36个预定的标识符，其包括基础数据类型和系统内嵌函数</p><table><thead><tr><th>append</th><th>bool</th><th>byte</th><th>cap</th><th>close</th><th>complex</th></tr></thead><tbody><tr><td>complex64</td><td>complex128</td><td>uint16</td><td>copy</td><td>false</td><td>float32</td></tr><tr><td>float64</td><td>imag</td><td>int</td><td>int8</td><td>int16</td><td>uint32</td></tr><tr><td>int32</td><td>int64</td><td>iota</td><td>len</td><td>make</td><td>new</td></tr><tr><td>nil</td><td>panic</td><td>uint64</td><td>print</td><td>println</td><td>rea</td></tr><tr><td>recover</td><td>string</td><td>true</td><td>uint</td><td>uint8</td><td>uintprt</td></tr></tbody></table><hr><p><strong>Go语言の变量这节结束啦！辛苦啦！</strong></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Go语言の变量&quot;&gt;&lt;a href=&quot;#Go语言の变量&quot; class=&quot;headerlink&quot; title=&quot;Go语言の变量&quot;&gt;&lt;/a&gt;Go语言の变量&lt;/h1&gt;&lt;p&gt;本文章主要写Go语言中使用的变量类型以及其知识点&lt;/p&gt;</summary>
    
    
    
    
    <category term="Go" scheme="https://mikutown.gitee.io/blog/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言入门</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/04/Go%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/04/Go%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/</id>
    <published>2021-01-04T10:50:56.000Z</published>
    <updated>2021-01-04T13:16:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go语言入门"><a href="#Go语言入门" class="headerlink" title="Go语言入门"></a>Go语言入门</h1><p>本文章通过简单的Go语言代码说明一些Go语言编程的注意事项及知识点</p><a id="more"></a><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>要求开发一个hello.go程序，可以在屏幕打印出“hello world”</p><h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><ol><li><p>在编写Go语言代码时的目录结构：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104185351.png" alt="image-20210104185344476" loading="lazy"></p></li><li><p>编写代码，代码如下：</p></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//输出helloworld</span><span class="token keyword">package</span> main<span class="token comment">//go文件的后缀是.go</span><span class="token comment">//package main表示hello.go所在包为main包</span><span class="token comment">//在go中每个文件都必须归属于一个包</span><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">//import “fmt”说明引入一个包，包名为fmt，引入目的是使用包内函数（fmt.Println())</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//func main() &#123; </span><span class="token comment">//func表示一个函数，main是主函数，代表程序的入口</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token comment">//表示调用fmt的Println输出hello world字符串</span><span class="token punctuation">&#125;</span></code></pre><ol start="3"><li>在cmd中通过go build命令对go语言进行编译，生成exe文件，默认生成的exe文件与你的代码文件的名称相同，在Windows系统下是后缀为exe可执行文件，在Linux系统中直接生成可执行文件。执行结果如下图所示：</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104185820.png" alt="image-20210104185820505" loading="lazy"></p><ol start="4"><li>也可以通过go run 命令直接运行hello.go源代码（类似于执行一个脚本文件的形式），执行结果如下图所示：</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104185928.png" alt="image-20210104185928753" loading="lazy"></p><h2 id="Golang代码执行流程分析"><a href="#Golang代码执行流程分析" class="headerlink" title="Golang代码执行流程分析"></a>Golang代码执行流程分析</h2><ul><li>如果是对源码编译后，再执行，Go的执行流程如下图：</li></ul><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104190557.png" alt="image-20210104190557423" loading="lazy"></p><ul><li>如果我们直接对源码进行go run 指令，Go的执行流程如下图:</li></ul><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104190627.png" alt="image-20210104190627117" loading="lazy"></p><p><strong>两种执行流程的方式区别</strong></p><pre><code>1. 如果我们先编译生成了可执行文件，那么我们可以将该可执行文件拷贝到没有go开发环境的机器上，仍然可以运行。2. 如果我们是直接go run我们写的源代码，那么如果想要在另一台电脑上也运行，那么那台电脑必须安装Go语言的运行环境，否则无法执行。3. 在编译时，编译器会将程序运行依赖的库文件也包含在可执行文件中，所以可执行文件变大了很多。（go语言的helloworld代码只有5KB，生成的可执行文件有接近2000KB）</code></pre><h2 id="编译和运行说明"><a href="#编译和运行说明" class="headerlink" title="编译和运行说明"></a>编译和运行说明</h2><ol><li>有了Go语言代码的源文件，可以通过编译器将其编译成机器可以识别的二进制码文件</li><li>在该源文件目录下，通过go build 对hello.go文件进行编译，可以指定生成的可执行文件名，在Windows下，必须是.exe的后缀。</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104191106.png" alt="image-20210104191106197" loading="lazy"></p><ol start="3"><li>如果程序没有错误，那么没有任何提示，并会在当前目录中生成一个可执行文件，该文件是一个二进制码文件，也是可以直接执行的程序。</li><li>如果程序有错误，编译时，会在错误的那一行报错。这有助于程序员的调试。</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104191223.png" alt="image-20210104191223077" loading="lazy"></p><ol start="5"><li>运行有两种形式<ul><li>直接运行生成的可执行文件，比如hello.exe</li><li>通过运行工具go run 对源代码文件直接进行运行。</li></ul></li></ol><h2 id="Go语言开发的注意事项"><a href="#Go语言开发的注意事项" class="headerlink" title="Go语言开发的注意事项"></a>Go语言开发的注意事项</h2><ol><li>Go语言源代码的扩展名为.go</li><li>Go应用程序的执行入口是main()函数。（与java/c相同）</li><li>Go语言严格区分大小写</li><li>Go方法由一条条语句构成，每个语句后不需要分号（编译时会自动为每行后添加分号），这也体现了Go语言代码的简洁性。</li><li>Go编译器都是一行一行进行编译的，因此我们一行就写一条语句，不能把多条语句写在同一个，否则会报错。</li><li>Go语言定义的变量或者import的包如果没有被使用到，代码是无法编译通过的。</li><li>大括号必须成对出现!</li></ol><hr><h2 id="Go语言的转义字符"><a href="#Go语言的转义字符" class="headerlink" title="Go语言的转义字符"></a>Go语言的转义字符</h2><p>常用的转义字符如下：</p><ul><li>\t:表示一个制表符，通常用于排版</li><li>\n:换行符</li><li>\:一个\</li><li>\“:一个”</li><li>\r:一个回车</li></ul><p>案例代码：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span> <span class="token comment">//fmt提供格式化，输入，输出的函数</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//演示转义字符的使用</span><span class="token comment">// \t的使用</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"tom\tjack"</span><span class="token punctuation">)</span><span class="token comment">// \n的使用</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"tom\njack"</span><span class="token punctuation">)</span><span class="token comment">// \\的使用</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello\\world"</span><span class="token punctuation">)</span><span class="token comment">// \"的使用</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"qwq\"ovo"</span><span class="token punctuation">)</span><span class="token comment">// \r的使用</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"owowo\rovo"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行效果：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104193240.png" alt="image-20210104193239992" loading="lazy"></p><p><strong>注：换行符是直接换行，而回车是指把光标移到头部，将原来字符串中的语句的头部替换为回车后的字符，就如同示例中的owowo中前半段的owo就被\r之后的ovo替换了，最后打印出了ovowo</strong></p><h3 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h3><p>要求使用一条输出语句，实现下图中的效果：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104193453.png" alt="image-20210104193453339" loading="lazy"></p><p>代码：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"姓名\t年龄\t籍贯\t住址\njohn\t12\t河北\t北京"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><strong>注：学会查看编译器的报错，自己进行bug的排查</strong></p><hr><h2 id="Go语言的注释"><a href="#Go语言的注释" class="headerlink" title="Go语言的注释"></a>Go语言的注释</h2><h3 id="介绍注释"><a href="#介绍注释" class="headerlink" title="介绍注释"></a>介绍注释</h3><p>用于注解说明解释程序的文字就是注释，<strong>注释提高了代码的阅读性</strong>；</p><p>注释是一个程序员必须要具有的良好的编程习惯。将自己的思想通过注释先整理出来，再用代码去体现。</p><h3 id="Go语言中注释的两种形式"><a href="#Go语言中注释的两种形式" class="headerlink" title="Go语言中注释的两种形式"></a>Go语言中注释的两种形式</h3><ol><li><p>行注释</p><ul><li>基本语法</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//注释内容</span></code></pre><ul><li>举例</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//输出helloworld</span><span class="token keyword">package</span> main<span class="token comment">//go文件的后缀是.go</span><span class="token comment">//package main表示hello.go所在包为main包</span><span class="token comment">//在go中每个文件都必须归属于一个包</span><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">//import “fmt”说明引入一个包，包名为fmt，引入目的是使用包内函数（fmt.Println())</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//func main() &#123; </span><span class="token comment">//func表示一个函数，main是主函数，代表程序的入口</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token comment">//表示调用fmt的Println输出hello world字符串</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>块注释（多行注释）</p><ul><li>基本语法</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">/*注释内容*/</span></code></pre><ul><li>举例说明</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">/*这是一个多行注释*/</span></code></pre></li></ol><ul><li>使用细节<ul><li>对于行注释和块注释，被注释的文字，不会被Go编译器执行。</li><li>块注释里不允许有块注释嵌套。</li></ul></li></ul><hr><h2 id="规范的代码风格"><a href="#规范的代码风格" class="headerlink" title="规范的代码风格"></a>规范的代码风格</h2><h3 id="正确的注释和注释风格"><a href="#正确的注释和注释风格" class="headerlink" title="正确的注释和注释风格"></a>正确的注释和注释风格</h3><ol><li>Go官方推荐使用行注释来注释整个方法和语句</li><li>可以看Go源码中的注释的风格</li></ol><h3 id="正确的缩进和空白"><a href="#正确的缩进和空白" class="headerlink" title="正确的缩进和空白"></a>正确的缩进和空白</h3><ol><li>在VSCode中，使用tab进行代码缩进，默认整体朝右边移动，使用shift+tab可以真git向左移动。</li><li>使用gofmt来进行代码的格式化，如图所示：</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104194438.png" alt="image-20210104194438694" loading="lazy"></p><ol start="3"><li>运算符两边习惯性各加一个空格，如：2 + 4 * 5</li><li>Go语言代码风格辨析：</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello,Go!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//上面的写法是正确的</span><span class="token comment">//下面的写法是错误的，Go语言不支持这种写法</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"姓名\t年龄\t籍贯\t住址\njohn\t12\t河北\t北京"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><strong>Go语言设计者希望在一个问题上尽量只有一个解决方法</strong></p><ol start="5"><li>一行最长不超过80个字符，超过的请使用换行展示，尽量保持格式优雅。比如：</li></ol><pre class="language-go" data-language="go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHe\n"</span><span class="token punctuation">,</span><span class="token string">"lloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWor\n"</span><span class="token punctuation">,</span><span class="token string">"ldHelloWorldHelloWorldHelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><hr><h2 id="知识点总结-回顾"><a href="#知识点总结-回顾" class="headerlink" title="知识点总结/回顾"></a>知识点总结/回顾</h2><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104200730.png" alt="image-20210104200729972" loading="lazy"></p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104200745.png" alt="image-20210104200745556" loading="lazy"></p><hr><h2 id="API-指南的链接"><a href="#API-指南的链接" class="headerlink" title="API/指南的链接"></a>API/指南的链接</h2><p>Golang简体中文官方编程指南<a href="https://tour.go-zh.org/welcome/1">地址</a></p><p>Golang中文网 <a href="https://studygolang.com/pkgdoc">在线标准库文档</a></p><p>Golang官方标准API文档<a href="https://golang.org.pkg/">地址</a> </p><p><strong>API:application program interface:应用程序编程接口，也就是我们GO各个包里的各个函数</strong></p><p><strong>Golang中调用函数的方式是<code>import 包</code>，然后使用<code>包名.函数名</code> 进行函数的调用</strong></p><hr>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Go语言入门&quot;&gt;&lt;a href=&quot;#Go语言入门&quot; class=&quot;headerlink&quot; title=&quot;Go语言入门&quot;&gt;&lt;/a&gt;Go语言入门&lt;/h1&gt;&lt;p&gt;本文章通过简单的Go语言代码说明一些Go语言编程的注意事项及知识点&lt;/p&gt;</summary>
    
    
    
    
    <category term="Go" scheme="https://mikutown.gitee.io/blog/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言简介及环境配置</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/04/Go%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/04/Go%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2021-01-04T09:07:05.000Z</published>
    <updated>2021-01-04T13:17:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go语言简介及环境配置"><a href="#Go语言简介及环境配置" class="headerlink" title="Go语言简介及环境配置"></a>Go语言简介及环境配置</h1><p>本文章主要讲解了Go语言的一些基本特性，以及Go语言编程环境的配置</p><a id="more"></a><h2 id="Go语言简介"><a href="#Go语言简介" class="headerlink" title="Go语言简介"></a>Go语言简介</h2><h3 id="Go语言的学习方向-应用领域"><a href="#Go语言的学习方向-应用领域" class="headerlink" title="Go语言的学习方向/应用领域"></a>Go语言的学习方向/应用领域</h3><p>Go语言，又称作Golang（Go language的简称），可以做区块链研发工，服务器端/游戏软件工程师，或者分布式，云计算。</p><h3 id="学习Go语言以及其他编程语言的方法"><a href="#学习Go语言以及其他编程语言的方法" class="headerlink" title="学习Go语言以及其他编程语言的方法"></a>学习Go语言以及其他编程语言的方法</h3><ol><li>高效愉快的学习。</li><li>先建立一个整体框架，然后再去打磨细节。</li><li>在实际工作中，要培养用到什么，能够快速学习什么的能力。</li><li>作为一个工科学生，要先know how，再know why。</li><li>软件编程是一门“做中学”的学科，不是学会了再做，而是做了才会。</li><li>适当的囫囵吞枣。</li><li>学习软件编程应该琢磨别人怎么做，而不是我自己认为应该怎么做的过程。</li></ol><h2 id="Golang的概述"><a href="#Golang的概述" class="headerlink" title="Golang的概述"></a>Golang的概述</h2><h3 id="Golang被创造的原因"><a href="#Golang被创造的原因" class="headerlink" title="Golang被创造的原因"></a>Golang被创造的原因</h3><ol><li>计算机硬件技术更新频繁，性能提高很快。目前主流的编程语言发展明显落后与硬件，无法合理利用多核CPU的优势提升软件系统的性能。</li><li>软件系统复杂度越来越高，维护成本越来越高，目前缺乏一个足够简洁高效的编程语言。</li><li>企业运行维护着很多C/C++的项目，它们的运行速度虽然很快，但是编译速度很慢，还存在内存泄漏等一系列的困扰需要去解决。</li></ol><h3 id="Golang的特点"><a href="#Golang的特点" class="headerlink" title="Golang的特点"></a>Golang的特点</h3><ul><li>简介</li></ul><p>Go语言保证了既能到达<strong>静态编译语言的安全和性能</strong>，又达到了动态语言开发维护的高效率，使用一个表达式来形容Go语言:<strong>Go=C+ Python</strong>,说明Go语言既有C静态语言程序的运行速度，又能达到Python动态语言的快速开发。</p><ol><li>从C语言中继承了很多理念，包括表达式语法，控制结构，基础数据类型，调用参数传值，指针等，也保留了和C语言一样的编译执行方式及弱化的指针 </li><li>引入<strong>包的概念</strong>，用于组织程序结构，Go语言的一个文件都要归属于一个包，而不能单独存在。</li><li>垃圾回收机制，内存自动回收，无需开发人员管理。</li><li><strong>天然并发</strong><ol><li>从语言层面支持并发，实现简单</li><li>goroutine，轻量级线程，可实现大并发处理，高效利用多核。</li><li>基于CPS并发模型（Communicating Sequential Processes）实现</li><li>吸收了管道通信机制，形成Go语言特有的管道channel，通过管道channel，可以实现不同的goroute之间的相互通信。</li><li>函数可以返回多个值。</li><li>新的创新，如切片slice，延时执行defer</li></ol></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//Go弱化指针演示</span><span class="token keyword">func</span> <span class="token function">testPtr</span><span class="token punctuation">(</span>num <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">*</span>num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token comment">//Go语言函数返回多个值演示</span><span class="token keyword">func</span> <span class="token function">getSumAndSub</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span>n2 <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sum <span class="token operator">:=</span> n1 <span class="token operator">+</span> n2    sub <span class="token operator">:=</span> n1 <span class="token operator">-</span> n2    <span class="token keyword">return</span> sum<span class="token punctuation">,</span>sub<span class="token punctuation">&#125;</span></code></pre><h3 id="Go语言开发工具的介绍"><a href="#Go语言开发工具的介绍" class="headerlink" title="Go语言开发工具的介绍"></a>Go语言开发工具的介绍</h3><ol><li>VSCode：支持Go语言语法高亮，也可以安装Go语言插件，还有智能提示，编译运行等功能。</li><li>Sublime Text：可以免费使用，但是保存次数到一定数量会提示购买。</li><li>Vim：它是从vi发展出来的文本编辑器，代码补全，编译及错误跳转等方便编程的功能很丰富，在程序员中被广泛使用。</li><li>Emacs：传说中的神器，不仅是一个编辑器，因为它的功能强大，可以称它为集成开发环境。</li><li>Eclipse IDE:开源免费，并提供GoEclipse插件</li><li>LiteIDE：专门为Go语言开发的跨平台轻量级集成开发环境（IDE)，是国人开发的。</li><li>JetBrains全家桶:如Phpstorm,WebStorm,Pycharm（需要安装插件）以及Goland。</li></ol><p><strong>注：基础阶段建议使用VSCode</strong></p><h3 id="VSCode的安装和使用"><a href="#VSCode的安装和使用" class="headerlink" title="VSCode的安装和使用"></a>VSCode的安装和使用</h3><p><a href="https://code.visualstudio.com/download">VSCode下载链接</a></p><p>按照自己的系统以及位数选择下载，建议选择安装包版。</p><h3 id="Go语言开发环境-安装和配置SDK"><a href="#Go语言开发环境-安装和配置SDK" class="headerlink" title="Go语言开发环境-安装和配置SDK"></a>Go语言开发环境-安装和配置SDK</h3><h3 id="SDK是什么"><a href="#SDK是什么" class="headerlink" title="SDK是什么"></a>SDK是什么</h3><ol><li>SDK的全称为Software Development Kit（软件开发工具包)</li><li>SDK是提供给开发人员使用的，其中包含了对应开发语言的工具包</li></ol><h3 id="Go语言SDK的下载"><a href="#Go语言SDK的下载" class="headerlink" title="Go语言SDK的下载"></a>Go语言SDK的下载</h3><ol><li>进入Go语言的<a href="https://golang.google.cn/">官网</a>，直接点击Download Go</li><li>选择对应的系统即可，一般下载安装版，请注意安装路径不要有中文，特殊符号，空格等。</li><li>安装完毕之后，打开cmd（如果安装到C盘请用管理员模式启动cmd），输入<code>go version</code>,如果可以正确显示版本号，那么Go语言的SDK安装完成。</li><li>如果需要在其他路径中建立文件夹编写Go语言代码，需要在系统变量中添加名为GOPATH，值为你的代码的路径的环境变量。</li></ol><p><strong>如果输入go version提示go不属于系统命令什么的，请重启cmd</strong></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Go语言简介及环境配置&quot;&gt;&lt;a href=&quot;#Go语言简介及环境配置&quot; class=&quot;headerlink&quot; title=&quot;Go语言简介及环境配置&quot;&gt;&lt;/a&gt;Go语言简介及环境配置&lt;/h1&gt;&lt;p&gt;本文章主要讲解了Go语言的一些基本特性，以及Go语言编程环境的配置&lt;/p&gt;</summary>
    
    
    
    
    <category term="Go" scheme="https://mikutown.gitee.io/blog/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVCの概述</title>
    <link href="https://mikutown.gitee.io/blog/2020/05/17/SpringMVC%E3%81%AE%E6%A6%82%E8%BF%B0/"/>
    <id>https://mikutown.gitee.io/blog/2020/05/17/SpringMVC%E3%81%AE%E6%A6%82%E8%BF%B0/</id>
    <published>2020-05-17T10:28:27.000Z</published>
    <updated>2021-01-02T20:09:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h1><ul><li>Spring 为展现层提供的基于 MVC 设计理念的优秀的 Web 框架，是目前最主流的 MVC 框架之一</li><li>Spring3.0 后全面超越 Struts2，成为最优秀的 MVC 框架。</li><li>SpringMVC 通过一套 MVC 注解，让 POJO 成为处理请求的控制器，而无须实现任何接口。</li><li>支持 REST 风格的 URL 请求。</li><li>采用了松散耦合可插拔组件结构，比其他 MVC 框架更具扩展性和灵活性。</li><li>基于Servlet实现，方便运行于常用Java EE容器。</li><li><a id="more"></a><h2 id="1-1-MVC模式"><a href="#1-1-MVC模式" class="headerlink" title="1.1 MVC模式"></a>1.1 MVC模式</h2>MVC 是一种使用 MVC（Model View Controller 模型-视图-控制器）设计创建 Web 应用程序的模式：<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200517181909.png" loading="lazy"></li><li>Model（模型）是应用程序中用于处理应用程序数据逻辑的部分。</li><li>View（视图）是应用程序中处理数据显示的部分。</li><li>Controller（控制器）是应用程序中处理用户交互的部分。<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200517182009.png" loading="lazy"></li><li>*优点：耦合性低、重用性高、可维护性高。**<h2 id="1-2-Spring-MVC-模式"><a href="#1-2-Spring-MVC-模式" class="headerlink" title="1.2 Spring MVC 模式"></a>1.2 Spring MVC 模式</h2>前端控制器是整个MVC框架中最为核心的一块，它主要用来拦截符合要求的外部请求，并把请求分发到不同的控制器去处理，根据控制器处理后的结果，生成相应的响应发送到客户端。</li></ul><p>Spring MVC使用Servlet来实现(DispatcherServlet)。DispatcherServlet 作为前置控制器是web服务器的入口，是spring mvc最重要的一个类。<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200517182136.png" loading="lazy"></p><h2 id="1-3-SpringMVC-是什么"><a href="#1-3-SpringMVC-是什么" class="headerlink" title="1.3 SpringMVC 是什么"></a>1.3 SpringMVC 是什么</h2><p>1）一种轻量级的、基于 MVC 的 Web 层应用框架。偏前端而不是基于业务逻辑层。Spring框架的一个后续产品。</p><p>2）Spring 框架结构图(新版本)：<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200517182239.png" loading="lazy"></p><h2 id="1-4SpringMVC-能干什么"><a href="#1-4SpringMVC-能干什么" class="headerlink" title="1.4SpringMVC 能干什么"></a>1.4SpringMVC 能干什么</h2><ol><li>天生与 Spring 框架集成，如：(IOC,AOP)</li><li>支持 Restful 风格</li><li>进行更简洁的 Web 层开发</li><li>支持灵活的 URL 到页面控制器的映射</li><li>非常容易与其他视图技术集成，如:Velocity、FreeMarker 等等</li><li>因为模型数据不存放在特定的 API 里，而是放在一个 Model 里(Map 数据结构实现， 因此很容易被其他框架使用)</li><li>非常灵活的数据验证、格式化和数据绑定机制、能使用任何对象进行数据绑定， 不必实现特定框架的 API</li><li>更加简单、强大的异常处理</li><li>对静态资源的支持</li><li>支持灵活的本地化、主题等解析<h2 id="1-5-SpringMVC-常用组件"><a href="#1-5-SpringMVC-常用组件" class="headerlink" title="1.5 SpringMVC 常用组件"></a>1.5 SpringMVC 常用组件</h2></li></ol><ul><li>DispatcherServlet：前端控制器</li><li>Controller：处理器/页面控制器，做的是 MVC 中的 C 的事情，但控制逻辑转移到前端控制器了，用于对请求进行处理</li><li>HandlerMapping ：请求映射到处理器，找谁来处理，如果映射成功返回一个 HandlerExecutionChain 对象（包含一个 Handler 处理器(页面控制器)对象、多 个 HandlerInterceptor 拦截器对象）</li><li>ViewResolver: 视图解析器，找谁来处理返回的页面。把逻辑视图解析为具体 的 View,进行这种策略模式，很容易更换其他视图技术； 如 InternalResourceViewResolver 将逻辑视图名映射为 JSP 视图</li><li>LocalResolver：本地化、国际化</li><li>MultipartResolver：文件上传解析器</li><li>HandlerExceptionResolver：异常处理器<h2 id="1-6-SpringMVC常用注解"><a href="#1-6-SpringMVC常用注解" class="headerlink" title="1.6 SpringMVC常用注解"></a>1.6 SpringMVC常用注解</h2>@Controller</li></ul><p>　　负责注册一个bean 到spring 上下文中<br>@RequestMapping</p><p>　　注解为控制器指定可以处理哪些 URL 请求<br>@RequestBody</p><p>　　该注解用于读取Request请求的body部分数据，使用系统默认配置的HttpMessageConverter进行解析，然后把相应的数据绑定到要返回的对象上 ,再把HttpMessageConverter返回的对象数据绑定到 controller中方法的参数上<br>    浏览器发ajax请求，设置成contentType:”application/json”,以json字符串的方式发送对象，服务器端通过@RequestBody把接受道德字符串转成java对象</p><p>@ResponseBody</p><p>　　 该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区</p><p>@RestController</p><p>​     </p><p>@ModelAttribute 　　　</p><p>　　在方法定义上使用 @ModelAttribute 注解：Spring MVC 在调用目标处理方法前，会先逐个调用在方法级上标注了@ModelAttribute 的方法</p><p>　　在方法的入参前使用 @ModelAttribute 注解：可以从隐含对象中获取隐含的模型数据中获取对象，再将请求参数 –绑定到对象中，再传入入参将方法入参对象添加到模型中 </p><p>@RequestParam　</p><p>　　在处理方法入参处使用 @RequestParam 可以把请求参 数传递给请求方法</p><p>@PathVariable</p><p>　　绑定 URL 占位符到入参<br>@ExceptionHandler</p><p>　　注解到方法上，出现异常时会执行该方法<br>@ControllerAdvice</p><p>　　使一个Contoller成为全局的异常处理类，类中用@ExceptionHandler方法注解的方法可以处理所有Controller发生的异常</p><h1 id="2-SpringMVC-HelloWorld"><a href="#2-SpringMVC-HelloWorld" class="headerlink" title="2 SpringMVC-HelloWorld"></a>2 SpringMVC-HelloWorld</h1><h2 id="2-1-新建-maven工程，添加web支持，引入各种-jar-包依赖"><a href="#2-1-新建-maven工程，添加web支持，引入各种-jar-包依赖" class="headerlink" title="2.1.新建 maven工程，添加web支持，引入各种 jar 包依赖"></a>2.1.新建 maven工程，添加web支持，引入各种 jar 包依赖</h2><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20200517182327.png" loading="lazy"><br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200517182403.png" loading="lazy"><br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200517182429.png" loading="lazy"><br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200517182452.png" loading="lazy"></p><h2 id="2-2-引入jar包依赖"><a href="#2-2-引入jar包依赖" class="headerlink" title="2.2 引入jar包依赖"></a>2.2 引入jar包依赖</h2><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><img src="https://www.leafii.top/upload/2019/11/image-a35dc902b8374b56956924395c4187e1.png" alt="image.png" loading="lazy"></p><h2 id="2-3-在-web-xml-中配置-DispatcherServlet"><a href="#2-3-在-web-xml-中配置-DispatcherServlet" class="headerlink" title="2.3. 在 web.xml 中配置 DispatcherServlet"></a>2.3. 在 web.xml 中配置 DispatcherServlet</h2><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span>        <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span>        <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 配置 SpringMVC 核心控制器： --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springDispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 配置 DispatcherServlet 的初始化參數：设置文件的路径和文件名称 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springDispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--拦截所有请求--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><p>*<em>拦截所有请求应该将url-pattern的/换成/<em>，这样可以拦截一切请求</em></em><br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200517182539.png" loading="lazy"><br>新建对应的目录并且将其标记：<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200517182633.png" loading="lazy"></p><h2 id="2-4-加入-SpringMVC-的配置文件：springmvc-xml"><a href="#2-4-加入-SpringMVC-的配置文件：springmvc-xml" class="headerlink" title="2.4 加入 SpringMVC 的配置文件：springmvc.xml"></a>2.4 加入 SpringMVC 的配置文件：springmvc.xml</h2><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 设置扫描组件的包： --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>net.suncaper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="2-5-需要创建一个入口页面，index-jsp"><a href="#2-5-需要创建一个入口页面，index-jsp" class="headerlink" title="2.5 需要创建一个入口页面，index.jsp"></a>2.5 需要创建一个入口页面，index.jsp</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/helloworld<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>HelloWorld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h2 id="2-6-编写处理请求的处理器，并标识为处理器"><a href="#2-6-编写处理请求的处理器，并标识为处理器" class="headerlink" title="2.6 编写处理请求的处理器，并标识为处理器"></a>2.6 编写处理请求的处理器，并标识为处理器</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">net<span class="token punctuation">.</span>suncaper<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span> <span class="token comment">/** * @author nedli */</span><span class="token comment">//1. 用@Controller告诉Spring MVC这是一个处理器，可以处理页面请求</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//2. 标志此方法处理 /hello 请求</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//3. 返回.jsp页面的路径，很麻烦</span>        <span class="token keyword">return</span> <span class="token string">"/WEB-INF/views/hello.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="2-7-配置视图解析器（简化路径配置）"><a href="#2-7-配置视图解析器（简化路径配置）" class="headerlink" title="2.7. 配置视图解析器（简化路径配置）"></a>2.7. 配置视图解析器（简化路径配置）</h2><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 配置视图解析器：如何将控制器返回的结果字符串，转换为一个物理的视图文件（拼接页面地址）--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span>          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/views/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>这个时候Controller改为</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">net<span class="token punctuation">.</span>suncaper<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span> <span class="token comment">/** * @author nedli */</span><span class="token comment">//1. 用@Controller告诉Spring MVC这是一个处理器，可以处理页面请求</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//2. 标志此方法处理 /hello 请求,使用hello也是一样的效果哦</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//3. 返回.jsp页面的路径</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="2-8-部署测试"><a href="#2-8-部署测试" class="headerlink" title="2.8.部署测试"></a>2.8.部署测试</h2><p><a href="http://localhost:8080/SpringMVC_01_HelloWorld/index.jsp">http://localhost:8080/SpringMVC_01_HelloWorld/index.jsp</a></p><h1 id="3-HelloWorld-深度解析"><a href="#3-HelloWorld-深度解析" class="headerlink" title="3. HelloWorld 深度解析"></a>3. HelloWorld 深度解析</h1><h2 id="3-1-HelloWorld-请求流程图解："><a href="#3-1-HelloWorld-请求流程图解：" class="headerlink" title="3.1 HelloWorld 请求流程图解："></a>3.1 HelloWorld 请求流程图解：</h2><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20200517182714.png" loading="lazy"><br><strong>一般请求的映射路径名称和处理请求的方法名称最好一致（实质上方法名称任意）;</strong></p><p><strong>经常有同学会出现配置上错误，把“/WEB-INF/views/”配置成了 “/WEB-INF/views”;</strong></p><h2 id="3-2-流程分析"><a href="#3-2-流程分析" class="headerlink" title="3.2 流程分析"></a>3.2 流程分析</h2><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-7b7d814843a94025aeb8d2c6e5540777.png" loading="lazy"></p><h1 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤:"></a>基本步骤:</h1><ul><li>客户端请求提交到 DispatcherServlet</li><li>由 DispatcherServlet 控制器查询一个或多个 HandlerMapping，找到处理请求的 Controller</li><li>DispatcherServlet 将请求提交到 Controller（也称为 Handler）</li><li>Controller 调用业务逻辑处理后，返回 ModelAndView</li><li>DispatcherServlet 查询一个或多个 ViewResoler 视图解析器，找到 ModelAndView 指定的视图</li><li>视图负责将结果显示到客户端.</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.概述&quot;&gt;&lt;/a&gt;1.概述&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Spring 为展现层提供的基于 MVC 设计理念的优秀的 Web 框架，是目前最主流的 MVC 框架之一&lt;/li&gt;
&lt;li&gt;Spring3.0 后全面超越 Struts2，成为最优秀的 MVC 框架。&lt;/li&gt;
&lt;li&gt;SpringMVC 通过一套 MVC 注解，让 POJO 成为处理请求的控制器，而无须实现任何接口。&lt;/li&gt;
&lt;li&gt;支持 REST 风格的 URL 请求。&lt;/li&gt;
&lt;li&gt;采用了松散耦合可插拔组件结构，比其他 MVC 框架更具扩展性和灵活性。&lt;/li&gt;
&lt;li&gt;基于Servlet实现，方便运行于常用Java EE容器。&lt;/li&gt;
&lt;li&gt;</summary>
    
    
    
    
    <category term="Spring" scheme="https://mikutown.gitee.io/blog/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring中JavaBeanの生命周期和作用域</title>
    <link href="https://mikutown.gitee.io/blog/2020/04/30/Spring%E4%B8%ADJavaBean%E3%81%AE%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>https://mikutown.gitee.io/blog/2020/04/30/Spring%E4%B8%ADJavaBean%E3%81%AE%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F/</id>
    <published>2020-04-30T07:10:39.000Z</published>
    <updated>2021-01-02T20:09:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bean的生命周期和作用域"><a href="#Bean的生命周期和作用域" class="headerlink" title="Bean的生命周期和作用域"></a>Bean的生命周期和作用域</h1><h2 id="Bean的”懒加载“"><a href="#Bean的”懒加载“" class="headerlink" title="Bean的”懒加载“"></a>Bean的”懒加载“</h2><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20200430151055.png" loading="lazy"><br>这样编写代码，bean便会在需要的时候注入对象而不是直接注入所有对象。</p><a id="more"></a><ul><li>需要对象时：<img src="https://gitee.com/mikutown/pic/raw/master/img/20200430151111.png" loading="lazy"></li><li>不需要对象时：<img src="https://gitee.com/mikutown/pic/raw/master/img/20200430151129.png" loading="lazy"><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2>如果像下图一样获取同一个bean给两个不同命名的Student，其实还是只有一个对象， 他们的hashcode相同<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200430151154.png" loading="lazy"><br>如果在bean中增加scope属性为prototype，那么就不是单例模式了：<img src="https://gitee.com/mikutown/pic/raw/master/img/20200430151209.png" loading="lazy"></li></ul><h2 id="bean-的作用域"><a href="#bean-的作用域" class="headerlink" title="bean 的作用域"></a>bean 的作用域</h2><p>在 Spring 中，可以在<bean>元素的 scope 属性里设置 bean 的作用域，以决定这个 bean 是单实例的还是多实例的。</p><p>默认情况下，Spring 只为每个在 IOC 容器里声明的 bean 创建唯一一个实例，整个 IOC 容器范围内都能共享该实例：所有后续的 getBean()调用和 bean 引用都将返回这个唯一的 bean 实例。该作用域被称为 singleton，它是所有 bean 的默认作用域。<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200430151230.png" loading="lazy"><br>当 bean 的作用域为单例时，Spring 会在 IOC 容器对象创建时就创建 bean 的对象实例。而当 bean 的作用域为 prototype 时，IOC 容器在获取 bean 的实例时创建 bean 的实例对象。</p><h2 id="bean-的生命周期"><a href="#bean-的生命周期" class="headerlink" title="bean 的生命周期"></a>bean 的生命周期</h2><ul><li>Spring IOC 容器可以管理 bean 的生命周期，Spring 允许在 bean 生命周期内特定的时间点执行指定的任务。</li><li>Spring IOC 容器对 bean 的生命周期进行管理的过程：<ol><li>通过构造器或工厂方法创建 bean 实例</li><li>为 bean 的属性设置值和对其他 bean 的引用</li><li>调用 bean 的初始化方法</li><li>bean 可以使用了</li><li>当容器关闭时，调用 bean 的销毁方法</li></ol></li><li>在配置 bean 时，通过 init-method 和 destroy-method 属性为 bean 指定初始化和销毁方法：<br><code>&lt;bean name=&quot;user&quot; class=&quot;com.bean.User&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot;&gt;&lt;/bean&gt;</code></li><li>bean 的后置处理器<ul><li>bean 后置处理器允许在调用初始化方法前后对 bean 进行额外的处理</li><li>bean 后置处理器对 IOC 容器里的所有 bean 实例逐一处理，而非单一实例。其典型应用是：检查 bean 属性的正确性或根据特定的标准更改 bean 的属性。</li><li>bean 后置处理器时需要实现接口：org.springframework.beans.factory.config.BeanPostProcessor。在初始化方法被调用前后，Spring 将把每个 bean 实例分别传递给上述接口的以下两个方法：postProcessBeforeInitialization(Object, String)、postProcessAfterInitialization(Object, String)</li></ul></li><li>添加 bean 后置处理器后 bean 的生命周期<br>①通过构造器或工厂方法创建 bean 实例<br>②为 bean 的属性设置值和对其他 bean 的引用<br>③将 bean 实例传递给 bean 后置处理器的 postProcessBeforeInitialization()方法<br>④调用 bean 的初始化方法<br>⑤将 bean 实例传递给 bean 后置处理器的 postProcessAfterInitialization()方法<br>⑥bean 可以使用了<br>⑦当容器关闭时调用 bean 的销毁方法<h2 id="引用外部属性文件"><a href="#引用外部属性文件" class="headerlink" title="引用外部属性文件"></a>引用外部属性文件</h2>当 bean 的配置信息逐渐增多时，查找和修改一些 bean 的配置信息就变得愈加困难。这时可以将一部分信息提取到 bean 配置文件的外部，以 properties 格式的属性文件保存起来，同时在 bean 的配置文件中引用 properties 属性文件中的内容，从而实现一部分属性值在发生变化时仅修改 properties 属性文件即可。这种技术多用于连接数据库的基本信息的配置。</li></ul><h3 id="直接配置："><a href="#直接配置：" class="headerlink" title="直接配置："></a>直接配置：</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql:127.0.0.1:3306/test<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="使用外部的属性文件"><a href="#使用外部的属性文件" class="headerlink" title="使用外部的属性文件"></a>使用外部的属性文件</h3><h4 id="创建-properties-属性文件"><a href="#创建-properties-属性文件" class="headerlink" title="创建 properties 属性文件"></a>创建 properties 属性文件</h4><pre class="language-prop" data-language="prop"><code class="language-prop">prop.userName&#x3D;rootprop.password&#x3D;rootprop.url&#x3D;jdbc:mysql:127.0.0.1:3306&#x2F;testprop.driverClass&#x3D;com.mysql.jdbc.Driver</code></pre><p>从 properties 属性文件中引入属性值</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 指定properties属性文件的位置 →&lt;context:property-placeholder location="classpath:jdbc.properties"/>&lt;!-- 从properties属性文件中引入属性值 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;prop.userName&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;prop.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;prop.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;prop.driverClass&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h2 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>手动装配：以 value 或 ref 的方式明确指定属性值都是手动装配。</li><li>自动装配：根据指定的装配规则，不需要明确指定，Spring 自动将匹配的属性值注入 bean 中。<h3 id="装配模式"><a href="#装配模式" class="headerlink" title="装配模式"></a>装配模式</h3></li><li>根据类型自动装配：将类型匹配的 bean 作为属性注入到另一个 bean 中。若 IOC 容器中有多个与目标 bean 类型一致的 bean，Spring 将无法判定哪个 bean 最合适该属性，所以不能执行自动装配</li><li>根据名称自动装配：必须将目标 bean 的名称和属性名设置的完全相同</li><li>通过构造器自动装配：当 bean 中存在多个构造器时，此种自动装配方式将会很复杂。不推荐使用。<h2 id="SpEL"><a href="#SpEL" class="headerlink" title="SpEL"></a>SpEL</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3>Spring Expression Language，Spring 表达式语言，简称 SpEL。支持运行时查询并可以操作对象图。和 JSP 页面上的 EL 表达式一样，SpEL 根据 JavaBean 风格的 getXxx()、setXxx()方法定义的属性访问对象图，完全符合我们熟悉的操作习惯。</li></ul><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>SpEL 使用#{…}作为定界符，所有在大框号中的字符都将被认为是 SpEL 表达式。</p><h3 id="使用字面量"><a href="#使用字面量" class="headerlink" title="使用字面量"></a>使用字面量</h3><ul><li>整数：<property name="count" value="#{5}"/></li><li>小数：<property name="frequency" value="#{89.7}"/></li><li>科学计数法：<property name="capacity" value="#{1e4}"/></li><li>String 类型的字面量可以使用单引号或者双引号作为字符串的定界符号<pre class="language-none"><code class="language-none">&lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;#&#123;&#39;Chuck&#39;&#125;&quot;&#x2F;&gt;&lt;property name&#x3D;&quot;name&quot; value&#x3D;&#39;#&#123;&quot;Chuck&quot;&#125;&#39;&#x2F;&gt;</code></pre></li><li>Boolean：<property name="enabled" value="#{false}"/></li><li>引用其他bean：<property name="detp" value="#{dept}"/></li><li>引用其他 bean 的属性值：<property name="deptName" value="#{dept.deptName}"/></li></ul><h2 id="通过注解配置-bean"><a href="#通过注解配置-bean" class="headerlink" title="通过注解配置 bean"></a>通过注解配置 bean</h2><p>不用注解的话就是这样的<img src="https://gitee.com/mikutown/pic/raw/master/img/20200430151245.png" loading="lazy"></p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>相对于 XML 方式而言，通过注解的方式配置 bean 更加简洁和优雅，而且和 MVC 组件化开发的理念十分契合，是开发中常用的使用方式。</p><h3 id="使用注解标识组件"><a href="#使用注解标识组件" class="headerlink" title="使用注解标识组件"></a>使用注解标识组件</h3><ul><li>普通组件：@Component   标识一个受 Spring IOC 容器管理的组件</li><li>持久化层组件：@Repository    标识一个受 Spring IOC 容器管理的持久化层组件</li><li>业务逻辑层组件：@Service    标识一个受 Spring IOC 容器管理的业务逻辑层组件</li><li>表述层控制器组件：@Controller     标识一个受 Spring IOC 容器管理的表述层控制器组件</li><li>组件命名规则：<br>①默认情况：使用组件的简单类名首字母小写后得到的字符串作为 bean 的 id（类名为HelloWorld，则在容器中的bean的id为helloWorld）<br>②使用组件注解的 value 属性指定 bean 的 id</li><li>*注意：事实上 Spring 并没有能力识别一个组件到底是不是它所标记的类型，即使将@Respository 注解用在一个表述层控制器组件上面也不会产生任何错误，所以@Respository、@Service、@Controller 这几个注解仅仅是为了让开发人员自己明确 当前的组件扮演的角色。**</li></ul><h3 id="扫描组件"><a href="#扫描组件" class="headerlink" title="扫描组件"></a>扫描组件</h3><p>组件被上述注解标识后还需要通过 Spring 进行扫描才能够侦测到。</p><ul><li><p>指定被扫描的 package<br><code>&lt;context:component-scan base-package=&quot;com.component&quot;/&gt;</code></p></li><li><p>base-package 属性指定一个需要扫描的基类包，Spring 容器将会扫描这个基类包及其子包中的所有类。</p></li><li><p>当需要扫描多个包时可以使用逗号分隔。</p></li><li><p>如果仅希望扫描特定的类而非基包下的所有类，可使用 resource-pattern 属性过滤特定的类</p></li><li><p>JAR 包必须在原有 JAR 包组合的基础上再导入一个：spring-aop-4.0.0.RELEASE.jar<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200430151300.png" loading="lazy"><br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200430151316.png" loading="lazy"><br>但是后面的解析位置现在包含了解析器的功能，因此一般 不写引入解析器的那一行</p><pre class="language-<context:annotation-config></context:annotation-config>" data-language="<context:annotation-config></context:annotation-config>"><code class="language-<context:annotation-config></context:annotation-config>"></code></pre><h3 id="组件装配"><a href="#组件装配" class="headerlink" title="组件装配"></a>组件装配</h3></li><li><p>需求<br>  Controller 组件中往往需要用到 Service 组件的实例，Service 组件中往往需要用到Repository 组件的实例。Spring 可以通过注解的方式帮我们实现属性的装配。</p></li><li><p>实现依据<br>  在指定要扫描的包时，<a href="context:component-scan">context:component-scan</a> 元素会自动注册一个 bean 的后置处理器：AutowiredAnnotationBeanPostProcessor 的实例。该后置处理器可以自动装配标记了@Autowired、@Resource 或@Inject 注解的属性。</p></li><li><p>@Autowired 注解（重点）<br>  ①根据类型实现自动装配。</p><p>  ②构造器、普通字段(即使是非 public)、一切具有参数的方法都可以应用@Autowired 注解</p><p>  ③默认情况下，所有使用@Autowired 注解的属性都需要被设置。当 Spring 找不到匹配的 bean 装配属性时，会抛出异常。</p><p>  ④若某一属性允许不被设置，可以设置@Autowired 注解的 required 属性为 false</p><p>  ⑤默认情况下，当 IOC 容器里存在多个类型兼容的 bean 时，Spring 会尝试匹配 bean的 id 值是否与变量名相同，如果相同则进行装配。如果 bean 的 id 值不相同，通过类型的自动装配将无法工作。此时可以在@Qualifier 注解里提供 bean的名称。Spring 甚至允许在方法的形参上标注@Qualifiter 注解以指定注入 bean 的名称。</p><p>  ⑥@Autowired 注解也可以应用在数组类型的属性上，此时 Spring 将会把所有匹配的 bean 进行自动装配。</p><p>  ⑦@Autowired 注解也可以应用在集合属性上，此时 Spring 读取该集合的类型信息，然后自动装配所有与之兼容的 bean。</p><p>  ⑧@Autowired 注解用在 java.util.Map 上时，若该 Map 的键值为 String，那么 Spring 将自动装配与值类型兼容的 bean 作为值，并以 bean 的 id 值作为键。<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200430151331.png" loading="lazy"></p></li><li><p>@Resource<br>  @Resource 注解要求提供一个 bean 名称的属性，若该属性为空，则自动采用标注处的变量或方法名作为 bean 的名称。</p></li><li><p>@Inject<br>  @Inject 和@Autowired 注解一样也是按类型注入匹配的 bean，但没有 reqired 属性。</p></li><li><p>*可以在@Resource之类的注解后加上括号，自定义注入对象的名称**<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200430151345.png" loading="lazy"><br>运行结果：<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200430151404.png" loading="lazy"></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Bean的生命周期和作用域&quot;&gt;&lt;a href=&quot;#Bean的生命周期和作用域&quot; class=&quot;headerlink&quot; title=&quot;Bean的生命周期和作用域&quot;&gt;&lt;/a&gt;Bean的生命周期和作用域&lt;/h1&gt;&lt;h2 id=&quot;Bean的”懒加载“&quot;&gt;&lt;a href=&quot;#Bean的”懒加载“&quot; class=&quot;headerlink&quot; title=&quot;Bean的”懒加载“&quot;&gt;&lt;/a&gt;Bean的”懒加载“&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/mikutown/pic/raw/master/img/20200430151055.png&quot;&gt;&lt;br&gt;这样编写代码，bean便会在需要的时候注入对象而不是直接注入所有对象。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Spring" scheme="https://mikutown.gitee.io/blog/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringIOC容器</title>
    <link href="https://mikutown.gitee.io/blog/2020/04/30/SpringIOC%E5%AE%B9%E5%99%A8/"/>
    <id>https://mikutown.gitee.io/blog/2020/04/30/SpringIOC%E5%AE%B9%E5%99%A8/</id>
    <published>2020-04-30T07:09:14.000Z</published>
    <updated>2021-01-02T20:31:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringIOC容器"><a href="#SpringIOC容器" class="headerlink" title="SpringIOC容器"></a>SpringIOC容器</h1><p><strong>本文章用的环境紧贴上一篇</strong></p><h1 id="各种类型的装配"><a href="#各种类型的装配" class="headerlink" title="各种类型的装配"></a>各种类型的装配</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li>只保留spring-beans.xml的内容，所以将spring-beans1.xml的bean标签复制到spring-beans.xml中</li><li>当要装配的实体对象中还有实体对象时，可以用下面两种方法装配</li></ol><a id="more"></a><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.leafii.springdemo.demo1helloworld.domain.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AA<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mikutown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--以上两种方式无差异--></span>        <span class="token comment">&lt;!--什么时候用以上的那种子标签呢？如果value里有很多很多很多文字就可以用这个方式了 增强代码的可读性--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stuNo<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stu007<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--第一种方式：&lt;property name="student" ref="s1"/>--></span><span class="token comment">&lt;!--第二种方式：--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.leafii.springdemo.demo1helloworld.domain.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aa<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yyss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--以上两种方式无差异--></span>                <span class="token comment">&lt;!--什么时候用以上的那种子标签呢？如果value里有很多很多很多文字就可以用这个方式了 增强代码的可读性--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stuNo<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stu009<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20200430150728.png" loading="lazy"></p><ol start="3"><li>如图所示，可以看到 context可以看到Student但是Student看不到context，IOC可以控制Student类的生命周期，目前的情况而言，两个对象分别是applicationContext和student，applicationContext可以控制student，这种控制称为正常控制，反之则不行<img src="https://gitee.com/mikutown/pic/raw/master/img/20200430150748.png" loading="lazy"></li></ol><h2 id="IOC-Inversion-of-Control-：-反转控制-控制反转"><a href="#IOC-Inversion-of-Control-：-反转控制-控制反转" class="headerlink" title="IOC(Inversion of Control)： 反转控制(控制反转)"></a>IOC(Inversion of Control)： 反转控制(控制反转)</h2><p>在应用程序中的组件需要获取资源时，传统的方式是组件主动的从容器中获取所需要的资源，在这样的模式下开发人员往往需要知道在具体容器中特定资源的获取方式，增加了学习成本，同时降低了开发效率。</p><p>反转控制的思想完全颠覆了应用程序组件获取资源的传统方式：反转了资源的获取方向——改由容器主动的将资源推送给需要的组件，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源的方式即可，极大的降低了学习成本，提高了开发的效率。这种行为也称为查找的被动形式。</p><h2 id="DI-Dependency-Injection-：依赖注入"><a href="#DI-Dependency-Injection-：依赖注入" class="headerlink" title="DI(Dependency Injection)：依赖注入"></a>DI(Dependency Injection)：依赖注入</h2><p>IOC 的另一种表述方式：即组件以一些预先定义好的方式(例如：setter 方法)接受来自于容器的资源注入。相对于 IOC 而言，这种表述更直接。</p><h2 id="IOC-容器在-Spring-中的实现"><a href="#IOC-容器在-Spring-中的实现" class="headerlink" title="IOC 容器在 Spring 中的实现"></a>IOC 容器在 Spring 中的实现</h2><ul><li>在通过 IOC 容器读取 Bean 的实例之前，需要先将 IOC 容器本身实例化。</li><li>Spring 提供了 IOC 容器的两种实现方式</li></ul><ol><li>BeanFactory：IOC 容器的基本实现，是 Spring 内部的基础设施，是面向Spring 本身的，不是提供给开发人员使用的。</li><li>ApplicationContext：BeanFactory 的子接口，提供了更多高级特性。面向Spring 的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的BeanFactory。</li></ol><ul><li>ApplicationContext 的主要实现类</li></ul><ol><li>ClassPathXmlApplicationContext：对应类路径下的 XML 格式的配置文件</li><li>FileSystemXmlApplicationContext：对应文件系统中的 XML 格式的配置文件</li></ol><h2 id="依赖注入的方式"><a href="#依赖注入的方式" class="headerlink" title="依赖注入的方式"></a>依赖注入的方式</h2><h3 id="创建实体类Student"><a href="#创建实体类Student" class="headerlink" title="创建实体类Student"></a>创建实体类Student</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> studentId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> studentName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">//构造getter，setter忽略</span><span class="token punctuation">&#125;</span></code></pre><h3 id="通过-bean-的-setXxx-方法赋值"><a href="#通过-bean-的-setXxx-方法赋值" class="headerlink" title="通过 bean 的 setXxx()方法赋值"></a>通过 bean 的 setXxx()方法赋值</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.helloworld.bean.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 使用property子元素为bean的属性赋值,实际是调用setter方法，若实体类没有setter方法，报错 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1001<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stuName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Tom2015<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="通过-bean-的构造器赋值"><a href="#通过-bean-的构造器赋值" class="headerlink" title="通过 bean 的构造器赋值"></a>通过 bean 的构造器赋值</h3><ul><li>Spring 自动匹配合适的构造器</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.helloworld.bean.Student<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>10010<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>Tom2015<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span> <span class="token punctuation">></span></span></code></pre><ul><li>通过索引值指定参数位置</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.helloworld.bean.Student<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>10010<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>Tom2015<span class="token punctuation">"</span></span>  <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>20<span class="token punctuation">"</span></span>  <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span> <span class="token punctuation">></span></span></code></pre><ul><li>通过类型区分重载的构造器</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.helloworld.bean.Student<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>10010<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>Tom2015<span class="token punctuation">"</span></span>  <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>20<span class="token punctuation">"</span></span>  <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span> <span class="token punctuation">></span></span></code></pre><h2 id="p-名称空间"><a href="#p-名称空间" class="headerlink" title="p 名称空间"></a>p 名称空间</h2><p>为了简化 XML 文件的配置，越来越多的 XML 文件采用属性而非子元素配置信息。Spring 从 2.5 版本开始引入了一个新的 p 命名空间，可以通过<bean>元素属性的方式配置 Bean 的属性。(记得导包，不然要报错)<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200430150812.png" loading="lazy"><br>使用 p 命名空间后，基于 XML 的配置方式将进一步简化。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s4<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.helloworld.bean.Student<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">p:</span>studentId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2002<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>stuName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Jerry2016<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p><strong>使用p名称空间时，不可以使用property标签否则会报错</strong></p><h2 id="可注入的值"><a href="#可注入的值" class="headerlink" title="可注入的值"></a>可注入的值</h2><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><ul><li>可以使用字符串表示的值，可以通过 value 属性或 value 子节点的方式指定</li><li>基本数据类型及其封装类、String 等类型都可以采取字面值注入的方式</li></ul><h3 id="null值"><a href="#null值" class="headerlink" title="null值"></a>null值</h3><ul><li>设置property 属性的子节点为<null/></li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s5<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.helloworld.bean.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1001<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stuName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">//忽略get和set，构造方法</span><span class="token punctuation">&#125;</span></code></pre><h3 id="创建类Customer"><a href="#创建类Customer" class="headerlink" title="创建类Customer"></a>创建类Customer</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Person</span> person<span class="token punctuation">;</span>    <span class="token comment">//忽略get和set</span>    <span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>person <span class="token operator">=</span> person<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="内部-bean"><a href="#内部-bean" class="headerlink" title="内部 bean"></a>内部 bean</h3><p>当 bean 实例仅仅给一个特定的属性使用时，可以将其声明为内部 bean。内部bean 声明直接包含在<property>或<constructor-arg>元素里，不需要设置任何 id 或 name 属性,内部 bean 不能使用在任何其他地方。内部 bean 不能使用在任何其他地方。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CustomerBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.common.Customer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.common.Person<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>28<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="外部bean"><a href="#外部bean" class="headerlink" title="外部bean"></a>外部bean</h3><p>可以使用 ‘ref’ 属性来引用已经定义的bean对象。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CustomerBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.common.Customer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PersonBean<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PersonBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.common.Person<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>28<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="List注入"><a href="#List注入" class="headerlink" title="List注入"></a>List注入</h3><p>配置 java.util.List 类型的属性，需要指定<list>标签，在标签里包含一些元素。这些标签可以通过<value>指定简单的常量值，通过<ref>指定对其他 Bean 的引用。通过<bean> 指定内置 bean 定义。通过<null/>指定空元素。甚至可以内嵌其他集合。</p><p>配置 java.util.Set 需要使用<set>标签，定义的方法与 List 一样。</p><p>配置数组需要<array>标签，定义的方法与 List 一样。</p><h3 id="创建类Customer-1"><a href="#创建类Customer-1" class="headerlink" title="创建类Customer"></a>创建类Customer</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> persons<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="创建类Person"><a href="#创建类Person" class="headerlink" title="创建类Person"></a>创建类Person</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">//忽略get和set，构造方法</span><span class="token punctuation">&#125;</span></code></pre><h3 id="注入list"><a href="#注入list" class="headerlink" title="注入list"></a>注入list</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cc<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.spring.bean.Customer <span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 以字面量为值的 List 集合 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>李四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>persons<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.common.Person<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>28<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.common.Person<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>28<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p><strong>list也可以使用array标签来装</strong></p><h2 id="Map注入"><a href="#Map注入" class="headerlink" title="Map注入"></a>Map注入</h2><p>Java.util.Map 通过<map>标签定义，<map>标签里可以使用多个<entry>作为子标签。每个条目包含一个键和一个值。必须在<key>标签里定义键。因为键和值的类型没有限制，所以可以自由地为它们指定<value>、<ref>、<bean>或<null/>元素。</p><p>可以将 Map 的键和值作为<entry>的属性定义：简单常量使用 key 和 value 来定义；bean 引用通过 key-ref 和 value-ref 属性定义。</p><h3 id="创建类Customer-2"><a href="#创建类Customer-2" class="headerlink" title="创建类Customer"></a>创建类Customer</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> map<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="创建类Person-1"><a href="#创建类Person-1" class="headerlink" title="创建类Person"></a>创建类Person</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">//忽略get和set，构造方法</span><span class="token punctuation">&#125;</span></code></pre><h3 id="注入map"><a href="#注入map" class="headerlink" title="注入map"></a>注入map</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cc<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.spring.bean.Customer <span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>person1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>person2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.common.Person<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>28<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.common.Person<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>28<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h2 id="通过容器获取-bean"><a href="#通过容器获取-bean" class="headerlink" title="通过容器获取 bean"></a>通过容器获取 bean</h2><h3 id="通过id-值获取"><a href="#通过id-值获取" class="headerlink" title="通过id 值获取"></a>通过id 值获取</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建IOC容器对象</span><span class="token class-name">ApplicationContext</span> iocContainer <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"配置文件路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.根据id值获取bean实例对象</span><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> iocContainer<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"配置文件的id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="通过类型获取-bean"><a href="#通过类型获取-bean" class="headerlink" title="通过类型获取 bean"></a>通过类型获取 bean</h3><ul><li>从 IOC 容器中获取 bean 时，除了通过 id 值获取，还可以通过 bean 的类型获取。但如果同一个类型的 bean 在 XML 文件中配置了多个，则获取时会抛出异常，所以同一个类型的 bean 在容器中必须是唯一的。否则就会报错：<img src="https://gitee.com/mikutown/pic/raw/master/img/20200430150838.png" loading="lazy"></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建IOC容器对象</span><span class="token class-name">ApplicationContext</span> iocContainer <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"配置文件路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.根据id值获取bean实例对象</span><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> iocContainer<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="通过类型和id获取-bean"><a href="#通过类型和id获取-bean" class="headerlink" title="通过类型和id获取 bean"></a>通过类型和id获取 bean</h3><p>使用另外一个重载的方法，同时指定 bean 的 id 值和类型。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建IOC容器对象</span><span class="token class-name">ApplicationContext</span> iocContainer <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"配置文件路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.根据id值获取bean实例对象</span><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> iocContainer<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"id值"</span><span class="token punctuation">,</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="配置信息的继承"><a href="#配置信息的继承" class="headerlink" title="配置信息的继承"></a>配置信息的继承</h3><p>查看下面两个 Employee 的配置，其中 dept 属性是重复的:</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.parent.bean.Department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IT<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp01<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.parent.bean.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1001<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Tom<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 重复的属性值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp02<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.parent.bean.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1002<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Jerry<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 重复的属性值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- amazing --></span></code></pre><p>配置信息的继承:</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.parent.bean.Department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IT<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp01<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.parent.bean.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1001<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Tom<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 重复的属性值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 以emp01作为父bean，继承后可以省略公共属性值的配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp02<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1002<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Jerry<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>Spring 允许继承 bean 的配置，被继承的 bean 称为父 bean。继承这个父 bean 的 bean 称为子 bean 子 bean 从父 bean 中继承配置，包括 bean 的属性配置子 bean 也可以覆盖从父 bean 继承过来的配置。</p><p>父 bean 可以作为配置模板，也可以作为 bean 实例。若只想把父 bean 作为模板，可以设置<bean>的 abstract 属性为 true，这样 Spring 将不会实例化这个 bean。如果一个 bean 的 class 属性没有指定，则必须是抽象 bean，并不是<bean>元素里的所有属性都会被继承。比如：autowire，abstract 等。也可以忽略父 bean 的 class 属性，让子 bean 指定自己的类，而共享相同的属性配置。但此时 abstract 必须设为 true。</p><h3 id="bean-之间的依赖"><a href="#bean-之间的依赖" class="headerlink" title="bean 之间的依赖"></a>bean 之间的依赖</h3><p>有的时候创建一个 bean 的时候需要保证另外一个 bean 也被创建，这时我们称前面的 bean 对后面的 bean 有依赖。例如：要求创建 Employee 对象的时候必须创建 Department。</p><p>这里需要注意的是依赖关系不等于引用关系，Employee 即使依赖 Department 也可以不引用它。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp03<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.parent.bean.Employee<span class="token punctuation">"</span></span> <span class="token attr-name">depends-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1003<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Kate<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>21<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SpringIOC容器&quot;&gt;&lt;a href=&quot;#SpringIOC容器&quot; class=&quot;headerlink&quot; title=&quot;SpringIOC容器&quot;&gt;&lt;/a&gt;SpringIOC容器&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;本文章用的环境紧贴上一篇&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;各种类型的装配&quot;&gt;&lt;a href=&quot;#各种类型的装配&quot; class=&quot;headerlink&quot; title=&quot;各种类型的装配&quot;&gt;&lt;/a&gt;各种类型的装配&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;只保留spring-beans.xml的内容，所以将spring-beans1.xml的bean标签复制到spring-beans.xml中&lt;/li&gt;
&lt;li&gt;当要装配的实体对象中还有实体对象时，可以用下面两种方法装配&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="Spring" scheme="https://mikutown.gitee.io/blog/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringIOCの多个配置文件读取方式</title>
    <link href="https://mikutown.gitee.io/blog/2020/04/30/SpringIOC%E3%81%AE%E5%A4%9A%E4%B8%AA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%96%B9%E5%BC%8F/"/>
    <id>https://mikutown.gitee.io/blog/2020/04/30/SpringIOC%E3%81%AE%E5%A4%9A%E4%B8%AA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%96%B9%E5%BC%8F/</id>
    <published>2020-04-30T06:54:00.000Z</published>
    <updated>2021-01-02T20:09:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章的环境请查看上一篇</p><h1 id="SpringIOCの多个配置文件读取方式"><a href="#SpringIOCの多个配置文件读取方式" class="headerlink" title="SpringIOCの多个配置文件读取方式"></a>SpringIOCの多个配置文件读取方式</h1><h2 id="1-复制spring-beans-xml为spring-beans1-xml"><a href="#1-复制spring-beans-xml为spring-beans1-xml" class="headerlink" title="1. 复制spring-beans.xml为spring-beans1.xml"></a>1. 复制spring-beans.xml为spring-beans1.xml</h2><a id="more"></a><h2 id="2-在原文件中放s1，新的文件中放s2"><a href="#2-在原文件中放s1，新的文件中放s2" class="headerlink" title="2. 在原文件中放s1，新的文件中放s2"></a>2. 在原文件中放s1，新的文件中放s2<img src="https://gitee.com/mikutown/pic/raw/master/img/20200430145433.png" loading="lazy"></h2><h2 id="3-修改Test-java"><a href="#3-修改Test-java" class="headerlink" title="3. 修改Test.java"></a>3. 修改Test.java<img src="https://gitee.com/mikutown/pic/raw/master/img/20200430145457.png" loading="lazy"><img src="https://gitee.com/mikutown/pic/raw/master/img/20200430150043.png" loading="lazy"></h2><h2 id="4-运行结果"><a href="#4-运行结果" class="headerlink" title="4. 运行结果"></a>4. 运行结果</h2><pre class="language-none"><code class="language-none">log4j:WARN No appenders could be found for logger (org.springframework.core.env.StandardEnvironment).log4j:WARN Please initialize the log4j system properly.log4j:WARN See http:&#x2F;&#x2F;logging.apache.org&#x2F;log4j&#x2F;1.2&#x2F;faq.html#noconfig for more info.settersetterStudent&#123;id&#x3D;&#39;qwer&#39;, name&#x3D;&#39;hkx&#39;, stuNo&#x3D;&#39;stu001&#39;, student&#x3D;null&#125;</code></pre><h2 id="5-倘或在spring-beans1-xml中添加"><a href="#5-倘或在spring-beans1-xml中添加" class="headerlink" title="5. 倘或在spring-beans1.xml中添加"></a>5. 倘或在spring-beans1.xml中添加</h2><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.leafii.springdemo.demo1helloworld.domain.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AA<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yys<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--以上两种方式无差异--></span><span class="token comment">&lt;!--什么时候用以上的那种子标签呢？如果value里有很多很多很多文字就可以用这个方式了 增强代码的可读性--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stuNo<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stu007<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--添加了上一行--></span><span class="token comment">&lt;!--这里的s1或许会报错，只是预编译错误，运行是没问题的，因为我们导入了两个xml文件进行注入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>想要消除s1的错误，可以加一个import的标签在beans下<br><code>&lt;import resource=&quot;spring-beans.xml&quot;/&gt;</code><br>这样就不会编译错误了<br>在Test中添加打印student2<br>运行结果依旧正确奥！</p><pre class="language-none"><code class="language-none">log4j:WARN No appenders could be found for logger (org.springframework.core.env.StandardEnvironment).log4j:WARN Please initialize the log4j system properly.log4j:WARN See http:&#x2F;&#x2F;logging.apache.org&#x2F;log4j&#x2F;1.2&#x2F;faq.html#noconfig for more info.settersetterStudent&#123;id&#x3D;&#39;qwer&#39;, name&#x3D;&#39;hkx&#39;, stuNo&#x3D;&#39;stu001&#39;, student&#x3D;null&#125;Student&#123;id&#x3D;&#39;AA&#39;, name&#x3D;&#39;yys&#39;, stuNo&#x3D;&#39;stu007&#39;, student&#x3D;Student&#123;id&#x3D;&#39;qwer&#39;, name&#x3D;&#39;hkx&#39;, stuNo&#x3D;&#39;stu001&#39;, student&#x3D;null&#125;&#125;</code></pre><h2 id="6-beans1文件中已经import了beans文件，其实就不需要在Test类中设置beans的引入啦！"><a href="#6-beans1文件中已经import了beans文件，其实就不需要在Test类中设置beans的引入啦！" class="headerlink" title="6. beans1文件中已经import了beans文件，其实就不需要在Test类中设置beans的引入啦！"></a>6. beans1文件中已经import了beans文件，其实就不需要在Test类中设置beans的引入啦！<img src="https://gitee.com/mikutown/pic/raw/master/img/20200430145600.png" loading="lazy"></h2><p><strong>运行结果依旧正常</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇文章的环境请查看上一篇&lt;/p&gt;
&lt;h1 id=&quot;SpringIOCの多个配置文件读取方式&quot;&gt;&lt;a href=&quot;#SpringIOCの多个配置文件读取方式&quot; class=&quot;headerlink&quot; title=&quot;SpringIOCの多个配置文件读取方式&quot;&gt;&lt;/a&gt;SpringIOCの多个配置文件读取方式&lt;/h1&gt;&lt;h2 id=&quot;1-复制spring-beans-xml为spring-beans1-xml&quot;&gt;&lt;a href=&quot;#1-复制spring-beans-xml为spring-beans1-xml&quot; class=&quot;headerlink&quot; title=&quot;1. 复制spring-beans.xml为spring-beans1.xml&quot;&gt;&lt;/a&gt;1. 复制spring-beans.xml为spring-beans1.xml&lt;/h2&gt;</summary>
    
    
    
    
    <category term="Spring" scheme="https://mikutown.gitee.io/blog/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringIOC容器のHelloWorld</title>
    <link href="https://mikutown.gitee.io/blog/2020/04/30/SpringIOC%E5%AE%B9%E5%99%A8%E3%81%AEHelloWorld/"/>
    <id>https://mikutown.gitee.io/blog/2020/04/30/SpringIOC%E5%AE%B9%E5%99%A8%E3%81%AEHelloWorld/</id>
    <published>2020-04-30T06:48:48.000Z</published>
    <updated>2021-01-02T20:18:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-IOC容器-の-HelloWorld"><a href="#Spring-IOC容器-の-HelloWorld" class="headerlink" title="Spring IOC容器 の HelloWorld"></a>Spring IOC容器 の HelloWorld</h1><h2 id="1-新建对象的项目和模块，maven项目"><a href="#1-新建对象的项目和模块，maven项目" class="headerlink" title="1.新建对象的项目和模块，maven项目"></a>1.新建对象的项目和模块，maven项目</h2><ol><li>新建一个项目，移除原有的模块，新建一个空白的java模块!</li><li><img src="https://gitee.com/mikutown/pic/raw/master/img/20200430145004.png" loading="lazy"><a id="more"></a><h2 id="2-通过maven导入spring对应的jar包"><a href="#2-通过maven导入spring对应的jar包" class="headerlink" title="2.通过maven导入spring对应的jar包"></a>2.通过maven导入spring对应的jar包</h2></li><li>右键，add framework support 添加Maven支持，通过Maven导入spring对应的jar包：<pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.crud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ssm-crud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>4.3.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.version</span><span class="token punctuation">></span></span>3.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.spring.version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.spring.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">></span></span>1.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-dbcp.version</span><span class="token punctuation">></span></span>1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-dbcp.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jstl.version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jstl.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fastjson.version</span><span class="token punctuation">></span></span>1.2.45<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fastjson.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slf4j.version</span><span class="token punctuation">></span></span>1.7.25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slf4j.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jackson.version</span><span class="token punctuation">></span></span>2.8.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jackson.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-fileupload.version</span><span class="token punctuation">></span></span>1.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-fileupload.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-io.version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-io.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-codec.version</span><span class="token punctuation">></span></span>1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-codec.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aspectjweaver.version</span><span class="token punctuation">></span></span>1.8.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aspectjweaver.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- Junit测试 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;junit.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- spring包 core、web、oxm、tx、jdbc、webmvc、aop、context、test --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-oxm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context-support<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- mybatis核心包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;mybatis.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- mybatis  代码生成器 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-generator-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- mybatis/spring包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;mybatis.spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 导入Mysql数据库链接jar包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.45<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--  阿里巴巴   --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;druid.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 导入dbcp的jar包，用来在applicationContext.xml中配置数据库 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-dbcp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-dbcp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;commons-dbcp.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- JSTL标签类 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;jstl.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 日志文件管理包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;log4j.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--  &lt;dependency>              &lt;groupId>org.apache.logging.log4j&lt;/groupId>              &lt;artifactId>log4j-core&lt;/artifactId>              &lt;version>2.3&lt;/version>          &lt;/dependency>          &lt;dependency>              &lt;groupId>org.apache.logging.log4j&lt;/groupId>              &lt;artifactId>log4j-api&lt;/artifactId>              &lt;version>2.3&lt;/version>          &lt;/dependency>--></span>        <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-jsp-api --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.0.86<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 格式化对象，方便输出日志 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;fastjson.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;slf4j.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;slf4j.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- json和bean之间相互转换 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;jackson.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;jackson.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;jackson.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 上传组件包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;commons-fileupload.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;commons-io.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;commons-codec.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;aspectjweaver.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--能加载 java 文件夹中的资源文件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- Jetty 插件  --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.eclipse.jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jetty-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>9.4.8.v20171121<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scanIntervalSeconds</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scanIntervalSeconds</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>reload</span><span class="token punctuation">></span></span>automatic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>reload</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>httpConnector</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>8080<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>httpConnector</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stopKey</span><span class="token punctuation">></span></span>jettyStopKey1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stopKey</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stopPort</span><span class="token punctuation">></span></span>8520<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stopPort</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>webAppSourceDirectory</span><span class="token punctuation">></span></span>$&#123;basedir&#125;/web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>webAppSourceDirectory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- Tomcat 7 插件--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>8080<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>contextReloadable</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>contextReloadable</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>warSourceDirectory</span><span class="token punctuation">></span></span>$&#123;basedir&#125;/web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>warSourceDirectory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--  打war 的插件 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-war-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>warSourceDirectory</span><span class="token punctuation">></span></span>$&#123;basedir&#125;/web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>warSourceDirectory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 编译java 文件 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre>将以上代码的dependcy部分复制到pom.xml中的相应位置，静静等待包的下载完毕</li><li>复制java1.8的插件进入pom.xml<img src="https://gitee.com/mikutown/pic/raw/master/img/20200430145045.png" loading="lazy"></li><li>配置resource,这样可以让我们的xml文件在指定的路径可以被读取，被粘贴的位置在build和plugins之间（build&gt;resources=plugins)<pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><h2 id="3-新建实体对象类和测试类"><a href="#3-新建实体对象类和测试类" class="headerlink" title="3.新建实体对象类和测试类"></a>3.新建实体对象类和测试类</h2></li></ol><ul><li>创建javapackage，新建一个实体对象Student以及测试类<br>Student.java<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">String</span> stuNo<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//无参构造，全参构造，以及全参的get set 省略</span></code></pre>HelloWorldTest.java<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//运行成功，可以进行下一步</span></code></pre><h2 id="4-创建IOC容器"><a href="#4-创建IOC容器" class="headerlink" title="4.创建IOC容器"></a>4.创建IOC容器</h2></li></ul><ol><li>新建spring配置文件（spring-xxx.xml   或 applicationContext-xx.xml)<br>spring-beans.xml<pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 使用bean元素定义一个由IOC容器创建的对象 --></span>    <span class="token comment">&lt;!-- class属性指定用于创建bean的全类名 --></span>    <span class="token comment">&lt;!-- id属性指定用于引用bean实例的标识 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.helloworld.bean.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 使用property子元素为bean的属性赋值 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1001<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stuName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Tom2015<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>只复制这一些代码进去<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200430145106.png" loading="lazy"></li></ol><ul><li>Test.java<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">BeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring-beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></li><li>运行结果<pre class="language-none"><code class="language-none">log4j:WARN No appenders could be found for logger (org.springframework.core.env.StandardEnvironment).log4j:WARN Please initialize the log4j system properly.log4j:WARN See http:&#x2F;&#x2F;logging.apache.org&#x2F;log4j&#x2F;1.2&#x2F;faq.html#noconfig for more info.org.springframework.context.support.ClassPathXmlApplicationContext@66048bfd: startup date [Thu Nov 14 17:08:33 CST 2019]; root of context hierarchy</code></pre>上面的警告是因为日志我们还没有配置，下方打印出了我们的beanFactory对象</li><li>Test.java<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//        BeanFactory beanFactory = new ClassPathXmlApplicationContext("spring-beans.xml");</span><span class="token comment">//        System.out.println(beanFactory);</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"qwer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setStuNo</span><span class="token punctuation">(</span><span class="token string">"stu001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hkx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></li><li>运行结果<pre class="language-none"><code class="language-none">Student&#123;id&#x3D;&#39;qwer&#39;, name&#x3D;&#39;hkx&#39;, stuNo&#x3D;&#39;stu001&#39;&#125;</code></pre></li></ul><ol start="2"><li>使用BeanFactory</li></ol><ul><li>Test.java<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">BeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring-beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"s1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//此时使用BeanFactory对实体类Student进行生产，可是模板是什么呢？</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li>*此时要将spring-beans.xml进行完善，告诉BeanFactory模板是什么**</li></ul><ol start="3"><li>修改spring-beans.xml文件，在beans标签中添加以下代码<pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--name属性可以容纳诸如"/abc"这样的名称，但是id不可以，当id中的"s1"无法被找到时将寻找name中的值。--></span><span class="token comment">&lt;!--最好是能用id就不用name--></span><span class="token comment">&lt;!--id对应的是test类中getBean的参数--></span><span class="token comment">&lt;!--    &lt;bean id="s1" name="s1">&lt;/bean>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.leafii.springdemo.demo1helloworld.domain.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li>再次修改xml文件，增加一个Student类的对象student2</li></ol><ul><li>spring-beans.xml<pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.leafii.springdemo.demo1helloworld.domain.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AA<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yys<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--以上两种方式无差异--></span><span class="token comment">&lt;!--什么时候用以上的那种子标签呢？如果value里有很多很多很多文字就可以用这个方式了 增强代码的可读性--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stuNo<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stu007<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--注意在类中引用对象要用ref而不是value--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li>Test.java<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">BeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring-beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Student</span> student1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"s1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Student</span> student2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"s2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//此时使用BeanFactory对实体类Student进行生产，可是模板是什么呢？</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student1:"</span><span class="token operator">+</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student2:"</span><span class="token operator">+</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>运行结果（记得重写Student类的toString方法）<pre class="language-none"><code class="language-none">student1:Student&#123;id&#x3D;&#39;qwer&#39;, name&#x3D;&#39;hkx&#39;, stuNo&#x3D;&#39;stu001&#39;, student&#x3D;null&#125;student2:Student&#123;id&#x3D;&#39;AA&#39;, name&#x3D;&#39;yys&#39;, stuNo&#x3D;&#39;stu007&#39;, student&#x3D;Student&#123;id&#x3D;&#39;qwer&#39;, name&#x3D;&#39;hkx&#39;, stuNo&#x3D;&#39;stu001&#39;, student&#x3D;null&#125;&#125;</code></pre><h2 id="5-注入"><a href="#5-注入" class="headerlink" title="5.注入"></a>5.注入</h2></li></ul><ol><li>此时我们要想一下使用spring-beans.xml构造对象时，使用的是哪种方法，是按照参数的顺序直接进行构造方法，还是先new一个无参对象，再使用属性的set方法呢？</li><li>两种注入的方法:<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"idAAA"</span><span class="token punctuation">,</span><span class="token string">"hkx"</span><span class="token punctuation">,</span><span class="token string">"stu001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造注入</span><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"qwer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">setStuNo</span><span class="token punctuation">(</span><span class="token string">"stu001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hkx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//setter注入</span></code></pre></li><li>通过下图这样的测试，我们得知，使用spring-beans默认所使用的注入方法为setter注入<img src="https://gitee.com/mikutown/pic/raw/master/img/20200430145125.png" loading="lazy"></li><li>但是可以通过指定的方式设置使用构造注入进行注入<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200430145255.png" loading="lazy"></li></ol><p><strong>使用constructor-arg标签之后，不关注属性名，只关注该属性值在构造函数中的位置</strong><br>5. 此时我们放弃过时的BeanFactory,使用新的框架</p><ul><li>Test.java<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring-beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//      BeanFactory beanFactory = new ClassPathXmlApplicationContext("spring-beans.xml");</span><span class="token comment">//      Student student2 = (Student) beanFactory.getBean("s2");</span>        <span class="token class-name">Student</span> student3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"s3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li></ul><ol><li>新建对象的项目和模块，maven项目</li><li>通过maven导入spring对应的jar包</li><li>新建实体对象 类 和 测试类</li><li>创建IOC容器<br>4.1 新建spring配置文件（spring-xxx.xml 或 applicationContext-xx.xml）<br>4.2 写spring-xxx.xml<pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.leafii.springdemo.demo1helloworld.domain.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>qwer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hkx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--以上两种方式无差异--></span><span class="token comment">&lt;!--什么时候用以上的那种子标签呢？如果value里有很多很多很多文字就可以用这个方式了 增强代码的可读性--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stuNo<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stu001<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre>4.3 在实体类中添加“引用类型”的属性<br><code>&lt;property name=&quot;student&quot; ref=&quot;s1&quot;/&gt;</code><br>4.4 配置构造注入的方式<pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.leafii.springdemo.demo1helloworld.domain.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>idCCC<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yysssy<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stu003<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ol><hr><p>需要掌握以下几点：</p><ol><li>简单类型和引用类型的配置方式：value和ref</li><li>构造注入的方式</li><li>IOC容器的创建  <pre class="language-none"><code class="language-none">ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;spring-beans.xml&quot;);</code></pre></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Spring-IOC容器-の-HelloWorld&quot;&gt;&lt;a href=&quot;#Spring-IOC容器-の-HelloWorld&quot; class=&quot;headerlink&quot; title=&quot;Spring IOC容器 の HelloWorld&quot;&gt;&lt;/a&gt;Spring IOC容器 の HelloWorld&lt;/h1&gt;&lt;h2 id=&quot;1-新建对象的项目和模块，maven项目&quot;&gt;&lt;a href=&quot;#1-新建对象的项目和模块，maven项目&quot; class=&quot;headerlink&quot; title=&quot;1.新建对象的项目和模块，maven项目&quot;&gt;&lt;/a&gt;1.新建对象的项目和模块，maven项目&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;新建一个项目，移除原有的模块，新建一个空白的java模块!&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;https://gitee.com/mikutown/pic/raw/master/img/20200430145004.png&quot;&gt;</summary>
    
    
    
    
    <category term="Spring" scheme="https://mikutown.gitee.io/blog/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Springの超简略简介</title>
    <link href="https://mikutown.gitee.io/blog/2020/04/30/Spring%E3%81%AE%E8%B6%85%E7%AE%80%E7%95%A5%E7%AE%80%E4%BB%8B/"/>
    <id>https://mikutown.gitee.io/blog/2020/04/30/Spring%E3%81%AE%E8%B6%85%E7%AE%80%E7%95%A5%E7%AE%80%E4%BB%8B/</id>
    <published>2020-04-30T06:46:45.000Z</published>
    <updated>2021-01-02T20:10:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么要学Spring？"><a href="#为什么要学Spring？" class="headerlink" title="为什么要学Spring？"></a>为什么要学Spring？</h1><ul><li>现在主流的框架SSM</li></ul><a id="more"></a><h2 id="S-gt-Spring-IOC容器"><a href="#S-gt-Spring-IOC容器" class="headerlink" title="S-&gt;Spring IOC容器"></a>S-&gt;Spring IOC容器</h2><ul><li>从今天开始写项目再也不能用这种语句<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以后不能有这种 new 的语句了 基础类可以new，比如集合，字符串转码</span></code></pre>既然没法new 那么service怎么执行呢？<br>通过<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AutoWired</span>    <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span></code></pre>原来的new UserServiceImpl()就由Spring IOC替我们来完成<br>简单地说 Spring IOC 就是用来创建对象的（滑稽）</li></ul><h2 id="S-gt-Spring-mvc-分层"><a href="#S-gt-Spring-mvc-分层" class="headerlink" title="S-&gt;Spring mvc 分层"></a>S-&gt;Spring mvc 分层</h2><h2 id="M-gt-Mybatis-查数据库"><a href="#M-gt-Mybatis-查数据库" class="headerlink" title="M-&gt;Mybatis 查数据库"></a>M-&gt;Mybatis 查数据库</h2>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;为什么要学Spring？&quot;&gt;&lt;a href=&quot;#为什么要学Spring？&quot; class=&quot;headerlink&quot; title=&quot;为什么要学Spring？&quot;&gt;&lt;/a&gt;为什么要学Spring？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;现在主流的框架SSM&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Spring" scheme="https://mikutown.gitee.io/blog/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Mybatisの关联查询</title>
    <link href="https://mikutown.gitee.io/blog/2020/04/21/Mybatis%E3%81%AE%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2/"/>
    <id>https://mikutown.gitee.io/blog/2020/04/21/Mybatis%E3%81%AE%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2/</id>
    <published>2020-04-21T14:03:04.000Z</published>
    <updated>2021-01-02T20:21:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatisの关联查询"><a href="#Mybatisの关联查询" class="headerlink" title="Mybatisの关联查询"></a>Mybatisの关联查询</h1><h2 id="开始前的准备"><a href="#开始前的准备" class="headerlink" title="开始前的准备"></a>开始前的准备</h2><ul><li>数据库 <a id="more"></a><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> mybatisdemo<span class="token punctuation">;</span><span class="token keyword">create</span>  <span class="token keyword">database</span> mybatisdemo<span class="token punctuation">;</span><span class="token keyword">use</span> mybatisdemo<span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>employee<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>employee<span class="token punctuation">`</span><span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span>  <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span>  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'员工名称'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>employee<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>employee<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>employee<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>employee<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'王六'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>employee<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'王八'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>dept<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span>  <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span>  <span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span>  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'部门名称'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>dept<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'技术部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>dept<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'市场部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>dept<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'销售部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>emp_dept<span class="token punctuation">`</span><span class="token punctuation">(</span>  emp_id <span class="token keyword">int</span><span class="token punctuation">,</span>  dept_id <span class="token keyword">int</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>dept_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp_dept <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp_dept <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp_dept <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp_dept <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp_dept <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>先导入前三个表，第三个表数据先别insert</li><li>导入mybatis_guanlian_select1项目，此项目的代码都已经用generator生成好了：<a href="https://pan.baidu.com/s/1DoGVquuh1AX-gsXlyKt0ng">密码930b</a></li><li>要实现关联查询，必须要第三张表，表的内容是两个关联表的主键，否则会造成数据冗余<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200421215928.png" loading="lazy"><h2 id="一对一关联查询"><a href="#一对一关联查询" class="headerlink" title="一对一关联查询"></a>一对一关联查询</h2></li></ul><ol><li>生成的Employee实体类并没有关于部门的字段（因为原来的表没有部门的字段），所以我们现在要添加对应的部门字段<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Dept</span> dept<span class="token punctuation">;</span><span class="token comment">//对应的get set方法省略</span></code></pre></li><li>进入测试类<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> employeeMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span> e <span class="token operator">:</span>                employees<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Dept</span> dept <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"->"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dept<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">?</span>dept<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">"天堂"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre></li></ol><ul><li>运行结果<pre class="language-none"><code class="language-none">DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select id, name from employee DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 5张三-&gt;天堂李四-&gt;天堂王五-&gt;天堂王六-&gt;天堂王八-&gt;天堂</code></pre></li><li>*由此可知此方法无法select到dept对象！**</li></ul><ol start="3"><li>在before里设置自动提交<br><code>sqlSession = sqlSessionFactory.openSession(true);</code><br>（或者在after里编写自动提交代码）<br><code>sqlSession.commit()</code><br>（或者像这样编写）<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200421220048.png" loading="lazy"></li><li>新增一名employee，name为龙哥，发现需要使用左连接才能查询到龙哥的信息：<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee e <span class="token keyword">left</span> <span class="token keyword">join</span> emp_dept ed <span class="token keyword">on</span> e<span class="token punctuation">.</span>id<span class="token operator">=</span>ed<span class="token punctuation">.</span>emp_id<span class="token keyword">left</span> <span class="token keyword">join</span> dept d <span class="token keyword">on</span> d<span class="token punctuation">.</span>id<span class="token operator">=</span>ed<span class="token punctuation">.</span>dept_id<span class="token punctuation">;</span></code></pre></li></ol><ul><li>查询结果<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200421220006.png" loading="lazy"></li></ul><ol start="5"><li>此时发现查询的数据有我们不需要的，我们修改一下sql语句<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> e<span class="token punctuation">.</span>id<span class="token punctuation">,</span>e<span class="token punctuation">.</span>name<span class="token punctuation">,</span>dept_id<span class="token punctuation">,</span>d<span class="token punctuation">.</span>name <span class="token string">'dept_name'</span> <span class="token keyword">from</span> employee e <span class="token keyword">join</span> emp_dept ed <span class="token keyword">on</span> e<span class="token punctuation">.</span>id<span class="token operator">=</span>ed<span class="token punctuation">.</span>emp_id<span class="token keyword">join</span> dept d <span class="token keyword">on</span> d<span class="token punctuation">.</span>id<span class="token operator">=</span>ed<span class="token punctuation">.</span>dept_id<span class="token punctuation">;</span></code></pre></li></ol><ul><li>查询结果<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200421220020.png" loading="lazy"></li></ul><ol start="6"><li>编写一对一查询方法</li></ol><ul><li>初步Mapper.xml<pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   select   e.id,e.name,dept_id,d.name 'dept_name'   from employee e   join emp_dept ed   on e.id=ed.emp_id   join dept d   on d.id=ed.dept_id; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>此时发现映射的resultMap只有<img src="https://gitee.com/mikutown/pic/raw/master/img/20200421220034.png" loading="lazy"><br>因此我们需要改写resultMap</li></ul><p>=-=完整版=-=</p><ul><li>Mapper.java<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> <span class="token function">selectAllEmployeeWithDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>Mapper.xml<pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>net.suncaper.mybatisdemo.domain.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span>  <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--association是负责将Dept在一对一查询中关联起来--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAllEmployeeWithDept<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select    e.id,e.name,dept_id,d.name 'dept_name'    from employee e    left join emp_dept ed    on e.id=ed.emp_id    left join dept d    on d.id=ed.dept_id;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li>Test.java<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectAllEmployeeWithDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> employeeMapper<span class="token punctuation">.</span><span class="token function">selectAllEmployeeWithDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span> e <span class="token operator">:</span>                employees<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Dept</span> dept <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"->"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dept<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">?</span>dept<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">"天堂"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre></li><li>执行结果<pre class="language-none"><code class="language-none">DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select e.id,e.name,dept_id,d.name &#39;dept_name&#39; from employee e left join emp_dept ed on e.id&#x3D;ed.emp_id left join dept d on d.id&#x3D;ed.dept_id; DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 6张三-&gt;技术部李四-&gt;技术部王六-&gt;市场部王五-&gt;销售部王八-&gt;销售部龙哥-&gt;天堂</code></pre>最后把原来的baseResultMap复制一份，重新写一份新的，把原来添加到baseResultMap的代码都删掉<pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EmployeeWithDeptResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>net.suncaper.mybatisdemo.domain.Employee<span class="token punctuation">"</span></span> <span class="token attr-name">extends</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--注意这个extends！继承了BaseResultMap--></span><span class="token comment">&lt;!--就算继承了BaseResultMap，但是type是无法删除的，会导致编译无法通过--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span>  <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAllEmployeeWithDept<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EmployeeWithDeptResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select    e.id,e.name,dept_id,d.name 'dept_name'    from employee e    left join emp_dept ed    on e.id=ed.emp_id    left join dept d    on d.id=ed.dept_id;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="一对一延迟加载（引子）"><a href="#一对一延迟加载（引子）" class="headerlink" title="一对一延迟加载（引子）"></a>一对一延迟加载（引子）</h2></li></ul><ol><li>再次进行（开始前的准备中的导入项目）</li><li>这次我们不要关联层，重新写数据库<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> mybatisdemo<span class="token punctuation">;</span><span class="token keyword">create</span>  <span class="token keyword">database</span> mybatisdemo<span class="token punctuation">;</span><span class="token keyword">use</span> mybatisdemo<span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>employee<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>employee<span class="token punctuation">`</span><span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span>  <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span>  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'员工名称'</span><span class="token punctuation">,</span>  dept_id <span class="token keyword">int</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>employee<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>employee<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>employee<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>employee<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'王六'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>employee<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'王八'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>dept<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span>  <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span>  <span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span>  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'部门名称'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>dept<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'技术部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>dept<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'市场部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>dept<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'销售部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">update</span> employee <span class="token keyword">set</span> dept_id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">update</span> employee <span class="token keyword">set</span> dept_id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">update</span> employee <span class="token keyword">set</span> dept_id <span class="token operator">=</span> <span class="token number">3</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">update</span> employee <span class="token keyword">set</span> dept_id <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">update</span> employee <span class="token keyword">set</span> dept_id <span class="token operator">=</span> <span class="token number">3</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></code></pre></li><li>把导入项目里生成好的Mapper.java,Mapper.xml,都删掉，然后进行generator操作（注意把配置文件里的dept_emp table标签删除）</li><li>此时实验以下单表查询是否可以成功</li></ol><ul><li>Test.java<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> employeeMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span> e <span class="token operator">:</span>                employees<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"->"</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre></li><li>运行结果<pre class="language-none"><code class="language-none">DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select id, name, dept_id from employee DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 51:张三-&gt;12:李四-&gt;13:王五-&gt;34:王六-&gt;25:王八-&gt;3</code></pre></li></ul><ol start="5"><li>可是我们现在要查询的是人和部门名，因此要修改employee实体类，添加实体Dept dept在Employee类里</li></ol><p><strong>注意保留generator生成的成员变量</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Dept</span> dept<span class="token punctuation">;</span><span class="token comment">//get set方法省略</span></code></pre><ol start="6"><li>此时要想知道怎么查，先写sql语句<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee e <span class="token keyword">left</span> <span class="token keyword">join</span> dept d<span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id<span class="token operator">=</span>d<span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre></li></ol><ul><li>查询结果<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200421220135.png" loading="lazy"></li></ul><ol start="7"><li>现在我们想先查询出Employee表的dept_id,然后通过dept_id查询需要的类别名，再包装显示出来<br>EmpMapper.xml<pre class="language-xml" data-language="xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>net.suncaper.mybatisdemo.domain.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!--在查询到dept_id后进行第二次查找，调用deptMapper的selectByPrimaryKey进行查询dept的name操作，然后进行包装--></span><span class="token comment">&lt;!--property是查询到的映射，column是上一个查询的结果中的dept_id，select是调用DeptMapper中的方法所需要的写法，通过namespace映射到相应方法--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>net.suncaper.mybatisdemo.mapper.DeptMapper.selectByPrimaryKey<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre></li></ol><ul><li>Test.java<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> employeeMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span> e <span class="token operator">:</span>                employees<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Dept</span> dept <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-->"</span><span class="token operator">+</span>dept<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">?</span>dept<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre></li><li>结果<pre class="language-none"><code class="language-none">DEBUG [main] - &#x3D;&#x3D;&#x3D;&#x3D;&gt;  Preparing: select id, name from dept where id &#x3D; ? DEBUG [main] - &#x3D;&#x3D;&#x3D;&#x3D;&gt; Parameters: 2(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;&#x3D;&#x3D;      Total: 1DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 5技术部技术部销售部市场部销售部</code></pre>很明显，结果是不正确的，发现是因为没有用好()</li><li>Test.java<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> employeeMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span> e <span class="token operator">:</span>                employees<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Dept</span> dept <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-->"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dept<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">?</span>dept<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre></li><li>运行结果<pre class="language-none"><code class="language-none">DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select id, name, dept_id from employee DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: DEBUG [main] - &#x3D;&#x3D;&#x3D;&#x3D;&gt;  Preparing: select id, name from dept where id &#x3D; ? DEBUG [main] - &#x3D;&#x3D;&#x3D;&#x3D;&gt; Parameters: 1(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;&#x3D;&#x3D;      Total: 1DEBUG [main] - &#x3D;&#x3D;&#x3D;&#x3D;&gt;  Preparing: select id, name from dept where id &#x3D; ? DEBUG [main] - &#x3D;&#x3D;&#x3D;&#x3D;&gt; Parameters: 3(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;&#x3D;&#x3D;      Total: 1DEBUG [main] - &#x3D;&#x3D;&#x3D;&#x3D;&gt;  Preparing: select id, name from dept where id &#x3D; ? DEBUG [main] - &#x3D;&#x3D;&#x3D;&#x3D;&gt; Parameters: 2(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;&#x3D;&#x3D;      Total: 1DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 5张三--&gt;技术部李四--&gt;技术部王五--&gt;销售部王六--&gt;市场部王八--&gt;销售部</code></pre></li></ul><ol start="8"><li>根据查询结果我们可以知道，这种方法使用了大量的sql语句，因为缓存的缘故，共有4条语句，效率很低</li></ol><p><strong>为了提升这种写法的效率，我们引入延迟加载的概念。</strong></p><h2 id="一对一延迟加载（懒加载）"><a href="#一对一延迟加载（懒加载）" class="headerlink" title="一对一延迟加载（懒加载）"></a>一对一延迟加载（懒加载）</h2><p><strong>默认不是延迟加载</strong></p><ol><li>倘若我们将测试类的代码写为</li></ol><ul><li>Test.java<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> employeeMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span> e <span class="token operator">:</span>               employees<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span></code></pre></li><li>查询结果<pre class="language-none"><code class="language-none">DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select id, name, dept_id from employee DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: DEBUG [main] - &#x3D;&#x3D;&#x3D;&#x3D;&gt;  Preparing: select id, name from dept where id &#x3D; ? DEBUG [main] - &#x3D;&#x3D;&#x3D;&#x3D;&gt; Parameters: 1(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;&#x3D;&#x3D;      Total: 1DEBUG [main] - &#x3D;&#x3D;&#x3D;&#x3D;&gt;  Preparing: select id, name from dept where id &#x3D; ? DEBUG [main] - &#x3D;&#x3D;&#x3D;&#x3D;&gt; Parameters: 3(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;&#x3D;&#x3D;      Total: 1DEBUG [main] - &#x3D;&#x3D;&#x3D;&#x3D;&gt;  Preparing: select id, name from dept where id &#x3D; ? DEBUG [main] - &#x3D;&#x3D;&#x3D;&#x3D;&gt; Parameters: 2(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;&#x3D;&#x3D;      Total: 1DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 5张三李四王五王六王八</code></pre></li></ul><ol start="2"><li>依然使用了如此多的sql语句，在这里我们使用延迟加载,在EmployeeMapper.xml中的association标签中添加属性fetchType并设置值为lazy（此时就是延迟加载）</li></ol><ul><li>Mapper.xml<pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>net.suncaper.mybatisdemo.domain.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!--在查询到dept_id后进行第二次查找，调用deptMapper的selectByPrimaryKey进行查询dept的name操作，然后进行包装--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept_id<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>net.suncaper.mybatisdemo.mapper.DeptMapper.selectByPrimaryKey<span class="token punctuation">"</span></span> <span class="token attr-name">fetchType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazy<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre></li><li>此时执行test后结果为<pre class="language-none"><code class="language-none">DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select id, name, dept_id from employee DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 5张三李四王五王六王八</code></pre></li></ul><ol start="3"><li>此时延迟查询就成功了<h2 id="延迟加载例子"><a href="#延迟加载例子" class="headerlink" title="延迟加载例子"></a>延迟加载例子</h2></li></ol><ul><li>Test.java<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Employee</span> employee <span class="token operator">=</span> employeeMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></li><li>运行结果<pre class="language-none"><code class="language-none">DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select id, name, dept_id from employee where id &#x3D; ? DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: 3(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 1王五</code></pre></li><li>Test.java<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Employee</span> employee <span class="token operator">=</span> employeeMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li>执行结果<pre class="language-none"><code class="language-none">DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select id, name, dept_id from employee where id &#x3D; ? DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: 3(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 1王五DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select id, name from dept where id &#x3D; ? DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: 3(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 1销售部</code></pre></li><li>*可以体现出延迟加载，在需要的时候再执行查询**</li></ul><p><strong>可以在mybatis-config.xml中configuration标签下添加setting标签设置成如下代码可以实现全部懒加载</strong><br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200421220149.png" loading="lazy"></p><p>##一对多关联查询</p><ol><li>修改Dept实体类<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employeeList<span class="token punctuation">;</span><span class="token comment">//get set方法省略</span></code></pre></li></ol><ul><li>Test.java<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Dept</span> dept <span class="token operator">=</span> deptMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dept<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></li><li>运行结果<pre class="language-none"><code class="language-none">DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select id, name from dept where id &#x3D; ? DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: 2(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 1市场部</code></pre></li></ul><ol start="2"><li>目标sql语句<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> d<span class="token punctuation">.</span>id<span class="token punctuation">,</span>d<span class="token punctuation">.</span>name<span class="token punctuation">,</span>e<span class="token punctuation">.</span>id <span class="token string">'e_id'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>name <span class="token string">'e_name'</span> <span class="token keyword">from</span> dept d <span class="token keyword">join</span> employee e <span class="token keyword">on</span> d<span class="token punctuation">.</span>id<span class="token operator">=</span>e<span class="token punctuation">.</span>dept_id <span class="token keyword">where</span> d<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span></code></pre></li><li>Mapper.java<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Dept</span> <span class="token function">selectByPrimaryKeyWithEmp</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>Mapper.xml<pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap1<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>net.suncaper.mybatisdemo.domain.Dept<span class="token punctuation">"</span></span> <span class="token attr-name">extends</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--因为反射无法读取employeeListの具体的泛型，因此在collection中添加ofType属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>employeeList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>e_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>e_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByPrimaryKeyWithEmp<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select d.id,d.name,e.id 'e_id',e.name 'e_name'from dept djoin employee eon d.id=e.dept_idwhere d.id=#&#123;value&#125;;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li>Test.java<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">Dept</span> dept <span class="token operator">=</span> deptMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKeyWithEmp</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dept<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employeeList <span class="token operator">=</span> dept<span class="token punctuation">.</span><span class="token function">getEmployeeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>employeeList<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> employeeList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span> employee <span class="token operator">:</span> employeeList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span></code></pre></li><li>运行结果<pre class="language-none"><code class="language-none">DEBUG [main] - &#x3D;&#x3D;&gt;  Preparing: select d.id,d.name,e.id &#39;e_id&#39;,e.name &#39;e_name&#39; from dept d join employee e on d.id&#x3D;e.dept_id where d.id&#x3D;?; DEBUG [main] - &#x3D;&#x3D;&gt; Parameters: 3(Integer)DEBUG [main] - &lt;&#x3D;&#x3D;      Total: 2销售部----------------王五王八</code></pre></li></ol><p><strong>List，Set，数组都可以执行</strong></p><ul><li>如果以后做页面，没有数据是空的很丑怎么办<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>employeeList<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> employeeList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Mybatisの关联查询&quot;&gt;&lt;a href=&quot;#Mybatisの关联查询&quot; class=&quot;headerlink&quot; title=&quot;Mybatisの关联查询&quot;&gt;&lt;/a&gt;Mybatisの关联查询&lt;/h1&gt;&lt;h2 id=&quot;开始前的准备&quot;&gt;&lt;a href=&quot;#开始前的准备&quot; class=&quot;headerlink&quot; title=&quot;开始前的准备&quot;&gt;&lt;/a&gt;开始前的准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数据库</summary>
    
    
    
    
    <category term="Mybatis" scheme="https://mikutown.gitee.io/blog/tags/Mybatis/"/>
    
  </entry>
  
</feed>
