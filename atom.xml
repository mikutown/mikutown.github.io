<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LeafiiのBlog</title>
  
  
  <link href="https://mikutown.gitee.io/blog/atom.xml" rel="self"/>
  
  <link href="https://mikutown.gitee.io/blog/"/>
  <updated>2021-03-05T06:37:05.959Z</updated>
  <id>https://mikutown.gitee.io/blog/</id>
  
  <author>
    <name>Leafii</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IDEA2020版如何创建Servlet的javaWeb项目</title>
    <link href="https://mikutown.gitee.io/blog/2021/03/05/IDEA2020%E7%89%88%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BAServlet%E7%9A%84javaWeb%E9%A1%B9%E7%9B%AE/"/>
    <id>https://mikutown.gitee.io/blog/2021/03/05/IDEA2020%E7%89%88%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BAServlet%E7%9A%84javaWeb%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-03-05T05:01:33.000Z</published>
    <updated>2021-03-05T06:37:05.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA2020版如何创建Servlet的javaWeb项目"><a href="#IDEA2020版如何创建Servlet的javaWeb项目" class="headerlink" title="IDEA2020版如何创建Servlet的javaWeb项目"></a>IDEA2020版如何创建Servlet的javaWeb项目</h1><p>2020款idea很多地方都变了，昨天在创建javaweb项目中发现已经不会创建了，所以我写这篇笔记记录一下QAQ</p><a id="more"></a><h2 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h2><p>主要思路：先创建空白项目，然后添加框架支持。</p><ol><li>在idea中点击file-&gt;new-&gt;Project/Module；</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305130942414.png" alt="image-20210305130942414" loading="lazy"></p><ol start="2"><li>在选中Java的情况下，直接点击Next；</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305131038713.png" alt="image-20210305131038713" loading="lazy"></p><ol start="3"><li>然后再点击下一步；</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305131256081.png" alt="image-20210305131256081" loading="lazy"></p><ol start="4"><li>填写你的项目名称和位置，点击finish;</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305132524289.png" loading="lazy"></p><ol start="5"><li><p>此时的工程目录结构如下：，我们在工程的文件夹上鼠标右键-&gt;add FrameWork Support ；<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305132814052.png" alt="image-20210305132814052" loading="lazy"><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305132913337.png" alt="image-20210305132913337" loading="lazy"></p></li><li><p>在新的页面勾选Web Application，并点击OK；<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305133015818.png" alt="image-20210305133015818" loading="lazy"></p></li><li><p>在WEB-INF中增加 classes 和 lib<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305135513213.png" alt="image-20210305135513213" loading="lazy"></p></li><li><p>进入Project Structure配置classes和lib两个目录<img src="https://gitee.com/mikutown/pic/raw/master/img/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dhb3FpbmdsaWFuZzUyMQ==,size_16,color_FFFFFF,t_70.png" alt="img" loading="lazy"></p></li><li><p>添加TomCat到Idea中，点击AddConfiguration，点击新窗口左上角的+号，选择Tomcat下的local，配置好tomcat的路径，然后在deployment标签下添加你的项目的exploded包，点击OK;<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305134425503.png" alt="image-20210305134425503" loading="lazy"></p></li><li><p>配置ServletApi到工程的运行库里：点击File-&gt;Project Structure,点击Modules标签，点击下方的+号，选择Library…，然后选择你的相应的Tomcat，点击ok，就可以添加ServletApi到你的项目中。<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305133457558.png" alt="image-20210305133457558" loading="lazy"></p></li><li><p>新建一个Servlet类，这个就不截图了奥直接上代码</p></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了Servlet哦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="12"><li>对应的web.xml文件</li></ol><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>top.leafii.servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><ol start="13"><li>调用了HelloServlet后<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305143055419.png" alt="image-20210305143055419" loading="lazy"></li></ol><p>可以看到 已经完成了 可以开始你的javaWeb之旅了</p><hr><p>参考链接：<a href="https://blog.csdn.net/gaoqingliang521/article/details/108677301">IntelliJ IDEA创建Servlet最新方法 Idea版本2020.2.2以及IntelliJ IDEA创建Servlet 404问题（超详细）_gaoqingliang521的专栏-CSDN博客</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;IDEA2020版如何创建Servlet的javaWeb项目&quot;&gt;&lt;a href=&quot;#IDEA2020版如何创建Servlet的javaWeb项目&quot; class=&quot;headerlink&quot; title=&quot;IDEA2020版如何创建Servlet的javaWeb项目&quot;&gt;&lt;/a&gt;IDEA2020版如何创建Servlet的javaWeb项目&lt;/h1&gt;&lt;p&gt;2020款idea很多地方都变了，昨天在创建javaweb项目中发现已经不会创建了，所以我写这篇笔记记录一下QAQ&lt;/p&gt;</summary>
    
    
    
    
    <category term="javaWeb" scheme="https://mikutown.gitee.io/blog/tags/javaWeb/"/>
    
  </entry>
  
  <entry>
    <title>常用正则表达式</title>
    <link href="https://mikutown.gitee.io/blog/2021/03/03/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://mikutown.gitee.io/blog/2021/03/03/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-03-03T08:49:47.000Z</published>
    <updated>2021-03-03T16:53:49.423Z</updated>
    
    <content type="html"><![CDATA[<p>很多不太懂正则的朋友，在遇到需要用正则校验数据时，往往是在网上去找很久，结果找来的还是不很符合要求。所以我最近把开发中常用的一些正则表达式整理了一下，在这里分享一下。给自己留个底，也给朋友们做个参考。</p><a id="more"></a><h2 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h2><pre class="language-none"><code class="language-none">1. 数字：^[0-9]*$2. n位的数字：^\d&#123;n&#125;$3. 至少n位的数字：^\d&#123;n,&#125;$4. m-n位的数字：^\d&#123;m,n&#125;$5. 零和非零开头的数字：^(0|[1-9][0-9]*)$6. 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$7. 带1-2位小数的正数或负数：^(\-)?\d+(\.\d&#123;1,2&#125;)?$8. 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$9. 有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$10. 有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$11. 非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\+?[1-9][0-9]*$12. 非零的负整数：^\-[1-9][]0-9&quot;*$ 或 ^-[1-9]\d*$13. 非负整数：^\d+$ 或 ^[1-9]\d*|0$14. 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$15. 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$16. 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$17. 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$18. 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$19. 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></pre><h2 id="二、校验字符的表达式"><a href="#二、校验字符的表达式" class="headerlink" title="二、校验字符的表达式"></a>二、校验字符的表达式</h2> <pre class="language-none"><code class="language-none">1. 汉字：^[\u4e00-\u9fa5]&#123;0,&#125;$2. 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$3. 长度为3-20的所有字符：^.&#123;3,20&#125;$4. 由26个英文字母组成的字符串：^[A-Za-z]+$5. 由26个大写英文字母组成的字符串：^[A-Z]+$6. 由26个小写英文字母组成的字符串：^[a-z]+$7. 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$8. 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;3,20&#125;$9. 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$10. 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;$11. 可以输入含有^%&amp;&#39;,;&#x3D;?$\&quot;等字符：[^%&amp;&#39;,;&#x3D;?$\x22]+ 12. 禁止输入含有~的字符：[^~\x22]+</code></pre><h2 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h2> <pre class="language-none"><code class="language-none">1. Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$2. 域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(&#x2F;.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+&#x2F;.?3. InternetURL：[a-zA-z]+:&#x2F;&#x2F;[^\s]* 或 ^http:&#x2F;&#x2F;([\w-]+\.)+[\w-]+(&#x2F;[\w-.&#x2F;?%&amp;&#x3D;]*)?$4. 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$5. 电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$6. 国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;7. 身份证号(15位、18位数字)：^\d&#123;15&#125;|\d&#123;18&#125;$ 8. 短身份证号码(数字、字母x结尾)：^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$ 9. 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$ 10. 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$11. 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?&#x3D;.*\d)(?&#x3D;.*[a-z])(?&#x3D;.*[A-Z]).&#123;8,10&#125;$ 12. 日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;13. 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$14. 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$15. 钱的输入格式： 16. 1.有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^[1-9][0-9]*$ 17. 2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ 18. 3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ 19. 4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ 20. 5.必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$ 21. 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$ 22. 7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$ 23 8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$ 24. 备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里 25. xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$26. 中文字符的正则表达式：[\u4e00-\u9fa5] 27. 双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1)) 28. 空白行的正则表达式：\n\s*\r (可以用来删除空白行) 29. HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;&#x2F;\1&gt;|&lt;.*? &#x2F;&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力) 30. 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式) 31. 腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始)32. 中国邮政编码：[1-9]\d&#123;5&#125;(?!\d) (中国邮政编码为6位数字)33. IP地址：\d+\.\d+\.\d+\.\d+ (提取IP地址时有用)34. IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</code></pre><hr><p>原文：<a href="http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html">http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;很多不太懂正则的朋友，在遇到需要用正则校验数据时，往往是在网上去找很久，结果找来的还是不很符合要求。所以我最近把开发中常用的一些正则表达式整理了一下，在这里分享一下。给自己留个底，也给朋友们做个参考。&lt;/p&gt;</summary>
    
    
    
    
    <category term="正则表达式" scheme="https://mikutown.gitee.io/blog/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-36-Stack源码分析与改进-(1.3.7-1.3.8)</title>
    <link href="https://mikutown.gitee.io/blog/2021/02/10/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-36-Stack%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8E%E6%94%B9%E8%BF%9B-(1.3.7-1.3.8)/"/>
    <id>https://mikutown.gitee.io/blog/2021/02/10/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-36-Stack%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8E%E6%94%B9%E8%BF%9B-(1.3.7-1.3.8)/</id>
    <published>2021-02-10T05:38:47.000Z</published>
    <updated>2021-02-10T10:11:50.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-36-Stack源码分析与改进-1-3-7-1-3-8"><a href="#算法练习-36-Stack源码分析与改进-1-3-7-1-3-8" class="headerlink" title="算法练习-36-Stack源码分析与改进-(1.3.7-1.3.8)"></a>算法练习-36-Stack源码分析与改进-(1.3.7-1.3.8)</h1><ul><li>知识点<ul><li>Stack源码分析</li></ul></li></ul><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>1.3.7 为Stack添加一个方法peek()，返回栈中最近添加的元素（而不是弹出）。</strong></p><hr><p><strong>1.3.7 Add a method peek() to Stack that returns the most recently inserted item on the stack (without popping it).</strong></p><ul><li><p>分析</p><p>栈的API图如下：<img src="https://gitee.com/mikutown/pic/raw/master/img/03d48fa9bcc1f5dd2ffa8acbf098454e.png" alt="img" loading="lazy"></p></li></ul><p>栈的源码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">></span></span> first<span class="token punctuation">;</span>     <span class="token comment">// top of stack</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>                <span class="token comment">// size of the stack</span>    <span class="token comment">// helper linked list class</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Item</span> item<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Initializes an empty stack.     */</span>    <span class="token keyword">public</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        first <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns true if this stack is empty.     *     * @return true if this stack is empty; false otherwise     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> first <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the number of items in this stack.     *     * @return the number of items in this stack     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Adds the item to this stack.     *     * @param  item the item to add     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Item</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">></span></span> oldfirst <span class="token operator">=</span> first<span class="token punctuation">;</span>        first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        first<span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>        first<span class="token punctuation">.</span>next <span class="token operator">=</span> oldfirst<span class="token punctuation">;</span>        n<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Removes and returns the item most recently added to this stack.     *     * @return the item most recently added     * @throws NoSuchElementException if this stack is empty     */</span>    <span class="token keyword">public</span> <span class="token class-name">Item</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token string">"Stack underflow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Item</span> item <span class="token operator">=</span> first<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token comment">// save item to return</span>        first <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment">// delete first node</span>        n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> item<span class="token punctuation">;</span>                   <span class="token comment">// return the saved item</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns (but does not remove) the item most recently added to this stack.     *     * @return the item most recently added to this stack     * @throws NoSuchElementException if this stack is empty     */</span>    <span class="token keyword">public</span> <span class="token class-name">Item</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token string">"Stack underflow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> first<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns a string representation of this stack.     *     * @return the sequence of items in this stack in LIFO order, separated by spaces     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Item</span> item <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>           <span class="token comment">/**     * Returns an iterator to this stack that iterates through the items in LIFO order.     *     * @return an iterator to this stack that iterates through the items in LIFO order     */</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">></span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LinkedIterator</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// an iterator, doesn't implement remove() since it's optional</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">LinkedIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">></span></span> current<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">LinkedIterator</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">></span></span> first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            current <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> current <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Item</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Item</span> item <span class="token operator">=</span> current<span class="token punctuation">.</span>item<span class="token punctuation">;</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>             <span class="token keyword">return</span> item<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Unit tests the &#123;@code Stack&#125; data type.     *     * @param args the command-line arguments     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> item <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" left on stack)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>因此peek方法代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Item</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token string">"Stack underflow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> first<span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p><strong>1.3.8 给定以下输入，给出DoublingStackOfStrings的数组的内容和大小</strong></p><p><code>it was - the best - of times - - - it was - the - -</code></p><ul><li><p>分析</p><p>由题目可知，DoublingStackOfStrings应该是那个可以动态调整数组大小的栈的实现形式，故有如下答案：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">ResizingArrayStack</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdIn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Prac010308</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DoublingStackOfStrings</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">N</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">N</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">Arraysize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            a <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">==</span> a<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> string <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token operator">--</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">N</span> <span class="token operator">==</span> a<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span>                <span class="token function">resize</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> string<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                string <span class="token operator">+=</span> <span class="token string">" "</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> string<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DoublingStackOfStrings</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoublingStackOfStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> item <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">") left on stack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大小为："</span> <span class="token operator">+</span> <span class="token class-name"><span class="token namespace">stack<span class="token punctuation">.</span></span>Arraysize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>运行效果</li></ul><pre class="language-none"><code class="language-none">it was - the best - of times - - - it was - the - -(1) left on stack  it大小为：1(2) left on stack  it was大小为：2was (1) left on stack  it大小为：2(2) left on stack  it the大小为：2(3) left on stack  it the best大小为：4best (2) left on stack  it the大小为：4(3) left on stack  it the of大小为：4(4) left on stack  it the of times大小为：4times (3) left on stack  it the of大小为：4of (2) left on stack  it the大小为：4the (1) left on stack  it大小为：2(2) left on stack  it it大小为：2(3) left on stack  it it was大小为：4was (2) left on stack  it it大小为：4(3) left on stack  it it the大小为：4the (2) left on stack  it it大小为：4it (1) left on stack  it大小为：2</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-36-Stack源码分析与改进-1-3-7-1-3-8&quot;&gt;&lt;a href=&quot;#算法练习-36-Stack源码分析与改进-1-3-7-1-3-8&quot; class=&quot;headerlink&quot; title=&quot;算法练习-36-Stack源码分析与改进-(1.3.7-1.3.8)&quot;&gt;&lt;/a&gt;算法练习-36-Stack源码分析与改进-(1.3.7-1.3.8)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;Stack源码分析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-35-Stack应用之逆序输出-(1.3.6)</title>
    <link href="https://mikutown.gitee.io/blog/2021/02/08/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-35-Stack%E5%BA%94%E7%94%A8%E4%B9%8B%E9%80%86%E5%BA%8F%E8%BE%93%E5%87%BA-(1.3.6)/"/>
    <id>https://mikutown.gitee.io/blog/2021/02/08/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-35-Stack%E5%BA%94%E7%94%A8%E4%B9%8B%E9%80%86%E5%BA%8F%E8%BE%93%E5%87%BA-(1.3.6)/</id>
    <published>2021-02-08T05:45:13.000Z</published>
    <updated>2021-02-08T06:00:31.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-35-Stack应用之逆序输出-1-3-6"><a href="#算法练习-35-Stack应用之逆序输出-1-3-6" class="headerlink" title="算法练习-35-Stack应用之逆序输出-(1.3.6)"></a>算法练习-35-Stack应用之逆序输出-(1.3.6)</h1><ul><li>知识点    <ul><li>Queue逆序</li></ul></li></ul><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>1.3.6 下面这段代码对队列q进行了什么操作？</strong></p><hr><p><strong>1.3.6 What does the following code fragment do to the queue q?</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//q.dequeue():删除最早添加的元素</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//q.enqueue():添加一个元素</span></code></pre><ul><li><p>分析&amp;答案</p><p>队列是先进先出，当队列不为空时，将队列最早添加的元素出队，并将这个元素入栈，直到队列为空为止，此时栈中的元素就是队列中的所有的元素，栈底的元素就是队列最先出队的元素（也是最先入队的元素），于是当上一个while循环结束后，当栈不为空时，将栈顶的元素出栈，并且入队，此时队首的元素就是当初最后一个入队的元素，以此类推，到最后栈为空时，队列中的元素的先后顺序与刚开始的时候相反，即逆序输出了队列元素。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-35-Stack应用之逆序输出-1-3-6&quot;&gt;&lt;a href=&quot;#算法练习-35-Stack应用之逆序输出-1-3-6&quot; class=&quot;headerlink&quot; title=&quot;算法练习-35-Stack应用之逆序输出-(1.3.6)&quot;&gt;&lt;/a&gt;算法练习-35-Stack应用之逆序输出-(1.3.6)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点    &lt;ul&gt;
&lt;li&gt;Queue逆序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-34-Stack运用之进制转换-(1.3.5)</title>
    <link href="https://mikutown.gitee.io/blog/2021/02/08/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-34-Stack%E8%BF%90%E7%94%A8%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2-(1.3.5)/"/>
    <id>https://mikutown.gitee.io/blog/2021/02/08/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-34-Stack%E8%BF%90%E7%94%A8%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2-(1.3.5)/</id>
    <published>2021-02-08T05:13:33.000Z</published>
    <updated>2021-02-08T05:43:48.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-34-Stack运用之进制转换-1-3-5"><a href="#算法练习-34-Stack运用之进制转换-1-3-5" class="headerlink" title="算法练习-34-Stack运用之进制转换-(1.3.5)"></a>算法练习-34-Stack运用之进制转换-(1.3.5)</h1><ul><li>知识点<ul><li>二进制的Stack表示</li></ul></li></ul><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>1.3.5 当N为50时下面这段代码会打印什么？从较高的抽象层次描述给定正整数N时这段代码的行为。</strong></p><hr><p><strong>1.3.5 What does the following code fragment print when N is 50? Give a high-level description of what it does when presented with a positive integer N.</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> d <span class="token operator">:</span> stack<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>测试代码</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">Stack</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Prac1_3_5</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sssout</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> d <span class="token operator">:</span> stack<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token function">sssout</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>输出结果</li></ul><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210208133332655.png" alt="image-20210208133332655" loading="lazy"></p><ul><li><p>分析</p><blockquote><p>input：n = 50         push(50%2=0)</p><p>n=50/2=25    push(25%2=1)</p><p>n=25/2=12    push(12%2=0)</p><p>n=12/2=6    push(6%2=0)</p><p>n=6/2=3    push(3%2=1)</p><p>n=3/2=1    push(1%2=1)</p><p>n=1/2=0    over</p></blockquote><p>此时的栈：<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210208134228891.png" alt="image-20210208134228891" loading="lazy"></p><p>代码的for循环就是 依次pop出stack中的所有Integer值，故输出110010，即50的二进制数字。</p></li></ul><hr><p>参考链接：<a href="https://blog.csdn.net/furzoom/article/details/52691405">https://blog.csdn.net/furzoom/article/details/52691405</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-34-Stack运用之进制转换-1-3-5&quot;&gt;&lt;a href=&quot;#算法练习-34-Stack运用之进制转换-1-3-5&quot; class=&quot;headerlink&quot; title=&quot;算法练习-34-Stack运用之进制转换-(1.3.5)&quot;&gt;&lt;/a&gt;算法练习-34-Stack运用之进制转换-(1.3.5)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;二进制的Stack表示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-33-栈作用之检查括号是否配对完整-(1.3.3-1.3.4)</title>
    <link href="https://mikutown.gitee.io/blog/2021/02/06/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-33-%E6%A0%88%E4%BD%9C%E7%94%A8%E4%B9%8B%E6%A3%80%E6%9F%A5%E6%8B%AC%E5%8F%B7%E6%98%AF%E5%90%A6%E9%85%8D%E5%AF%B9%E5%AE%8C%E6%95%B4-(1.3.3-1.3.4)/"/>
    <id>https://mikutown.gitee.io/blog/2021/02/06/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-33-%E6%A0%88%E4%BD%9C%E7%94%A8%E4%B9%8B%E6%A3%80%E6%9F%A5%E6%8B%AC%E5%8F%B7%E6%98%AF%E5%90%A6%E9%85%8D%E5%AF%B9%E5%AE%8C%E6%95%B4-(1.3.3-1.3.4)/</id>
    <published>2021-02-06T04:37:08.000Z</published>
    <updated>2021-02-06T06:41:46.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-33-栈作用之检查括号是否配对完整-1-3-3-1-3-4"><a href="#算法练习-33-栈作用之检查括号是否配对完整-1-3-3-1-3-4" class="headerlink" title="算法练习-33-栈作用之检查括号是否配对完整-(1.3.3-1.3.4)"></a>算法练习-33-栈作用之检查括号是否配对完整-(1.3.3-1.3.4)</h1><blockquote><p>知识点</p><ul><li>Stack的性质</li><li>双栈表达式</li></ul></blockquote><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>1.3.3 假设某个用例程序会进行一系列入栈和出栈操作。入栈操作会将整数0到9按顺序压入栈；出栈操作会打印返回值。下面哪种顺序是不可能产生的？</strong></p><hr><p><strong>1.3.3 Suppose that a client performs an intermixed sequence of (stack) push and pop operations. The push operations put the integers 0 through 9 in order onto the stack; the pop operations print out the return values. Which of the following sequence(s) could not occur?</strong></p><pre class="language-none"><code class="language-none">(a) 4 3 2 1 0 9 8 7 6 5(b) 4 6 8 7 5 3 2 9 0 1(c) 2 5 6 7 4 8 9 3 1 0(d) 4 3 2 1 0 5 6 7 8 9(e) 1 2 3 4 5 6 9 8 7 0(f) 0 4 6 5 3 8 1 7 2 9(g) 1 4 7 9 8 6 5 3 0 2(h) 2 1 4 3 6 5 8 7 9 0</code></pre><ul><li><p>分析</p><p>要解答这个问题，我们可以通过归纳法：<br>（1）如果入栈操作会将整数0到1按顺序压入栈，那可能打印的值为<br>“0”<br>“0”，”1”<br>“1”<br>（2）如果入栈操作会将整数0到2按顺序压入栈，那可能打印的值为<br>“0”<br>“1”<br>“0”，”1”<br>“0”，”1”，”2”<br>“2”，”1”，”0”<br>“1”<br>“2”</p><p>…<br>以此类推<br>可以发现，不管怎么样打印出来的数都是“小中大”，或者“大中小”，不会出现“大小中”。比如0-2的时候不会出现<br>“2”，”0”，”1”</p><p>因此，<strong>b,f,g</strong>是不能产生的。</p></li></ul><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>  <strong>1.3.4 编写一个Stack的用例Parentheses,从标准输入中读取一个文本流并使用栈判定其中的括号是否配对完整.例如[()]{}{[()]}为true,对于[(])程序则打印false。</strong></p><hr><p>  <strong>1.3.4 Write a stack client Parentheses that reads in a text stream from standard input and uses a stack to determine whether its parentheses are properly balanced. For example, your program should print true for [()]{}{[()()] ( )} and false for [(]).</strong></p><blockquote><p>思路：遇到左括号就入栈，遇到右括号就检查是否和栈顶的左括号匹配，如果匹配则弹栈，否则返回 false。结束时如果栈不为空则返回 false，否则返回 true</p></blockquote><ul><li>答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">Stack</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Parentheses</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span> LEFT_PAREN <span class="token operator">=</span> <span class="token string">'('</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span> RIGHT_PAREN <span class="token operator">=</span> <span class="token string">')'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span> LEFT_BRACE <span class="token operator">=</span> <span class="token string">'&#123;'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span> RIGHT_BRACE <span class="token operator">=</span> <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span> LEFT_BRACKET <span class="token operator">=</span> <span class="token string">'['</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span> RIGHT_BRACKET <span class="token operator">=</span> <span class="token string">']'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> LEFT_PAREN <span class="token operator">||</span> c <span class="token operator">==</span> LEFT_BRACE <span class="token operator">||</span> c <span class="token operator">==</span> LEFT_BRACKET<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">==</span> RIGHT_PAREN <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> LEFT_PAREN<span class="token punctuation">)</span>                   <span class="token operator">||</span><span class="token punctuation">(</span>c <span class="token operator">==</span> RIGHT_BRACE <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> LEFT_BRACE<span class="token punctuation">)</span>                   <span class="token operator">||</span><span class="token punctuation">(</span>c <span class="token operator">==</span> RIGHT_BRACKET <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> LEFT_BRACKET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入exit退出程序..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> input <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"exit"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序即将退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"your input:"</span> <span class="token operator">+</span> input <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">isBalanced</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>运行结果</li></ul><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210206144129516.png" alt="image-20210206144129516" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-33-栈作用之检查括号是否配对完整-1-3-3-1-3-4&quot;&gt;&lt;a href=&quot;#算法练习-33-栈作用之检查括号是否配对完整-1-3-3-1-3-4&quot; class=&quot;headerlink&quot; title=&quot;算法练习-33-栈作用之检查括号是否配对完整-(1.3.3-1.3.4)&quot;&gt;&lt;/a&gt;算法练习-33-栈作用之检查括号是否配对完整-(1.3.3-1.3.4)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;知识点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stack的性质&lt;/li&gt;
&lt;li&gt;双栈表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-32-定容栈的实现-(1.3.1-1.3.2)</title>
    <link href="https://mikutown.gitee.io/blog/2021/02/06/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-32-%E5%AE%9A%E5%AE%B9%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0-(1.3.1-1.3.2)/"/>
    <id>https://mikutown.gitee.io/blog/2021/02/06/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-32-%E5%AE%9A%E5%AE%B9%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0-(1.3.1-1.3.2)/</id>
    <published>2021-02-05T18:46:13.000Z</published>
    <updated>2021-02-05T20:22:51.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-32-定容栈的实现-1-3-1-1-3-2"><a href="#算法练习-32-定容栈的实现-1-3-1-1-3-2" class="headerlink" title="算法练习-32-定容栈的实现-(1.3.1-1.3.2)"></a>算法练习-32-定容栈的实现-(1.3.1-1.3.2)</h1><ul><li>知识点<ul><li>Stack概念</li><li>Stack类设计</li></ul></li></ul><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>1.3.1 为FixedCapacityStackOfStrings添加一个方法isFull()。</strong></p><hr><p><strong>1.3.1 Add a method isFull() to FixedCapacityStackOfStrings.</strong></p><ul><li>分析</li></ul><p>栈的API图如下：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/2eef54a15a44094e561ba3258d974033.png" alt="img" loading="lazy"></p><p>书中先介绍了FixedCapacityStackOfStrings（定容栈），其API图如下：<br><img src="https://gitee.com/mikutown/pic/raw/master/img/4095d6a4a65769a1540153b3d8f8d854.png" alt="FixedCapacityStackOfStrings API" loading="lazy"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//1.3.1 为FixedCapacityStackOfStrings添加一个方法isFull()。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FixedCapacityStackOfStrings</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span> <span class="token comment">// stack entries</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">;</span> <span class="token comment">// size</span>    <span class="token keyword">public</span> <span class="token class-name">FixedCapacityStackOfStrings</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>cap<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token class-name">N</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token class-name">N</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">String</span> item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        a<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token operator">--</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">N</span> <span class="token operator">==</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p><strong>1.3.2给定以下输入，java Stack的输出是什么?<br><code>it was - the best -of times - - - it was - the - -</code></strong></p><p>栈是先进后出，遇到-就出栈，所以输出是</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210206034907935.png" alt="image-20210206034907935" loading="lazy"></p><p>所以答案是· was best times of the was the it·</p><p>代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdIn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FixedCapacityStackOfStrings</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span> <span class="token comment">// stack entries</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">;</span> <span class="token comment">// size</span>    <span class="token keyword">public</span> <span class="token class-name">FixedCapacityStackOfStrings</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>cap<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token class-name">N</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token class-name">N</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">String</span> item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        a<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token operator">--</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">N</span> <span class="token operator">==</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FixedCapacityStackOfStrings</span> s<span class="token punctuation">;</span>        s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FixedCapacityStackOfStrings</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> item <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" left on stack)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210206041826619.png" alt="image-20210206041826619" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-32-定容栈的实现-1-3-1-1-3-2&quot;&gt;&lt;a href=&quot;#算法练习-32-定容栈的实现-1-3-1-1-3-2&quot; class=&quot;headerlink&quot; title=&quot;算法练习-32-定容栈的实现-(1.3.1-1.3.2)&quot;&gt;&lt;/a&gt;算法练习-32-定容栈的实现-(1.3.1-1.3.2)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;Stack概念&lt;/li&gt;
&lt;li&gt;Stack类设计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-31-如何计算方差标准差-(1.2.18-1.2.19)</title>
    <link href="https://mikutown.gitee.io/blog/2021/02/04/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-31-%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%E6%96%B9%E5%B7%AE%E6%A0%87%E5%87%86%E5%B7%AE-(1.2.18-1.2.19)/"/>
    <id>https://mikutown.gitee.io/blog/2021/02/04/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-31-%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%E6%96%B9%E5%B7%AE%E6%A0%87%E5%87%86%E5%B7%AE-(1.2.18-1.2.19)/</id>
    <published>2021-02-04T06:23:40.000Z</published>
    <updated>2021-02-04T07:29:54.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-31-如何计算方差标准差-1-2-18-1-2-19"><a href="#算法练习-31-如何计算方差标准差-1-2-18-1-2-19" class="headerlink" title="算法练习-31-如何计算方差标准差-(1.2.18-1.2.19)"></a>算法练习-31-如何计算方差标准差-(1.2.18-1.2.19)</h1><ul><li>知识点<ul><li>方差</li><li>标准差</li></ul></li></ul><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>1.2.18 累加器的方差。以下代码为Accumulator类添加var()和stddev()方法，它们计算了addDataValue()方法的参数的方差和标准差，验证这段代码。</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Accumulator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> m<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> s<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDataValue</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token class-name">N</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token class-name">N</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">mean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> m<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token keyword">var</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> s<span class="token operator">/</span><span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">stddev</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">var</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>分析</p><p>本书1.2.4.3节介绍了累加器，它的定义如下：</p><pre class="language-none"><code class="language-none">一种能够为用例计算一组数据的实时平均值的抽象数据类型</code></pre><p><img src="https://gitee.com/mikutown/pic/raw/master/img/7c4548274b7bc2164387a0322b904947.png" alt="img" loading="lazy"></p></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Accumalator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> total<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDataValue</span><span class="token punctuation">(</span><span class="token keyword">double</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">;</span>        total <span class="token operator">+=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">mean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> total <span class="token operator">/</span> <span class="token class-name">N</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Mean("</span> <span class="token operator">+</span> <span class="token class-name">N</span> <span class="token operator">+</span> <span class="token string">" values):"</span> <span class="token operator">+</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%7.5f"</span><span class="token punctuation">,</span><span class="token function">mean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>验证代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Accumulator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> m<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> s<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDataValue</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token class-name">N</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token class-name">N</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">mean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> m<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token keyword">var</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> s<span class="token operator">/</span><span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">stddev</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">var</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Accumulator&#123;"</span> <span class="token operator">+</span>                <span class="token string">"m="</span> <span class="token operator">+</span> m <span class="token operator">+</span>                <span class="token string">", s="</span> <span class="token operator">+</span> s <span class="token operator">+</span>                <span class="token string">", N="</span> <span class="token operator">+</span> <span class="token class-name">N</span> <span class="token operator">+</span>                <span class="token string">", stddev="</span> <span class="token operator">+</span> <span class="token function">stddev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">", var="</span> <span class="token operator">+</span> <span class="token keyword">var</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Accumulator</span> acc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Accumulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        acc<span class="token punctuation">.</span><span class="token function">addDataValue</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        acc<span class="token punctuation">.</span><span class="token function">addDataValue</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        acc<span class="token punctuation">.</span><span class="token function">addDataValue</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        acc<span class="token punctuation">.</span><span class="token function">addDataValue</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p><strong>1.2.19 字符串解析。为你在练习1.2.13中实现的Date和Transaction类型编写能够解析字符串数据的构造函数。他接受一个String参数指定的初始值，格式如表1.2.20所示：</strong></p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/1106975_1536320997.png" alt="img" loading="lazy"></p><ul><li>主要采用正则表达式来做</li></ul><p>Date：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">String</span> date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        month <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        day   <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        year  <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValid</span><span class="token punctuation">(</span>month<span class="token punctuation">,</span> day<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Invalid date"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>Transaction:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span><span class="token class-name">String</span> transaction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         who    <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        when   <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        amount <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><hr><p>参考链接：<a href="https://zhangjia.io/935.html">《算法第四版》课后练习题1.2.19答案 | 张甲博客 (zhangjia.io)</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-31-如何计算方差标准差-1-2-18-1-2-19&quot;&gt;&lt;a href=&quot;#算法练习-31-如何计算方差标准差-1-2-18-1-2-19&quot; class=&quot;headerlink&quot; title=&quot;算法练习-31-如何计算方差标准差-(1.2.18-1.2.19)&quot;&gt;&lt;/a&gt;算法练习-31-如何计算方差标准差-(1.2.18-1.2.19)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;方差&lt;/li&gt;
&lt;li&gt;标准差&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-30-小试牛刀（二）：有理数类的设计-(1.2.15-1.2.17)</title>
    <link href="https://mikutown.gitee.io/blog/2021/02/04/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-30-%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%9C%89%E7%90%86%E6%95%B0%E7%B1%BB%E7%9A%84%E8%AE%BE%E8%AE%A1-(1.2.15-1.2.17)/"/>
    <id>https://mikutown.gitee.io/blog/2021/02/04/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-30-%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%9C%89%E7%90%86%E6%95%B0%E7%B1%BB%E7%9A%84%E8%AE%BE%E8%AE%A1-(1.2.15-1.2.17)/</id>
    <published>2021-02-03T19:38:04.000Z</published>
    <updated>2021-02-04T06:21:45.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-30-小试牛刀（二）：有理数类的设计-1-2-15-1-2-17"><a href="#算法练习-30-小试牛刀（二）：有理数类的设计-1-2-15-1-2-17" class="headerlink" title="算法练习-30-小试牛刀（二）：有理数类的设计-(1.2.15-1.2.17)"></a>算法练习-30-小试牛刀（二）：有理数类的设计-(1.2.15-1.2.17)</h1><ul><li>知识点<ul><li>有理数概念</li><li>正则表达式</li></ul></li></ul><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>1.2.15文件输入。基于String的split()方法实现In中的静态方法readInts()。我们会在1.3节中学习另一个不同的实现。</strong></p><hr><p><strong>1.2.15 File input. Develop a possible implementation of the static readInts() method from In (which we use for various test clients, such as binary search on page 47) that is based on the split() method in String.</strong></p><p><strong>We will consider a different implementation in Section 1.3 (see page 126).</strong></p><ul><li>分析</li></ul><p>想要实现readInts方法，如果需要接受多个数字，那么需要你用空格作为分隔符，readInts()方法的作用是接受一系列整形数。正则表达式的空格分隔符表示:<code>\\s+</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">readInts</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">In</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">In</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//表示接受一个文件路径为name的数据</span>  <span class="token class-name">String</span> input <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>words<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ints<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ints<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p><strong>1.2.16 有理数。为有理数实现一个不可变数据类型Rational，支持加减乘除操作。无需测试溢出（请见练习1.2.17），只需使用两个long型实例变量表示分子和分母来控制溢出的可能性。使用欧几里得算法来保证分子和分母没有公因子。编写一个测试用例检测你实现的所有方法。</strong></p><p><strong>1.2.16 Rational numbers. Implement an immutable data type Rational for rational numbers that supports addition, subtraction, multiplication, and division.</strong></p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/4c6090c3bea46a839d7dd2c11e2778e2.png" alt="img" loading="lazy"></p><p><strong>You do not have to worry about testing for overflow (see Exercise 1.2.17), but use as instance variables two long values that represent the numerator and denominator to limit the possibility of overflow. Use Euclid’s algorithm (see page 4) to ensure that the numerator and denominator never have any common factors. Include a test client that exercises all of your methods.</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rational</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> numerator<span class="token punctuation">;</span>    <span class="token comment">//分子</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> denominator<span class="token punctuation">;</span>    <span class="token comment">//分母</span>    <span class="token keyword">public</span> <span class="token class-name">Rational</span><span class="token punctuation">(</span><span class="token keyword">int</span> numerator<span class="token punctuation">,</span> <span class="token keyword">int</span> denominator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> gcd <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>numerator<span class="token punctuation">,</span> denominator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>gcd <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>numerator <span class="token operator">=</span> numerator<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>denominator <span class="token operator">=</span> denominator<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>numerator <span class="token operator">=</span> numerator<span class="token operator">/</span>gcd<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>denominator <span class="token operator">=</span> denominator<span class="token operator">/</span>gcd<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> numerator<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNumerator</span><span class="token punctuation">(</span><span class="token keyword">int</span> numerator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>numerator <span class="token operator">=</span> numerator<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDenominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> denominator<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDenominator</span><span class="token punctuation">(</span><span class="token keyword">int</span> denominator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>denominator <span class="token operator">=</span> denominator<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Rational</span> <span class="token function">simplification</span><span class="token punctuation">(</span><span class="token class-name">Rational</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">getDenominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">getNumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最大公约数为a</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Rational</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>numerator<span class="token operator">/</span>a<span class="token punctuation">,</span>r<span class="token punctuation">.</span>denominator<span class="token operator">/</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> i<span class="token operator">=</span>a<span class="token operator">%</span>b<span class="token punctuation">;</span>            a<span class="token operator">=</span>b<span class="token punctuation">;</span>            b<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"("</span> <span class="token operator">+</span> numerator <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> denominator <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Rational</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token class-name">Rational</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> numerator<span class="token punctuation">,</span>denominator<span class="token punctuation">;</span>        denominator <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDenominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">.</span><span class="token function">getDenominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numerator <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">.</span><span class="token function">getDenominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDenominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">.</span><span class="token function">getNumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Rational</span><span class="token punctuation">(</span>numerator<span class="token punctuation">,</span>denominator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Rational</span> <span class="token function">minus</span><span class="token punctuation">(</span><span class="token class-name">Rational</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> numerator<span class="token punctuation">,</span>denominator<span class="token punctuation">;</span>        denominator <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDenominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">.</span><span class="token function">getDenominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numerator <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">.</span><span class="token function">getDenominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDenominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">.</span><span class="token function">getNumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Rational</span><span class="token punctuation">(</span>numerator<span class="token punctuation">,</span>denominator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Rational</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token class-name">Rational</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> numerator<span class="token punctuation">,</span>denominator<span class="token punctuation">;</span>        denominator <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDenominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">.</span><span class="token function">getDenominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numerator <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">.</span><span class="token function">getNumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Rational</span><span class="token punctuation">(</span>numerator<span class="token punctuation">,</span>denominator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Rational</span> <span class="token function">divides</span><span class="token punctuation">(</span><span class="token class-name">Rational</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> numerator<span class="token punctuation">,</span>denominator<span class="token punctuation">;</span>        denominator <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDenominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">.</span><span class="token function">getNumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numerator <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">.</span><span class="token function">getDenominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Rational</span><span class="token punctuation">(</span>numerator<span class="token punctuation">,</span>denominator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Rational</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Rational</span> simplification <span class="token operator">=</span> <span class="token function">simplification</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDenominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>simplification<span class="token punctuation">.</span><span class="token function">getDenominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>simplification<span class="token punctuation">.</span><span class="token function">getNumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> den <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Rational</span> rational <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rational</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>den<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> den2 <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Rational</span> that <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rational</span><span class="token punctuation">(</span>num2<span class="token punctuation">,</span>den2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Rational</span> plus <span class="token operator">=</span> rational<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>that<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Rational</span> minus <span class="token operator">=</span> rational<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>that<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Rational</span> times <span class="token operator">=</span> rational<span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span>that<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Rational</span> divides <span class="token operator">=</span> rational<span class="token punctuation">.</span><span class="token function">divides</span><span class="token punctuation">(</span>that<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rational <span class="token operator">+</span> <span class="token string">"+"</span> <span class="token operator">+</span> that <span class="token operator">+</span><span class="token string">"="</span> <span class="token operator">+</span> plus<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rational <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> that <span class="token operator">+</span><span class="token string">"="</span> <span class="token operator">+</span> minus<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rational <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> that <span class="token operator">+</span><span class="token string">"="</span> <span class="token operator">+</span> times<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rational <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> that <span class="token operator">+</span><span class="token string">"="</span> <span class="token operator">+</span> divides<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> equals <span class="token operator">=</span> rational<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>that<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>equals<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rational <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> that<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rational <span class="token operator">+</span> <span class="token string">"!="</span> <span class="token operator">+</span> that<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><p><strong>1.2.17 有理数实现的健壮性。在Rational的开发中使用断言来防止溢出。</strong></p><pre class="language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token class-name">Rational</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token class-name">Rational</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">assert</span><span class="token punctuation">(</span>den <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">&amp;</span><span class="token operator">&amp;</span> den <span class="token punctuation">></span></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">assert</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>den <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">&amp;</span><span class="token operator">&amp;</span> b<span class="token punctuation">.</span>den <span class="token punctuation">></span></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">long</span> d <span class="token operator">=</span> den <span class="token operator">*</span> b<span class="token punctuation">.</span>den<span class="token punctuation">;</span>   <span class="token keyword">long</span> n <span class="token operator">=</span> num <span class="token operator">*</span> b<span class="token punctuation">.</span>den <span class="token operator">+</span> den <span class="token operator">*</span> b<span class="token punctuation">.</span>num<span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Rational</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//其他方法同上 添加断言，在溢出的时候可以报错啦</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-30-小试牛刀（二）：有理数类的设计-1-2-15-1-2-17&quot;&gt;&lt;a href=&quot;#算法练习-30-小试牛刀（二）：有理数类的设计-1-2-15-1-2-17&quot; class=&quot;headerlink&quot; title=&quot;算法练习-30-小试牛刀（二）：有理数类的设计-(1.2.15-1.2.17)&quot;&gt;&lt;/a&gt;算法练习-30-小试牛刀（二）：有理数类的设计-(1.2.15-1.2.17)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;有理数概念&lt;/li&gt;
&lt;li&gt;正则表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-29-小试牛刀（一）：一个交易系统的设计-(1.2.13-1.2.14)</title>
    <link href="https://mikutown.gitee.io/blog/2021/02/04/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-29-%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E4%B8%80%E4%B8%AA%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1-(1.2.13-1.2.14)/"/>
    <id>https://mikutown.gitee.io/blog/2021/02/04/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-29-%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E4%B8%80%E4%B8%AA%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1-(1.2.13-1.2.14)/</id>
    <published>2021-02-03T18:39:24.000Z</published>
    <updated>2021-02-03T20:25:10.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-29-小试牛刀（一）：一个交易系统的设计-1-2-13-1-2-14"><a href="#算法练习-29-小试牛刀（一）：一个交易系统的设计-1-2-13-1-2-14" class="headerlink" title="算法练习-29-小试牛刀（一）：一个交易系统的设计-(1.2.13-1.2.14)"></a>算法练习-29-小试牛刀（一）：一个交易系统的设计-(1.2.13-1.2.14)</h1><ul><li>知识点<ul><li>Java中类的设计</li><li>正则表达式</li></ul></li></ul><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>1.2.13 用我们对Date的实现作为模板实现Transaction类型</strong></p><hr><p><strong>1.2.13 Using our implementation of Date as a model(page91),develop an implementation of Transaction.</strong></p><p><strong>1.2.14 用我们对Date的实现作为模板实现Transaction的euqal()函数</strong></p><hr><p><strong>1.2.14 Using our implementation of equals() in Date as a model(page103),develop implementations of equals() for Transaction.</strong></p><ul><li>分析</li></ul><p>书中给出的Transaction的API图如下：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/c06d296af00fb6faf3111f13b9431ec6.png" alt="img" loading="lazy"></p><p>英文版的截图</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/0d4be00f0d9248fb32c6cdff80d94720.png" alt="img" loading="lazy"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Transaction</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Transaction</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> who<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SmartDate2</span> when<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> amount<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span><span class="token class-name">String</span> who<span class="token punctuation">,</span> <span class="token class-name">SmartDate2</span> when<span class="token punctuation">,</span> <span class="token keyword">double</span> amount<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>who <span class="token operator">=</span> who<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>when <span class="token operator">=</span> when<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>amount <span class="token operator">=</span> amount<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">who</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> who<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">SmartDate2</span> <span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> when<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">amount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> amount<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">Transaction</span> that <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Transaction</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>amount<span class="token punctuation">,</span> amount<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>who<span class="token punctuation">,</span> that<span class="token punctuation">.</span>who<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>when<span class="token punctuation">,</span> that<span class="token punctuation">.</span>when<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>who<span class="token punctuation">,</span> when<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Transaction&#123;"</span> <span class="token operator">+</span>                <span class="token string">"who='"</span> <span class="token operator">+</span> who <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", when="</span> <span class="token operator">+</span> when <span class="token operator">+</span>                <span class="token string">", amount="</span> <span class="token operator">+</span> amount <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span> that<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-29-小试牛刀（一）：一个交易系统的设计-1-2-13-1-2-14&quot;&gt;&lt;a href=&quot;#算法练习-29-小试牛刀（一）：一个交易系统的设计-1-2-13-1-2-14&quot; class=&quot;headerlink&quot; title=&quot;算法练习-29-小试牛刀（一）：一个交易系统的设计-(1.2.13-1.2.14)&quot;&gt;&lt;/a&gt;算法练习-29-小试牛刀（一）：一个交易系统的设计-(1.2.13-1.2.14)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;Java中类的设计&lt;/li&gt;
&lt;li&gt;正则表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-28-计算任意一天的星期数-(1.2.12)</title>
    <link href="https://mikutown.gitee.io/blog/2021/02/03/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-28-%E8%AE%A1%E7%AE%97%E4%BB%BB%E6%84%8F%E4%B8%80%E5%A4%A9%E7%9A%84%E6%98%9F%E6%9C%9F%E6%95%B0-(1.2.12)/"/>
    <id>https://mikutown.gitee.io/blog/2021/02/03/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-28-%E8%AE%A1%E7%AE%97%E4%BB%BB%E6%84%8F%E4%B8%80%E5%A4%A9%E7%9A%84%E6%98%9F%E6%9C%9F%E6%95%B0-(1.2.12)/</id>
    <published>2021-02-03T10:41:28.000Z</published>
    <updated>2021-02-03T18:21:14.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-28-计算任意一天的星期数-1-2-12"><a href="#算法练习-28-计算任意一天的星期数-1-2-12" class="headerlink" title="算法练习-28-计算任意一天的星期数-(1.2.12)"></a>算法练习-28-计算任意一天的星期数-(1.2.12)</h1><ul><li>知识点<ul><li>蔡勒公式</li><li>基姆拉尔森计算公式</li></ul></li></ul><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>1.2.12 为SmartDate添加一个方法dayOfTheWeek()，为日期中每周的日返回Monday、Tuesday、Wednesday、Thursday……假定是21世纪</strong></p><hr><p><strong>1.2.12 Add a method dayOfTheWeek() to SmartDate that returns a String value Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, or Sunday, giving the appropriate day of the week for the date. You may assume that the date is in the 21st century.</strong></p><pre class="language-none"><code class="language-none">蔡勒公式蔡勒（Zeller）公式，是一个计算星期的公式，随便给一个日期，就能用这个公式推算出是星期几。由德国数学家 克里斯提安·蔡勒 推算出來。适用范围蔡勒公式只适合于1582年（中国明朝万历十年）10月15日之后的情形。罗马教皇格里高利十三世在1582年组织了一批天文学家，根据哥白尼日心说计算出来的数据，对儒略历作了修改。将1582年10月5日到14日之间的10天宣布撤销，即10月4日之后为10月15日。后来人们将这一新的历法称为“格里高利历”，也就是今天世界上所通用的历法，简称格里历或公历。</code></pre><p>$$<br>w = (y + [\frac{y}{4}] + [\frac{c}{4}] - 2c + [\frac{26(m+1)}{10}] + d - 1)mod7<br>$$</p><pre class="language-none"><code class="language-none">w：星期； w对7取模得：0-星期日，1-星期一，2-星期二，3-星期三，4-星期四，5-星期五，6-星期六c：世纪（注：在公式中取值为已经过的世纪数，也就是年份除以一百的结果，而非正在进行的世纪，也就是现在常用的年份除以一百加一）y：年（后两位数）m：月（m大于等于3，小于等于14，即在蔡勒公式中，某年的1、2月要看作上一年的13、14月来计算，比如2003年1月1日要看作2002年的13月1日来计算）d：日[ ]代表取整，即只要整数部分。</code></pre><pre class="language-none"><code class="language-none">蔡勒公式推导过程详见蔡勒公式的推导过程，这里笔者做个大概原理：在日常生活中，我们常常遇到要知道某一天是星期几的问题。有时候，我们还想知道历史上某一天是星期几。通常，解决这个方法的有效办法是看日历，但是我们总不会随时随身带着日历，更不可能随时随身带着几千年的万年历。假如是想在计算机编程中计算某一天是星期几，预先把一本万年历存进去就更不现实了。这时候是不是有办法通过什么公式，从年月日推出这一天是星期几呢？答案是肯定的。其实我们也常常在这样做。我们先举一个简单的例子。比如，知道了2004年5月1日是星期六，那么2004年5月31日“世界无烟日”是星期几就不难推算出来。我们可以掰着指头从1日数到31日，同时数星期，最后可以数出5月31日是星期一。其实运用数学计算，可以不用掰指头。我们知道星期是七天一轮回的，所以5月1日是星期六，七天之后的5月8日也是星期六。在日期上，8-1&#x3D;7，正是7的倍数。同样，5月15日、5月22日和5月29日也是星期六，它们的日期和5月1日的差值分别是14、21和28，也都是7的倍数。那么5月31日呢？31-1&#x3D;30，虽然不是7的倍数，但是31除以7，余数为2，这就是说，5月31日的星期，是在5月1日的星期之后两天。星期六之后两天正是星期一。这个简单的计算告诉我们计算星期的一个基本思路：首先，先要知道在想算的日子 之前的一个确定的日子是星期几，拿这一天做为推算的标准，也就是相当于一个计算的 “原点”。其次，知道想算的日子和这个确定的日子之间相差多少天，用7除这个日期 的差值，余数就表示想算的日子的星期在确定的日子的星期之后多少天。如果余数是 0，就表示这两天的星期相同。显然，如果把这个作为“原点”的日子选为星期日，那 么余数正好就等于星期几，这样计算就更方便了。但是直接计算两天之间的天数，还是不免繁琐。比如1982年7月29日和2004年5月1日之间相隔7947天，就不是一下子能算出来的。它包括三段时间：一，1982年7月29日以后这一年的剩余天数；二，1983-2003这二十一个整年的全部天数；三，从2004年元旦到5月1日经过的天数。第二段比较好算，它等于21*365+5&#x3D;7670天，之所以要加5，是因为这段时间内有5个闰年。第一段和第三段就比较麻烦了，比如第三段，需要把5月之前的四个月的天数累加起来，再加上日期值，即31+29+31+30+1&#x3D;122天。同理，第一段需要把7月之后的五个月的天数累加起来，再加上7月剩下的天数，一共是155天。所以总共的相隔天数是122+7670+155&#x3D;7947天。仔细想想，如果把“原点”日子的日期选为12月31日，那么第一段时间也就是一个整年，这样一来，第一段时间和第二段时间就可以合并计算，整年的总数正好相当于两个日子的年份差值减一。如果进一步把“原点”日子选为公元前1年12月31日（或者天文学家所使用的公元0年12月31日），这个整年的总数就正好是想算的日子的年份减一。这样简化之后，就只须计算两段时间：一，这么多整年的总天数；二，想算的日子是这一年的第几天。巧的是，按照公历的年月设置，这样反推回去，公元前1年12月31日正好是星期日，也就是说，这样算出来的总天数除以7的余数正好是星期几。那么现在的问题就只有一个：这么多整年里面有多少闰年。这就需要了解公历的置闰规则了。我们知道，公历的平年是365天，闰年是366天。置闰的方法是能被4整除的年份在2月加一天，但能被100整除的不闰，能被400整除的又闰。因此，像1600、2000、2400 年都是闰年，而1700、1800、1900、2100年都是平年。公元前1年，按公历也是闰年。因此，对于从公元前1年（或公元0年）12月31日到某一日子的年份Y之间的所有整年中的闰年数，就等于 [(Y-1)&#x2F;4] - [(Y-1)&#x2F;100] + [(Y-1)&#x2F;400]。</code></pre><ul><li>答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmartDate2</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> myYear<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> myMonth<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> myDay<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SmartDate2</span><span class="token punctuation">(</span><span class="token keyword">int</span> month<span class="token punctuation">,</span><span class="token keyword">int</span> day<span class="token punctuation">,</span><span class="token keyword">int</span> year<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>year<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"year is error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>month<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> month<span class="token operator">></span><span class="token number">12</span><span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"month is error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>day<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> day<span class="token operator">></span><span class="token number">31</span><span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"day is error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>month<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> day<span class="token operator">></span><span class="token number">30</span><span class="token punctuation">)</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"day is error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">400</span><span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> month<span class="token operator">==</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> day<span class="token operator">></span><span class="token number">28</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"day is error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> month<span class="token operator">==</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> day<span class="token operator">></span><span class="token number">29</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"day is error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//</span>        myYear<span class="token operator">=</span>year<span class="token punctuation">;</span>        myMonth<span class="token operator">=</span>month<span class="token punctuation">;</span>        myDay<span class="token operator">=</span>day<span class="token punctuation">;</span>        <span class="token comment">//</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">month</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> myMonth<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">day</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> myDay<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">year</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> myYear<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">dayOfTheWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> w<span class="token operator">=</span><span class="token punctuation">(</span>myYear<span class="token operator">%</span><span class="token number">100</span><span class="token operator">+</span><span class="token punctuation">(</span>myYear<span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span><span class="token operator">+</span><span class="token punctuation">(</span>myYear<span class="token operator">-</span>myYear<span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>myYear<span class="token operator">-</span>myYear<span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">26</span><span class="token operator">*</span><span class="token punctuation">(</span>myMonth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">+</span>myDay<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> w<span class="token operator">=</span>w<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> weekstr<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> weekstr<span class="token operator">=</span><span class="token string">"Sunday"</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> weekstr<span class="token operator">=</span><span class="token string">"Monday"</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> weekstr<span class="token operator">=</span><span class="token string">"Tuesday"</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> weekstr<span class="token operator">=</span><span class="token string">"Wednesday"</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span> weekstr<span class="token operator">=</span><span class="token string">"Thursday"</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span> weekstr<span class="token operator">=</span><span class="token string">"Friday"</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span> weekstr<span class="token operator">=</span><span class="token string">"Saturday"</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> weekstr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">month</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span><span class="token function">day</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span><span class="token function">year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">SmartDate2</span> d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SmartDate2</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">2016</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Date is:%s,WeekDay is:%s"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token function">dayOfTheWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><hr><p>源码参考：<a href="https://www.cnblogs.com/longjin2018/p/9848894.html">https://www.cnblogs.com/longjin2018/p/9848894.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-28-计算任意一天的星期数-1-2-12&quot;&gt;&lt;a href=&quot;#算法练习-28-计算任意一天的星期数-1-2-12&quot; class=&quot;headerlink&quot; title=&quot;算法练习-28-计算任意一天的星期数-(1.2.12)&quot;&gt;&lt;/a&gt;算法练习-28-计算任意一天的星期数-(1.2.12)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;蔡勒公式&lt;/li&gt;
&lt;li&gt;基姆拉尔森计算公式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-27-设计一个智能的日期类（一）-(1.2.11)</title>
    <link href="https://mikutown.gitee.io/blog/2021/02/03/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-27-%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%99%BA%E8%83%BD%E7%9A%84%E6%97%A5%E6%9C%9F%E7%B1%BB%EF%BC%88%E4%B8%80%EF%BC%89-(1.2.11)/"/>
    <id>https://mikutown.gitee.io/blog/2021/02/03/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-27-%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%99%BA%E8%83%BD%E7%9A%84%E6%97%A5%E6%9C%9F%E7%B1%BB%EF%BC%88%E4%B8%80%EF%BC%89-(1.2.11)/</id>
    <published>2021-02-03T10:06:01.000Z</published>
    <updated>2021-02-03T10:40:36.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-27-设计一个智能的日期类（一）-1-2-11"><a href="#算法练习-27-设计一个智能的日期类（一）-1-2-11" class="headerlink" title="算法练习-27-设计一个智能的日期类（一）-(1.2.11)"></a>算法练习-27-设计一个智能的日期类（一）-(1.2.11)</h1><ul><li>知识点<ul><li>日期类的设计</li><li>Java异常处理</li></ul></li></ul><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>1.2.11 根据Date的API实现一个SmartDate类型，在日期非法时抛出一个异常。</strong></p><hr><p><strong>1.2.11 Develop an implementation SmartDate of our Date API that raises an exception if the date is not legal.</strong></p><p>书上的Date的API图如下所示：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/fca8a4dca9b5602773aa9ef98b126279.png" alt="img" loading="lazy"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmartDate</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> month<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> day<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> year<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SmartDate</span><span class="token punctuation">(</span><span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> day<span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>year<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token operator">||</span>month<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token operator">||</span>day<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//System.out.println("日期year month day均不可以小于等于0，无法创建！");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"year or month or day is error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//判断闰年</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">3200</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> year <span class="token operator">%</span> <span class="token number">172800</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//System.out.print(year + "年是闰年。");</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>month<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>day<span class="token operator">></span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token comment">//System.out.println("闰年2月不可以大于29天");</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"day is error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//4 6 9 11</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">9</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>day<span class="token operator">>=</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token comment">//System.out.println("4，6，9，11月不可以超过30天哦");</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"day is error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//                    System.out.println("不可以超过31天哦");</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"day is error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token comment">//System.out.print(year + "年不是闰年。");</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>month<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>day<span class="token operator">></span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token comment">//System.out.println("平年2月不可以大于28天");</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"day is error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//4 6 9 11</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">9</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>day<span class="token operator">>=</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token comment">//System.out.println("4，6，9，11月不可以超过30天哦");</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"day is error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//System.out.println("不可以超过31天哦");</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"day is error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>month <span class="token operator">=</span> month<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>day <span class="token operator">=</span> day<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">SmartDate</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">month</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> month<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> year<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">day</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> day<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"SmartDate&#123;"</span> <span class="token operator">+</span>                <span class="token string">"month="</span> <span class="token operator">+</span> month <span class="token operator">+</span>                <span class="token string">", day="</span> <span class="token operator">+</span> day <span class="token operator">+</span>                <span class="token string">", year="</span> <span class="token operator">+</span> year <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">SmartDate</span> that<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> that<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>that <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> that<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token class-name">SmartDate</span> smartDate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SmartDate</span><span class="token punctuation">)</span> that<span class="token punctuation">;</span>        <span class="token keyword">return</span> month <span class="token operator">==</span> smartDate<span class="token punctuation">.</span>month <span class="token operator">&amp;&amp;</span> day <span class="token operator">==</span> smartDate<span class="token punctuation">.</span>day <span class="token operator">&amp;&amp;</span> year <span class="token operator">==</span> smartDate<span class="token punctuation">.</span>year<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>month<span class="token punctuation">,</span> day<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">SmartDate</span> d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SmartDate</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">2016</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Date is:%s"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-27-设计一个智能的日期类（一）-1-2-11&quot;&gt;&lt;a href=&quot;#算法练习-27-设计一个智能的日期类（一）-1-2-11&quot; class=&quot;headerlink&quot; title=&quot;算法练习-27-设计一个智能的日期类（一）-(1.2.11)&quot;&gt;&lt;/a&gt;算法练习-27-设计一个智能的日期类（一）-(1.2.11)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;日期类的设计&lt;/li&gt;
&lt;li&gt;Java异常处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-26-设计一个验证抛掷硬币的正反概率相等的计数器(1.2.10)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/29/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-26-%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E9%AA%8C%E8%AF%81%E6%8A%9B%E6%8E%B7%E7%A1%AC%E5%B8%81%E7%9A%84%E6%AD%A3%E5%8F%8D%E6%A6%82%E7%8E%87%E7%9B%B8%E7%AD%89%E7%9A%84%E8%AE%A1%E6%95%B0%E5%99%A8(1.2.10)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/29/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-26-%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E9%AA%8C%E8%AF%81%E6%8A%9B%E6%8E%B7%E7%A1%AC%E5%B8%81%E7%9A%84%E6%AD%A3%E5%8F%8D%E6%A6%82%E7%8E%87%E7%9B%B8%E7%AD%89%E7%9A%84%E8%AE%A1%E6%95%B0%E5%99%A8(1.2.10)/</id>
    <published>2021-01-29T15:19:47.000Z</published>
    <updated>2021-01-29T16:08:55.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-26-设计一个验证抛掷硬币的正反概率相等的计数器-1-2-10"><a href="#算法练习-26-设计一个验证抛掷硬币的正反概率相等的计数器-1-2-10" class="headerlink" title="算法练习-26-设计一个验证抛掷硬币的正反概率相等的计数器(1.2.10)"></a>算法练习-26-设计一个验证抛掷硬币的正反概率相等的计数器(1.2.10)</h1><ul><li>知识点<ul><li>计数器</li><li>图的绘制</li></ul></li></ul><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>1.2.10 编写一个类 VisualCounter，支持加一和减一操作。它的构造函数接受两个参数 N 和 max，其中 N 指定了操作的最大次数， max 指定了计数器的最大绝对值。作为副作用，用图像显示每次计数器变化后的值。</strong></p><hr><p><strong>1.2.10 Develop a class VisualCounter that allows both increment and decrement operations. Take two arguments N and max in the constructor, where N specifies the maximum number of operations and max specifies the maximum absolute value for the counter. As a side effect, create a plot showing the value of the counter each time its tally changes.</strong></p><ul><li>分析</li></ul><p>上一篇文章分析过了Counter计数器类的设计，API如下：<img src="https://gitee.com/mikutown/pic/raw/master/img/ea372ff98abf8f4c8d2fd43ce868428b.png" loading="lazy"></p><p>这个计数器嵌入了二分法查找中，较直观的看出二分法查找的优秀性能。但做为开发者，为用户提供更好更直观的工具是我们不变的追求。因此一个可视化计数器的需求随之提出，之前的计数器只能加不能减，只适用于计算循环次数；可视化计数器能增加也能减少，适用于处理算法的平均性能。</p><p>从题目的要求也能看出：<code> N 指定了操作的最大次数， max 指定了计数器的最大绝对值。</code></p><p>可视化计数器适用于统计需要多次试验才能获取结果的算法情况。这里我们为了模拟一种需要可视化计数器的情况：<br><strong>抛掷一枚硬币，操作的次数为N，max表示计数器的最大绝对值</strong></p><p>有了这么一个前提，那题目就会变得简单很多，我们可以考虑将N设置为10000，计数器的最大值<strong>max其实可以暂时设置为N/2，因为概率大概为1/2</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practise_01_02_10</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">VisualCounter</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token class-name">N</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> total<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">VisualCounter</span><span class="token punctuation">(</span><span class="token keyword">long</span> trails<span class="token punctuation">,</span> <span class="token keyword">double</span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StdDraw</span><span class="token punctuation">.</span><span class="token function">setXscale</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> trails<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">StdDraw</span><span class="token punctuation">.</span><span class="token function">setYscale</span><span class="token punctuation">(</span><span class="token operator">-</span>max<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">StdDraw</span><span class="token punctuation">.</span><span class="token function">setPenRadius</span><span class="token punctuation">(</span><span class="token number">.005f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">;</span>            total<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token class-name">StdDraw</span><span class="token punctuation">.</span><span class="token function">setPenColor</span><span class="token punctuation">(</span><span class="token class-name">StdDraw</span><span class="token punctuation">.</span>DARK_GRAY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">StdDraw</span><span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">;</span>            total<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token class-name">StdDraw</span><span class="token punctuation">.</span><span class="token function">setPenColor</span><span class="token punctuation">(</span><span class="token class-name">StdDraw</span><span class="token punctuation">.</span>DARK_GRAY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">StdDraw</span><span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VisualCounter</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VisualCounter</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StdRandom</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                counter<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-26-设计一个验证抛掷硬币的正反概率相等的计数器-1-2-10&quot;&gt;&lt;a href=&quot;#算法练习-26-设计一个验证抛掷硬币的正反概率相等的计数器-1-2-10&quot; class=&quot;headerlink&quot; title=&quot;算法练习-26-设计一个验证抛掷硬币的正反概率相等的计数器(1.2.10)&quot;&gt;&lt;/a&gt;算法练习-26-设计一个验证抛掷硬币的正反概率相等的计数器(1.2.10)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;计数器&lt;/li&gt;
&lt;li&gt;图的绘制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-25-二分查找的算法性能分析初探-(1.2.8-1.2.9)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/29/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-25-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%9A%84%E7%AE%97%E6%B3%95%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%88%9D%E6%8E%A2-(1.2.8-1.2.9)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/29/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-25-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%9A%84%E7%AE%97%E6%B3%95%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%88%9D%E6%8E%A2-(1.2.8-1.2.9)/</id>
    <published>2021-01-29T14:55:43.000Z</published>
    <updated>2021-01-29T15:08:39.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-25-二分查找的算法性能分析初探-1-2-8-1-2-9"><a href="#算法练习-25-二分查找的算法性能分析初探-1-2-8-1-2-9" class="headerlink" title="算法练习-25-二分查找的算法性能分析初探-(1.2.8-1.2.9)"></a>算法练习-25-二分查找的算法性能分析初探-(1.2.8-1.2.9)</h1><ul><li>知识点<ul><li>二分查找</li><li>算法分析</li></ul></li></ul><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>1.2.8设 a[] 和 b[] 均为长数百万的整型数组。以下代码的作用是什么？有效吗？</strong><br><strong>int[] t = a; a = b; b = t;</strong></p><hr><p><strong>1.2.8 Suppose that a[] and b[] are each integer arrays consisting of millions of integers. What does the follow code do? Is it reasonably efficient?</strong><br><strong>int[] t = a; a = b; b = t;</strong><br><strong>Answer. It swaps them. It could hardly be more efficient because it does so by copying references, so that it is not necessary to copy millions of elements.</strong></p><p>答案：交换了两个数组。</p><p>在Java中，数组变量实际是数组的一个引用（类似于指针），交换两个引用的效率与数组大小无关，就是固定的常数时间。</p><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p><strong>1.2.9 修改 BinarySearch（请见 1.1.10.1 节中的二分查找代码），使用 Counter 统计在有查找中被检查的键的总数并在查找全部结束后打印该值。提示：在 main() 中创建一个 Counter 对象并将它作为参数传递给 rank()。</strong></p><hr><p><strong>1.2.9 Instrument BinarySearch(page47) to use a Counter to count the total number of keys examined during all searches and then print the total after all searches are complete. Hint : Create a Counter in main() and pass it as an argument to rank().</strong></p><ul><li><p>分析</p><p>根据书中1.2.1.1提到的Counter类知，可参考书中的API进行代码的编写。书中的API如下图：<img src="https://gitee.com/mikutown/pic/raw/master/img/ea372ff98abf8f4c8d2fd43ce868428b.png" alt="API" loading="lazy"></p><p>因此可以得到Counter类的代码如下：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    name <span class="token operator">=</span> id<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    count<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">tally</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"'s count = '"</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在类中将Counter作为静态类使用：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practise_01_02_09</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            name <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">tally</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">"'s count = '"</span> <span class="token operator">+</span> count<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token class-name">Counter</span> counter<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> hi <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>hi <span class="token operator">+</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                hi <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">></span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                lo <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numArray <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">,</span> <span class="token number">788</span><span class="token punctuation">,</span> <span class="token number">999</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Counter</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token string">"tag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">rank</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">,</span> numArray<span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"index: "</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">"\ncouter:"</span> <span class="token operator">+</span> counter<span class="token punctuation">.</span><span class="token function">tally</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">&#x2F;&#x2F;输出结果index: 8couter:2</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-25-二分查找的算法性能分析初探-1-2-8-1-2-9&quot;&gt;&lt;a href=&quot;#算法练习-25-二分查找的算法性能分析初探-1-2-8-1-2-9&quot; class=&quot;headerlink&quot; title=&quot;算法练习-25-二分查找的算法性能分析初探-(1.2.8-1.2.9)&quot;&gt;&lt;/a&gt;算法练习-25-二分查找的算法性能分析初探-(1.2.8-1.2.9)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;二分查找&lt;/li&gt;
&lt;li&gt;算法分析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Go语言の排序和查找</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/28/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E6%8E%92%E5%BA%8F%E5%92%8C%E6%9F%A5%E6%89%BE/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/28/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E6%8E%92%E5%BA%8F%E5%92%8C%E6%9F%A5%E6%89%BE/</id>
    <published>2021-01-28T09:32:11.000Z</published>
    <updated>2021-01-29T14:45:21.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go语言の排序和查找"><a href="#Go语言の排序和查找" class="headerlink" title="Go语言の排序和查找"></a>Go语言の排序和查找</h1><ul><li>本文主要讲Go语言的以下知识点<ul><li>冒牌排序</li><li>顺序查找</li><li>二分法查找</li><li>二维数组</li></ul></li></ul><a id="more"></a><h2 id="排序的基本介绍"><a href="#排序的基本介绍" class="headerlink" title="排序的基本介绍"></a>排序的基本介绍</h2><p>排序是将一组数据，依指定的顺序进行排列的过程。</p><p>排序的分类：</p><ol><li><p>内部排序：</p><p>指将需要处理的所有数据都加载到内部存储器中进行排序。包括（交换式排序法，选择式排序法和插入式排序法）；</p></li><li><p>外部排序法：</p><p>数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。包括（合并排序法和直接合并排序法）。</p></li></ol><p>冒泡排序（Bubble Sorting）的基本思想是：通过对待排序序列从后向前（从下标较大的元素开始），依次比较相邻元素的排序码，若发现逆序则交换，使排序码较小的元素逐渐从后部移向前部（从下标较大的单元移向下标较小的单元），就像水底下的气泡一样逐渐向上冒。</p><p>因为排序的过程中，各元素不断接近自己的位置，如果一趟比较下来没有进行过交换，就说明序列有序，因此要在排序过程中设置一个标志flag判断元素是否进行过交换。从而减少不必要的比较（优化）。</p><h2 id="冒泡排序的思路分析"><a href="#冒泡排序的思路分析" class="headerlink" title="冒泡排序的思路分析"></a>冒泡排序的思路分析</h2><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210128180653235.png" alt="image-20210128180653235" loading="lazy"></p><h2 id="冒泡排序实现"><a href="#冒泡排序实现" class="headerlink" title="冒泡排序实现"></a>冒泡排序实现</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span>arr <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"排序前arr="</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>temp <span class="token operator">:=</span> <span class="token number">0</span><span class="token comment">//用于交换的临时变量</span><span class="token comment">//冒泡排序--一步一步推导出来的</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token comment">//交换</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"排序后arr="</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//定义数组</span>arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">&#125;</span><span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main arr="</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token comment">//有序的哦</span><span class="token punctuation">&#125;</span></code></pre><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><p>需要牢记冒泡排序的代码！能默写出来才行</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><ul><li><p>介绍</p><p>在Golang中，我们常用的查找有两种：</p><ol><li>顺序查找</li><li>二分查找（数组有序）</li></ol></li><li><p>案例演示：</p><ol><li>有一个数列：白眉鹰王、金毛狮王、紫衫龙王、青翼蝠王</li></ol><p>猜数游戏：从键盘中任意输入一个名称，判断数列中是否包含此名称【使用顺序查找】</p><p>代码：</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>names <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token string">"白眉鹰王"</span><span class="token punctuation">,</span><span class="token string">"金毛狮王"</span><span class="token punctuation">,</span><span class="token string">"紫衫龙王"</span><span class="token punctuation">,</span><span class="token string">"青翼蝠王"</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> heroName <span class="token operator">=</span> <span class="token string">""</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入要查找的人名..."</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heroName<span class="token punctuation">)</span><span class="token comment">//按顺序查找 第一种方式</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> heroName <span class="token operator">==</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"找到%v，下标为%v \n"</span><span class="token punctuation">,</span> heroName<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"没有找到%v \n"</span><span class="token punctuation">,</span> heroName<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//顺序查找 第二种方式 （推荐）</span>index <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> heroName <span class="token operator">==</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>index <span class="token operator">=</span> i <span class="token comment">//赋值</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> index <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"找到%v, 下标为%v\n"</span><span class="token punctuation">,</span> heroName<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"没有找到"</span><span class="token punctuation">,</span>heroName<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter08&#x2F;demo02&#x2F;main  go run .&#x2F;main.go请输入要查找的人名...金毛狮王找到金毛狮王，下标为1 找到金毛狮王, 下标为1</code></pre><ol start="2"><li>请对一个有序数组进行二分查找 {1,8,10,89,1000,1234},输入一个数看看该数组是否存在此数，并且求出下标，如果没有就提示“没有这个数”。【使用到递归】</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token comment">//"time"</span><span class="token comment">//"math/rand"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">BinaryFind</span><span class="token punctuation">(</span>arr <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span>leftIndex <span class="token builtin">int</span><span class="token punctuation">,</span>rightIndex <span class="token builtin">int</span><span class="token punctuation">,</span>findVal <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> leftIndex <span class="token operator">></span> rightIndex <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"找不到哦找不到哦"</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">&#125;</span>middle <span class="token operator">:=</span> <span class="token punctuation">(</span>leftIndex <span class="token operator">+</span> rightIndex<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">></span> findVal <span class="token punctuation">&#123;</span><span class="token function">BinaryFind</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> leftIndex<span class="token punctuation">,</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> findVal<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&lt;</span> findVal <span class="token punctuation">&#123;</span><span class="token function">BinaryFind</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rightIndex<span class="token punctuation">,</span> findVal<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"这个数字的下标位置在"</span><span class="token punctuation">,</span>middle<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> arrs <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入一个数："</span><span class="token punctuation">)</span><span class="token keyword">var</span> num <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token function">BinaryFind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arrs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>arrs<span class="token punctuation">)</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter08&#x2F;demo03&#x2F;main  go run .&#x2F;main.go请输入一个数：1001找不到哦找不到哦 ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter08&#x2F;demo03&#x2F;main  go run .&#x2F;main.go请输入一个数：1000这个数字的下标位置在 4</code></pre><h2 id="二维数组的介绍"><a href="#二维数组的介绍" class="headerlink" title="二维数组的介绍"></a>二维数组的介绍</h2><p>如你所见 就是二维数组罢了</p><h2 id="二维数组应用场景"><a href="#二维数组应用场景" class="headerlink" title="二维数组应用场景"></a>二维数组应用场景</h2><p>比如开发了一个五子棋游戏，棋盘就需要二维数组来表示。如图<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210128193603403.png" alt="image-20210128193603403" loading="lazy"></p><h2 id="二维数组快速入门"><a href="#二维数组快速入门" class="headerlink" title="二维数组快速入门"></a>二维数组快速入门</h2><p>快速入门案例：</p><ul><li>请用二维数组输出如下图形</li></ul><pre class="language-none"><code class="language-none">0 0 0 0 0 00 0 1 0 0 00 2 0 3 0 00 0 0 0 0 0</code></pre><ul><li>代码演示</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">int</span>  arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>  arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v "</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="使用方式1-先声明-定义，再赋值"><a href="#使用方式1-先声明-定义，再赋值" class="headerlink" title="使用方式1:先声明/定义，再赋值"></a>使用方式1:先声明/定义，再赋值</h2><ul><li>语法 <code>var 数组名 [大小][大小]类型</code></li><li>比如 <code>var arr [2][3]int</code>,再赋值</li><li>使用演示</li><li>二维数组在内存的存在形式（重点）</li></ul><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210129191228249.png" alt="image-20210129191228249" loading="lazy"></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> arr2 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment">// 以这个为例来分析arr2在内存的布局！！</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"arr2[0]的地址%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"arr2[1]的地址%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"arr2[0][0]的地址%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"arr2[1][0]的地址%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter08&#x2F;demo04&#x2F;main  go run .&#x2F;main.go[[0 0 0] [0 10 0]]arr2[0]的地址0xc0000ac030arr2[1]的地址0xc0000ac048arr2[0][0]的地址0xc0000ac030arr2[1][0]的地址0xc0000ac048</code></pre><h2 id="使用方式2-直接初始化"><a href="#使用方式2-直接初始化" class="headerlink" title="使用方式2:直接初始化"></a>使用方式2:直接初始化</h2><ul><li>声明：<code>var 数组名 [大小][大小]类型 = [大小][大小]类型&#123;&#123;初值..&#125;,&#123;初值..&#125;&#125;</code></li><li>赋值（有默认值，比如int类型的就是0）</li><li>使用演示</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> arr3 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"arr3="</span><span class="token punctuation">,</span>arr3<span class="token punctuation">)</span></code></pre><pre class="language-none"><code class="language-none">arr3&#x3D; [[1 2 3] [4 5 6]]</code></pre><ul><li>说明：二维数组在声明/定义时也对应有四种写法[和一维数组类似]</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> 数组名 <span class="token punctuation">[</span>大小<span class="token punctuation">]</span><span class="token punctuation">[</span>大小<span class="token punctuation">]</span>类型 <span class="token operator">=</span> <span class="token punctuation">[</span>大小<span class="token punctuation">]</span><span class="token punctuation">[</span>大小<span class="token punctuation">]</span>类型<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> 数组名 <span class="token punctuation">[</span>大小<span class="token punctuation">]</span><span class="token punctuation">[</span>大小<span class="token punctuation">]</span>类型 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">[</span>大小<span class="token punctuation">]</span>类型<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>初值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>初值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> 数组名 <span class="token operator">=</span> <span class="token punctuation">[</span>大小<span class="token punctuation">]</span><span class="token punctuation">[</span>大小<span class="token punctuation">]</span>类型<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>初值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>初值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> 数组名 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">[</span>大小<span class="token punctuation">]</span>类型<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>初值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>初值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="二维数组的遍历"><a href="#二维数组的遍历" class="headerlink" title="二维数组的遍历"></a>二维数组的遍历</h2><ul><li>双层for循环完成遍历</li><li>for-range方式完成遍历</li></ul><p><strong>实例演示：</strong></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token comment">//for循环遍历</span>  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>arr3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"arr3[%v][%v] = %v\t"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> arr3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//for-range遍历二维数组</span>  <span class="token keyword">for</span> i<span class="token punctuation">,</span> v1 <span class="token operator">:=</span> <span class="token keyword">range</span> arr3 <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> j<span class="token punctuation">,</span> v2 <span class="token operator">:=</span> <span class="token keyword">range</span> v1 <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"arr3[%v][%v] = %v \t"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> v2<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter08&#x2F;demo05&#x2F;main  go run .&#x2F;main.goarr3[0][0] &#x3D; 1  arr3[0][1] &#x3D; 2  arr3[0][2] &#x3D; 3arr3[1][0] &#x3D; 4  arr3[1][1] &#x3D; 5  arr3[1][2] &#x3D; 6arr3[0][0] &#x3D; 1  arr3[0][1] &#x3D; 2  arr3[0][2] &#x3D; 3 arr3[1][0] &#x3D; 4  arr3[1][1] &#x3D; 5  arr3[1][2] &#x3D; 6 </code></pre><h2 id="二维数组的应用案例"><a href="#二维数组的应用案例" class="headerlink" title="二维数组的应用案例"></a>二维数组的应用案例</h2><ul><li><p>要求如下：</p><p>定义二维数组，用于保存三个班，每个班五名同学成绩，并求出每个班级平均分，以及所有班级平均分</p></li><li><p>代码</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> scores <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">float64</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请按照提示输入成绩："</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"请输入%v班的第%v个成绩："</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>      fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//计算各班平均分</span>  totalSum <span class="token operator">:=</span> <span class="token number">0.0</span>  count <span class="token operator">:=</span> <span class="token number">0</span>  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    sum <span class="token operator">:=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>      sum <span class="token operator">+=</span> scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>      count<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>    totalSum <span class="token operator">+=</span> sum    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"第%d个班的总分为%v,平均分为%v \n"</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> sum <span class="token operator">/</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"所有人总分为%v,平均分为%v\n"</span><span class="token punctuation">,</span>totalSum<span class="token punctuation">,</span> totalSum <span class="token operator">/</span> <span class="token function">float64</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter08&#x2F;demo06&#x2F;main  go run .&#x2F;main.go请按照提示输入成绩：请输入1班的第1个成绩：70请输入1班的第2个成绩：80请输入1班的第3个成绩：60.5请输入1班的第4个成绩：99请输入1班的第5个成绩：100请输入2班的第1个成绩：78请输入2班的第2个成绩：97请输入2班的第3个成绩：87请输入2班的第4个成绩：67请输入2班的第5个成绩：66请输入3班的第1个成绩：99请输入3班的第2个成绩：56请输入3班的第3个成绩：87请输入3班的第4个成绩：75请输入3班的第5个成绩：70.4第1个班的总分为409.5,平均分为81.9 第2个班的总分为395,平均分为79 第3个班的总分为387.4,平均分为77.47999999999999 所有人总分为1191.9,平均分为79.46000000000001</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Go语言の排序和查找&quot;&gt;&lt;a href=&quot;#Go语言の排序和查找&quot; class=&quot;headerlink&quot; title=&quot;Go语言の排序和查找&quot;&gt;&lt;/a&gt;Go语言の排序和查找&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;本文主要讲Go语言的以下知识点&lt;ul&gt;
&lt;li&gt;冒牌排序&lt;/li&gt;
&lt;li&gt;顺序查找&lt;/li&gt;
&lt;li&gt;二分法查找&lt;/li&gt;
&lt;li&gt;二维数组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Go" scheme="https://mikutown.gitee.io/blog/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-24-如何优雅地实现字符串倒序-(1.2.7)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/27/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-24-%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%80%92%E5%BA%8F-(1.2.7)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/27/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-24-%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%80%92%E5%BA%8F-(1.2.7)/</id>
    <published>2021-01-27T06:43:25.000Z</published>
    <updated>2021-01-27T07:01:17.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-24-如何优雅地实现字符串倒序-1-2-7"><a href="#算法练习-24-如何优雅地实现字符串倒序-1-2-7" class="headerlink" title="算法练习-24-如何优雅地实现字符串倒序-(1.2.7)"></a>算法练习-24-如何优雅地实现字符串倒序-(1.2.7)</h1><ul><li>知识点<ul><li>字符串倒序</li><li>StringBuffer的使用</li></ul></li></ul><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>以下递归函数的返回值是什么？</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">mystery</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token class-name">String</span> a <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> b <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">mystery</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">mystery</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>答案：将输入的字符串进行倒序（确实挺优雅的）</li></ul><p>用StringBuffer也可以完成相似功能哦</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch  <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> ch<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-24-如何优雅地实现字符串倒序-1-2-7&quot;&gt;&lt;a href=&quot;#算法练习-24-如何优雅地实现字符串倒序-1-2-7&quot; class=&quot;headerlink&quot; title=&quot;算法练习-24-如何优雅地实现字符串倒序-(1.2.7)&quot;&gt;&lt;/a&gt;算法练习-24-如何优雅地实现字符串倒序-(1.2.7)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;字符串倒序&lt;/li&gt;
&lt;li&gt;StringBuffer的使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-23-校招经典面试题之字符串的回环变位-(1.2.6)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/27/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-23-%E6%A0%A1%E6%8B%9B%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%9B%9E%E7%8E%AF%E5%8F%98%E4%BD%8D-(1.2.6)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/27/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-23-%E6%A0%A1%E6%8B%9B%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%9B%9E%E7%8E%AF%E5%8F%98%E4%BD%8D-(1.2.6)/</id>
    <published>2021-01-27T06:21:32.000Z</published>
    <updated>2021-01-27T06:42:27.819Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-23-校招经典面试题之字符串的回环变位-1-2-6"><a href="#算法练习-23-校招经典面试题之字符串的回环变位-1-2-6" class="headerlink" title="算法练习-23-校招经典面试题之字符串的回环变位-(1.2.6)"></a>算法练习-23-校招经典面试题之字符串的回环变位-(1.2.6)</h1><ul><li>知识点<ul><li>Java 中的字符串</li><li>回环变位</li></ul></li></ul><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>1.2.6 如果字符串 s 中的字符循环移动任意位置之后能够得到另一个字符串 t，那么 s 就被称为 t 的回环变位（circular rotation）。例如，ACTGACG 就是 TGACGAC 的一个回环变位，反之亦然。判定这个条件在基因组序列的研究中是很重要的。编写一个程序检查两个给定的字符串 s 和 t 是否互为回环变位。提示：答案只需要一行用到 indexOf()、length() 和字符串连接的代码。</strong></p><hr><p><strong>1.2.6 A string s is a circular rotation of a string t if it matches when the characters are circularly shifted by any number of positions; e.g., ACTGACG is a circular shift of TGACGAC, and vice versa. Detecting this condition is important in the study of genomic sequences. Write a program that checks whether two given strings s and t are circular</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practice01_02_06</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isCircularoation</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//或者 return if (s.length() == t.length() &amp;&amp; s.concat(s).indexOf(t) != -1);</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"abcde"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> t <span class="token operator">=</span> <span class="token string">"bcdae"</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token comment">//String t1 = "bcdea";//true</span>        <span class="token keyword">boolean</span> circularoation <span class="token operator">=</span> <span class="token function">isCircularoation</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>circularoation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-23-校招经典面试题之字符串的回环变位-1-2-6&quot;&gt;&lt;a href=&quot;#算法练习-23-校招经典面试题之字符串的回环变位-1-2-6&quot; class=&quot;headerlink&quot; title=&quot;算法练习-23-校招经典面试题之字符串的回环变位-(1.2.6)&quot;&gt;&lt;/a&gt;算法练习-23-校招经典面试题之字符串的回环变位-(1.2.6)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;Java 中的字符串&lt;/li&gt;
&lt;li&gt;回环变位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Go语言の数组与切片</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/25/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E6%95%B0%E7%BB%84%E4%B8%8E%E5%88%87%E7%89%87/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/25/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E6%95%B0%E7%BB%84%E4%B8%8E%E5%88%87%E7%89%87/</id>
    <published>2021-01-25T05:34:21.000Z</published>
    <updated>2021-01-27T05:36:22.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go语言の数组与切片"><a href="#Go语言の数组与切片" class="headerlink" title="Go语言の数组与切片"></a>Go语言の数组与切片</h1><ul><li>本文章主要讲Go语言的数组与切片</li></ul><a id="more"></a><h2 id="为什么需要数组"><a href="#为什么需要数组" class="headerlink" title="为什么需要数组"></a>为什么需要数组</h2><ul><li><p>问题</p><p>一个养鸡场有 6 只鸡，它们的体重分别是 3kg,5kg,1kg,3.4kg,2kg,50kg 。请问这六只鸡的总体重是多少?平均体重是多少? 请你编一个程序。=》数组</p></li><li><p>使用传统方法来解决</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>hen1 <span class="token operator">:=</span> <span class="token number">3.0</span>hen2 <span class="token operator">:=</span> <span class="token number">5.0</span>hen3 <span class="token operator">:=</span> <span class="token number">1.0</span>hen4 <span class="token operator">:=</span> <span class="token number">3.4</span>hen5 <span class="token operator">:=</span> <span class="token number">2.0</span>hen6 <span class="token operator">:=</span> <span class="token number">50.0</span>totalWeight <span class="token operator">:=</span> hen1 <span class="token operator">+</span> hen2 <span class="token operator">+</span> hen3 <span class="token operator">+</span> hen4 <span class="token operator">+</span> hen5 <span class="token operator">+</span> hen6avgWeight <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span> totalWeight <span class="token operator">/</span> <span class="token number">6</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"totalWeight = %v,avgWeight = %v \n"</span><span class="token punctuation">,</span> totalWeight<span class="token punctuation">,</span> avgWeight<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">totalWeight &#x3D; 64.4,avgWeight &#x3D; 10.73 </code></pre><p><strong>说明：</strong></p><ol><li>使用传统方法不利于数据的管理和维护</li><li>传统的方法不够灵活，因此我们需要引出新的数据类型：数组</li></ol></li></ul><h2 id="数组介绍"><a href="#数组介绍" class="headerlink" title="数组介绍"></a>数组介绍</h2><p>​    数组可以存放多个同一类型数据。数组也是一种数据类型，在 Go 中，数组是值类型。</p><h2 id="数组的快速入门"><a href="#数组的快速入门" class="headerlink" title="数组的快速入门"></a>数组的快速入门</h2><p>我们使用数组的方法来解决养鸡场的问题</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> hens <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token builtin">float64</span>hens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3.0</span>hens<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5.0</span>hens<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0</span>hens<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3.4</span>hens<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2.0</span>hens<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50.0</span>hens<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">150.0</span>totalWeight <span class="token operator">:=</span> <span class="token number">0.0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>hens<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>totalWeight <span class="token operator">+=</span> hens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">&#125;</span>avgWeight <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span> totalWeight <span class="token operator">/</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>hens<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"totalWeight = %v,avgWeight = %v \n"</span><span class="token punctuation">,</span> totalWeight<span class="token punctuation">,</span> avgWeight<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">totalWeight &#x3D; 214.4,avgWeight &#x3D; 30.63 </code></pre><p>​    <strong>说明：</strong></p><pre><code>1. 使用数组来解决问题，程序的可维护性增加2. 方法代码更加清晰，也容易扩展</code></pre><h2 id="数组定义和内存布局"><a href="#数组定义和内存布局" class="headerlink" title="数组定义和内存布局"></a>数组定义和内存布局</h2><ul><li><p>定义</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> 数组名 <span class="token punctuation">[</span>数组大小<span class="token punctuation">]</span>数据类型<span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token comment">//赋初值</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span> <span class="token comment">//......</span></code></pre></li><li><p>数组在内存布局（重要）</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210125141838794.png" alt="image-20210125141838794" loading="lazy"></p><ul><li>对上图的总结：</li></ul><ol><li>数组的地址可以通过数组名来获取 <code>&amp;intArr</code></li><li>数组的第一个元素的地址，就是数组的首地址</li><li>数组的各个元素的地址间隔是依据数组的类型决定，比如 <code>int64-&gt;8 int32-&gt;4...</code></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> intArr <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment">// int占8个字节</span><span class="token comment">//当我们定义完数组后，其实数组的各个元素有默认值 0</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>intArr<span class="token punctuation">)</span>intArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>intArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span>intArr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>intArr<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"intArr的地址=%p intArr[0]的地址=%p intArr[1]的地址=%p intArr[2]的地址=%p \n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>intArr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>intArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>intArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>intArr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go[0 0 0][10 20 30]intArr的地址&#x3D;0xc0000b8000 intArr[0]的地址&#x3D;0xc0000b8000 intArr[1]的地址&#x3D;0xc0000b8008 intArr[2]的地址&#x3D;0xc0000b8010 </code></pre><h2 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h2><ul><li>访问数组元素</li></ul><p><strong>数组名[下标]</strong> 比如：你要使用a数组的第三个元素 a[2]</p><ul><li>快速入门案例</li></ul><p>从终端循环输入5个成绩，保存到float64数组，并输出。</p><pre class="language-go" data-language="go"><code class="language-go">  <span class="token keyword">var</span> score <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">float64</span>  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"请输入第%d个元素的值\n"</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//变量数组打印</span>  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"score[%d]=%v"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go请输入第1个元素的值5请输入第2个元素的值4请输入第3个元素的值3请输入第4个元素的值2请输入第5个元素的值1score[0]&#x3D;5      score[1]&#x3D;4      score[2]&#x3D;3      score[3]&#x3D;2      score[4]&#x3D;1 </code></pre><ul><li>四种初始化数组的方式</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//四种初始化数组的方式</span><span class="token keyword">var</span> numArr01 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"numArr01="</span><span class="token punctuation">,</span> numArr01<span class="token punctuation">)</span><span class="token keyword">var</span> numArr02 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"numArr02="</span><span class="token punctuation">,</span> numArr02<span class="token punctuation">)</span><span class="token comment">//这里的[...]是规定的写法</span><span class="token keyword">var</span> numArr03 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"numArr03="</span><span class="token punctuation">,</span> numArr03<span class="token punctuation">)</span><span class="token keyword">var</span> numArr04 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">900</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">999</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"numArr04="</span><span class="token punctuation">,</span> numArr04<span class="token punctuation">)</span><span class="token comment">//类型推导</span>strArr05 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token string">"rose"</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"strArr05="</span><span class="token punctuation">,</span>strArr05<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.gonumArr01&#x3D; [1 2 3]numArr02&#x3D; [5 6 7]numArr03&#x3D; [8 9 10]numArr04&#x3D; [900 800 999]strArr05&#x3D; [ tom jack rose]</code></pre><h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><h3 id="方式1-常规遍历"><a href="#方式1-常规遍历" class="headerlink" title="方式1-常规遍历"></a>方式1-常规遍历</h3><p>看上面的，不再赘述</p><h3 id="方式2-for-range结构遍历"><a href="#方式2-for-range结构遍历" class="headerlink" title="方式2-for-range结构遍历"></a>方式2-for-range结构遍历</h3><p>这是Go语言的独有的结构，可以用来遍历访问数组的元素。</p><ul><li>for-range的基本语法</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> array01 <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span></code></pre><p>说明</p><ol><li>第一个返回值index是数组的下标</li><li>第二个value是在该下标位置的值</li><li>他们都是仅在for循环内部可见的局部变量</li><li>遍历数组元素的时候，如果不想使用下标index，可以直接把下标index标为下划线_</li><li>index和value的名称不是固定的，即程序员可以自行指定，一般命名为index和value</li></ol><ul><li>for-range的案例</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//演示for-range遍历数组</span>heroes <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"宋江"</span><span class="token punctuation">,</span> <span class="token string">"吴用"</span><span class="token punctuation">,</span> <span class="token string">"卢俊义"</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> heroes <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i=%v v=%v"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"heroes[%d]=%v\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> heroes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> heroes <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"元素的值=%v\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.goi&#x3D;0 v&#x3D;宋江heroes[0]&#x3D;宋江i&#x3D;1 v&#x3D;吴用heroes[1]&#x3D;吴用i&#x3D;2 v&#x3D;卢俊义heroes[2]&#x3D;卢俊义元素的值&#x3D;宋江元素的值&#x3D;吴用元素的值&#x3D;卢俊义</code></pre><h2 id="数组使用的注意事项和细节"><a href="#数组使用的注意事项和细节" class="headerlink" title="数组使用的注意事项和细节"></a>数组使用的注意事项和细节</h2><ol><li>数组是多个相同类型数据的组合，一个数组一旦声明/定义了，其长度是固定的，不能动态变化</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//数组是多个相同类型数据的组合，一个数组一旦声明/定义了，其长度是固定的，不能动态变化。</span><span class="token keyword">var</span> arr01 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>arr01<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>arr01<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token comment">//会报错</span>arr01<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.1</span> <span class="token comment">//数组类型和初始化的值的类型不匹配哦</span><span class="token comment">//其长度是固定的，不能动态变化，否则报越界</span>arr01<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">890</span> <span class="token comment">//数组不能动态增长</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr01<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li><p><code>var arr []int</code>这时arr就是一个slice切片，切片后面专门讲解。</p></li><li><p>数组中的元素可以是任何数据类型，包括值类型和引用类型，但是不能混用。</p></li><li><p>数组创建后，如果没有赋值，有默认值（零值）</p><pre class="language-none"><code class="language-none">数组类型数组： 默认值为 0字符串数组： 默认值为 &quot;&quot;bool数组： 默认值为false</code></pre></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> arr01 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">float32</span><span class="token keyword">var</span> arr02 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token keyword">var</span> arr03 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">bool</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"arr01=%v arr02=%v arr03=%v\n"</span><span class="token punctuation">,</span> arr01<span class="token punctuation">,</span> arr02<span class="token punctuation">,</span> arr03<span class="token punctuation">)</span></code></pre><ol start="5"><li>使用数组的步骤<ol><li>生命数组并开辟空间</li><li>给数组各个元素赋值（默认零值）</li><li>使用数组</li></ol></li><li>数组的下标是从0开始的</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> arr04 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token comment">// 0-2</span><span class="token keyword">var</span> index <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">3</span>arr04<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"tom"</span> <span class="token comment">//arr04[3]越界奥</span></code></pre><ol start="7"><li>数组下标必须在指定范围内使用，否则报panic：数组越界，比如<code>var arr [5]int</code> 则有效下标为0-4</li><li>Go的数组属值类型，在默认情况下是值传递，因此会进行值拷贝。数组见不会相互影响</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210125194444746.png" alt="image-20210125194444746" loading="lazy"></p><ol start="9"><li>如想在其它函数中，去修改原来的数组，可以使用引用传递（指针方式）</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210125194631546.png" alt="image-20210125194631546" loading="lazy"></p><ol start="10"><li>长度是数组类型的一部分，在传递函数参数时 需要考虑数组的长度，看下面的案例：</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210127073415872.png" alt="image-20210127073415872" loading="lazy"></p></li></ul><h2 id="数组的应用案例"><a href="#数组的应用案例" class="headerlink" title="数组的应用案例"></a>数组的应用案例</h2><ol><li>创建一个byte类型的26个元素的数组，分别放置’A’-‘Z’.使用for循环访问所有元素并打印出来。提示：字符数据运算’A’+1-&gt;’B’</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> arr01 <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>arr01<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  arr01<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">+</span> <span class="token function">byte</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">//要将i转成byte类型</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>arr01<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> arr01<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go      ABCDEFGHIJKLMNOPQRSTUVWXYZ</code></pre><ol start="2"><li>请求出一个数组的最大值，并得到对应的下标。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> intArr <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">932</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">&#125;</span>maxVal <span class="token operator">:=</span> intArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>maxValIndex <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>intArr<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> intArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>maxVal <span class="token punctuation">&#123;</span>maxVal <span class="token operator">=</span> intArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>maxValIndex <span class="token operator">=</span> i<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"maxVal = %v, maxValIndex = %v \n"</span><span class="token punctuation">,</span> maxVal<span class="token punctuation">,</span> maxValIndex<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.gomaxVal &#x3D; 932, maxValIndex &#x3D; 2 </code></pre><ol start="3"><li>请求出一个数组的和和平均值 for-range</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> doubleArr2 <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">float64</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> sum <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> doubleArr2 <span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> val<span class="token punctuation">&#125;</span><span class="token keyword">var</span> avg <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>doubleArr2<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"sum = %v avg = %v\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> avg<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.gosum &#x3D; 55 avg &#x3D; 5.5</code></pre><ol start="4"><li>要求：随机生成五个数，并将其反转打印，复杂应用。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token string">"math/rand"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> intArr3 <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token builtin">len</span> <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>intArr3<span class="token punctuation">)</span>rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  intArr3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"交换前："</span><span class="token punctuation">,</span>intArr3<span class="token punctuation">)</span><span class="token comment">//反转打印</span>temp <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  temp <span class="token operator">=</span> intArr3<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span>  intArr3<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> intArr3<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  intArr3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"交换后："</span><span class="token punctuation">,</span>intArr3<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go交换前： [76 85 22 96 35]交换后： [35 96 22 85 76] ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go交换前： [8 60 13 96 46]交换后： [46 96 13 60 8]</code></pre><h2 id="为什么需要切片"><a href="#为什么需要切片" class="headerlink" title="为什么需要切片"></a>为什么需要切片</h2><ul><li><p>需求</p><p>我们需要一个数组用于保存学生的成绩，但是学生的个数是不确定的，怎么办？ 答案：使用切片</p></li></ul><h2 id="切片的基本介绍"><a href="#切片的基本介绍" class="headerlink" title="切片的基本介绍"></a>切片的基本介绍</h2><ol><li><p>切片的英文是 slice</p></li><li><p>切片是数组的一个引用，因此切片是引用类型，在进行传递时，遵守引用传递的机制。</p></li><li><p>切片的使用和数组类似，遍历切片、访问切片的元素和求切片长度 len(slice)都一样。 </p></li><li><p>切片的长度是可以变化的，因此切片是一个可以动态变化数组。</p></li><li><p>切片定义的基本语法:</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//var 切片名 []类型</span><span class="token comment">//比如</span><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span></code></pre><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2></li></ol><p>演示一个切片的基本使用：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> intArr <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">&#125;</span><span class="token comment">//声明/定义一个切片</span><span class="token comment">//slice := intArr[1:3]</span><span class="token comment">//1. slice就是切片名</span><span class="token comment">//2. intArr[1:3]表示slice引用到intArr这个数组</span><span class="token comment">//3. 引用intArr数组的起始下标为1，最后的下标为3（但是不包含3）</span>slice <span class="token operator">:=</span> intArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"intArr:"</span><span class="token punctuation">,</span> intArr<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice 的元素是 :"</span><span class="token punctuation">,</span> slice<span class="token punctuation">)</span> <span class="token comment">// 22  33</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice的元素个数:"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice的容量:"</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 切片的容量是可以动态变化的</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo03&#x2F;main  go run .&#x2F;main.gointArr: [1 22 33 66 99]slice 的元素是 : [22 33]slice的元素个数: 2slice的容量: 4</code></pre><h2 id="切片在内存中形式（重要）"><a href="#切片在内存中形式（重要）" class="headerlink" title="切片在内存中形式（重要）"></a>切片在内存中形式（重要）</h2><ul><li><p>基本介绍</p><p>为了让大家更加深入的理解切片，我们画图分析切片在内存中是如何布局的，这是一个非常重要的知识点：（以前面的案例来分析）</p></li><li><p>画出前面的切片内存布局</p></li></ul><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210127084544489.png" alt="image-20210127084544489" loading="lazy"></p><ul><li><p>对上面的分析图总结</p><ol><li>slice的确是一个引用类型</li><li>slice从底层来说，其实就是一个数据结构（strcut结构体）</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> slice <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  ptr <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span>  <span class="token builtin">len</span> <span class="token builtin">int</span>  <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">&#125;</span></code></pre><h2 id="切片的使用"><a href="#切片的使用" class="headerlink" title="切片的使用"></a>切片的使用</h2></li><li><p>方式1</p><p>第一种方式：定义一个切片，然后让切片去引用一个已经创建好的数组，比如前面的案例就是这样的。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> slice <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"arr:"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice 的元素是 :"</span><span class="token punctuation">,</span> slice<span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice的元素个数:"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice的容量:"</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>方式2</p><p>第二种方式：通过make来创建切片</p><p>基本语法：<code>var 切片名 []type = make([]type,len,[cap])</code></p><p>参数说明：type就是数据类型，len是大小，cap是指定切片容量，可选，<strong>如果你分配了cap，则要求cap&gt;=len</strong></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> slice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>slice<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>slice<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token comment">//对于切片，必须make使用</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice的size="</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice的cap="</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210127085505587.png" alt="image-20210127085505587" loading="lazy"></p><p>对上面代码的小结：</p><ol><li>通过make方式创建切片可以指定切片的大小和容量</li><li>如果没有给切片的各个元素赋值，那么就会使用默认值【int, float =&gt;0     string=&gt;””   bool=&gt;false】</li><li>通过make方式创建的切片对应的数组是由make底层维护，对外不可见，即只能通过slice去访问各个元素。</li></ol></li><li><p>方式3</p><p>第三种方式：定义一个切片，直接就指定具体数组，使用原理类似make的方式</p><p>案例演示：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//方式3</span><span class="token comment">//第3种方式：定义一个切片，直接就指定具体数组，使用原理类似make的方式</span><span class="token keyword">var</span> strSlice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"mary"</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"strSlice = "</span><span class="token punctuation">,</span> strSlice<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"strSlice size = "</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>strSlice<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"strSlice cap = "</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>strSlice<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>方式1和方式2的区别（面试）</p><p>方式1是直接引用数组，这个数组是事先存在的，程序员是可见的。</p><p>方式2是通过make来创建切片，make也会创建一个数组，是由切片在底层进行维护，程序员是看不见的。make创建切片的示意图：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210127091016998.png" alt="image-20210127091016998" loading="lazy"></p></li></ul><h2 id="切片的遍历"><a href="#切片的遍历" class="headerlink" title="切片的遍历"></a>切片的遍历</h2><p>切片的遍历和数组一样，也有两种方式</p><ul><li>for循环常规方式遍历</li><li>for-range结构遍历切片</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">&#125;</span>slice <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">// 20,30,40</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"slice[%v] = %v\t"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> slice<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token operator">:=</span> <span class="token keyword">range</span> slice <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i = %v, v = %v\t"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo04&#x2F;main  go run .&#x2F;main.goslice[0] &#x3D; 20   slice[1] &#x3D; 30   slice[2] &#x3D; 40i &#x3D; 0, v &#x3D; 20   i &#x3D; 1, v &#x3D; 30   i &#x3D; 2, v &#x3D; 40</code></pre><h2 id="切片的使用的注意事项和细节讨论"><a href="#切片的使用的注意事项和细节讨论" class="headerlink" title="切片的使用的注意事项和细节讨论"></a>切片的使用的注意事项和细节讨论</h2><ol><li><p>切片初始化时 var slice = arr[startIndex:endIndex]</p><pre class="language-none"><code class="language-none">说明:从 arr 数组下标为 startIndex，取到 下标为 endIndex 的元素(不含 arr[endIndex])。</code></pre></li><li><p>切片初始化时，仍然不能越界。范围在 [0-len(arr)] 之间，但是可以动态增长.</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> slice <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>end<span class="token punctuation">]</span> <span class="token operator">&lt;=</span><span class="token operator">></span> <span class="token keyword">var</span> slice <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token keyword">var</span> slice <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span><span class="token operator">></span> <span class="token keyword">var</span> slice <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">var</span> slice <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span><span class="token operator">></span> <span class="token keyword">var</span> slice <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span></code></pre></li><li><p>cap是一个内置函数，用于统计切片的容量，即最大可以存放多少个元素。</p></li><li><p>切片定义完后，还不能使用，因为本身是一个空的，需要让其引用到一个数组，或者 make一个空间供切片来使用</p></li><li><p>切片可以继续切片【演示】</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">&#125;</span>slice <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">// 20,30,40</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"slice[%v] = %v\t"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> slice<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token operator">:=</span> <span class="token keyword">range</span> slice <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i = %v, v = %v\t"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//定义slice2</span>  slice2 <span class="token operator">:=</span> slice<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">// slice [ 20, 30, 40]   [30]</span>  slice2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">// 因为arr， slice和slcie2指向的数据空间是同一个，因此slice2[0]=100</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice2 = "</span><span class="token punctuation">,</span> slice2<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice = "</span><span class="token punctuation">,</span>slice<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"arr = "</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>用append内置函数，可以对切片进行动态追加</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> slice3 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token comment">//通过append直接给slice3追加具体的元素</span>slice3 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice3<span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice3="</span>，slice3<span class="token punctuation">)</span> <span class="token comment">// 100 200 300 400 500 600</span><span class="token comment">//通过append将切片slice3追加给slice3</span>slice3 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice3<span class="token punctuation">,</span> slice3<span class="token operator">...</span><span class="token punctuation">)</span><span class="token comment">//100 200 300 400 500 600 100 200 300 400 500 600</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice3 append slice3 = "</span><span class="token punctuation">,</span> slice3<span class="token punctuation">)</span></code></pre><p>对上面的代码的小结</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210127093344890.png" alt="image-20210127093344890" loading="lazy"></p><p>切片append操作的底层原理分析：</p><p>切片append操作的本质就是对数组扩容</p><p>go 底层会创建一下新的数组newArr(安装扩容后大小)</p><p>将 slice 原来包含的元素拷贝到新的数组 newArr<br>slice 重新引用到 newArr<br>注意 newArr 是在底层来维护的，程序员不可见.</p></li><li><p>切片的拷贝操作</p><p>切片使用copy内置函数完成拷贝，举例说明</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> slice4 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">var</span> slice5 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token function">copy</span><span class="token punctuation">(</span>slice5<span class="token punctuation">,</span> slice4<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice4="</span><span class="token punctuation">,</span> slice4<span class="token punctuation">)</span><span class="token comment">// 1 , 2, 3 , 4 , 5</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice5="</span><span class="token punctuation">,</span> slice5<span class="token punctuation">)</span><span class="token comment">// 1 ,2, 3,4,5,0,0,0,0,0</span></code></pre><p><strong>对上面代码的说明：</strong></p><ol><li> copy(para1, para2) 参数的数据类型是切片</li><li>按照上面的代码来看, slice4 和 slice5 的数据空间是独立，相互不影响，也就是说 slice4[0]= 999,slice5[0] 仍然是 1</li></ol></li><li><p>关于拷贝的注意事项</p><ul><li>下面的代码又没有错误？</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> slice <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token comment">// [0]</span><span class="token function">copy</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span>a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span></code></pre><p>**上面的代码没有问题，可以运行，最后输出的是[1]</p></li><li><p>切片是引用类型，所以在传递时，遵守引用传递机制。看两段代码，并分析底层原理<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210127132312369.png" alt="image-20210127132312369" loading="lazy"></p></li></ol><h2 id="string和slice"><a href="#string和slice" class="headerlink" title="string和slice"></a>string和slice</h2><ol><li>string底层是一个byte数组，因此string也可以进行切片处理案例演示:</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//string底层是一个byte数组，因此string也可以进行切片处理</span>  str <span class="token operator">:=</span> <span class="token string">"hello@atguigu"</span>  <span class="token comment">//使用切片获取到 atguigu</span>  slice <span class="token operator">:=</span> str<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice="</span><span class="token punctuation">,</span>slice<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>string和切片在内存的形式，以”abcd”画出内存示意图</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210127132541123.png" alt="image-20210127132541123" loading="lazy"></p><ol start="3"><li>string是不可变的，也就是说不能通过str[0]=’z’方式来修改字符串</li></ol><pre class="language-go" data-language="go"><code class="language-go">str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'z'</span> <span class="token comment">//编译不会通过，会报错，因为string是不可变的</span></code></pre><ol start="4"><li>如果需要修改字符串，可以先将string -&gt; []byte  或者 []rune -&gt; 修改 -&gt; 重写转成string</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//如果需要修改字符串，可以先将string -> []byte  或者 []rune -> 修改 -> 重写转成string</span><span class="token comment">//"hello@atguigu"=>改成"zello@atguigu"</span>str <span class="token operator">:=</span> <span class="token string">"hello@atguigu"</span>arr1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'z'</span>str <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"str="</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token comment">//细节，我们转成[]byte后，可以处理英文和数字，但是不能处理中文</span><span class="token comment">//原因：[]byte字节来处理string中的字符，而一个汉子是3个字节，因此会出现乱码</span><span class="token comment">//解决方法：将string转成[]rune即可，因为[]rune是按字符处理，兼容汉字</span>arr1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'北'</span>str <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"str="</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span></code></pre><h2 id="切片的课堂练习"><a href="#切片的课堂练习" class="headerlink" title="切片的课堂练习"></a>切片的课堂练习</h2><p><strong>题目</strong>：编写一个函数fbn(n int)，要求完成</p><ol><li>可以接收一个 n int</li><li>能够将斐波那契的数列放到切片中</li><li>提示, 斐波那契的数列形式:</li></ol><p><code>arr[0] = 1; arr[1] = 1; arr[2]=2; arr[3] = 3; arr[4]=5; arr[5]=8</code></p><ul><li>代码+思路：</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">fbn</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//声明一个切片，切片大小n</span>  fbnSlice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>  <span class="token comment">//第一个数和第二个数的斐波那契数为1</span>  fbnSlice<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  fbnSlice<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">//进行for循环存放斐波那契数列</span>  <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    fbnSlice<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fbnSlice<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> fbnSlice<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> fbnSlice<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  fnbSlice <span class="token operator">:=</span> <span class="token function">fbn</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"fnbSlice="</span><span class="token punctuation">,</span> fnbSlice<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo04&#x2F;main  go run .&#x2F;main.gofnbSlice&#x3D; [1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765]</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Go语言の数组与切片&quot;&gt;&lt;a href=&quot;#Go语言の数组与切片&quot; class=&quot;headerlink&quot; title=&quot;Go语言の数组与切片&quot;&gt;&lt;/a&gt;Go语言の数组与切片&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;本文章主要讲Go语言的数组与切片&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Go" scheme="https://mikutown.gitee.io/blog/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-22-Java中的字符串源码分析(1.2.4-1.2.5)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/25/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-22-Java%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-(1.2.4-1.2.5)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/25/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-22-Java%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-(1.2.4-1.2.5)/</id>
    <published>2021-01-25T03:05:06.000Z</published>
    <updated>2021-01-25T05:19:30.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-22-Java中的字符串源码分析-1-2-4-1-2-5"><a href="#算法练习-22-Java中的字符串源码分析-1-2-4-1-2-5" class="headerlink" title="算法练习-22-Java中的字符串源码分析(1.2.4-1.2.5)"></a>算法练习-22-Java中的字符串源码分析(1.2.4-1.2.5)</h1><ul><li>知识点<ul><li>Java中的字符串</li><li>字符串常量</li></ul></li></ul><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="1-2-4以下这段代码会打印出什么？"><a href="#1-2-4以下这段代码会打印出什么？" class="headerlink" title="1.2.4以下这段代码会打印出什么？"></a><strong>1.2.4以下这段代码会打印出什么？</strong></h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> string1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> string2 <span class="token operator">=</span> string1<span class="token punctuation">;</span>        string1 <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><ul><li>打印结果：</li></ul><pre class="language-none"><code class="language-none">worldhello</code></pre><h3 id="1-2-5以下这段代码会打印出什么？"><a href="#1-2-5以下这段代码会打印出什么？" class="headerlink" title="1.2.5以下这段代码会打印出什么？"></a>1.2.5以下这段代码会打印出什么？</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>分析 </p><p>只是截取了String类型的s，但是s本身没有改变哦 所以还是打印本来的值</p></li></ul><pre class="language-none"><code class="language-none">Hello World</code></pre><h2 id="附录：String方法常用API"><a href="#附录：String方法常用API" class="headerlink" title="附录：String方法常用API"></a>附录：String方法常用API</h2><p><img src="https://gitee.com/mikutown/pic/raw/master/img/d98257d1697a3e7e8ed0c0f7ffacfd95.png" alt="img" loading="lazy"></p><p>附上String源码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/* * Copyright (c) 1994, 2013, Oracle and/or its affiliates. All rights reserved. * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms. * * * * * * * * * * * * * * * * * * * * */</span><span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>lang</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectStreamField</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">UnsupportedEncodingException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">Charset</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Formatter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Locale</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StringJoiner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Matcher</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Pattern</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">PatternSyntaxException</span><span class="token punctuation">;</span><span class="token comment">/** * The &#123;@code String&#125; class represents character strings. All * string literals in Java programs, such as &#123;@code "abc"&#125;, are * implemented as instances of this class. * &lt;p> * Strings are constant; their values cannot be changed after they * are created. String buffers support mutable strings. * Because String objects are immutable they can be shared. For example: * &lt;blockquote>&lt;pre> *     String str = "abc"; * &lt;/pre>&lt;/blockquote>&lt;p> * is equivalent to: * &lt;blockquote>&lt;pre> *     char data[] = &#123;'a', 'b', 'c'&#125;; *     String str = new String(data); * &lt;/pre>&lt;/blockquote>&lt;p> * Here are some more examples of how strings can be used: * &lt;blockquote>&lt;pre> *     System.out.println("abc"); *     String cde = "cde"; *     System.out.println("abc" + cde); *     String c = "abc".substring(2,3); *     String d = cde.substring(1, 2); * &lt;/pre>&lt;/blockquote> * &lt;p> * The class &#123;@code String&#125; includes methods for examining * individual characters of the sequence, for comparing strings, for * searching strings, for extracting substrings, and for creating a * copy of a string with all characters translated to uppercase or to * lowercase. Case mapping is based on the Unicode Standard version * specified by the &#123;@link java.lang.Character Character&#125; class. * &lt;p> * The Java language provides special support for the string * concatenation operator (&amp;nbsp;+&amp;nbsp;), and for conversion of * other objects to strings. String concatenation is implemented * through the &#123;@code StringBuilder&#125;(or &#123;@code StringBuffer&#125;) * class and its &#123;@code append&#125; method. * String conversions are implemented through the method * &#123;@code toString&#125;, defined by &#123;@code Object&#125; and * inherited by all classes in Java. For additional information on * string concatenation and conversion, see Gosling, Joy, and Steele, * &lt;i>The Java Language Specification&lt;/i>. * * &lt;p> Unless otherwise noted, passing a &lt;tt>null&lt;/tt> argument to a constructor * or method in this class will cause a &#123;@link NullPointerException&#125; to be * thrown. * * &lt;p>A &#123;@code String&#125; represents a string in the UTF-16 format * in which &lt;em>supplementary characters&lt;/em> are represented by &lt;em>surrogate * pairs&lt;/em> (see the section &lt;a href="Character.html#unicode">Unicode * Character Representations&lt;/a> in the &#123;@code Character&#125; class for * more information). * Index values refer to &#123;@code char&#125; code units, so a supplementary * character uses two positions in a &#123;@code String&#125;. * &lt;p>The &#123;@code String&#125; class provides methods for dealing with * Unicode code points (i.e., characters), in addition to those for * dealing with Unicode code units (i.e., &#123;@code char&#125; values). * * @author  Lee Boynton * @author  Arthur van Hoff * @author  Martin Buchholz * @author  Ulf Zibis * @see     java.lang.Object#toString() * @see     java.lang.StringBuffer * @see     java.lang.StringBuilder * @see     java.nio.charset.Charset * @since   JDK1.0 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span>    <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** The value is used for character storage. */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/** Cache the hash code for the string */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span> <span class="token comment">// Default to 0</span>    <span class="token comment">/** use serialVersionUID from JDK 1.0.2 for interoperability */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">6849794470754667710L</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Class String is special cased within the Serialization Stream Protocol.     *     * A String instance is written into an ObjectOutputStream according to     * &lt;a href="&#123;@docRoot&#125;/../platform/serialization/spec/output.html">     * Object Serialization Specification, Section 6.2, "Stream Elements"&lt;/a>     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ObjectStreamField</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialPersistentFields <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">ObjectStreamField</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Initializes a newly created &#123;@code String&#125; object so that it represents     * an empty character sequence.  Note that use of this constructor is     * unnecessary since Strings are immutable.     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Initializes a newly created &#123;@code String&#125; object so that it represents     * the same sequence of characters as the argument; in other words, the     * newly created string is a copy of the argument string. Unless an     * explicit copy of &#123;@code original&#125; is needed, use of this constructor is     * unnecessary since Strings are immutable.     *     * @param  original     *         A &#123;@code String&#125;     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">String</span> original<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> original<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> original<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Allocates a new &#123;@code String&#125; so that it represents the sequence of     * characters currently contained in the character array argument. The     * contents of the character array are copied; subsequent modification of     * the character array does not affect the newly created string.     *     * @param  value     *         The initial value of the string     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Allocates a new &#123;@code String&#125; that contains characters from a subarray     * of the character array argument. The &#123;@code offset&#125; argument is the     * index of the first character of the subarray and the &#123;@code count&#125;     * argument specifies the length of the subarray. The contents of the     * subarray are copied; subsequent modification of the character array does     * not affect the newly created string.     *     * @param  value     *         Array that is the source of characters     *     * @param  offset     *         The initial offset     *     * @param  count     *         The length     *     * @throws  IndexOutOfBoundsException     *          If the &#123;@code offset&#125; and &#123;@code count&#125; arguments index     *          characters outside the bounds of the &#123;@code value&#125; array     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Note: offset or count might be near -1>>>1.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">></span> value<span class="token punctuation">.</span>length <span class="token operator">-</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> offset<span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Allocates a new &#123;@code String&#125; that contains characters from a subarray     * of the &lt;a href="Character.html#unicode">Unicode code point&lt;/a> array     * argument.  The &#123;@code offset&#125; argument is the index of the first code     * point of the subarray and the &#123;@code count&#125; argument specifies the     * length of the subarray.  The contents of the subarray are converted to     * &#123;@code char&#125;s; subsequent modification of the &#123;@code int&#125; array does not     * affect the newly created string.     *     * @param  codePoints     *         Array that is the source of Unicode code points     *     * @param  offset     *         The initial offset     *     * @param  count     *         The length     *     * @throws  IllegalArgumentException     *          If any invalid Unicode code point is found in &#123;@code     *          codePoints&#125;     *     * @throws  IndexOutOfBoundsException     *          If the &#123;@code offset&#125; and &#123;@code count&#125; arguments index     *          characters outside the bounds of the &#123;@code codePoints&#125; array     *     * @since  1.5     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codePoints<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;=</span> codePoints<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Note: offset or count might be near -1>>>1.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">></span> codePoints<span class="token punctuation">.</span>length <span class="token operator">-</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> end <span class="token operator">=</span> offset <span class="token operator">+</span> count<span class="token punctuation">;</span>        <span class="token comment">// Pass 1: Compute precise size of char[]</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> count<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> offset<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> codePoints<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isBmpCodePoint</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isValidCodePoint</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                n<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Pass 2: Allocate and fill in char[]</span>        <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> offset<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> codePoints<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isBmpCodePoint</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                v<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toSurrogates</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> v<span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Allocates a new &#123;@code String&#125; constructed from a subarray of an array     * of 8-bit integer values.     *     * &lt;p> The &#123;@code offset&#125; argument is the index of the first byte of the     * subarray, and the &#123;@code count&#125; argument specifies the length of the     * subarray.     *     * &lt;p> Each &#123;@code byte&#125; in the subarray is converted to a &#123;@code char&#125; as     * specified in the method above.     *     * @deprecated This method does not properly convert bytes into characters.     * As of JDK&amp;nbsp;1.1, the preferred way to do this is via the     * &#123;@code String&#125; constructors that take a &#123;@link     * java.nio.charset.Charset&#125;, charset name, or that use the platform's     * default charset.     *     * @param  ascii     *         The bytes to be converted to characters     *     * @param  hibyte     *         The top 8 bits of each 16-bit Unicode code unit     *     * @param  offset     *         The initial offset     * @param  count     *         The length     *     * @throws  IndexOutOfBoundsException     *          If the &#123;@code offset&#125; or &#123;@code count&#125; argument is invalid     *     * @see  #String(byte[], int)     * @see  #String(byte[], int, int, java.lang.String)     * @see  #String(byte[], int, int, java.nio.charset.Charset)     * @see  #String(byte[], int, int)     * @see  #String(byte[], java.lang.String)     * @see  #String(byte[], java.nio.charset.Charset)     * @see  #String(byte[])     */</span>    <span class="token annotation punctuation">@Deprecated</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span> ascii<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> hibyte<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">checkBounds</span><span class="token punctuation">(</span>ascii<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hibyte <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> count<span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                value<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ascii<span class="token punctuation">[</span>i <span class="token operator">+</span> offset<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            hibyte <span class="token operator">&lt;&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> count<span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                value<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>hibyte <span class="token operator">|</span> <span class="token punctuation">(</span>ascii<span class="token punctuation">[</span>i <span class="token operator">+</span> offset<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Allocates a new &#123;@code String&#125; containing characters constructed from     * an array of 8-bit integer values. Each character &lt;i>c&lt;/i>in the     * resulting string is constructed from the corresponding component     * &lt;i>b&lt;/i> in the byte array such that:     *     * &lt;blockquote>&lt;pre>     *     &lt;b>&lt;i>c&lt;/i>&lt;/b> == (char)(((hibyte &amp;amp; 0xff) &amp;lt;&amp;lt; 8)     *                         | (&lt;b>&lt;i>b&lt;/i>&lt;/b> &amp;amp; 0xff))     * &lt;/pre>&lt;/blockquote>     *     * @deprecated  This method does not properly convert bytes into     * characters.  As of JDK&amp;nbsp;1.1, the preferred way to do this is via the     * &#123;@code String&#125; constructors that take a &#123;@link     * java.nio.charset.Charset&#125;, charset name, or that use the platform's     * default charset.     *     * @param  ascii     *         The bytes to be converted to characters     *     * @param  hibyte     *         The top 8 bits of each 16-bit Unicode code unit     *     * @see  #String(byte[], int, int, java.lang.String)     * @see  #String(byte[], int, int, java.nio.charset.Charset)     * @see  #String(byte[], int, int)     * @see  #String(byte[], java.lang.String)     * @see  #String(byte[], java.nio.charset.Charset)     * @see  #String(byte[])     */</span>    <span class="token annotation punctuation">@Deprecated</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span> ascii<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> hibyte<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>ascii<span class="token punctuation">,</span> hibyte<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ascii<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* Common private utility method used to bounds check the byte array     * and requested offset &amp; length values used by the String(byte[],..)     * constructors.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkBounds</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">></span> bytes<span class="token punctuation">.</span>length <span class="token operator">-</span> length<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Constructs a new &#123;@code String&#125; by decoding the specified subarray of     * bytes using the specified charset.  The length of the new &#123;@code String&#125;     * is a function of the charset, and hence may not be equal to the length     * of the subarray.     *     * &lt;p> The behavior of this constructor when the given bytes are not valid     * in the given charset is unspecified.  The &#123;@link     * java.nio.charset.CharsetDecoder&#125; class should be used when more control     * over the decoding process is required.     *     * @param  bytes     *         The bytes to be decoded into characters     *     * @param  offset     *         The index of the first byte to decode     *     * @param  length     *         The number of bytes to decode     * @param  charsetName     *         The name of a supported &#123;@linkplain java.nio.charset.Charset     *         charset&#125;     *     * @throws  UnsupportedEncodingException     *          If the named charset is not supported     *     * @throws  IndexOutOfBoundsException     *          If the &#123;@code offset&#125; and &#123;@code length&#125; arguments index     *          characters outside the bounds of the &#123;@code bytes&#125; array     *     * @since  JDK1.1     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span> bytes<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token class-name">String</span> charsetName<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">UnsupportedEncodingException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>charsetName <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"charsetName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkBounds</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">StringCoding</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>charsetName<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Constructs a new &#123;@code String&#125; by decoding the specified subarray of     * bytes using the specified &#123;@linkplain java.nio.charset.Charset charset&#125;.     * The length of the new &#123;@code String&#125; is a function of the charset, and     * hence may not be equal to the length of the subarray.     *     * &lt;p> This method always replaces malformed-input and unmappable-character     * sequences with this charset's default replacement string.  The &#123;@link     * java.nio.charset.CharsetDecoder&#125; class should be used when more control     * over the decoding process is required.     *     * @param  bytes     *         The bytes to be decoded into characters     *     * @param  offset     *         The index of the first byte to decode     *     * @param  length     *         The number of bytes to decode     *     * @param  charset     *         The &#123;@linkplain java.nio.charset.Charset charset&#125; to be used to     *         decode the &#123;@code bytes&#125;     *     * @throws  IndexOutOfBoundsException     *          If the &#123;@code offset&#125; and &#123;@code length&#125; arguments index     *          characters outside the bounds of the &#123;@code bytes&#125; array     *     * @since  1.6     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span> bytes<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token class-name">Charset</span> charset<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>charset <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"charset"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkBounds</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span>  <span class="token class-name">StringCoding</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>charset<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Constructs a new &#123;@code String&#125; by decoding the specified array of bytes     * using the specified &#123;@linkplain java.nio.charset.Charset charset&#125;.  The     * length of the new &#123;@code String&#125; is a function of the charset, and hence     * may not be equal to the length of the byte array.     *     * &lt;p> The behavior of this constructor when the given bytes are not valid     * in the given charset is unspecified.  The &#123;@link     * java.nio.charset.CharsetDecoder&#125; class should be used when more control     * over the decoding process is required.     *     * @param  bytes     *         The bytes to be decoded into characters     *     * @param  charsetName     *         The name of a supported &#123;@linkplain java.nio.charset.Charset     *         charset&#125;     *     * @throws  UnsupportedEncodingException     *          If the named charset is not supported     *     * @since  JDK1.1     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span> bytes<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">String</span> charsetName<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">UnsupportedEncodingException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">,</span> charsetName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Constructs a new &#123;@code String&#125; by decoding the specified array of     * bytes using the specified &#123;@linkplain java.nio.charset.Charset charset&#125;.     * The length of the new &#123;@code String&#125; is a function of the charset, and     * hence may not be equal to the length of the byte array.     *     * &lt;p> This method always replaces malformed-input and unmappable-character     * sequences with this charset's default replacement string.  The &#123;@link     * java.nio.charset.CharsetDecoder&#125; class should be used when more control     * over the decoding process is required.     *     * @param  bytes     *         The bytes to be decoded into characters     *     * @param  charset     *         The &#123;@linkplain java.nio.charset.Charset charset&#125; to be used to     *         decode the &#123;@code bytes&#125;     *     * @since  1.6     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span> bytes<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Charset</span> charset<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Constructs a new &#123;@code String&#125; by decoding the specified subarray of     * bytes using the platform's default charset.  The length of the new     * &#123;@code String&#125; is a function of the charset, and hence may not be equal     * to the length of the subarray.     *     * &lt;p> The behavior of this constructor when the given bytes are not valid     * in the default charset is unspecified.  The &#123;@link     * java.nio.charset.CharsetDecoder&#125; class should be used when more control     * over the decoding process is required.     *     * @param  bytes     *         The bytes to be decoded into characters     *     * @param  offset     *         The index of the first byte to decode     *     * @param  length     *         The number of bytes to decode     *     * @throws  IndexOutOfBoundsException     *          If the &#123;@code offset&#125; and the &#123;@code length&#125; arguments index     *          characters outside the bounds of the &#123;@code bytes&#125; array     *     * @since  JDK1.1     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span> bytes<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">checkBounds</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">StringCoding</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Constructs a new &#123;@code String&#125; by decoding the specified array of bytes     * using the platform's default charset.  The length of the new &#123;@code     * String&#125; is a function of the charset, and hence may not be equal to the     * length of the byte array.     *     * &lt;p> The behavior of this constructor when the given bytes are not valid     * in the default charset is unspecified.  The &#123;@link     * java.nio.charset.CharsetDecoder&#125; class should be used when more control     * over the decoding process is required.     *     * @param  bytes     *         The bytes to be decoded into characters     *     * @since  JDK1.1     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span> bytes<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Allocates a new string that contains the sequence of characters     * currently contained in the string buffer argument. The contents of the     * string buffer are copied; subsequent modification of the string buffer     * does not affect the newly created string.     *     * @param  buffer     *         A &#123;@code StringBuffer&#125;     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">StringBuffer</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Allocates a new string that contains the sequence of characters     * currently contained in the string builder argument. The contents of the     * string builder are copied; subsequent modification of the string builder     * does not affect the newly created string.     *     * &lt;p> This constructor is provided to ease migration to &#123;@code     * StringBuilder&#125;. Obtaining a string from a string builder via the &#123;@code     * toString&#125; method is likely to run faster and is generally preferred.     *     * @param   builder     *          A &#123;@code StringBuilder&#125;     *     * @since  1.5     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    * Package private constructor which shares value array for speed.    * this constructor is always expected to be called with share==true.    * a separate constructor is needed because we already have a public    * String(char[]) constructor that makes a copy of the given char[].    */</span>    <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> share<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// assert share : "unshared not supported";</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the length of this string.     * The length is equal to the number of &lt;a href="Character.html#unicode">Unicode     * code units&lt;/a> in the string.     *     * @return  the length of the sequence of characters represented by this     *          object.     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns &#123;@code true&#125; if, and only if, &#123;@link #length()&#125; is &#123;@code 0&#125;.     *     * @return &#123;@code true&#125; if &#123;@link #length()&#125; is &#123;@code 0&#125;, otherwise     * &#123;@code false&#125;     *     * @since 1.6     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> value<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the &#123;@code char&#125; value at the     * specified index. An index ranges from &#123;@code 0&#125; to     * &#123;@code length() - 1&#125;. The first &#123;@code char&#125; value of the sequence     * is at index &#123;@code 0&#125;, the next at index &#123;@code 1&#125;,     * and so on, as for array indexing.     *     * &lt;p>If the &#123;@code char&#125; value specified by the index is a     * &lt;a href="Character.html#unicode">surrogate&lt;/a>, the surrogate     * value is returned.     *     * @param      index   the index of the &#123;@code char&#125; value.     * @return     the &#123;@code char&#125; value at the specified index of this string.     *             The first &#123;@code char&#125; value is at index &#123;@code 0&#125;.     * @exception  IndexOutOfBoundsException  if the &#123;@code index&#125;     *             argument is negative or not less than the length of this     *             string.     */</span>    <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> value<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the character (Unicode code point) at the specified     * index. The index refers to &#123;@code char&#125; values     * (Unicode code units) and ranges from &#123;@code 0&#125; to     * &#123;@link #length()&#125;&#123;@code  - 1&#125;.     *     * &lt;p> If the &#123;@code char&#125; value specified at the given index     * is in the high-surrogate range, the following index is less     * than the length of this &#123;@code String&#125;, and the     * &#123;@code char&#125; value at the following index is in the     * low-surrogate range, then the supplementary code point     * corresponding to this surrogate pair is returned. Otherwise,     * the &#123;@code char&#125; value at the given index is returned.     *     * @param      index the index to the &#123;@code char&#125; values     * @return     the code point value of the character at the     *             &#123;@code index&#125;     * @exception  IndexOutOfBoundsException  if the &#123;@code index&#125;     *             argument is negative or not less than the length of this     *             string.     * @since      1.5     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">codePointAtImpl</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the character (Unicode code point) before the specified     * index. The index refers to &#123;@code char&#125; values     * (Unicode code units) and ranges from &#123;@code 1&#125; to &#123;@link     * CharSequence#length() length&#125;.     *     * &lt;p> If the &#123;@code char&#125; value at &#123;@code (index - 1)&#125;     * is in the low-surrogate range, &#123;@code (index - 2)&#125; is not     * negative, and the &#123;@code char&#125; value at &#123;@code (index -     * 2)&#125; is in the high-surrogate range, then the     * supplementary code point value of the surrogate pair is     * returned. If the &#123;@code char&#125; value at &#123;@code index -     * 1&#125; is an unpaired low-surrogate or a high-surrogate, the     * surrogate value is returned.     *     * @param     index the index following the code point that should be returned     * @return    the Unicode code point value before the given index.     * @exception IndexOutOfBoundsException if the &#123;@code index&#125;     *            argument is less than 1 or greater than the length     *            of this string.     * @since     1.5     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">codePointBefore</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">codePointBeforeImpl</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the number of Unicode code points in the specified text     * range of this &#123;@code String&#125;. The text range begins at the     * specified &#123;@code beginIndex&#125; and extends to the     * &#123;@code char&#125; at index &#123;@code endIndex - 1&#125;. Thus the     * length (in &#123;@code char&#125;s) of the text range is     * &#123;@code endIndex-beginIndex&#125;. Unpaired surrogates within     * the text range count as one code point each.     *     * @param beginIndex the index to the first &#123;@code char&#125; of     * the text range.     * @param endIndex the index after the last &#123;@code char&#125; of     * the text range.     * @return the number of Unicode code points in the specified text     * range     * @exception IndexOutOfBoundsException if the     * &#123;@code beginIndex&#125; is negative, or &#123;@code endIndex&#125;     * is larger than the length of this &#123;@code String&#125;, or     * &#123;@code beginIndex&#125; is larger than &#123;@code endIndex&#125;.     * @since  1.5     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">codePointCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beginIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> endIndex <span class="token operator">></span> value<span class="token punctuation">.</span>length <span class="token operator">||</span> beginIndex <span class="token operator">></span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">codePointCountImpl</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> beginIndex<span class="token punctuation">,</span> endIndex <span class="token operator">-</span> beginIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the index within this &#123;@code String&#125; that is     * offset from the given &#123;@code index&#125; by     * &#123;@code codePointOffset&#125; code points. Unpaired surrogates     * within the text range given by &#123;@code index&#125; and     * &#123;@code codePointOffset&#125; count as one code point each.     *     * @param index the index to be offset     * @param codePointOffset the offset in code points     * @return the index within this &#123;@code String&#125;     * @exception IndexOutOfBoundsException if &#123;@code index&#125;     *   is negative or larger then the length of this     *   &#123;@code String&#125;, or if &#123;@code codePointOffset&#125; is positive     *   and the substring starting with &#123;@code index&#125; has fewer     *   than &#123;@code codePointOffset&#125; code points,     *   or if &#123;@code codePointOffset&#125; is negative and the substring     *   before &#123;@code index&#125; has fewer than the absolute value     *   of &#123;@code codePointOffset&#125; code points.     * @since 1.5     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">offsetByCodePoints</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> codePointOffset<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">offsetByCodePointsImpl</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">,</span>                index<span class="token punctuation">,</span> codePointOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Copy characters from this string into dst starting at dstBegin.     * This method doesn't perform any range checking.     */</span>    <span class="token keyword">void</span> <span class="token function">getChars</span><span class="token punctuation">(</span><span class="token keyword">char</span> dst<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> dstBegin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dst<span class="token punctuation">,</span> dstBegin<span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Copies characters from this string into the destination character     * array.     * &lt;p>     * The first character to be copied is at index &#123;@code srcBegin&#125;;     * the last character to be copied is at index &#123;@code srcEnd-1&#125;     * (thus the total number of characters to be copied is     * &#123;@code srcEnd-srcBegin&#125;). The characters are copied into the     * subarray of &#123;@code dst&#125; starting at index &#123;@code dstBegin&#125;     * and ending at index:     * &lt;blockquote>&lt;pre>     *     dstBegin + (srcEnd-srcBegin) - 1     * &lt;/pre>&lt;/blockquote>     *     * @param      srcBegin   index of the first character in the string     *                        to copy.     * @param      srcEnd     index after the last character in the string     *                        to copy.     * @param      dst        the destination array.     * @param      dstBegin   the start offset in the destination array.     * @exception IndexOutOfBoundsException If any of the following     *            is true:     *            &lt;ul>&lt;li>&#123;@code srcBegin&#125; is negative.     *            &lt;li>&#123;@code srcBegin&#125; is greater than &#123;@code srcEnd&#125;     *            &lt;li>&#123;@code srcEnd&#125; is greater than the length of this     *                string     *            &lt;li>&#123;@code dstBegin&#125; is negative     *            &lt;li>&#123;@code dstBegin+(srcEnd-srcBegin)&#125; is larger than     *                &#123;@code dst.length&#125;&lt;/ul>     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getChars</span><span class="token punctuation">(</span><span class="token keyword">int</span> srcBegin<span class="token punctuation">,</span> <span class="token keyword">int</span> srcEnd<span class="token punctuation">,</span> <span class="token keyword">char</span> dst<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> dstBegin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>srcBegin <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>srcBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>srcEnd <span class="token operator">></span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>srcEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>srcBegin <span class="token operator">></span> srcEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>srcEnd <span class="token operator">-</span> srcBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> srcBegin<span class="token punctuation">,</span> dst<span class="token punctuation">,</span> dstBegin<span class="token punctuation">,</span> srcEnd <span class="token operator">-</span> srcBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Copies characters from this string into the destination byte array. Each     * byte receives the 8 low-order bits of the corresponding character. The     * eight high-order bits of each character are not copied and do not     * participate in the transfer in any way.     *     * &lt;p> The first character to be copied is at index &#123;@code srcBegin&#125;; the     * last character to be copied is at index &#123;@code srcEnd-1&#125;.  The total     * number of characters to be copied is &#123;@code srcEnd-srcBegin&#125;. The     * characters, converted to bytes, are copied into the subarray of &#123;@code     * dst&#125; starting at index &#123;@code dstBegin&#125; and ending at index:     *     * &lt;blockquote>&lt;pre>     *     dstBegin + (srcEnd-srcBegin) - 1     * &lt;/pre>&lt;/blockquote>     *     * @deprecated  This method does not properly convert characters into     * bytes.  As of JDK&amp;nbsp;1.1, the preferred way to do this is via the     * &#123;@link #getBytes()&#125; method, which uses the platform's default charset.     *     * @param  srcBegin     *         Index of the first character in the string to copy     *     * @param  srcEnd     *         Index after the last character in the string to copy     *     * @param  dst     *         The destination array     *     * @param  dstBegin     *         The start offset in the destination array     *     * @throws  IndexOutOfBoundsException     *          If any of the following is true:     *          &lt;ul>     *            &lt;li> &#123;@code srcBegin&#125; is negative     *            &lt;li> &#123;@code srcBegin&#125; is greater than &#123;@code srcEnd&#125;     *            &lt;li> &#123;@code srcEnd&#125; is greater than the length of this String     *            &lt;li> &#123;@code dstBegin&#125; is negative     *            &lt;li> &#123;@code dstBegin+(srcEnd-srcBegin)&#125; is larger than &#123;@code     *                 dst.length&#125;     *          &lt;/ul>     */</span>    <span class="token annotation punctuation">@Deprecated</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token keyword">int</span> srcBegin<span class="token punctuation">,</span> <span class="token keyword">int</span> srcEnd<span class="token punctuation">,</span> <span class="token keyword">byte</span> dst<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> dstBegin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>srcBegin <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>srcBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>srcEnd <span class="token operator">></span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>srcEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>srcBegin <span class="token operator">></span> srcEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>srcEnd <span class="token operator">-</span> srcBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> dstBegin<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> srcEnd<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> srcBegin<span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> val <span class="token operator">=</span> value<span class="token punctuation">;</span>   <span class="token comment">/* avoid getfield opcode */</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dst<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>val<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Encodes this &#123;@code String&#125; into a sequence of bytes using the named     * charset, storing the result into a new byte array.     *     * &lt;p> The behavior of this method when this string cannot be encoded in     * the given charset is unspecified.  The &#123;@link     * java.nio.charset.CharsetEncoder&#125; class should be used when more control     * over the encoding process is required.     *     * @param  charsetName     *         The name of a supported &#123;@linkplain java.nio.charset.Charset     *         charset&#125;     *     * @return  The resultant byte array     *     * @throws  UnsupportedEncodingException     *          If the named charset is not supported     *     * @since  JDK1.1     */</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">String</span> charsetName<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">UnsupportedEncodingException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>charsetName <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">StringCoding</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>charsetName<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Encodes this &#123;@code String&#125; into a sequence of bytes using the given     * &#123;@linkplain java.nio.charset.Charset charset&#125;, storing the result into a     * new byte array.     *     * &lt;p> This method always replaces malformed-input and unmappable-character     * sequences with this charset's default replacement byte array.  The     * &#123;@link java.nio.charset.CharsetEncoder&#125; class should be used when more     * control over the encoding process is required.     *     * @param  charset     *         The &#123;@linkplain java.nio.charset.Charset&#125; to be used to encode     *         the &#123;@code String&#125;     *     * @return  The resultant byte array     *     * @since  1.6     */</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">Charset</span> charset<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>charset <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">StringCoding</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>charset<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Encodes this &#123;@code String&#125; into a sequence of bytes using the     * platform's default charset, storing the result into a new byte array.     *     * &lt;p> The behavior of this method when this string cannot be encoded in     * the default charset is unspecified.  The &#123;@link     * java.nio.charset.CharsetEncoder&#125; class should be used when more control     * over the encoding process is required.     *     * @return  The resultant byte array     *     * @since      JDK1.1     */</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">StringCoding</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Compares this string to the specified object.  The result is &#123;@code     * true&#125; if and only if the argument is not &#123;@code null&#125; and is a &#123;@code     * String&#125; object that represents the same sequence of characters as this     * object.     *     * @param  anObject     *         The object to compare this &#123;@code String&#125; against     *     * @return  &#123;@code true&#125; if the given object represents a &#123;@code String&#125;     *          equivalent to this string, &#123;@code false&#125; otherwise     *     * @see  #compareTo(String)     * @see  #equalsIgnoreCase(String)     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> anotherString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Compares this string to the specified &#123;@code StringBuffer&#125;.  The result     * is &#123;@code true&#125; if and only if this &#123;@code String&#125; represents the same     * sequence of characters as the specified &#123;@code StringBuffer&#125;. This method     * synchronizes on the &#123;@code StringBuffer&#125;.     *     * @param  sb     *         The &#123;@code StringBuffer&#125; to compare this &#123;@code String&#125; against     *     * @return  &#123;@code true&#125; if this &#123;@code String&#125; represents the same     *          sequence of characters as the specified &#123;@code StringBuffer&#125;,     *          &#123;@code false&#125; otherwise     *     * @since  1.4     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contentEquals</span><span class="token punctuation">(</span><span class="token class-name">StringBuffer</span> sb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">contentEquals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span><span class="token punctuation">)</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">nonSyncContentEquals</span><span class="token punctuation">(</span><span class="token class-name">AbstractStringBuilder</span> sb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> v1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Compares this string to the specified &#123;@code CharSequence&#125;.  The     * result is &#123;@code true&#125; if and only if this &#123;@code String&#125; represents the     * same sequence of char values as the specified sequence. Note that if the     * &#123;@code CharSequence&#125; is a &#123;@code StringBuffer&#125; then the method     * synchronizes on it.     *     * @param  cs     *         The sequence to compare this &#123;@code String&#125; against     *     * @return  &#123;@code true&#125; if this &#123;@code String&#125; represents the same     *          sequence of char values as the specified sequence, &#123;@code     *          false&#125; otherwise     *     * @since  1.5     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contentEquals</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> cs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Argument is a StringBuffer, StringBuilder</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cs <span class="token keyword">instanceof</span> <span class="token class-name">AbstractStringBuilder</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cs <span class="token keyword">instanceof</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">synchronized</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">return</span> <span class="token function">nonSyncContentEquals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AbstractStringBuilder</span><span class="token punctuation">)</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token function">nonSyncContentEquals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AbstractStringBuilder</span><span class="token punctuation">)</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Argument is a String</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cs <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">equals</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Argument is a generic CharSequence</span>        <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> v1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> cs<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> cs<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Compares this &#123;@code String&#125; to another &#123;@code String&#125;, ignoring case     * considerations.  Two strings are considered equal ignoring case if they     * are of the same length and corresponding characters in the two strings     * are equal ignoring case.     *     * &lt;p> Two characters &#123;@code c1&#125; and &#123;@code c2&#125; are considered the same     * ignoring case if at least one of the following is true:     * &lt;ul>     *   &lt;li> The two characters are the same (as compared by the     *        &#123;@code ==&#125; operator)     *   &lt;li> Applying the method &#123;@link     *        java.lang.Character#toUpperCase(char)&#125; to each character     *        produces the same result     *   &lt;li> Applying the method &#123;@link     *        java.lang.Character#toLowerCase(char)&#125; to each character     *        produces the same result     * &lt;/ul>     *     * @param  anotherString     *         The &#123;@code String&#125; to compare this &#123;@code String&#125; against     *     * @return  &#123;@code true&#125; if the argument is not &#123;@code null&#125; and it     *          represents an equivalent &#123;@code String&#125; ignoring case; &#123;@code     *          false&#125; otherwise     *     * @see  #equals(Object)     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> anotherString<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anotherString<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span>                <span class="token operator">:</span> <span class="token punctuation">(</span>anotherString <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">==</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> <span class="token function">regionMatches</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> anotherString<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Compares two strings lexicographically.     * The comparison is based on the Unicode value of each character in     * the strings. The character sequence represented by this     * &#123;@code String&#125; object is compared lexicographically to the     * character sequence represented by the argument string. The result is     * a negative integer if this &#123;@code String&#125; object     * lexicographically precedes the argument string. The result is a     * positive integer if this &#123;@code String&#125; object lexicographically     * follows the argument string. The result is zero if the strings     * are equal; &#123;@code compareTo&#125; returns &#123;@code 0&#125; exactly when     * the &#123;@link #equals(Object)&#125; method would return &#123;@code true&#125;.     * &lt;p>     * This is the definition of lexicographic ordering. If two strings are     * different, then either they have different characters at some index     * that is a valid index for both strings, or their lengths are different,     * or both. If they have different characters at one or more index     * positions, let &lt;i>k&lt;/i> be the smallest such index; then the string     * whose character at position &lt;i>k&lt;/i> has the smaller value, as     * determined by using the &amp;lt; operator, lexicographically precedes the     * other string. In this case, &#123;@code compareTo&#125; returns the     * difference of the two character values at position &#123;@code k&#125; in     * the two string -- that is, the value:     * &lt;blockquote>&lt;pre>     * this.charAt(k)-anotherString.charAt(k)     * &lt;/pre>&lt;/blockquote>     * If there is no index position at which they differ, then the shorter     * string lexicographically precedes the longer string. In this case,     * &#123;@code compareTo&#125; returns the difference of the lengths of the     * strings -- that is, the value:     * &lt;blockquote>&lt;pre>     * this.length()-anotherString.length()     * &lt;/pre>&lt;/blockquote>     *     * @param   anotherString   the &#123;@code String&#125; to be compared.     * @return  the value &#123;@code 0&#125; if the argument string is equal to     *          this string; a value less than &#123;@code 0&#125; if this string     *          is lexicographically less than the string argument; and a     *          value greater than &#123;@code 0&#125; if this string is     *          lexicographically greater than the string argument.     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">String</span> anotherString<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len1 <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> len2 <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> lim <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>len1<span class="token punctuation">,</span> len2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> lim<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> c1 <span class="token operator">=</span> v1<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> c2 <span class="token operator">=</span> v2<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">!=</span> c2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> c1 <span class="token operator">-</span> c2<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> len1 <span class="token operator">-</span> len2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * A Comparator that orders &#123;@code String&#125; objects as by     * &#123;@code compareToIgnoreCase&#125;. This comparator is serializable.     * &lt;p>     * Note that this Comparator does &lt;em>not&lt;/em> take locale into account,     * and will result in an unsatisfactory ordering for certain locales.     * The java.text package provides &lt;em>Collators&lt;/em> to allow     * locale-sensitive ordering.     *     * @see     java.text.Collator#compare(String, String)     * @since   1.2     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> CASE_INSENSITIVE_ORDER                                         <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CaseInsensitiveComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CaseInsensitiveComparator</span>            <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// use serialVersionUID from JDK 1.2.2 for interoperability</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">8575799808933029326L</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> n1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> n2 <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> min<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">char</span> c1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">char</span> c2 <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">!=</span> c2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    c1 <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    c2 <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">!=</span> c2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        c1 <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>                        c2 <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">!=</span> c2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token comment">// No overflow because of numeric promotion</span>                            <span class="token keyword">return</span> c1 <span class="token operator">-</span> c2<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> n1 <span class="token operator">-</span> n2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/** Replaces the de-serialized object. */</span>        <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">readResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> CASE_INSENSITIVE_ORDER<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Compares two strings lexicographically, ignoring case     * differences. This method returns an integer whose sign is that of     * calling &#123;@code compareTo&#125; with normalized versions of the strings     * where case differences have been eliminated by calling     * &#123;@code Character.toLowerCase(Character.toUpperCase(character))&#125; on     * each character.     * &lt;p>     * Note that this method does &lt;em>not&lt;/em> take locale into account,     * and will result in an unsatisfactory ordering for certain locales.     * The java.text package provides &lt;em>collators&lt;/em> to allow     * locale-sensitive ordering.     *     * @param   str   the &#123;@code String&#125; to be compared.     * @return  a negative integer, zero, or a positive integer as the     *          specified String is greater than, equal to, or less     *          than this String, ignoring case considerations.     * @see     java.text.Collator#compare(String, String)     * @since   1.2     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareToIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> CASE_INSENSITIVE_ORDER<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Tests if two string regions are equal.     * &lt;p>     * A substring of this &#123;@code String&#125; object is compared to a substring     * of the argument other. The result is true if these substrings     * represent identical character sequences. The substring of this     * &#123;@code String&#125; object to be compared begins at index &#123;@code toffset&#125;     * and has length &#123;@code len&#125;. The substring of other to be compared     * begins at index &#123;@code ooffset&#125; and has length &#123;@code len&#125;. The     * result is &#123;@code false&#125; if and only if at least one of the following     * is true:     * &lt;ul>&lt;li>&#123;@code toffset&#125; is negative.     * &lt;li>&#123;@code ooffset&#125; is negative.     * &lt;li>&#123;@code toffset+len&#125; is greater than the length of this     * &#123;@code String&#125; object.     * &lt;li>&#123;@code ooffset+len&#125; is greater than the length of the other     * argument.     * &lt;li>There is some nonnegative integer &lt;i>k&lt;/i> less than &#123;@code len&#125;     * such that:     * &#123;@code this.charAt(toffset + &#125;&lt;i>k&lt;/i>&#123;@code ) != other.charAt(ooffset + &#125;     * &lt;i>k&lt;/i>&#123;@code )&#125;     * &lt;/ul>     *     * @param   toffset   the starting offset of the subregion in this string.     * @param   other     the string argument.     * @param   ooffset   the starting offset of the subregion in the string     *                    argument.     * @param   len       the number of characters to compare.     * @return  &#123;@code true&#125; if the specified subregion of this string     *          exactly matches the specified subregion of the string argument;     *          &#123;@code false&#125; otherwise.     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">regionMatches</span><span class="token punctuation">(</span><span class="token keyword">int</span> toffset<span class="token punctuation">,</span> <span class="token class-name">String</span> other<span class="token punctuation">,</span> <span class="token keyword">int</span> ooffset<span class="token punctuation">,</span>            <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> ta<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token keyword">to</span> <span class="token operator">=</span> toffset<span class="token punctuation">;</span>        <span class="token keyword">char</span> pa<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> other<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">int</span> po <span class="token operator">=</span> ooffset<span class="token punctuation">;</span>        <span class="token comment">// Note: toffset, ooffset, or len might be near -1>>>1.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ooffset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>toffset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token operator">||</span> <span class="token punctuation">(</span>toffset <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>value<span class="token punctuation">.</span>length <span class="token operator">-</span> len<span class="token punctuation">)</span>                <span class="token operator">||</span> <span class="token punctuation">(</span>ooffset <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>other<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">-</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>len<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ta<span class="token punctuation">[</span><span class="token keyword">to</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">!=</span> pa<span class="token punctuation">[</span>po<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Tests if two string regions are equal.     * &lt;p>     * A substring of this &#123;@code String&#125; object is compared to a substring     * of the argument &#123;@code other&#125;. The result is &#123;@code true&#125; if these     * substrings represent character sequences that are the same, ignoring     * case if and only if &#123;@code ignoreCase&#125; is true. The substring of     * this &#123;@code String&#125; object to be compared begins at index     * &#123;@code toffset&#125; and has length &#123;@code len&#125;. The substring of     * &#123;@code other&#125; to be compared begins at index &#123;@code ooffset&#125; and     * has length &#123;@code len&#125;. The result is &#123;@code false&#125; if and only if     * at least one of the following is true:     * &lt;ul>&lt;li>&#123;@code toffset&#125; is negative.     * &lt;li>&#123;@code ooffset&#125; is negative.     * &lt;li>&#123;@code toffset+len&#125; is greater than the length of this     * &#123;@code String&#125; object.     * &lt;li>&#123;@code ooffset+len&#125; is greater than the length of the other     * argument.     * &lt;li>&#123;@code ignoreCase&#125; is &#123;@code false&#125; and there is some nonnegative     * integer &lt;i>k&lt;/i> less than &#123;@code len&#125; such that:     * &lt;blockquote>&lt;pre>     * this.charAt(toffset+k) != other.charAt(ooffset+k)     * &lt;/pre>&lt;/blockquote>     * &lt;li>&#123;@code ignoreCase&#125; is &#123;@code true&#125; and there is some nonnegative     * integer &lt;i>k&lt;/i> less than &#123;@code len&#125; such that:     * &lt;blockquote>&lt;pre>     * Character.toLowerCase(this.charAt(toffset+k)) !=     Character.toLowerCase(other.charAt(ooffset+k))     * &lt;/pre>&lt;/blockquote>     * and:     * &lt;blockquote>&lt;pre>     * Character.toUpperCase(this.charAt(toffset+k)) !=     *         Character.toUpperCase(other.charAt(ooffset+k))     * &lt;/pre>&lt;/blockquote>     * &lt;/ul>     *     * @param   ignoreCase   if &#123;@code true&#125;, ignore case when comparing     *                       characters.     * @param   toffset      the starting offset of the subregion in this     *                       string.     * @param   other        the string argument.     * @param   ooffset      the starting offset of the subregion in the string     *                       argument.     * @param   len          the number of characters to compare.     * @return  &#123;@code true&#125; if the specified subregion of this string     *          matches the specified subregion of the string argument;     *          &#123;@code false&#125; otherwise. Whether the matching is exact     *          or case insensitive depends on the &#123;@code ignoreCase&#125;     *          argument.     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">regionMatches</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> ignoreCase<span class="token punctuation">,</span> <span class="token keyword">int</span> toffset<span class="token punctuation">,</span>            <span class="token class-name">String</span> other<span class="token punctuation">,</span> <span class="token keyword">int</span> ooffset<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> ta<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token keyword">to</span> <span class="token operator">=</span> toffset<span class="token punctuation">;</span>        <span class="token keyword">char</span> pa<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> other<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">int</span> po <span class="token operator">=</span> ooffset<span class="token punctuation">;</span>        <span class="token comment">// Note: toffset, ooffset, or len might be near -1>>>1.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ooffset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>toffset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token operator">||</span> <span class="token punctuation">(</span>toffset <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>value<span class="token punctuation">.</span>length <span class="token operator">-</span> len<span class="token punctuation">)</span>                <span class="token operator">||</span> <span class="token punctuation">(</span>ooffset <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>other<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">-</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>len<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> c1 <span class="token operator">=</span> ta<span class="token punctuation">[</span><span class="token keyword">to</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> c2 <span class="token operator">=</span> pa<span class="token punctuation">[</span>po<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ignoreCase<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// If characters don't match but case may be ignored,</span>                <span class="token comment">// try converting both characters to uppercase.</span>                <span class="token comment">// If the results match, then the comparison scan should</span>                <span class="token comment">// continue.</span>                <span class="token keyword">char</span> u1 <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">char</span> u2 <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>u1 <span class="token operator">==</span> u2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// Unfortunately, conversion to uppercase does not work properly</span>                <span class="token comment">// for the Georgian alphabet, which has strange rules about case</span>                <span class="token comment">// conversion.  So we need to make one last check before</span>                <span class="token comment">// exiting.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>u1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>u2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Tests if the substring of this string beginning at the     * specified index starts with the specified prefix.     *     * @param   prefix    the prefix.     * @param   toffset   where to begin looking in this string.     * @return  &#123;@code true&#125; if the character sequence represented by the     *          argument is a prefix of the substring of this object starting     *          at index &#123;@code toffset&#125;; &#123;@code false&#125; otherwise.     *          The result is &#123;@code false&#125; if &#123;@code toffset&#125; is     *          negative or greater than the length of this     *          &#123;@code String&#125; object; otherwise the result is the same     *          as the result of the expression     *          &lt;pre>     *          this.substring(toffset).startsWith(prefix)     *          &lt;/pre>     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token keyword">int</span> toffset<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> ta<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token keyword">to</span> <span class="token operator">=</span> toffset<span class="token punctuation">;</span>        <span class="token keyword">char</span> pa<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> prefix<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">int</span> po <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pc <span class="token operator">=</span> prefix<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">// Note: toffset might be near -1>>>1.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>toffset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>toffset <span class="token operator">></span> value<span class="token punctuation">.</span>length <span class="token operator">-</span> pc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>pc <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ta<span class="token punctuation">[</span><span class="token keyword">to</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">!=</span> pa<span class="token punctuation">[</span>po<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Tests if this string starts with the specified prefix.     *     * @param   prefix   the prefix.     * @return  &#123;@code true&#125; if the character sequence represented by the     *          argument is a prefix of the character sequence represented by     *          this string; &#123;@code false&#125; otherwise.     *          Note also that &#123;@code true&#125; will be returned if the     *          argument is an empty string or is equal to this     *          &#123;@code String&#125; object as determined by the     *          &#123;@link #equals(Object)&#125; method.     * @since   1. 0     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Tests if this string ends with the specified suffix.     *     * @param   suffix   the suffix.     * @return  &#123;@code true&#125; if the character sequence represented by the     *          argument is a suffix of the character sequence represented by     *          this object; &#123;@code false&#125; otherwise. Note that the     *          result will be &#123;@code true&#125; if the argument is the     *          empty string or is equal to this &#123;@code String&#125; object     *          as determined by the &#123;@link #equals(Object)&#125; method.     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> suffix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>suffix<span class="token punctuation">,</span> value<span class="token punctuation">.</span>length <span class="token operator">-</span> suffix<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns a hash code for this string. The hash code for a     * &#123;@code String&#125; object is computed as     * &lt;blockquote>&lt;pre>     * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]     * &lt;/pre>&lt;/blockquote>     * using &#123;@code int&#125; arithmetic, where &#123;@code s[i]&#125; is the     * &lt;i>i&lt;/i>th character of the string, &#123;@code n&#125; is the length of     * the string, and &#123;@code ^&#125; indicates exponentiation.     * (The hash value of the empty string is zero.)     *     * @return  a hash code value for this object.     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> hash<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> val<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                h <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> h <span class="token operator">+</span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            hash <span class="token operator">=</span> h<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> h<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the index within this string of the first occurrence of     * the specified character. If a character with value     * &#123;@code ch&#125; occurs in the character sequence represented by     * this &#123;@code String&#125; object, then the index (in Unicode     * code units) of the first such occurrence is returned. For     * values of &#123;@code ch&#125; in the range from 0 to 0xFFFF     * (inclusive), this is the smallest value &lt;i>k&lt;/i> such that:     * &lt;blockquote>&lt;pre>     * this.charAt(&lt;i>k&lt;/i>) == ch     * &lt;/pre>&lt;/blockquote>     * is true. For other values of &#123;@code ch&#125;, it is the     * smallest value &lt;i>k&lt;/i> such that:     * &lt;blockquote>&lt;pre>     * this.codePointAt(&lt;i>k&lt;/i>) == ch     * &lt;/pre>&lt;/blockquote>     * is true. In either case, if no such character occurs in this     * string, then &#123;@code -1&#125; is returned.     *     * @param   ch   a character (Unicode code point).     * @return  the index of the first occurrence of the character in the     *          character sequence represented by this object, or     *          &#123;@code -1&#125; if the character does not occur.     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the index within this string of the first occurrence of the     * specified character, starting the search at the specified index.     * &lt;p>     * If a character with value &#123;@code ch&#125; occurs in the     * character sequence represented by this &#123;@code String&#125;     * object at an index no smaller than &#123;@code fromIndex&#125;, then     * the index of the first such occurrence is returned. For values     * of &#123;@code ch&#125; in the range from 0 to 0xFFFF (inclusive),     * this is the smallest value &lt;i>k&lt;/i> such that:     * &lt;blockquote>&lt;pre>     * (this.charAt(&lt;i>k&lt;/i>) == ch) &#123;@code &amp;&amp;&#125; (&lt;i>k&lt;/i> &amp;gt;= fromIndex)     * &lt;/pre>&lt;/blockquote>     * is true. For other values of &#123;@code ch&#125;, it is the     * smallest value &lt;i>k&lt;/i> such that:     * &lt;blockquote>&lt;pre>     * (this.codePointAt(&lt;i>k&lt;/i>) == ch) &#123;@code &amp;&amp;&#125; (&lt;i>k&lt;/i> &amp;gt;= fromIndex)     * &lt;/pre>&lt;/blockquote>     * is true. In either case, if no such character occurs in this     * string at or after position &#123;@code fromIndex&#125;, then     * &#123;@code -1&#125; is returned.     *     * &lt;p>     * There is no restriction on the value of &#123;@code fromIndex&#125;. If it     * is negative, it has the same effect as if it were zero: this entire     * string may be searched. If it is greater than the length of this     * string, it has the same effect as if it were equal to the length of     * this string: &#123;@code -1&#125; is returned.     *     * &lt;p>All indices are specified in &#123;@code char&#125; values     * (Unicode code units).     *     * @param   ch          a character (Unicode code point).     * @param   fromIndex   the index to start the search from.     * @return  the index of the first occurrence of the character in the     *          character sequence represented by this object that is greater     *          than or equal to &#123;@code fromIndex&#125;, or &#123;@code -1&#125;     *          if the character does not occur.     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> max <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fromIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            fromIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fromIndex <span class="token operator">>=</span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Note: fromIndex might be near -1>>>1.</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token class-name">Character</span><span class="token punctuation">.</span>MIN_SUPPLEMENTARY_CODE_POINT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// handle most cases here (ch is a BMP code point or a</span>            <span class="token comment">// negative value (invalid code point))</span>            <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> fromIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">indexOfSupplementary</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Handles (rare) calls of indexOf with a supplementary character.     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">indexOfSupplementary</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isValidCodePoint</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">char</span> hi <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">highSurrogate</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">char</span> lo <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">lowSurrogate</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> max <span class="token operator">=</span> value<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> fromIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> hi <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> lo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the index within this string of the last occurrence of     * the specified character. For values of &#123;@code ch&#125; in the     * range from 0 to 0xFFFF (inclusive), the index (in Unicode code     * units) returned is the largest value &lt;i>k&lt;/i> such that:     * &lt;blockquote>&lt;pre>     * this.charAt(&lt;i>k&lt;/i>) == ch     * &lt;/pre>&lt;/blockquote>     * is true. For other values of &#123;@code ch&#125;, it is the     * largest value &lt;i>k&lt;/i> such that:     * &lt;blockquote>&lt;pre>     * this.codePointAt(&lt;i>k&lt;/i>) == ch     * &lt;/pre>&lt;/blockquote>     * is true.  In either case, if no such character occurs in this     * string, then &#123;@code -1&#125; is returned.  The     * &#123;@code String&#125; is searched backwards starting at the last     * character.     *     * @param   ch   a character (Unicode code point).     * @return  the index of the last occurrence of the character in the     *          character sequence represented by this object, or     *          &#123;@code -1&#125; if the character does not occur.     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> value<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the index within this string of the last occurrence of     * the specified character, searching backward starting at the     * specified index. For values of &#123;@code ch&#125; in the range     * from 0 to 0xFFFF (inclusive), the index returned is the largest     * value &lt;i>k&lt;/i> such that:     * &lt;blockquote>&lt;pre>     * (this.charAt(&lt;i>k&lt;/i>) == ch) &#123;@code &amp;&amp;&#125; (&lt;i>k&lt;/i> &amp;lt;= fromIndex)     * &lt;/pre>&lt;/blockquote>     * is true. For other values of &#123;@code ch&#125;, it is the     * largest value &lt;i>k&lt;/i> such that:     * &lt;blockquote>&lt;pre>     * (this.codePointAt(&lt;i>k&lt;/i>) == ch) &#123;@code &amp;&amp;&#125; (&lt;i>k&lt;/i> &amp;lt;= fromIndex)     * &lt;/pre>&lt;/blockquote>     * is true. In either case, if no such character occurs in this     * string at or before position &#123;@code fromIndex&#125;, then     * &#123;@code -1&#125; is returned.     *     * &lt;p>All indices are specified in &#123;@code char&#125; values     * (Unicode code units).     *     * @param   ch          a character (Unicode code point).     * @param   fromIndex   the index to start the search from. There is no     *          restriction on the value of &#123;@code fromIndex&#125;. If it is     *          greater than or equal to the length of this string, it has     *          the same effect as if it were equal to one less than the     *          length of this string: this entire string may be searched.     *          If it is negative, it has the same effect as if it were -1:     *          -1 is returned.     * @return  the index of the last occurrence of the character in the     *          character sequence represented by this object that is less     *          than or equal to &#123;@code fromIndex&#125;, or &#123;@code -1&#125;     *          if the character does not occur before that point.     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token class-name">Character</span><span class="token punctuation">.</span>MIN_SUPPLEMENTARY_CODE_POINT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// handle most cases here (ch is a BMP code point or a</span>            <span class="token comment">// negative value (invalid code point))</span>            <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>fromIndex<span class="token punctuation">,</span> value<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">lastIndexOfSupplementary</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Handles (rare) calls of lastIndexOf with a supplementary character.     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">lastIndexOfSupplementary</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isValidCodePoint</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">char</span> hi <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">highSurrogate</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> lo <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">lowSurrogate</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>fromIndex<span class="token punctuation">,</span> value<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> hi <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> lo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the index within this string of the first occurrence of the     * specified substring.     *     * &lt;p>The returned index is the smallest value &lt;i>k&lt;/i> for which:     * &lt;blockquote>&lt;pre>     * this.startsWith(str, &lt;i>k&lt;/i>)     * &lt;/pre>&lt;/blockquote>     * If no such value of &lt;i>k&lt;/i> exists, then &#123;@code -1&#125; is returned.     *     * @param   str   the substring to search for.     * @return  the index of the first occurrence of the specified substring,     *          or &#123;@code -1&#125; if there is no such occurrence.     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the index within this string of the first occurrence of the     * specified substring, starting at the specified index.     *     * &lt;p>The returned index is the smallest value &lt;i>k&lt;/i> for which:     * &lt;blockquote>&lt;pre>     * &lt;i>k&lt;/i> &amp;gt;= fromIndex &#123;@code &amp;&amp;&#125; this.startsWith(str, &lt;i>k&lt;/i>)     * &lt;/pre>&lt;/blockquote>     * If no such value of &lt;i>k&lt;/i> exists, then &#123;@code -1&#125; is returned.     *     * @param   str         the substring to search for.     * @param   fromIndex   the index from which to start the search.     * @return  the index of the first occurrence of the specified substring,     *          starting at the specified index,     *          or &#123;@code -1&#125; if there is no such occurrence.     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">,</span>                str<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">,</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Code shared by String and AbstractStringBuilder to do searches. The     * source is the character array being searched, and the target     * is the string being searched for.     *     * @param   source       the characters being searched.     * @param   sourceOffset offset of the source string.     * @param   sourceCount  count of the source string.     * @param   target       the characters being searched for.     * @param   fromIndex    the index to begin searching from.     */</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> source<span class="token punctuation">,</span> <span class="token keyword">int</span> sourceOffset<span class="token punctuation">,</span> <span class="token keyword">int</span> sourceCount<span class="token punctuation">,</span>            <span class="token class-name">String</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> sourceOffset<span class="token punctuation">,</span> sourceCount<span class="token punctuation">,</span>                       target<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">,</span>                       fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Code shared by String and StringBuffer to do searches. The     * source is the character array being searched, and the target     * is the string being searched for.     *     * @param   source       the characters being searched.     * @param   sourceOffset offset of the source string.     * @param   sourceCount  count of the source string.     * @param   target       the characters being searched for.     * @param   targetOffset offset of the target string.     * @param   targetCount  count of the target string.     * @param   fromIndex    the index to begin searching from.     */</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> source<span class="token punctuation">,</span> <span class="token keyword">int</span> sourceOffset<span class="token punctuation">,</span> <span class="token keyword">int</span> sourceCount<span class="token punctuation">,</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> targetOffset<span class="token punctuation">,</span> <span class="token keyword">int</span> targetCount<span class="token punctuation">,</span>            <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fromIndex <span class="token operator">>=</span> sourceCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>targetCount <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> sourceCount <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fromIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            fromIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>targetCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> fromIndex<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">char</span> first <span class="token operator">=</span> target<span class="token punctuation">[</span>targetOffset<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> sourceOffset <span class="token operator">+</span> <span class="token punctuation">(</span>sourceCount <span class="token operator">-</span> targetCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> sourceOffset <span class="token operator">+</span> fromIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* Look for first character. */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">&lt;=</span> max <span class="token operator">&amp;&amp;</span> source<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">/* Found first character, now look at the rest of v2 */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> end <span class="token operator">=</span> j <span class="token operator">+</span> targetCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> targetOffset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> end <span class="token operator">&amp;&amp;</span> source<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                        <span class="token operator">==</span> target<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">,</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">/* Found whole string. */</span>                    <span class="token keyword">return</span> i <span class="token operator">-</span> sourceOffset<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the index within this string of the last occurrence of the     * specified substring.  The last occurrence of the empty string ""     * is considered to occur at the index value &#123;@code this.length()&#125;.     *     * &lt;p>The returned index is the largest value &lt;i>k&lt;/i> for which:     * &lt;blockquote>&lt;pre>     * this.startsWith(str, &lt;i>k&lt;/i>)     * &lt;/pre>&lt;/blockquote>     * If no such value of &lt;i>k&lt;/i> exists, then &#123;@code -1&#125; is returned.     *     * @param   str   the substring to search for.     * @return  the index of the last occurrence of the specified substring,     *          or &#123;@code -1&#125; if there is no such occurrence.     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the index within this string of the last occurrence of the     * specified substring, searching backward starting at the specified index.     *     * &lt;p>The returned index is the largest value &lt;i>k&lt;/i> for which:     * &lt;blockquote>&lt;pre>     * &lt;i>k&lt;/i> &#123;@code &lt;=&#125; fromIndex &#123;@code &amp;&amp;&#125; this.startsWith(str, &lt;i>k&lt;/i>)     * &lt;/pre>&lt;/blockquote>     * If no such value of &lt;i>k&lt;/i> exists, then &#123;@code -1&#125; is returned.     *     * @param   str         the substring to search for.     * @param   fromIndex   the index to start the search from.     * @return  the index of the last occurrence of the specified substring,     *          searching backward from the specified index,     *          or &#123;@code -1&#125; if there is no such occurrence.     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">,</span>                str<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">,</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Code shared by String and AbstractStringBuilder to do searches. The     * source is the character array being searched, and the target     * is the string being searched for.     *     * @param   source       the characters being searched.     * @param   sourceOffset offset of the source string.     * @param   sourceCount  count of the source string.     * @param   target       the characters being searched for.     * @param   fromIndex    the index to begin searching from.     */</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> source<span class="token punctuation">,</span> <span class="token keyword">int</span> sourceOffset<span class="token punctuation">,</span> <span class="token keyword">int</span> sourceCount<span class="token punctuation">,</span>            <span class="token class-name">String</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> sourceOffset<span class="token punctuation">,</span> sourceCount<span class="token punctuation">,</span>                       target<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">,</span>                       fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Code shared by String and StringBuffer to do searches. The     * source is the character array being searched, and the target     * is the string being searched for.     *     * @param   source       the characters being searched.     * @param   sourceOffset offset of the source string.     * @param   sourceCount  count of the source string.     * @param   target       the characters being searched for.     * @param   targetOffset offset of the target string.     * @param   targetCount  count of the target string.     * @param   fromIndex    the index to begin searching from.     */</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> source<span class="token punctuation">,</span> <span class="token keyword">int</span> sourceOffset<span class="token punctuation">,</span> <span class="token keyword">int</span> sourceCount<span class="token punctuation">,</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> targetOffset<span class="token punctuation">,</span> <span class="token keyword">int</span> targetCount<span class="token punctuation">,</span>            <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*         * Check arguments; return immediately where possible. For         * consistency, don't check for null str.         */</span>        <span class="token keyword">int</span> rightIndex <span class="token operator">=</span> sourceCount <span class="token operator">-</span> targetCount<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fromIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fromIndex <span class="token operator">></span> rightIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            fromIndex <span class="token operator">=</span> rightIndex<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/* Empty string always matches. */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>targetCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> fromIndex<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> strLastIndex <span class="token operator">=</span> targetOffset <span class="token operator">+</span> targetCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> strLastChar <span class="token operator">=</span> target<span class="token punctuation">[</span>strLastIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> sourceOffset <span class="token operator">+</span> targetCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> min <span class="token operator">+</span> fromIndex<span class="token punctuation">;</span>    startSearchForLastChar<span class="token operator">:</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> min <span class="token operator">&amp;&amp;</span> source<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> strLastChar<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                i<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> start <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token punctuation">(</span>targetCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> strLastIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">[</span>k<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    i<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span> startSearchForLastChar<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> start <span class="token operator">-</span> sourceOffset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns a string that is a substring of this string. The     * substring begins with the character at the specified index and     * extends to the end of this string. &lt;p>     * Examples:     * &lt;blockquote>&lt;pre>     * "unhappy".substring(2) returns "happy"     * "Harbison".substring(3) returns "bison"     * "emptiness".substring(9) returns "" (an empty string)     * &lt;/pre>&lt;/blockquote>     *     * @param      beginIndex   the beginning index, inclusive.     * @return     the specified substring.     * @exception  IndexOutOfBoundsException  if     *             &#123;@code beginIndex&#125; is negative or larger than the     *             length of this &#123;@code String&#125; object.     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beginIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>beginIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> subLen <span class="token operator">=</span> value<span class="token punctuation">.</span>length <span class="token operator">-</span> beginIndex<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>subLen <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>subLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>beginIndex <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> beginIndex<span class="token punctuation">,</span> subLen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns a string that is a substring of this string. The     * substring begins at the specified &#123;@code beginIndex&#125; and     * extends to the character at index &#123;@code endIndex - 1&#125;.     * Thus the length of the substring is &#123;@code endIndex-beginIndex&#125;.     * &lt;p>     * Examples:     * &lt;blockquote>&lt;pre>     * "hamburger".substring(4, 8) returns "urge"     * "smiles".substring(1, 5) returns "mile"     * &lt;/pre>&lt;/blockquote>     *     * @param      beginIndex   the beginning index, inclusive.     * @param      endIndex     the ending index, exclusive.     * @return     the specified substring.     * @exception  IndexOutOfBoundsException  if the     *             &#123;@code beginIndex&#125; is negative, or     *             &#123;@code endIndex&#125; is larger than the length of     *             this &#123;@code String&#125; object, or     *             &#123;@code beginIndex&#125; is larger than     *             &#123;@code endIndex&#125;.     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beginIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>beginIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>endIndex <span class="token operator">></span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> subLen <span class="token operator">=</span> endIndex <span class="token operator">-</span> beginIndex<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>subLen <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>subLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>beginIndex <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>endIndex <span class="token operator">==</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span>                <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> beginIndex<span class="token punctuation">,</span> subLen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns a character sequence that is a subsequence of this sequence.     *     * &lt;p> An invocation of this method of the form     *     * &lt;blockquote>&lt;pre>     * str.subSequence(begin,&amp;nbsp;end)&lt;/pre>&lt;/blockquote>     *     * behaves in exactly the same way as the invocation     *     * &lt;blockquote>&lt;pre>     * str.substring(begin,&amp;nbsp;end)&lt;/pre>&lt;/blockquote>     *     * @apiNote     * This method is defined so that the &#123;@code String&#125; class can implement     * the &#123;@link CharSequence&#125; interface.     *     * @param   beginIndex   the begin index, inclusive.     * @param   endIndex     the end index, exclusive.     * @return  the specified subsequence.     *     * @throws  IndexOutOfBoundsException     *          if &#123;@code beginIndex&#125; or &#123;@code endIndex&#125; is negative,     *          if &#123;@code endIndex&#125; is greater than &#123;@code length()&#125;,     *          or if &#123;@code beginIndex&#125; is greater than &#123;@code endIndex&#125;     *     * @since 1.4     * @spec JSR-51     */</span>    <span class="token keyword">public</span> <span class="token class-name">CharSequence</span> <span class="token function">subSequence</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>beginIndex<span class="token punctuation">,</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Concatenates the specified string to the end of this string.     * &lt;p>     * If the length of the argument string is &#123;@code 0&#125;, then this     * &#123;@code String&#125; object is returned. Otherwise, a     * &#123;@code String&#125; object is returned that represents a character     * sequence that is the concatenation of the character sequence     * represented by this &#123;@code String&#125; object and the character     * sequence represented by the argument string.&lt;p>     * Examples:     * &lt;blockquote>&lt;pre>     * "cares".concat("s") returns "caress"     * "to".concat("get").concat("her") returns "together"     * &lt;/pre>&lt;/blockquote>     *     * @param   str   the &#123;@code String&#125; that is concatenated to the end     *                of this &#123;@code String&#125;.     * @return  a string that represents the concatenation of this object's     *          characters followed by the string argument's characters.     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> otherLen <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>otherLen <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> len <span class="token operator">+</span> otherLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">getChars</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns a string resulting from replacing all occurrences of     * &#123;@code oldChar&#125; in this string with &#123;@code newChar&#125;.     * &lt;p>     * If the character &#123;@code oldChar&#125; does not occur in the     * character sequence represented by this &#123;@code String&#125; object,     * then a reference to this &#123;@code String&#125; object is returned.     * Otherwise, a &#123;@code String&#125; object is returned that     * represents a character sequence identical to the character sequence     * represented by this &#123;@code String&#125; object, except that every     * occurrence of &#123;@code oldChar&#125; is replaced by an occurrence     * of &#123;@code newChar&#125;.     * &lt;p>     * Examples:     * &lt;blockquote>&lt;pre>     * "mesquite in your cellar".replace('e', 'o')     *         returns "mosquito in your collar"     * "the war of baronets".replace('r', 'y')     *         returns "the way of bayonets"     * "sparring with a purple porpoise".replace('p', 't')     *         returns "starring with a turtle tortoise"     * "JonL".replace('q', 'x') returns "JonL" (no change)     * &lt;/pre>&lt;/blockquote>     *     * @param   oldChar   the old character.     * @param   newChar   the new character.     * @return  a string derived from this string by replacing every     *          occurrence of &#123;@code oldChar&#125; with &#123;@code newChar&#125;.     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">char</span> oldChar<span class="token punctuation">,</span> <span class="token keyword">char</span> newChar<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldChar <span class="token operator">!=</span> newChar<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> val <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token comment">/* avoid getfield opcode */</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> oldChar<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    buf<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">char</span> c <span class="token operator">=</span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> oldChar<span class="token punctuation">)</span> <span class="token operator">?</span> newChar <span class="token operator">:</span> c<span class="token punctuation">;</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Tells whether or not this string matches the given &lt;a     * href="../util/regex/Pattern.html#sum">regular expression&lt;/a>.     *     * &lt;p> An invocation of this method of the form     * &lt;i>str&lt;/i>&#123;@code .matches(&#125;&lt;i>regex&lt;/i>&#123;@code )&#125; yields exactly the     * same result as the expression     *     * &lt;blockquote>     * &#123;@link java.util.regex.Pattern&#125;.&#123;@link java.util.regex.Pattern#matches(String,CharSequence)     * matches(&lt;i>regex&lt;/i>, &lt;i>str&lt;/i>)&#125;     * &lt;/blockquote>     *     * @param   regex     *          the regular expression to which this string is to be matched     *     * @return  &#123;@code true&#125; if, and only if, this string matches the     *          given regular expression     *     * @throws  PatternSyntaxException     *          if the regular expression's syntax is invalid     *     * @see java.util.regex.Pattern     *     * @since 1.4     * @spec JSR-51     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns true if and only if this string contains the specified     * sequence of char values.     *     * @param s the sequence to search for     * @return true if this string contains &#123;@code s&#125;, false otherwise     * @since 1.5     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Replaces the first substring of this string that matches the given &lt;a     * href="../util/regex/Pattern.html#sum">regular expression&lt;/a> with the     * given replacement.     *     * &lt;p> An invocation of this method of the form     * &lt;i>str&lt;/i>&#123;@code .replaceFirst(&#125;&lt;i>regex&lt;/i>&#123;@code ,&#125; &lt;i>repl&lt;/i>&#123;@code )&#125;     * yields exactly the same result as the expression     *     * &lt;blockquote>     * &lt;code>     * &#123;@link java.util.regex.Pattern&#125;.&#123;@link     * java.util.regex.Pattern#compile compile&#125;(&lt;i>regex&lt;/i>).&#123;@link     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher&#125;(&lt;i>str&lt;/i>).&#123;@link     * java.util.regex.Matcher#replaceFirst replaceFirst&#125;(&lt;i>repl&lt;/i>)     * &lt;/code>     * &lt;/blockquote>     *     *&lt;p>     * Note that backslashes (&#123;@code \&#125;) and dollar signs (&#123;@code $&#125;) in the     * replacement string may cause the results to be different than if it were     * being treated as a literal replacement string; see     * &#123;@link java.util.regex.Matcher#replaceFirst&#125;.     * Use &#123;@link java.util.regex.Matcher#quoteReplacement&#125; to suppress the special     * meaning of these characters, if desired.     *     * @param   regex     *          the regular expression to which this string is to be matched     * @param   replacement     *          the string to be substituted for the first match     *     * @return  The resulting &#123;@code String&#125;     *     * @throws  PatternSyntaxException     *          if the regular expression's syntax is invalid     *     * @see java.util.regex.Pattern     *     * @since 1.4     * @spec JSR-51     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replaceFirst</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">,</span> <span class="token class-name">String</span> replacement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span>replacement<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Replaces each substring of this string that matches the given &lt;a     * href="../util/regex/Pattern.html#sum">regular expression&lt;/a> with the     * given replacement.     *     * &lt;p> An invocation of this method of the form     * &lt;i>str&lt;/i>&#123;@code .replaceAll(&#125;&lt;i>regex&lt;/i>&#123;@code ,&#125; &lt;i>repl&lt;/i>&#123;@code )&#125;     * yields exactly the same result as the expression     *     * &lt;blockquote>     * &lt;code>     * &#123;@link java.util.regex.Pattern&#125;.&#123;@link     * java.util.regex.Pattern#compile compile&#125;(&lt;i>regex&lt;/i>).&#123;@link     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher&#125;(&lt;i>str&lt;/i>).&#123;@link     * java.util.regex.Matcher#replaceAll replaceAll&#125;(&lt;i>repl&lt;/i>)     * &lt;/code>     * &lt;/blockquote>     *     *&lt;p>     * Note that backslashes (&#123;@code \&#125;) and dollar signs (&#123;@code $&#125;) in the     * replacement string may cause the results to be different than if it were     * being treated as a literal replacement string; see     * &#123;@link java.util.regex.Matcher#replaceAll Matcher.replaceAll&#125;.     * Use &#123;@link java.util.regex.Matcher#quoteReplacement&#125; to suppress the special     * meaning of these characters, if desired.     *     * @param   regex     *          the regular expression to which this string is to be matched     * @param   replacement     *          the string to be substituted for each match     *     * @return  The resulting &#123;@code String&#125;     *     * @throws  PatternSyntaxException     *          if the regular expression's syntax is invalid     *     * @see java.util.regex.Pattern     *     * @since 1.4     * @spec JSR-51     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">,</span> <span class="token class-name">String</span> replacement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>replacement<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Replaces each substring of this string that matches the literal target     * sequence with the specified literal replacement sequence. The     * replacement proceeds from the beginning of the string to the end, for     * example, replacing "aa" with "b" in the string "aaa" will result in     * "ba" rather than "ab".     *     * @param  target The sequence of char values to be replaced     * @param  replacement The replacement sequence of char values     * @return  The resulting string     * @since 1.5     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> target<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> replacement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span>LITERAL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>                <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token class-name">Matcher</span><span class="token punctuation">.</span><span class="token function">quoteReplacement</span><span class="token punctuation">(</span>replacement<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Splits this string around matches of the given     * &lt;a href="../util/regex/Pattern.html#sum">regular expression&lt;/a>.     *     * &lt;p> The array returned by this method contains each substring of this     * string that is terminated by another substring that matches the given     * expression or is terminated by the end of the string.  The substrings in     * the array are in the order in which they occur in this string.  If the     * expression does not match any part of the input then the resulting array     * has just one element, namely this string.     *     * &lt;p> When there is a positive-width match at the beginning of this     * string then an empty leading substring is included at the beginning     * of the resulting array. A zero-width match at the beginning however     * never produces such empty leading substring.     *     * &lt;p> The &#123;@code limit&#125; parameter controls the number of times the     * pattern is applied and therefore affects the length of the resulting     * array.  If the limit &lt;i>n&lt;/i> is greater than zero then the pattern     * will be applied at most &lt;i>n&lt;/i>&amp;nbsp;-&amp;nbsp;1 times, the array's     * length will be no greater than &lt;i>n&lt;/i>, and the array's last entry     * will contain all input beyond the last matched delimiter.  If &lt;i>n&lt;/i>     * is non-positive then the pattern will be applied as many times as     * possible and the array can have any length.  If &lt;i>n&lt;/i> is zero then     * the pattern will be applied as many times as possible, the array can     * have any length, and trailing empty strings will be discarded.     *     * &lt;p> The string &#123;@code "boo:and:foo"&#125;, for example, yields the     * following results with these parameters:     *     * &lt;blockquote>&lt;table cellpadding=1 cellspacing=0 summary="Split example showing regex, limit, and result">     * &lt;tr>     *     &lt;th>Regex&lt;/th>     *     &lt;th>Limit&lt;/th>     *     &lt;th>Result&lt;/th>     * &lt;/tr>     * &lt;tr>&lt;td align=center>:&lt;/td>     *     &lt;td align=center>2&lt;/td>     *     &lt;td>&#123;@code &#123; "boo", "and:foo" &#125;&#125;&lt;/td>&lt;/tr>     * &lt;tr>&lt;td align=center>:&lt;/td>     *     &lt;td align=center>5&lt;/td>     *     &lt;td>&#123;@code &#123; "boo", "and", "foo" &#125;&#125;&lt;/td>&lt;/tr>     * &lt;tr>&lt;td align=center>:&lt;/td>     *     &lt;td align=center>-2&lt;/td>     *     &lt;td>&#123;@code &#123; "boo", "and", "foo" &#125;&#125;&lt;/td>&lt;/tr>     * &lt;tr>&lt;td align=center>o&lt;/td>     *     &lt;td align=center>5&lt;/td>     *     &lt;td>&#123;@code &#123; "b", "", ":and:f", "", "" &#125;&#125;&lt;/td>&lt;/tr>     * &lt;tr>&lt;td align=center>o&lt;/td>     *     &lt;td align=center>-2&lt;/td>     *     &lt;td>&#123;@code &#123; "b", "", ":and:f", "", "" &#125;&#125;&lt;/td>&lt;/tr>     * &lt;tr>&lt;td align=center>o&lt;/td>     *     &lt;td align=center>0&lt;/td>     *     &lt;td>&#123;@code &#123; "b", "", ":and:f" &#125;&#125;&lt;/td>&lt;/tr>     * &lt;/table>&lt;/blockquote>     *     * &lt;p> An invocation of this method of the form     * &lt;i>str.&lt;/i>&#123;@code split(&#125;&lt;i>regex&lt;/i>&#123;@code ,&#125;&amp;nbsp;&lt;i>n&lt;/i>&#123;@code )&#125;     * yields the same result as the expression     *     * &lt;blockquote>     * &lt;code>     * &#123;@link java.util.regex.Pattern&#125;.&#123;@link     * java.util.regex.Pattern#compile compile&#125;(&lt;i>regex&lt;/i>).&#123;@link     * java.util.regex.Pattern#split(java.lang.CharSequence,int) split&#125;(&lt;i>str&lt;/i>,&amp;nbsp;&lt;i>n&lt;/i>)     * &lt;/code>     * &lt;/blockquote>     *     *     * @param  regex     *         the delimiting regular expression     *     * @param  limit     *         the result threshold, as described above     *     * @return  the array of strings computed by splitting this string     *          around matches of the given regular expression     *     * @throws  PatternSyntaxException     *          if the regular expression's syntax is invalid     *     * @see java.util.regex.Pattern     *     * @since 1.4     * @spec JSR-51     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* fastpath if the regex is a         (1)one-char String and this character is not one of the            RegEx's meta characters ".$|()[&#123;^?*+\\", or         (2)two-char String and the first char is the backslash and            the second is not the ascii digit or ascii letter.         */</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>             <span class="token string">".$|()[&#123;^?*+\\"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span>             <span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span>              regex<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'\\'</span> <span class="token operator">&amp;&amp;</span>              <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token operator">-</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>              <span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token string">'z'</span><span class="token operator">-</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>              <span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token string">'Z'</span><span class="token operator">-</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token class-name">Character</span><span class="token punctuation">.</span>MIN_HIGH_SURROGATE <span class="token operator">||</span>             ch <span class="token operator">></span> <span class="token class-name">Character</span><span class="token punctuation">.</span>MAX_LOW_SURROGATE<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> off <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> limited <span class="token operator">=</span> limit <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>next <span class="token operator">=</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> off<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>limited <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> limit <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">substring</span><span class="token punctuation">(</span>off<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    off <span class="token operator">=</span> next <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// last one</span>                    <span class="token comment">//assert (list.size() == limit - 1);</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">substring</span><span class="token punctuation">(</span>off<span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    off <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// If no match was found, return this</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>off <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token comment">// Add remaining segment</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>limited <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> limit<span class="token punctuation">)</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">substring</span><span class="token punctuation">(</span>off<span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Construct result</span>            <span class="token keyword">int</span> resultSize <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSize <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resultSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    resultSize<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>resultSize<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> resultSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Splits this string around matches of the given &lt;a     * href="../util/regex/Pattern.html#sum">regular expression&lt;/a>.     *     * &lt;p> This method works as if by invoking the two-argument &#123;@link     * #split(String, int) split&#125; method with the given expression and a limit     * argument of zero.  Trailing empty strings are therefore not included in     * the resulting array.     *     * &lt;p> The string &#123;@code "boo:and:foo"&#125;, for example, yields the following     * results with these expressions:     *     * &lt;blockquote>&lt;table cellpadding=1 cellspacing=0 summary="Split examples showing regex and result">     * &lt;tr>     *  &lt;th>Regex&lt;/th>     *  &lt;th>Result&lt;/th>     * &lt;/tr>     * &lt;tr>&lt;td align=center>:&lt;/td>     *     &lt;td>&#123;@code &#123; "boo", "and", "foo" &#125;&#125;&lt;/td>&lt;/tr>     * &lt;tr>&lt;td align=center>o&lt;/td>     *     &lt;td>&#123;@code &#123; "b", "", ":and:f" &#125;&#125;&lt;/td>&lt;/tr>     * &lt;/table>&lt;/blockquote>     *     *     * @param  regex     *         the delimiting regular expression     *     * @return  the array of strings computed by splitting this string     *          around matches of the given regular expression     *     * @throws  PatternSyntaxException     *          if the regular expression's syntax is invalid     *     * @see java.util.regex.Pattern     *     * @since 1.4     * @spec JSR-51     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">split</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns a new String composed of copies of the     * &#123;@code CharSequence elements&#125; joined together with a copy of     * the specified &#123;@code delimiter&#125;.     *     * &lt;blockquote>For example,     * &lt;pre>&#123;@code     *     String message = String.join("-", "Java", "is", "cool");     *     // message returned is: "Java-is-cool"     * &#125;&lt;/pre>&lt;/blockquote>     *     * Note that if an element is null, then &#123;@code "null"&#125; is added.     *     * @param  delimiter the delimiter that separates each element     * @param  elements the elements to join together.     *     * @return a new &#123;@code String&#125; that is composed of the &#123;@code elements&#125;     *         separated by the &#123;@code delimiter&#125;     *     * @throws NullPointerException If &#123;@code delimiter&#125; or &#123;@code elements&#125;     *         is &#123;@code null&#125;     *     * @see java.util.StringJoiner     * @since 1.8     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> delimiter<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> elements<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>elements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Number of elements not likely worth Arrays.stream overhead.</span>        <span class="token class-name">StringJoiner</span> joiner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringJoiner</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CharSequence</span> cs<span class="token operator">:</span> elements<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            joiner<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> joiner<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns a new &#123;@code String&#125; composed of copies of the     * &#123;@code CharSequence elements&#125; joined together with a copy of the     * specified &#123;@code delimiter&#125;.     *     * &lt;blockquote>For example,     * &lt;pre>&#123;@code     *     List&lt;String> strings = new LinkedList&lt;>();     *     strings.add("Java");strings.add("is");     *     strings.add("cool");     *     String message = String.join(" ", strings);     *     //message returned is: "Java is cool"     *     *     Set&lt;String> strings = new LinkedHashSet&lt;>();     *     strings.add("Java"); strings.add("is");     *     strings.add("very"); strings.add("cool");     *     String message = String.join("-", strings);     *     //message returned is: "Java-is-very-cool"     * &#125;&lt;/pre>&lt;/blockquote>     *     * Note that if an individual element is &#123;@code null&#125;, then &#123;@code "null"&#125; is added.     *     * @param  delimiter a sequence of characters that is used to separate each     *         of the &#123;@code elements&#125; in the resulting &#123;@code String&#125;     * @param  elements an &#123;@code Iterable&#125; that will have its &#123;@code elements&#125;     *         joined together.     *     * @return a new &#123;@code String&#125; that is composed from the &#123;@code elements&#125;     *         argument     *     * @throws NullPointerException If &#123;@code delimiter&#125; or &#123;@code elements&#125;     *         is &#123;@code null&#125;     *     * @see    #join(CharSequence,CharSequence...)     * @see    java.util.StringJoiner     * @since 1.8     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> delimiter<span class="token punctuation">,</span>            <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">CharSequence</span><span class="token punctuation">></span></span> elements<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>elements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringJoiner</span> joiner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringJoiner</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CharSequence</span> cs<span class="token operator">:</span> elements<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            joiner<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> joiner<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Converts all of the characters in this &#123;@code String&#125; to lower     * case using the rules of the given &#123;@code Locale&#125;.  Case mapping is based     * on the Unicode Standard version specified by the &#123;@link java.lang.Character Character&#125;     * class. Since case mappings are not always 1:1 char mappings, the resulting     * &#123;@code String&#125; may be a different length than the original &#123;@code String&#125;.     * &lt;p>     * Examples of lowercase  mappings are in the following table:     * &lt;table border="1" summary="Lowercase mapping examples showing language code of locale, upper case, lower case, and description">     * &lt;tr>     *   &lt;th>Language Code of Locale&lt;/th>     *   &lt;th>Upper Case&lt;/th>     *   &lt;th>Lower Case&lt;/th>     *   &lt;th>Description&lt;/th>     * &lt;/tr>     * &lt;tr>     *   &lt;td>tr (Turkish)&lt;/td>     *   &lt;td>&amp;#92;u0130&lt;/td>     *   &lt;td>&amp;#92;u0069&lt;/td>     *   &lt;td>capital letter I with dot above -&amp;gt; small letter i&lt;/td>     * &lt;/tr>     * &lt;tr>     *   &lt;td>tr (Turkish)&lt;/td>     *   &lt;td>&amp;#92;u0049&lt;/td>     *   &lt;td>&amp;#92;u0131&lt;/td>     *   &lt;td>capital letter I -&amp;gt; small letter dotless i &lt;/td>     * &lt;/tr>     * &lt;tr>     *   &lt;td>(all)&lt;/td>     *   &lt;td>French Fries&lt;/td>     *   &lt;td>french fries&lt;/td>     *   &lt;td>lowercased all chars in String&lt;/td>     * &lt;/tr>     * &lt;tr>     *   &lt;td>(all)&lt;/td>     *   &lt;td>&lt;img src="doc-files/capiota.gif" alt="capiota">&lt;img src="doc-files/capchi.gif" alt="capchi">     *       &lt;img src="doc-files/captheta.gif" alt="captheta">&lt;img src="doc-files/capupsil.gif" alt="capupsil">     *       &lt;img src="doc-files/capsigma.gif" alt="capsigma">&lt;/td>     *   &lt;td>&lt;img src="doc-files/iota.gif" alt="iota">&lt;img src="doc-files/chi.gif" alt="chi">     *       &lt;img src="doc-files/theta.gif" alt="theta">&lt;img src="doc-files/upsilon.gif" alt="upsilon">     *       &lt;img src="doc-files/sigma1.gif" alt="sigma">&lt;/td>     *   &lt;td>lowercased all chars in String&lt;/td>     * &lt;/tr>     * &lt;/table>     *     * @param locale use the case transformation rules for this locale     * @return the &#123;@code String&#125;, converted to lowercase.     * @see     java.lang.String#toLowerCase()     * @see     java.lang.String#toUpperCase()     * @see     java.lang.String#toUpperCase(Locale)     * @since   1.1     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span> locale<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>locale <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> firstUpper<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> len <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">/* Now check if there are any characters that need to be changed. */</span>        scan<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>firstUpper <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> firstUpper <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">char</span> c <span class="token operator">=</span> value<span class="token punctuation">[</span>firstUpper<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span>MIN_HIGH_SURROGATE<span class="token punctuation">)</span>                        <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span>MAX_HIGH_SURROGATE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> supplChar <span class="token operator">=</span> <span class="token function">codePointAt</span><span class="token punctuation">(</span>firstUpper<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>supplChar <span class="token operator">!=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>supplChar<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">break</span> scan<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    firstUpper <span class="token operator">+=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">charCount</span><span class="token punctuation">(</span>supplChar<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">break</span> scan<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    firstUpper<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> resultOffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">/* result may grow, so i+resultOffset                                * is the write location in result */</span>        <span class="token comment">/* Just copy the first few lowerCase characters. */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> firstUpper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> lang <span class="token operator">=</span> locale<span class="token punctuation">.</span><span class="token function">getLanguage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> localeDependent <span class="token operator">=</span>                <span class="token punctuation">(</span>lang <span class="token operator">==</span> <span class="token string">"tr"</span> <span class="token operator">||</span> lang <span class="token operator">==</span> <span class="token string">"az"</span> <span class="token operator">||</span> lang <span class="token operator">==</span> <span class="token string">"lt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lowerCharArray<span class="token punctuation">;</span>        <span class="token keyword">int</span> lowerChar<span class="token punctuation">;</span>        <span class="token keyword">int</span> srcChar<span class="token punctuation">;</span>        <span class="token keyword">int</span> srcCount<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> firstUpper<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">+=</span> srcCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            srcChar <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>srcChar <span class="token operator">>=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span>MIN_HIGH_SURROGATE                    <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>srcChar <span class="token operator">&lt;=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span>MAX_HIGH_SURROGATE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                srcChar <span class="token operator">=</span> <span class="token function">codePointAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                srcCount <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">charCount</span><span class="token punctuation">(</span>srcChar<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                srcCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>localeDependent <span class="token operator">||</span>                srcChar <span class="token operator">==</span> <span class="token string">'\u03A3'</span> <span class="token operator">||</span> <span class="token comment">// GREEK CAPITAL LETTER SIGMA</span>                srcChar <span class="token operator">==</span> <span class="token string">'\u0130'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// LATIN CAPITAL LETTER I WITH DOT ABOVE</span>                lowerChar <span class="token operator">=</span> <span class="token class-name">ConditionalSpecialCasing</span><span class="token punctuation">.</span><span class="token function">toLowerCaseEx</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> locale<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                lowerChar <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>srcChar<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>lowerChar <span class="token operator">==</span> <span class="token class-name">Character</span><span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>                    <span class="token operator">||</span> <span class="token punctuation">(</span>lowerChar <span class="token operator">>=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span>MIN_SUPPLEMENTARY_CODE_POINT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>lowerChar <span class="token operator">==</span> <span class="token class-name">Character</span><span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    lowerCharArray <span class="token operator">=</span>                            <span class="token class-name">ConditionalSpecialCasing</span><span class="token punctuation">.</span><span class="token function">toLowerCaseCharArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> locale<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>srcCount <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    resultOffset <span class="token operator">+=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toChars</span><span class="token punctuation">(</span>lowerChar<span class="token punctuation">,</span> result<span class="token punctuation">,</span> i <span class="token operator">+</span> resultOffset<span class="token punctuation">)</span> <span class="token operator">-</span> srcCount<span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    lowerCharArray <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toChars</span><span class="token punctuation">(</span>lowerChar<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">/* Grow result if needed */</span>                <span class="token keyword">int</span> mapLen <span class="token operator">=</span> lowerCharArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mapLen <span class="token operator">></span> srcCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">+</span> mapLen <span class="token operator">-</span> srcCount<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> result2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">+</span> resultOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>                    result <span class="token operator">=</span> result2<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> mapLen<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    result<span class="token punctuation">[</span>i <span class="token operator">+</span> resultOffset <span class="token operator">+</span> x<span class="token punctuation">]</span> <span class="token operator">=</span> lowerCharArray<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                resultOffset <span class="token operator">+=</span> <span class="token punctuation">(</span>mapLen <span class="token operator">-</span> srcCount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                result<span class="token punctuation">[</span>i <span class="token operator">+</span> resultOffset<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>lowerChar<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">+</span> resultOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Converts all of the characters in this &#123;@code String&#125; to lower     * case using the rules of the default locale. This is equivalent to calling     * &#123;@code toLowerCase(Locale.getDefault())&#125;.     * &lt;p>     * &lt;b>Note:&lt;/b> This method is locale sensitive, and may produce unexpected     * results if used for strings that are intended to be interpreted locale     * independently.     * Examples are programming language identifiers, protocol keys, and HTML     * tags.     * For instance, &#123;@code "TITLE".toLowerCase()&#125; in a Turkish locale     * returns &#123;@code "t\u005Cu0131tle"&#125;, where '\u005Cu0131' is the     * LATIN SMALL LETTER DOTLESS I character.     * To obtain correct results for locale insensitive strings, use     * &#123;@code toLowerCase(Locale.ROOT)&#125;.     * &lt;p>     * @return  the &#123;@code String&#125;, converted to lowercase.     * @see     java.lang.String#toLowerCase(Locale)     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Converts all of the characters in this &#123;@code String&#125; to upper     * case using the rules of the given &#123;@code Locale&#125;. Case mapping is based     * on the Unicode Standard version specified by the &#123;@link java.lang.Character Character&#125;     * class. Since case mappings are not always 1:1 char mappings, the resulting     * &#123;@code String&#125; may be a different length than the original &#123;@code String&#125;.     * &lt;p>     * Examples of locale-sensitive and 1:M case mappings are in the following table.     *     * &lt;table border="1" summary="Examples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.">     * &lt;tr>     *   &lt;th>Language Code of Locale&lt;/th>     *   &lt;th>Lower Case&lt;/th>     *   &lt;th>Upper Case&lt;/th>     *   &lt;th>Description&lt;/th>     * &lt;/tr>     * &lt;tr>     *   &lt;td>tr (Turkish)&lt;/td>     *   &lt;td>&amp;#92;u0069&lt;/td>     *   &lt;td>&amp;#92;u0130&lt;/td>     *   &lt;td>small letter i -&amp;gt; capital letter I with dot above&lt;/td>     * &lt;/tr>     * &lt;tr>     *   &lt;td>tr (Turkish)&lt;/td>     *   &lt;td>&amp;#92;u0131&lt;/td>     *   &lt;td>&amp;#92;u0049&lt;/td>     *   &lt;td>small letter dotless i -&amp;gt; capital letter I&lt;/td>     * &lt;/tr>     * &lt;tr>     *   &lt;td>(all)&lt;/td>     *   &lt;td>&amp;#92;u00df&lt;/td>     *   &lt;td>&amp;#92;u0053 &amp;#92;u0053&lt;/td>     *   &lt;td>small letter sharp s -&amp;gt; two letters: SS&lt;/td>     * &lt;/tr>     * &lt;tr>     *   &lt;td>(all)&lt;/td>     *   &lt;td>Fahrvergn&amp;uuml;gen&lt;/td>     *   &lt;td>FAHRVERGN&amp;Uuml;GEN&lt;/td>     *   &lt;td>&lt;/td>     * &lt;/tr>     * &lt;/table>     * @param locale use the case transformation rules for this locale     * @return the &#123;@code String&#125;, converted to uppercase.     * @see     java.lang.String#toUpperCase()     * @see     java.lang.String#toLowerCase()     * @see     java.lang.String#toLowerCase(Locale)     * @since   1.1     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span> locale<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>locale <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> firstLower<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> len <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">/* Now check if there are any characters that need to be changed. */</span>        scan<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>firstLower <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> firstLower <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>value<span class="token punctuation">[</span>firstLower<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> srcCount<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span>MIN_HIGH_SURROGATE<span class="token punctuation">)</span>                        <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span>MAX_HIGH_SURROGATE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    c <span class="token operator">=</span> <span class="token function">codePointAt</span><span class="token punctuation">(</span>firstLower<span class="token punctuation">)</span><span class="token punctuation">;</span>                    srcCount <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">charCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    srcCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">int</span> upperCaseChar <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toUpperCaseEx</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>upperCaseChar <span class="token operator">==</span> <span class="token class-name">Character</span><span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>                        <span class="token operator">||</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> upperCaseChar<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span> scan<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                firstLower <span class="token operator">+=</span> srcCount<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/* result may grow, so i+resultOffset is the write location in result */</span>        <span class="token keyword">int</span> resultOffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* may grow */</span>        <span class="token comment">/* Just copy the first few upperCase characters. */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> firstLower<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> lang <span class="token operator">=</span> locale<span class="token punctuation">.</span><span class="token function">getLanguage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> localeDependent <span class="token operator">=</span>                <span class="token punctuation">(</span>lang <span class="token operator">==</span> <span class="token string">"tr"</span> <span class="token operator">||</span> lang <span class="token operator">==</span> <span class="token string">"az"</span> <span class="token operator">||</span> lang <span class="token operator">==</span> <span class="token string">"lt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> upperCharArray<span class="token punctuation">;</span>        <span class="token keyword">int</span> upperChar<span class="token punctuation">;</span>        <span class="token keyword">int</span> srcChar<span class="token punctuation">;</span>        <span class="token keyword">int</span> srcCount<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> firstLower<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">+=</span> srcCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            srcChar <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>srcChar <span class="token operator">>=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span>MIN_HIGH_SURROGATE <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>srcChar <span class="token operator">&lt;=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span>MAX_HIGH_SURROGATE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                srcChar <span class="token operator">=</span> <span class="token function">codePointAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                srcCount <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">charCount</span><span class="token punctuation">(</span>srcChar<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                srcCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>localeDependent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                upperChar <span class="token operator">=</span> <span class="token class-name">ConditionalSpecialCasing</span><span class="token punctuation">.</span><span class="token function">toUpperCaseEx</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> locale<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                upperChar <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toUpperCaseEx</span><span class="token punctuation">(</span>srcChar<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>upperChar <span class="token operator">==</span> <span class="token class-name">Character</span><span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>                    <span class="token operator">||</span> <span class="token punctuation">(</span>upperChar <span class="token operator">>=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span>MIN_SUPPLEMENTARY_CODE_POINT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>upperChar <span class="token operator">==</span> <span class="token class-name">Character</span><span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>localeDependent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        upperCharArray <span class="token operator">=</span>                                <span class="token class-name">ConditionalSpecialCasing</span><span class="token punctuation">.</span><span class="token function">toUpperCaseCharArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> locale<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        upperCharArray <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toUpperCaseCharArray</span><span class="token punctuation">(</span>srcChar<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>srcCount <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    resultOffset <span class="token operator">+=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toChars</span><span class="token punctuation">(</span>upperChar<span class="token punctuation">,</span> result<span class="token punctuation">,</span> i <span class="token operator">+</span> resultOffset<span class="token punctuation">)</span> <span class="token operator">-</span> srcCount<span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    upperCharArray <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toChars</span><span class="token punctuation">(</span>upperChar<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">/* Grow result if needed */</span>                <span class="token keyword">int</span> mapLen <span class="token operator">=</span> upperCharArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mapLen <span class="token operator">></span> srcCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">+</span> mapLen <span class="token operator">-</span> srcCount<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> result2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">+</span> resultOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>                    result <span class="token operator">=</span> result2<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> mapLen<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    result<span class="token punctuation">[</span>i <span class="token operator">+</span> resultOffset <span class="token operator">+</span> x<span class="token punctuation">]</span> <span class="token operator">=</span> upperCharArray<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                resultOffset <span class="token operator">+=</span> <span class="token punctuation">(</span>mapLen <span class="token operator">-</span> srcCount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                result<span class="token punctuation">[</span>i <span class="token operator">+</span> resultOffset<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>upperChar<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">+</span> resultOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Converts all of the characters in this &#123;@code String&#125; to upper     * case using the rules of the default locale. This method is equivalent to     * &#123;@code toUpperCase(Locale.getDefault())&#125;.     * &lt;p>     * &lt;b>Note:&lt;/b> This method is locale sensitive, and may produce unexpected     * results if used for strings that are intended to be interpreted locale     * independently.     * Examples are programming language identifiers, protocol keys, and HTML     * tags.     * For instance, &#123;@code "title".toUpperCase()&#125; in a Turkish locale     * returns &#123;@code "T\u005Cu0130TLE"&#125;, where '\u005Cu0130' is the     * LATIN CAPITAL LETTER I WITH DOT ABOVE character.     * To obtain correct results for locale insensitive strings, use     * &#123;@code toUpperCase(Locale.ROOT)&#125;.     * &lt;p>     * @return  the &#123;@code String&#125;, converted to uppercase.     * @see     java.lang.String#toUpperCase(Locale)     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns a string whose value is this string, with any leading and trailing     * whitespace removed.     * &lt;p>     * If this &#123;@code String&#125; object represents an empty character     * sequence, or the first and last characters of character sequence     * represented by this &#123;@code String&#125; object both have codes     * greater than &#123;@code '\u005Cu0020'&#125; (the space character), then a     * reference to this &#123;@code String&#125; object is returned.     * &lt;p>     * Otherwise, if there is no character with a code greater than     * &#123;@code '\u005Cu0020'&#125; in the string, then a     * &#123;@code String&#125; object representing an empty string is     * returned.     * &lt;p>     * Otherwise, let &lt;i>k&lt;/i> be the index of the first character in the     * string whose code is greater than &#123;@code '\u005Cu0020'&#125;, and let     * &lt;i>m&lt;/i> be the index of the last character in the string whose code     * is greater than &#123;@code '\u005Cu0020'&#125;. A &#123;@code String&#125;     * object is returned, representing the substring of this string that     * begins with the character at index &lt;i>k&lt;/i> and ends with the     * character at index &lt;i>m&lt;/i>-that is, the result of     * &#123;@code this.substring(k, m + 1)&#125;.     * &lt;p>     * This method may be used to trim whitespace (as defined above) from     * the beginning and end of a string.     *     * @return  A string whose value is this string, with any leading and trailing white     *          space removed, or this string if it has no leading or     *          trailing white space.     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> st <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> val <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token comment">/* avoid getfield opcode */</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>st <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>val<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            st<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>st <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>val<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            len<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>st <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">substring</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * This object (which is already a string!) is itself returned.     *     * @return  the string itself.     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Converts this string to a new character array.     *     * @return  a newly allocated character array whose length is the length     *          of this string and whose contents are initialized to contain     *          the character sequence represented by this string.     */</span>    <span class="token keyword">public</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Cannot use Arrays.copyOf because of class initialization order issues</span>        <span class="token keyword">char</span> result<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>value<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns a formatted string using the specified format string and     * arguments.     *     * &lt;p> The locale always used is the one returned by &#123;@link     * java.util.Locale#getDefault() Locale.getDefault()&#125;.     *     * @param  format     *         A &lt;a href="../util/Formatter.html#syntax">format string&lt;/a>     *     * @param  args     *         Arguments referenced by the format specifiers in the format     *         string.  If there are more arguments than format specifiers, the     *         extra arguments are ignored.  The number of arguments is     *         variable and may be zero.  The maximum number of arguments is     *         limited by the maximum dimension of a Java array as defined by     *         &lt;cite>The Java&amp;trade; Virtual Machine Specification&lt;/cite>.     *         The behaviour on a     *         &#123;@code null&#125; argument depends on the &lt;a     *         href="../util/Formatter.html#syntax">conversion&lt;/a>.     *     * @throws  java.util.IllegalFormatException     *          If a format string contains an illegal syntax, a format     *          specifier that is incompatible with the given arguments,     *          insufficient arguments given the format string, or other     *          illegal conditions.  For specification of all possible     *          formatting errors, see the &lt;a     *          href="../util/Formatter.html#detail">Details&lt;/a> section of the     *          formatter class specification.     *     * @return  A formatted string     *     * @see  java.util.Formatter     * @since  1.5     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">String</span> format<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Formatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns a formatted string using the specified locale, format string,     * and arguments.     *     * @param  l     *         The &#123;@linkplain java.util.Locale locale&#125; to apply during     *         formatting.  If &#123;@code l&#125; is &#123;@code null&#125; then no localization     *         is applied.     *     * @param  format     *         A &lt;a href="../util/Formatter.html#syntax">format string&lt;/a>     *     * @param  args     *         Arguments referenced by the format specifiers in the format     *         string.  If there are more arguments than format specifiers, the     *         extra arguments are ignored.  The number of arguments is     *         variable and may be zero.  The maximum number of arguments is     *         limited by the maximum dimension of a Java array as defined by     *         &lt;cite>The Java&amp;trade; Virtual Machine Specification&lt;/cite>.     *         The behaviour on a     *         &#123;@code null&#125; argument depends on the     *         &lt;a href="../util/Formatter.html#syntax">conversion&lt;/a>.     *     * @throws  java.util.IllegalFormatException     *          If a format string contains an illegal syntax, a format     *          specifier that is incompatible with the given arguments,     *          insufficient arguments given the format string, or other     *          illegal conditions.  For specification of all possible     *          formatting errors, see the &lt;a     *          href="../util/Formatter.html#detail">Details&lt;/a> section of the     *          formatter class specification     *     * @return  A formatted string     *     * @see  java.util.Formatter     * @since  1.5     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">Locale</span> l<span class="token punctuation">,</span> <span class="token class-name">String</span> format<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Formatter</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the string representation of the &#123;@code Object&#125; argument.     *     * @param   obj   an &#123;@code Object&#125;.     * @return  if the argument is &#123;@code null&#125;, then a string equal to     *          &#123;@code "null"&#125;; otherwise, the value of     *          &#123;@code obj.toString()&#125; is returned.     * @see     java.lang.Object#toString()     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"null"</span> <span class="token operator">:</span> obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the string representation of the &#123;@code char&#125; array     * argument. The contents of the character array are copied; subsequent     * modification of the character array does not affect the returned     * string.     *     * @param   data     the character array.     * @return  a &#123;@code String&#125; that contains the characters of the     *          character array.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the string representation of a specific subarray of the     * &#123;@code char&#125; array argument.     * &lt;p>     * The &#123;@code offset&#125; argument is the index of the first     * character of the subarray. The &#123;@code count&#125; argument     * specifies the length of the subarray. The contents of the subarray     * are copied; subsequent modification of the character array does not     * affect the returned string.     *     * @param   data     the character array.     * @param   offset   initial offset of the subarray.     * @param   count    length of the subarray.     * @return  a &#123;@code String&#125; that contains the characters of the     *          specified subarray of the character array.     * @exception IndexOutOfBoundsException if &#123;@code offset&#125; is     *          negative, or &#123;@code count&#125; is negative, or     *          &#123;@code offset+count&#125; is larger than     *          &#123;@code data.length&#125;.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Equivalent to &#123;@link #valueOf(char[], int, int)&#125;.     *     * @param   data     the character array.     * @param   offset   initial offset of the subarray.     * @param   count    length of the subarray.     * @return  a &#123;@code String&#125; that contains the characters of the     *          specified subarray of the character array.     * @exception IndexOutOfBoundsException if &#123;@code offset&#125; is     *          negative, or &#123;@code count&#125; is negative, or     *          &#123;@code offset+count&#125; is larger than     *          &#123;@code data.length&#125;.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">copyValueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Equivalent to &#123;@link #valueOf(char[])&#125;.     *     * @param   data   the character array.     * @return  a &#123;@code String&#125; that contains the characters of the     *          character array.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">copyValueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the string representation of the &#123;@code boolean&#125; argument.     *     * @param   b   a &#123;@code boolean&#125;.     * @return  if the argument is &#123;@code true&#125;, a string equal to     *          &#123;@code "true"&#125; is returned; otherwise, a string equal to     *          &#123;@code "false"&#125; is returned.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> b <span class="token operator">?</span> <span class="token string">"true"</span> <span class="token operator">:</span> <span class="token string">"false"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the string representation of the &#123;@code char&#125;     * argument.     *     * @param   c   a &#123;@code char&#125;.     * @return  a string of length &#123;@code 1&#125; containing     *          as its single character the argument &#123;@code c&#125;.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the string representation of the &#123;@code int&#125; argument.     * &lt;p>     * The representation is exactly the one returned by the     * &#123;@code Integer.toString&#125; method of one argument.     *     * @param   i   an &#123;@code int&#125;.     * @return  a string representation of the &#123;@code int&#125; argument.     * @see     java.lang.Integer#toString(int, int)     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the string representation of the &#123;@code long&#125; argument.     * &lt;p>     * The representation is exactly the one returned by the     * &#123;@code Long.toString&#125; method of one argument.     *     * @param   l   a &#123;@code long&#125;.     * @return  a string representation of the &#123;@code long&#125; argument.     * @see     java.lang.Long#toString(long)     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">long</span> l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the string representation of the &#123;@code float&#125; argument.     * &lt;p>     * The representation is exactly the one returned by the     * &#123;@code Float.toString&#125; method of one argument.     *     * @param   f   a &#123;@code float&#125;.     * @return  a string representation of the &#123;@code float&#125; argument.     * @see     java.lang.Float#toString(float)     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">float</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the string representation of the &#123;@code double&#125; argument.     * &lt;p>     * The representation is exactly the one returned by the     * &#123;@code Double.toString&#125; method of one argument.     *     * @param   d   a &#123;@code double&#125;.     * @return  a  string representation of the &#123;@code double&#125; argument.     * @see     java.lang.Double#toString(double)     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns a canonical representation for the string object.     * &lt;p>     * A pool of strings, initially empty, is maintained privately by the     * class &#123;@code String&#125;.     * &lt;p>     * When the intern method is invoked, if the pool already contains a     * string equal to this &#123;@code String&#125; object as determined by     * the &#123;@link #equals(Object)&#125; method, then the string from the pool is     * returned. Otherwise, this &#123;@code String&#125; object is added to the     * pool and a reference to this &#123;@code String&#125; object is returned.     * &lt;p>     * It follows that for any two strings &#123;@code s&#125; and &#123;@code t&#125;,     * &#123;@code s.intern() == t.intern()&#125; is &#123;@code true&#125;     * if and only if &#123;@code s.equals(t)&#125; is &#123;@code true&#125;.     * &lt;p>     * All literal strings and string-valued constant expressions are     * interned. String literals are defined in section 3.10.5 of the     * &lt;cite>The Java&amp;trade; Language Specification&lt;/cite>.     *     * @return  a string that has the same contents as this string, but is     *          guaranteed to be from a pool of unique strings.     */</span>    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token class-name">String</span> <span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-22-Java中的字符串源码分析-1-2-4-1-2-5&quot;&gt;&lt;a href=&quot;#算法练习-22-Java中的字符串源码分析-1-2-4-1-2-5&quot; class=&quot;headerlink&quot; title=&quot;算法练习-22-Java中的字符串源码分析(1.2.4-1.2.5)&quot;&gt;&lt;/a&gt;算法练习-22-Java中的字符串源码分析(1.2.4-1.2.5)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;Java中的字符串&lt;/li&gt;
&lt;li&gt;字符串常量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-21-如何判断矩形是否相交(1.2.3)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/25/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-21-%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E7%9F%A9%E5%BD%A2%E6%98%AF%E5%90%A6%E7%9B%B8%E4%BA%A4-(1.2.3)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/25/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-21-%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E7%9F%A9%E5%BD%A2%E6%98%AF%E5%90%A6%E7%9B%B8%E4%BA%A4-(1.2.3)/</id>
    <published>2021-01-25T02:55:18.000Z</published>
    <updated>2021-01-25T03:44:14.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-21-如何判断矩形是否相交-1-2-3"><a href="#算法练习-21-如何判断矩形是否相交-1-2-3" class="headerlink" title="算法练习-21-如何判断矩形是否相交(1.2.3)"></a>算法练习-21-如何判断矩形是否相交(1.2.3)</h1><ul><li>知识点<ul><li>矩形的表示</li><li>矩形相交的判断</li></ul></li></ul><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>1.2.3 编写一个Interval2D的用例，从命令行接受参数N、min和max。生成N个随机的2D间隔，其宽度和高均匀地分布在单位正方形中的min和max之间。用StdDraw画出它们并打印出相交的间隔对的数量以及有包含关系的间隔对数量。</strong></p><hr><p><strong>1.2.3 Write an Interval2D client that takes command-line arguments N,min,and max and generates N random 2D intervals whose width and height are uniformly distributed between min and max in the unit square. Draw them on StdDraw and print the number of pairs of intervals that intersect and the number of intervals that are contained in one another.</strong></p><ul><li><p>分析</p><p>由上一篇文章，我们可以知道：</p></li></ul><pre class="language-none"><code class="language-none">Interval1D所表示的线段都是平行于X轴或者Y轴。</code></pre><p>因此类似的，我们可以得到Interval2D的定义和实现</p><ul><li>答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">In</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdDraw</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdRandom</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Interval2D</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Interval1D</span> x<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Interval1D</span> y<span class="token punctuation">;</span>    <span class="token class-name">Interval2D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token class-name">Interval2D</span><span class="token punctuation">(</span><span class="token class-name">Interval1D</span> tx<span class="token punctuation">,</span> <span class="token class-name">Interval1D</span> ty<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> tx<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> ty<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Point2D</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> y<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Interval2D</span> <span class="token function">ramdomInterval2D</span><span class="token punctuation">(</span><span class="token keyword">double</span> min<span class="token punctuation">,</span><span class="token keyword">double</span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> xMin <span class="token operator">=</span> <span class="token class-name">StdRandom</span><span class="token punctuation">.</span><span class="token function">uniform</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> xMax <span class="token operator">=</span> <span class="token class-name">StdRandom</span><span class="token punctuation">.</span><span class="token function">uniform</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> yMin <span class="token operator">=</span> <span class="token class-name">StdRandom</span><span class="token punctuation">.</span><span class="token function">uniform</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> yMax <span class="token operator">=</span> <span class="token class-name">StdRandom</span><span class="token punctuation">.</span><span class="token function">uniform</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Interval1D</span> interval1d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Interval1D</span><span class="token punctuation">(</span>xMin<span class="token punctuation">,</span> xMax<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Interval1D</span> interval1d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Interval1D</span><span class="token punctuation">(</span>yMin<span class="token punctuation">,</span> yMax<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Interval2D</span> interval2d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Interval2D</span><span class="token punctuation">(</span>interval1d1<span class="token punctuation">,</span> interval1d2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interval2d<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> min <span class="token operator">=</span> <span class="token number">0.3</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> max <span class="token operator">=</span> <span class="token number">0.8</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Interval2D</span> interval2d <span class="token operator">=</span> <span class="token function">ramdomInterval2D</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">StdDraw</span><span class="token punctuation">.</span><span class="token function">rectangle</span><span class="token punctuation">(</span>interval2d<span class="token punctuation">.</span>x<span class="token punctuation">.</span><span class="token function">getLo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval2d<span class="token punctuation">.</span>y<span class="token punctuation">.</span><span class="token function">getLo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval2d<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> interval2d<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-21-如何判断矩形是否相交-1-2-3&quot;&gt;&lt;a href=&quot;#算法练习-21-如何判断矩形是否相交-1-2-3&quot; class=&quot;headerlink&quot; title=&quot;算法练习-21-如何判断矩形是否相交(1.2.3)&quot;&gt;&lt;/a&gt;算法练习-21-如何判断矩形是否相交(1.2.3)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;矩形的表示&lt;/li&gt;
&lt;li&gt;矩形相交的判断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
