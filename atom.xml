<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LeafiiのBlog</title>
  
  
  <link href="atom.xml" rel="self"/>
  
  <link href="https://leafii.top/"/>
  <updated>2022-06-08T14:14:24.672Z</updated>
  <id>https://leafii.top/</id>
  
  <author>
    <name>Leafii</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pandas数据处理</title>
    <link href="2022/06/08/Pandas%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <id>2022/06/08/Pandas%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</id>
    <published>2022-06-08T14:14:08.000Z</published>
    <updated>2022-06-08T14:14:24.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pandas数据处理"><a href="#Pandas数据处理" class="headerlink" title="Pandas数据处理"></a>Pandas数据处理</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Pandas数据处理&quot;&gt;&lt;a href=&quot;#Pandas数据处理&quot; class=&quot;headerlink&quot; title=&quot;Pandas数据处理&quot;&gt;&lt;/a&gt;Pandas数据处理&lt;/h1&gt;</summary>
      
    
    
    
    
    <category term="python" scheme="tags/python/"/>
    
    <category term="机器学习基础" scheme="tags/机器学习基础/"/>
    
  </entry>
  
  <entry>
    <title>Pandas统计展示</title>
    <link href="2022/06/08/Pandas%E7%BB%9F%E8%AE%A1%E5%B1%95%E7%A4%BA/"/>
    <id>2022/06/08/Pandas%E7%BB%9F%E8%AE%A1%E5%B1%95%E7%A4%BA/</id>
    <published>2022-06-08T06:16:49.000Z</published>
    <updated>2022-06-08T14:13:25.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pandas统计展示"><a href="#Pandas统计展示" class="headerlink" title="Pandas统计展示"></a>Pandas统计展示</h1><p>​        本文主要写Pandas在统计展示方面的知识。</p><span id="more"></span><h2 id="基础统计方法"><a href="#基础统计方法" class="headerlink" title="基础统计方法"></a>基础统计方法</h2><p>​        在Pandas上做数据统计，要比在Numpy上做舒服很多，因为在数据展示上，有很多额外的信息辅助你来消化这些信息。而且你还能比较方便地绘制成图。</p><p>​        在本节内容中我们会对比Numpy中的方法和Pandas的不同，来解释为什么人们在做数据分析的时候喜欢用Pandas。</p><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>​        在分析数据或者统计数据的时候，首先得有数据，我简单创建了一份数据，后续的工作将会依赖于这份数据，所以请你帮我点击一下下面的 Run 键，初始化一下这份数据。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1.39</span><span class="token punctuation">,</span> <span class="token number">1.77</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0.34</span><span class="token punctuation">,</span> <span class="token number">1.91</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.05</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0.34</span><span class="token punctuation">,</span> <span class="token number">1.47</span><span class="token punctuation">,</span> <span class="token number">1.22</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">0.27</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.61</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"r0"</span><span class="token punctuation">,</span> <span class="token string">"r1"</span><span class="token punctuation">,</span> <span class="token string">"r2"</span><span class="token punctuation">,</span> <span class="token string">"r3"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"c0"</span><span class="token punctuation">,</span> <span class="token string">"c1"</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df</code></pre><p>​         运行结果：</p><pre class="language-none"><code class="language-none">      c0    c1    c2r0  1.39  1.77  Noner1  0.34  1.91 -0.05r2  0.34  1.47  1.22r3  None  0.27 -0.61</code></pre><p>​        你在日常生活中，也经常是以这种 2 维表格型数据为主，而且因为各种不可知原因，你的数据可能存在缺失状况。比如有人没交作业，有数据还没被采集到等等。 如果你使用 Excel 收集的数据（用 Pandas 读 Excel），那这种情况可能更加多。</p><h3 id="快速总结"><a href="#快速总结" class="headerlink" title="快速总结"></a>快速总结</h3><p>​        通常，如果我们不知道这份数据包含了什么，想快速了解一下这份数据的基础信息，我们可以直接先上一个 <code>describe()</code>，让 Pandas 自动帮我们描述一下这份数据的基础信息。</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">          c0    c1    c2count   3.00  4.00  3.00unique  2.00  4.00  3.00top     0.34  1.77 -0.05freq    2.00  1.00  1.00</code></pre><p>​        这里，会显示出来 <code>count</code> 计数（剔除掉 None 或者 NAN 这种无效数据），所以你在结果中能看到 <code>c0</code>，<code>c2</code> 两个的有效数是 3 个，而 <code>c1</code> 有效数有 4 个。</p><p>​        <code>unique</code> 表示的是每个 column 中有多少独特的数据。这个在初步感知数据丰富度上会有一定的作用。</p><p>​        <code>top</code> 表示出现最多的数据是哪一个，这组数据在 <code>c0</code> column 处，我们能观察到 <code>0.34</code> 出现了两次，所以它选的 top 是 <code>0.34</code>。</p><p>​        <code>freq</code> 是继续了 <code>top</code>，表述的是这个出现频率最多的数据，出现的次数有多少次。</p><p>​        上面这份数据还不是纯数据，如果是存数值型的数据，我们跑 <code>describe()</code> 还能看到统计学的信息。</p><pre class="language-python" data-language="python"><code class="language-python">df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"c0"</span><span class="token punctuation">,</span> <span class="token string">"c1"</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ndescribe:\n"</span><span class="token punctuation">,</span> df1<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">         c0        c1        c2a  0.053206  0.686505  0.439459b  0.083406  0.096903  0.212163c  0.369903  0.877894  0.918427d  0.169573  0.563210  0.900700describe:              c0        c1        c2count  4.000000  4.000000  4.000000mean   0.169022  0.556128  0.617687std    0.142708  0.332400  0.349645min    0.053206  0.096903  0.21216325%    0.075856  0.446634  0.38263550%    0.126490  0.624858  0.67008075%    0.219656  0.734352  0.905132max    0.369903  0.877894  0.918427</code></pre><p>​        平均数（mean），均方差（std），最小值（min），统计学的 25 分位，50 分位，75 分位各是多少，最大值（max）是多少。</p><h3 id="日常一般用法"><a href="#日常一般用法" class="headerlink" title="日常一般用法"></a>日常一般用法</h3><ul><li>均值中位数<code>df.mean()；df.median()</code></li></ul><p>​        像上面，我们已经可以从 <code>describe()</code> 功能中略知一二了，但是你肯定也不满足于这些简单的描述信息。那么我们看看还有哪些简单实用的统计学功能。 比较常用的，我们通常会想知道一组数据的均值，用 <code>mean()</code> 就好了。</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​        这样可以直接输出每一个 columns 的均值，因为这是在对 df 的第0个维度在做求均值。也可以这么写。</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>​         运行结果：</p><pre class="language-none"><code class="language-none">c0    0.690000c1    1.355000c2    0.186667dtype: float64</code></pre><p>​        当然，如果你不想对第 0 个维度，而是想对第 1 个维度求均值呢（后面的功能中 axis 的用法都基本相似）。我们只需要把 <code>axis=0</code> 换成 <code>axis=1</code></p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">r0    1.580000r1    0.733333r2    1.010000r3   -0.170000dtype: float64</code></pre><p>​        还有一个比较有用的参数 <code>skipna</code>，这个是用来处理数据中有 <code>None</code> 或者是 <code>NaN</code> 时用的。我们需不需要排除掉有 None 或者 NaN 的数据。 如果需要 skip 掉这些，我们就还是会计算所有行列的数值，只是在计数的时候，扣掉这些 None 和 NaN。<strong>而当 <code>skipna=False</code> 的时候， Pandas 只要遇到了 None 或者 NaN，就不计算这列、行的数据了。所以下面你会看到，它只返回了一个 column 的结果。</strong></p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>skipna<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment">#c1    1.355</span><span class="token comment">#dtype: float64</span></code></pre><p>​        你看，对比 <a href="https://mofanpy.com/tutorials/data-manipulation/numpy/operations/">Numpy 的用法</a>，你会发现， Pandas 在展示信息上还是挺对用户考虑的，它把行名等都展示出来，让人不犯迷糊。</p><p>​        有了上面的 <code>mean()</code> 的用法做铺垫，理解后面的用法也方便很多。比如在计算人民收入的时候， 我们常用中值来代替均值，原因很简单，<strong>极高收入群体总是拉高了我们的平均收入， 用中位数反倒能反映出群众的真实收入。</strong> 查中值的方式也很简单，就是 <code>median()</code>。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 最后一个为高收入人</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"mean():"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 拉高平均收入，拉高仇恨</span><span class="token comment">#mean(): 26750.0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"median():"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 比较合理</span><span class="token comment">#median(): 3000.0</span></code></pre><ul><li>累加累乘<code>df.sum()；df.prod()</code></li></ul><p>​        有了上面的<code>mean()</code>和<code>median()</code>的用法做铺垫，理解后面的用法也方便很多。比如要对数据做累加和累乘的运算，我们使用方式和<code>mean()</code>就没啥差别。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"c0"</span><span class="token punctuation">,</span><span class="token string">"c1"</span><span class="token punctuation">,</span><span class="token string">"c2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df</code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">   c0  c1  c20   0   1   21   3   4   52   6   7   83   9  10  11</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sum():\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nsum(axis=0):\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nsum(axis=1):\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">sum(): c0    18c1    22c2    26dtype: int64sum(axis&#x3D;0): c0    18c1    22c2    26dtype: int64sum(axis&#x3D;1): 0     31    122    213    30dtype: int64</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"prod():\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>prod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nprod(axis=0):\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>prod<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nprod(axis=1):\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>prod<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">prod(): c0      0c1    280c2    880dtype: int32prod(axis&#x3D;0): c0      0c1    280c2    880dtype: int32prod(axis&#x3D;1): 0      01     602    3363    990dtype: int32</code></pre><ul><li>最大最小<code>df.max(); df.min()</code></li></ul><p>​        同理，理解了上面的用法，查找最大最小也不是问题。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"max():\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nmin():\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">max(): c0     9c1    10c2    11dtype: int32min(): c0    0c1    1c2    2dtype: int32</code></pre><p>​        不过你注意到没，这种 <code>max()</code> 和 <code>min()</code> 都是对某一维度进行操作的，肯定有时候，你想要找到那个全局最大最小的数，这怎么找？ 哈哈，那你就做两次操作吧。或者你可以先把它转成 numpy，然后展平了求全局最大最小。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>values<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 用 Numpy 的方式运算</span><span class="token comment">#11</span><span class="token comment">#11</span></code></pre><p>​        如果想计算 mean 或者 median 这种，你想想然后再试试，用哪种方式比较合适呢？</p><ul><li>处理空值 <code>df.isnull(); df.notnull(); df.dropna(); df.fillna()</code></li></ul><p>​        总有 None 或者 NaN 值有时候挺烦人的，因为在做机器学习或者是统计数据的时候，你也不能放它在那不管。比如在机器学习中，如果有空值，你要么就选择放弃这条数据， 要么就要对它进行科学的填充，有人用均值有人用中值等。所以上面学到的技巧都能在这里用上。</p><p>​        第一，你可能想要先看看你的数据中有没有空值。用下面的 <code>isnull()</code> 或者 <code>notnull()</code> 就能找到。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  columns<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">"ABCD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nisnull():\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True 就是空</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nnotnull()\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>notnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># False 为空</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">     A    B    C    D0  1.0  2.0  3.0  0.01  3.0  4.0  NaN  1.02  NaN  NaN  NaN  NaN3  NaN  3.0  NaN  4.0isnull():        A      B      C      D0  False  False  False  False1  False  False   True  False2   True   True   True   True3   True  False   True  Falsenotnull()        A      B      C      D0   True   True   True   True1   True   True  False   True2  False  False  False  False3  False   True  False   True</code></pre><p>​        发现这里有空值，下面你就可以对这些 None, Null, NaN 做处理了。要么你就放弃这些有空值的数据，用 <code>dropna()</code>。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"默认：\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 默认按 axis=0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\naxis=1:\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 可以换一个 axis drop</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">默认：      A    B    C    D0  1.0  2.0  3.0  0.0axis&#x3D;1: Empty DataFrameColumns: []Index: [0, 1, 2, 3]</code></pre><p>​        当然，你觉得数据只要有值你就想留下来，只去除掉那些全为空的数据，那么你还能在筛选的时候加一个 <code>how=&quot;all&quot;</code> 参数。</p><pre class="language-python" data-language="python"><code class="language-python">df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>how<span class="token operator">=</span><span class="token string">"all"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># how 默认为 "any" </span><span class="token comment">#     0     1    2</span><span class="token comment">#1  1.0  None  3.0</span></code></pre><p>​        刚也说了，除了 drop 掉有 None 的，还可以对这些空值进行填充，填充的值也可以自行选定。</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>  <span class="token comment"># 填充 111</span></code></pre><p>​        对不同特征<strong>列</strong>做差异化的填充数值。</p><pre class="language-python" data-language="python"><code class="language-python">values <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"A"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>value<span class="token operator">=</span>values<span class="token punctuation">)</span></code></pre><p>​        甚至，如果你有一个每一位上的默认值，你都可以用一个全新的 df 来做空位的填充。</p><pre class="language-python" data-language="python"><code class="language-python">df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">"ABCD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"df2:\n"</span><span class="token punctuation">,</span> df2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nfillna(df2):\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>df2<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">df2:     A   B   C   D0   0   1   2   31   4   5   6   72   8   9  10  113  12  13  14  15fillna(df2):       A    B     C     D0   1.0  2.0   3.0   0.01   3.0  4.0   6.0   1.02   8.0  9.0  10.0  11.03  12.0  3.0  14.0   4.0</code></pre><ul><li>获取索引 <code>df.idxmin(); df.idxmax()</code></li></ul><p>​        一般来说，当你想用 <code>np.argmax()</code> 或者 <code>np.argmin()</code> 的时候，你可以在 pandas 用 <code>idxmax()</code> 和 <code>idxmin()</code> 来替换。原理都一样， 就是找到那个最大最小值的索引。这个的好处是，你只关注索引而不用关注值，你可以对这个索引的值做你想要的后续处理。</p><p>同上面一样，你还能用上面学到的 <code>skipna</code> 来对空值做控制。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  columns<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">"ABCD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nidxmax():\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>idxmax<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nidxmax(skipna=False):\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>idxmax<span class="token punctuation">(</span>skipna<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nidxmin():\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>idxmin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">   A  B    C  D0  1  2  3.0  01  3  4  NaN  12  3  5  2.0  13  3  2  2.0  3idxmax(): A    1B    2C    0D    3dtype: int64idxmax(skipna&#x3D;False): A    1.0B    2.0C    NaND    3.0dtype: float64idxmin(): A    0B    0C    2D    0dtype: int64</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​        在机器学习或者统计学中，只要你是和数据打交道，就少不了先观察和了解数据。用 Pandas 的这些功能，可以帮你快速了解数据的全貌， 也可以对其中的数据缺失做一些处理。</p><h2 id="绘制图表"><a href="#绘制图表" class="headerlink" title="绘制图表"></a>绘制图表</h2><p>​        数据是服务于人的决策的，我们有一大堆数据，如果人没有真正意义上理解这些数据背后的含义，那即使数据量再大，它也是无意义的。所以我们今天来探讨一种让人与数据之间构建信息传递桥梁的方法-数据可视化技术。</p><p>​        在 Pandas 中， 就已经可以实现多种多样的数据可视化方案了。</p><p>​        我们来看看你拥有的数据可以被 Pandas 表达成什么样。</p><h3 id="散点图Scatter"><a href="#散点图Scatter" class="headerlink" title="散点图Scatter"></a>散点图Scatter</h3><p>​        散点图实际在很多生活场景上都有运用的。比如你要描绘数据 sample 之间与拟合曲线之间呈现的关系：</p><p><img src="http://cdn.leafii.top/img/20220608204129.png" loading="lazy"></p><p>​        又或者在演示算法是如何进化 ，如何运动的。</p><p><img src="http://cdn.leafii.top/img/20220608204205.png" loading="lazy"></p><p>​        这些都是我之前做过的散点图案例，所以适用场景还是非常多的。在 Pandas 中，我们有非常方便的办法来直接对 DataFrame 做散点图。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt <span class="token comment">#一定要加上</span>n <span class="token operator">=</span> <span class="token number">1024</span> <span class="token comment"># data size</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token string">"x"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">"y"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>color <span class="token operator">=</span> np<span class="token punctuation">.</span>arctan2<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">"y"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">"x"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">"y"</span><span class="token punctuation">,</span> c<span class="token operator">=</span>color<span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">.5</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">"rainbow"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​        点击运行之后，你会发现可以做出来一幅非常好看的图。当然这里的参数你可以随意搭配，比如试试不写 <code>c=color</code> 或者去掉 <code>cmap=&quot;rainbow&quot;</code>， 看看会有何影响。</p><p>​        我稍微解释一下几个你可能在乎的参数：</p><ul><li>c: 对于这组数据中每个（x,y）数据点的颜色值</li><li>s: 画点的大小（size）</li><li>alpha：不透明度</li><li>cmap：colormap，你可以在<a href="https://matplotlib.org/stable/tutorials/colors/colormaps.html">这里</a>找到非常丰富的案例</li></ul><h3 id="折线图-plot"><a href="#折线图-plot" class="headerlink" title="折线图 plot"></a>折线图 plot</h3><p>​        同样在这个拟合关系的图中， 我们其实还绘制了一张折线图。可见，折线图也是非常有用的。</p><p><img src="http://cdn.leafii.top/img/20220608210450.png" loading="lazy"></p><p>​        同样，还有很多机器学习的loss变化曲线案例都是用折线图绘制出来的。而在Pandas中，折线图的绘制方法很简单。</p><pre class="language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">20</span>    <span class="token comment"># data size</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>y <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">0.4</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">"x"</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span>    <span class="token string">"y"</span><span class="token punctuation">:</span> y<span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">"x"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">"y"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">.5</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span></code></pre><p>![](<a href="http://cdn.leafii.top/img/Screen">http://cdn.leafii.top/img/Screen</a> Shot 2022-06-08 at 21.07.19.png)</p><p>​        我用最朴素的方法，绘制了一条歪歪扭扭的折线图，来体现它真的很折。你可能很感兴趣，为什么这里的 <code>c</code> 参数传入的数值和上面散点图的不一样？ 原来在折线图中，线的颜色最好是一样的，不然当线多了以后，你会发现不同颜色就看不出到底是那条线了。</p><p>​        碰到多条线的时候，怎么处理:</p><pre class="language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">20</span> <span class="token comment"># data size</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>y1 <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>y2 <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">0.4</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token string">"x"</span><span class="token punctuation">:</span>x<span class="token punctuation">,</span>  <span class="token string">"y1"</span><span class="token punctuation">:</span> y1<span class="token punctuation">,</span>  <span class="token string">"y2"</span><span class="token punctuation">:</span> y2<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">"x"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"y1"</span><span class="token punctuation">,</span> <span class="token string">"y2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">.5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="http://cdn.leafii.top/img/Figure_1.png" loading="lazy"></p><p>​        只要我给多个 <code>y</code>，它就能给出多条线的位置，当然还帮你注明哪个颜色是哪条线。</p><h3 id="条形图-bar"><a href="#条形图-bar" class="headerlink" title="条形图 bar"></a>条形图 bar</h3><p>​        做两家公司收入对比，或者是年度值变化的时候，我们也很喜欢用条形图。直接点，我们看看 Pandas 的条形图怎么画。 假设有 abd 四家公司，这 5 年的营收对比可以这么画。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>bar<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="http://cdn.leafii.top/img/Figure_2.png" loading="lazy"></p><p>​        如果把他们放在一起来看占比多少时，我们还能这么干：</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>stacked<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="http://cdn.leafii.top/img/Figure_3.png" loading="lazy"></p><p>​        横着不好看，想画一个竖着的图，Pandas 也能轻松做到。你只需要把 <code>bar()</code> 换成 <code>barh()</code> 就好。多出来的这个 h 就是 horizontal 的意思。</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>barh<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="http://cdn.leafii.top/img/Figure_4.png" loading="lazy"></p><h3 id="分布图-histograms"><a href="#分布图-histograms" class="headerlink" title="分布图 histograms"></a>分布图 histograms</h3><p>​        分布图在机器学习和统计学中非常重要，我经常画分布图，比如要画神经网络的参数分布可视化。又或者是GAN生成对抗网络中的数据分布。</p><p><img src="http://cdn.leafii.top/img/20220608215327.png" loading="lazy"></p><p>​        我们用<code>plot.hist()</code>就能画出来了，这里的hist是histogram，也就是分布的意思。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>hist<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​        当然还会有多个分布重合在一起，你想对比这看看这些分布有无差别的时候，重合度怎么样的时候。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token string">"a"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token string">"b"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">"c"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​        为了使你能轻松辨析出 abc 这几个分布的不同，我把 <code>alpha</code> 不透明度调整了一下，让你能看清楚重叠部分。而且 <code>bins</code> 柱状体的数量也调多了。</p><h3 id="饼图-Pie"><a href="#饼图-Pie" class="headerlink" title="饼图 Pie"></a>饼图 Pie</h3><p>​        当你想给 Excel 批量话饼图的时候， 你就能结合读取 Excel 的教学，和这一节一起用。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"boss"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"meeting"</span><span class="token punctuation">,</span> <span class="token string">"supervise"</span><span class="token punctuation">,</span> <span class="token string">"teaching"</span><span class="token punctuation">,</span> <span class="token string">"team building"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>pie<span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token string">"boss"</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="http://cdn.leafii.top/img/Figure_5.png" loading="lazy"></p><p>​        如果你有多张大饼，想要对比？当然也没问题。可以多加一个 <code>subpots</code> 来分开画饼。<code>legend</code> 是用来确定要不要输出图例的，我这里嫌弃图例占地方， 就设置 <code>legend=False</code>。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span>        <span class="token string">"bigBoss"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"smallBoss"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"meeting"</span><span class="token punctuation">,</span> <span class="token string">"supervise"</span><span class="token punctuation">,</span> <span class="token string">"teaching"</span><span class="token punctuation">,</span> <span class="token string">"team building"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>pie<span class="token punctuation">(</span>subplots<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> legend<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="http://cdn.leafii.top/img/Figure_6.png" loading="lazy"></p><h3 id="面积图-area"><a href="#面积图-area" class="headerlink" title="面积图 area"></a>面积图 area</h3><p>​        面积图偶尔你还是会看见的，比如在我的 <a href="https://mofanpy.com/tutorials/machine-learning/evolutionary-algorithm/neat-supervised-learning/">进化算法教学中</a>， 就使用了面积图来观看各个种群的占比随时间的变化情况。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>area<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​        如果你不想上下堆砌在一起观看，而是有统一的一个起点，那可以用这个参数 <code>stacked=False</code>。</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>area<span class="token punctuation">(</span>stacked<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>​        好了，这节内容也还挺多的，我就先讲到这里。用 Pandas 画图还可以有很多其他花样， 你可以在这里看到更加细节的<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html">官方文档</a>。 每种画图功能里面，也还有更多参数可以调整。记得不懂就要多在网上搜搜，多看官方文档。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Pandas统计展示&quot;&gt;&lt;a href=&quot;#Pandas统计展示&quot; class=&quot;headerlink&quot; title=&quot;Pandas统计展示&quot;&gt;&lt;/a&gt;Pandas统计展示&lt;/h1&gt;&lt;p&gt;​        本文主要写Pandas在统计展示方面的知识。&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="tags/python/"/>
    
    <category term="机器学习基础" scheme="tags/机器学习基础/"/>
    
  </entry>
  
  <entry>
    <title>Pandas基本操作</title>
    <link href="2022/06/05/Pandas%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>2022/06/05/Pandas%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2022-06-05T15:23:07.000Z</published>
    <updated>2022-06-08T06:05:57.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pandas基本操作"><a href="#Pandas基本操作" class="headerlink" title="Pandas基本操作"></a>Pandas基本操作</h1><p>​        本文对Pandas中的一些基本操作进行描述。</p><span id="more"></span><h2 id="从文件读取数据"><a href="#从文件读取数据" class="headerlink" title="从文件读取数据"></a>从文件读取数据</h2><p>​        有很多 Pandas 的教学，一开始一般都是开始教 Pandas 的数据结构或者运算方法。 但是我觉得，当你想要使用 Pandas 的时候，<strong>更多是因为你手头有 Excel 数据或者比较格式化的数据， 需要处理分析和表达这些数据。为了解决你这种当务之急，我觉得先解决读取数据这回事。</strong></p><p>​        以下操作需要用到的文件为<code>[&#39;体检数据.xlsx&#39;, &#39;体检数据.csv&#39;, &#39;体检数据_sep.csv&#39;, &#39;体检数据_sep.txt&#39;]</code></p><h3 id="Excel文件"><a href="#Excel文件" class="headerlink" title="Excel文件"></a>Excel文件</h3><p>​        <a href="https://mofanpy.com/static/files/%E4%BD%93%E6%A3%80%E6%95%B0%E6%8D%AE.xlsx">点击下载</a>所需文件，下载后用Excel打开文件后是这样：</p><p>![](<a href="http://cdn.leafii.top/img/Screen">http://cdn.leafii.top/img/Screen</a> Shot 2022-06-05 at 23.31.25.png)</p><ul><li><code>pd.read_excel()</code></li></ul><p>​        将文件放在适宜的目录，我们就可以使用<code>read_excel()</code>方法读出文件了。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddf <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">"data/体检数据.xlsx"</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>df</code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">    姓名   身高  体重   肺活量学号1   小明  168  60  32002   小黄  187  80  38003   小花  170  70  3400</code></pre><p>​        在函数中的<code>index_col=0</code>就是告诉Pandas，让它使用第一个column（学号）的数据当作row索引。后面还有很多读取的功能里也有一样的参数。</p><ul><li><code>df.to_excel()</code></li></ul><p>​        好，我们既然可以读取Excel文件，那么稍稍修改，再保存起来应该也不成问题。</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"体重"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">"data/体检数据_修改.xlsx"</span><span class="token punctuation">)</span></code></pre><p>​        其实在读取和保存 Excel 文件的时候，还有很多额外的参数可供选择，因为太多了，我们这里就先讲最常用的，如果你要深入研究， 可以到他们的官网来看<a href="https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html#pandas.read_excel">官方文档</a>。</p><h3 id="csv或txt等纯文本文件"><a href="#csv或txt等纯文本文件" class="headerlink" title="csv或txt等纯文本文件"></a>csv或txt等纯文本文件</h3><p>​        下载需要的文件：<a href="https://mofanpy.com/static/files/%E4%BD%93%E6%A3%80%E6%95%B0%E6%8D%AE.csv">链接</a>，使用纯文本编辑器打开，就能看到它最原始的样貌了。</p><p>![](<a href="http://cdn.leafii.top/img/Screen">http://cdn.leafii.top/img/Screen</a> Shot 2022-06-05 at 23.44.57.png)</p><ul><li><code>pd.read_csv()</code></li></ul><p>​        使用Python的open打开纯文本文件：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"data/体检数据.csv"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class="language-none"><code class="language-none">学号,姓名,身高,体重,肺活量1,小明,168,60,32002,小黄,187,80,38003,小花,170,70,3400</code></pre><p>​        使用pandas的<code>read_csv()</code>方法：</p><pre class="language-python" data-language="python"><code class="language-python">df_csv <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"data/体检数据.csv"</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>df_csv</code></pre><pre class="language-none"><code class="language-none">学号,姓名,身高,体重,肺活量1,小明,168,60,32002,小黄,187,80,38003,小花,170,70,3400</code></pre><p>​        有的时候，你不能保证别人给你的数据，是不是一份标准格式的数据，比如别人不喜欢用 <code>,</code> 来分隔数据点， 而是喜欢用什么乱七八糟的 <code>=</code> 来分隔。这时，Pandas 帮你考虑到了这种问题， 你可以挑选要用哪个字符来识别这些分隔。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"data/体检数据_sep.csv"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df_csv <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"data/体检数据_sep.csv"</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">"="</span><span class="token punctuation">)</span>df_csv</code></pre><p>​        提到 csv，你可能还会想用 Excel 打开看看，但是提到 txt，一般你也不会想用 Excel 打开了吧。用 Pandas 打开一个 txt 文件和打开一个 csv 文件，、 其实本质上是一样的，都是打开一个纯文本文件。所以下面我再打开一下 txt。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"data/体检数据_sep.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df_txt <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"data/体检数据_sep.txt"</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">"="</span><span class="token punctuation">)</span>df_txt</code></pre><ul><li><code>df.to_csv()</code></li></ul><p>​        能打开，我们就能保存，保存方法同样很简单，只需要 <code>df.to_csv()</code> 就好了，甚至，你还能保存到 Excel 文件，在 Pandas 中它们是可以互相转换的。 同理用 <code>read_excel()</code> 打开的，也能存成 <code>to_csv()</code>。</p><pre class="language-python" data-language="python"><code class="language-python">df_txt<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">"data/体检数据_sep_修改.csv"</span><span class="token punctuation">)</span>df_txt<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">"data/体检数据_sep_修改.xlsx"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"读保存后的 csv"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"data/体检数据_sep_修改.csv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"读保存后的 xlsx"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">"data/体检数据_sep_修改.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        做数据分析和机器学习，会用上面的方法来读 Excel 或者是纯文本，我们就已经解决了大部分的需求了。下面我来介绍几个我觉得 Pandas 的额外几个有趣的读取方式。</p><h3 id="其它有趣的"><a href="#其它有趣的" class="headerlink" title="其它有趣的"></a>其它有趣的</h3><ul><li><code>pd.read_clipboard()</code></li></ul><p>​        从剪切板里面读取数据，这个很有意思，使用场景并不多，但是指不定哪天你要用 Python 写 APP 的时候，就能用到这个，不是有很多 APP 会识别你的剪切板， 方便你直接复制数据吗。这个功能说不定就能派上用场。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_clipboard<span class="token punctuation">(</span><span class="token punctuation">)</span>df</code></pre><ul><li><code>pd.read_html()</code></li></ul><p>​        另外一个是从网页中获取表格型数据，就像下面这个表格。我们也能用 Pandas 调取解析网页当中的表格数据。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_html<span class="token punctuation">(</span><span class="token string">"https://mofanpy.com/tutorials/data-manipulation/pandas/read-save/"</span><span class="token punctuation">)</span>df</code></pre><p>​        还有一些功能，比如让 Pandas 读数据库，读 Json 等，你都可能在后期自己开发的时候偶尔用到。只要用到的时候，查查 <a href="https://pandas.pydata.org/docs/reference/io.html">Pandas 官方文档</a> 还是很有帮助的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​        大千世界，数据也是多样的，Pandas 量身为你定制了很多读取数据的方法。从做数据分析和机器学习最常用的 Excel、csv、txt 数据等，到 html，剪切板等有趣的数据类型， 一个 Pandas 都可以帮你搞定。了解完读存数据，接下来，我们就来认真了解，数据在 Pandas 中到底是一个什么样的东西。</p><h2 id="Pandas中的数据是什么"><a href="#Pandas中的数据是什么" class="headerlink" title="Pandas中的数据是什么"></a>Pandas中的数据是什么</h2><p>​        上面我们已经提到了在分析数据时最基础的操作就是“用Pandas打开数据文件”，不过我们并没有详细说这份打开的数据它的格式是什么样。但是要了解我们如何更改加工数据，我们必然还是需要了解在Pandas中的数据格式是什么。</p><p>​        简单来说，Pandas支持最好的是一维和二维数组，一维数组就是一个序列，一条数据，而二维数据是我们生活中更加常见的种类，基本上所有Excel数据都是二维数据，有横纵交替，用两个维度来定位这个数据。</p><p>​        下面来说说Pandas中的一维二维数据特性。</p><h3 id="数据序列Series"><a href="#数据序列Series" class="headerlink" title="数据序列Series"></a>数据序列Series</h3><ul><li>创建</li></ul><p>​        一串Python List你肯定不陌生，Pandas中的Series的核心其实就是一串类似于Python List的序列。只是它要比Python List丰富很多，有更多的功能属性。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"list:"</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"series:"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">list: [11, 22, 33]series: 0    111    222    33dtype: int64</code></pre><p>​        可见Pandas Series和Python List有很大的区别：Pandas Series帮我们额外维护了一份索引。有这个索引的意义是你可以使用自己喜欢的索引来检索数据：</p><pre class="language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>l<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s</code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">a    11b    22c    33dtype: int64</code></pre><p>​        所以，只要是有索引形式的结构，都可以搞成 Series，比如下面这样：</p><pre class="language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">:</span> <span class="token number">33</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>s</code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">a    11b    22c    33dtype: int64</code></pre><p>​        后文中的DataFrame也可以使用字典来创建噢。</p><ul><li>转换Numpy</li></ul><p>​        既然Python中的List可以用来创建Series，那么使用Numpy也可以创建：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> nps <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s</code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">a    0.689052b    0.284041c    0.616957dtype: float64</code></pre><p>​        将Series回退到Numpy array或者List：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"array:"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"list:"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>values<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># array: [11 22 33]</span><span class="token comment"># list: [11, 22, 33]</span></code></pre><h3 id="数据表DataFrame"><a href="#数据表DataFrame" class="headerlink" title="数据表DataFrame"></a>数据表DataFrame</h3><p>​        Pandas首先支持的就是序列数据和表格数据，因为这两种是日常生活中最常用的数据保存和编辑格式了，我们看看如何用Pandas的DataFrame维护一张数据表吧。</p><ul><li>创建</li></ul><p>​        在上一节数据文件读取的教学中，你load到的数据实际上就是一个DataFrame，举个简单的例子，将一个二维数组变成Pandas的DataFrame：</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df</code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">   0  10  1  21  3  4</code></pre><p>​        显然，它创建出来的df在真实数据外围，还包上了一层其他的数据（0，1），在DataFrame中，这是用来索引行&#x2F;列的序号，如果要按位置来选去其中的值，也可以这么干。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#第0行，第1列</span><span class="token comment"># 或 第一个维度中的第0号，第二个维度中的第1号</span>df<span class="token punctuation">.</span>at<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#2</span></code></pre><p>​        Pandas 中还有很多方式来选取和改变数据值，请按捺一下激动的小心情， 我们将在下节内容中具体介绍。</p><p>​        自动创建的索引序号并不是很可读。我们还能将这些序号换成人类更好理解的文字标签信息:</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"col1"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"col2"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df</code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">   col1  col20     1     21     3     4</code></pre><p>​        可以从结果看出，其实字典中的 key 会被当成是数据中的 column，而 value 会被当做是 row，这个非常符合你在 Excel 中的使用习惯。 因为往往随着数据量变大，你用鼠标滚轮滚动查看不同数据的时候，天然的比较喜欢上下查看不同的数据样本，而不是左右查看，所以一般都是左右记的是数据标签（特征）， 上下排列的是不同数据样本。</p><p>​        见识了字典变 DataFrame，其实 Series 也是可以组合变成 DataFrame 的，而且这也非常符合常理， 如果我从 DataFrame 中取出一个 Column， 这不就变成了一条 Series 了吗？</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">"col1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"取出来之后的 type:"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">"col1"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">0    11    3Name: col1, dtype: int64取出来之后的 type: &lt;class &#39;pandas.core.series.Series&#39;&gt;</code></pre><p>​        将两个Series拼接起来：</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"col1"</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"col2"</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df</code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">   col1  col20     1     21     3     4</code></pre><p>​        来看看 Series 和 DataFrame 构建索引的方式：</p><pre class="language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"col1"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"col2"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">a    1.0b    2.0c    3.0dtype: float64   col1  col2a     1     2b     3     4</code></pre><p>​        既然 DataFrame 的 Column 和 Index 这么有意思，十有八九，你会想取出来用一用这些 Column 和 Index，比如你数据比较大的时候，想初步看看这份数据涉及了多少特征， 数据的 index 有多少种的时候，你可以直接获取到这些信息。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>index<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">Index([&#39;a&#39;, &#39;b&#39;], dtype&#x3D;&#39;object&#39;)Index([&#39;col1&#39;, &#39;col2&#39;], dtype&#x3D;&#39;object&#39;)</code></pre><p>​        如果写前端的朋友，你们时常会遇到 json 形式的数据，比如可以像下面这样处理。</p><pre class="language-python" data-language="python"><code class="language-python">my_json_data <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span><span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"height"</span><span class="token punctuation">:</span> <span class="token number">111</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span><span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">"height"</span><span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>my_json_data<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"rose"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        Pandas 真的用心良苦，为我们广大数据同胞提供了这么多这么丰富的接口。学会这样观看数据，我们在分析和处理数据的时候就更有把握了。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>​        Pandas 中，为了我们提供了日常最常用的数据存储方式，分别是 Series 的一维数据，和 DataFrame 的二维数据，在机器学习中，我们常会接触到 3 维甚至是更高维度， 但是在分析数据的时候，特别是，要结合 Excel 来分析数据的时候，二维数据才是最常用的。</p><h2 id="选取数据"><a href="#选取数据" class="headerlink" title="选取数据"></a>选取数据</h2><p>​        Pandas的数据结构和你管理Excel很像，特别是DataFrame就约等于Excel当中的sheet。我们非常适应用Excel来选择和修改数据，但是如果把它程序化，用代码来修改和选取的时候，我们该如何操作呢？</p><p>​        Pandas的数据选取和List，Numpy Array还是有挺大差别的，因为它想要维护了很多的人类可读的索引信息，所以它在索引的时候，也有不一样的处理方式，今天我们就来看看Pandas是如何处理数据选取和修改的吧。</p><h3 id="多种选取方式"><a href="#多种选取方式" class="headerlink" title="多种选取方式"></a>多种选取方式</h3><p>​        在Pandas中，有丰富的选取数据方式，这可比List，Dictionary，甚至是Numpy还要多样化。我们既能通过文字标签来定位数据，也能通过数值序号来定位。所以为了实现这种多样性，Pandas对于数据的选取采用了不同类型的处理方法，比如<code>.loc</code>,<code>.iloc</code>等，我们来一一介绍吧。</p><p>​        面对应用比较多的工作学习场景，我先以 Excel 型的表格数据举例，请你帮我构建一下下面这份 DataFrame：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>  data<span class="token punctuation">,</span>  index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  columns<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">"ABCD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dfdata</code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">    A   B   C   Da -12 -11 -10  -9b  -8  -7  -6  -5c  -4  -3  -2  -1d   0   1   2   3e   4   5   6   7f   8   9  10  11array([[-12, -11, -10,  -9],       [ -8,  -7,  -6,  -5],       [ -4,  -3,  -2,  -1],       [  0,   1,   2,   3],       [  4,   5,   6,   7],       [  8,   9,  10,  11]])</code></pre><h3 id="选Column"><a href="#选Column" class="headerlink" title="选Column"></a>选Column</h3><p>​        看到上面的这份数据之后，我们发现DataFrame会分Column和Row（index）。在机器学习中，通常Column是特征，Row是数据样本，要对某个特征进行分析的时候，比如要做特征数值分布的分析，我们得把特征取出来吧，那么可以进行如下操作：</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">"B"</span><span class="token punctuation">]</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">a   -11b    -7c    -3d     1e     5f     9Name: B, dtype: int64</code></pre><p>​        选一个就这么简单，但偶尔还想多选几个特征，怎么搞呢？回忆一下之前Numpy中的Array是怎么选的？</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"numpy:\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ndf:\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">numpy: [[-10 -11] [ -6  -7] [ -2  -3] [  2   1] [  6   5] [ 10   9]]df:     C   Ba -10 -11b  -6  -7c  -2  -3d   2   1e   6   5f  10   9</code></pre><p>​        现在可以选column了，那意味着肯定能将Index（Row）的信息也一起考虑到数据筛选的工作当中了。</p><h3 id="loc"><a href="#loc" class="headerlink" title="loc"></a>loc</h3><p>​        在Numpy中选取数据一般是按照在维度上的排序来定位的。比如对于你刚刚创建的Numpy数据<code>data</code>：</p><pre class="language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">array([[-3, -2]])</code></pre><p>​        而在DataFrame中，同样是上述功能，你也可以这么干：</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">:</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">:</span><span class="token string">"D"</span><span class="token punctuation">]</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">   B  C  Dc -3 -2 -1d  1  2  3</code></pre><p>​        不知道你有没有发现，这个 <code>&quot;c&quot;:&quot;d&quot;</code> 和 <code>&quot;B&quot;:&quot;D&quot;</code> 明明对应的是上面 <code>data</code> 的 <code>[2:3]</code> 和 <code>[1:3]</code>，但为什么它还包含了最后一位的 <code>&quot;d&quot;</code> 和 <code>&quot;D&quot;</code> 呢？这的确是 Pandas 的一个用心良苦，我猜他是为了更贴切 Excel 中的使用原则吧，想一想，如果你像下面这样， 在选择 Excel 要被筛选的数据时，从 b 选到 d，其实你是有包含 d 的。所以我说，Pandas 这么设计，原因之一也应该是为了照顾我们吧。</p><p>​        除了筛选一个片段，还可以像 Numpy 那样单个单个的选取。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"numpy:\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ndf:\n"</span><span class="token punctuation">,</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">numpy: [[ 0  1  2  3] [-8 -7 -6 -5]]df:    A  B  C  Dd  0  1  2  3b -8 -7 -6 -5</code></pre><p>​        上面这两个例子，不难看出，Pandas 选取数据的底层逻辑，和 Python Numpy 的类似，都是按维度的先后（先选第一维，再第二，以此类推）， 开始选取。按数据的索引找到维度上的对应索引区域。</p><p>​        下面我再来整个有趣的，如果我不按字母顺序去组织 index，比如从原本的 <code>index=abcdef</code> 换成 <code>index=beacdf</code>， 猜猜下面的这份数据索引会找到哪一份子数据？</p><pre class="language-python" data-language="python"><code class="language-python">df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>  data<span class="token punctuation">,</span>  index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">"beacdf"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  columns<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">"ABCD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">"e"</span><span class="token punctuation">:</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">    A   B   C   Db -12 -11 -10  -9e  -8  -7  -6  -5a  -4  -3  -2  -1c   0   1   2   3d   4   5   6   7f   8   9  10  11   A  B  C  De -8 -7 -6 -5a -4 -3 -2 -1c  0  1  2  3</code></pre><h3 id="iloc"><a href="#iloc" class="headerlink" title="iloc"></a>iloc</h3><p>​        看完面向 Excel 编程，我们再来回到编程本身，用程序的思维去选取数据。这意味着什么？用最朴素的方法，也是意味着能更快找到数据位置，比如直接用位置信息来筛选。 Numpy 不就是这么干的吗？这时 <code>.iloc</code> 功能就派上用场了。</p><p>​        看看<code>iloc</code>的功能是什么：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"numpy:\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ndf:\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">numpy: [[-3 -2]]df:    B  Cc -3 -2</code></pre><p>​        简直和 Numpy 的模式一模一样，就是结果中多了一个 DataFrame 的标签信息。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"numpy:\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ndf:\n"</span><span class="token punctuation">,</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">numpy: [[ 0  1  2  3] [-8 -7 -6 -5]]df:    A  B  C  Dd  0  1  2  3b -8 -7 -6 -5</code></pre><h3 id="loc和iloc混搭"><a href="#loc和iloc混搭" class="headerlink" title="loc和iloc混搭"></a>loc和iloc混搭</h3><p>​        难免有时候，我们需要混搭 loc 和 iloc 的方式，比如我想要选取第 2 到第 4 位数据的 A C 两个特征，这时咋办？ 想想 Pandas 这么牛逼，肯定有办法解决。的确，它解决的方法是采用索引转换的方式，比如我在 <code>.loc</code> 模式下，将序号索引转换成 <code>.loc</code> 的标签索引。</p><pre class="language-python" data-language="python"><code class="language-python">row_labels <span class="token operator">=</span> df<span class="token punctuation">.</span>index<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"row_labels:\n"</span><span class="token punctuation">,</span> row_labels<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ndf:\n"</span><span class="token punctuation">,</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>row_labels<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">row_labels: Index([&#39;c&#39;, &#39;d&#39;], dtype&#x3D;&#39;object&#39;)df:    A  Cc -4 -2d  0  2</code></pre><p>​        再看看 Column 的 labels 怎么取:</p><pre class="language-python" data-language="python"><code class="language-python">col_labels <span class="token operator">=</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"col_labels:\n"</span><span class="token punctuation">,</span> col_labels<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ndf:\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>row_labels<span class="token punctuation">,</span> col_labels<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">col_labels: Index([&#39;A&#39;, &#39;D&#39;], dtype&#x3D;&#39;object&#39;)df:    A  Dc -4 -1d  0  3</code></pre><p>​        清楚了吧，用 <code>df.index</code> 和 <code>df.columns</code> 来调取到全部的标签，然后在用像 Numpy index 索引的方式把这些标签给筛选出来，放到 <code>.loc</code> 里面用。 那反过来，我想要找 A C 两个特征的 前两个数据，这时咋办？</p><pre class="language-python" data-language="python"><code class="language-python">col_index <span class="token operator">=</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>get_indexer<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"col_index:\n"</span><span class="token punctuation">,</span> col_index<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ndf:\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> col_index<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">col_index: [0 1]df:     A   Ba -12 -11b  -8  -7</code></pre><p>​        同理，<code>df.index.get_indexer([&quot;a&quot;, &quot;b&quot;])</code> 也可以这样获取到 label 对应的 index 信息。</p><h3 id="条件过滤筛选"><a href="#条件过滤筛选" class="headerlink" title="条件过滤筛选"></a>条件过滤筛选</h3><p>​        按条件过滤其实是一件很有趣的事，因为很多情况我们事先也不知道具体的 index 是什么，我们更想要从某些条件中筛选数据。 下面我举几个例子，大家应该很容易 get 到其中的奥秘。</p><ul><li><strong>选在 A Column 中小于 0 的那些数据</strong></li></ul><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">]</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">    A   B   C  Da -12 -11 -10 -9b  -8  -7  -6 -5c  -4  -3  -2 -1</code></pre><ul><li><strong>选在第一行数据不小于 -10 的数据</strong></li></ul><p>​        这里注意了你可以用两种方式，一种是 <code>~</code> 来表示 <code>非</code> 什么什么，第二种是直接用 <code>&gt;=-10</code> 来筛选。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"~:\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">~</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n>=:\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">~:     C   Da -10  -9b  -6  -5c  -2  -1d   2   3e   6   7f  10  11&gt;&#x3D;:     C   Da -10  -9b  -6  -5c  -2  -1d   2   3e   6   7f  10  11</code></pre><ul><li><strong>选在第一行数据不小于 -10 或小于 -11 的数据</strong></li></ul><p>​        同上面类似的，我还能用或 <code>|</code> 来表示 or 的意思, <code>&amp;</code> 表述 and。比如选在第一行数据不小于 -10 或小于 -11 的数据:</p><pre class="language-python" data-language="python"><code class="language-python">i0 <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">~</span><span class="token punctuation">(</span>i0 <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>i0 <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">    A   C   Da -12 -10  -9b  -8  -6  -5c  -4  -2  -1d   0   2   3e   4   6   7f   8  10  11</code></pre><p>​        所以你看，你可以用 <code>.loc</code> 或者 <code>.iloc</code> 来做过滤处理。然后用 <code>.loc</code> 来做筛选。为什么用 <code>.iloc</code> 来筛选呢，比如下面这样：</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">~</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#报错</span></code></pre><p>​        这样写居然会导致报错，为什么呢？你分析分析，把 <code>~(df.iloc[0] &lt; -10)</code> 这个筛选条件打印出来看看它是什么值。然后想一想 <code>.iloc</code> 能够接受的值是啥？ 想清楚了，这个问题就迎刃而解了。</p><pre class="language-none"><code class="language-none">A    FalseB    FalseC     TrueD     TrueName: a, dtype: bool</code></pre><h3 id="Series和DataFrame类似"><a href="#Series和DataFrame类似" class="headerlink" title="Series和DataFrame类似"></a>Series和DataFrame类似</h3><p>​        既然二维的 DataFrame 你都已经玩过了，Series 的操作就不在话下了。</p><pre class="language-python" data-language="python"><code class="language-python">list_data <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>  list_data<span class="token punctuation">,</span>   index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">"abcdefgh"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s</code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">a   -4b   -3c   -2d   -1e    0f    1g    2h    3dtype: int64</code></pre><ul><li>按标签筛选数据 <code>.loc</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">:</span> <span class="token string">"f"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">a   -4g    2c   -2dtype: int64 c   -2d   -1e    0f    1dtype: int64</code></pre><ul><li>按 index 筛选数据 <code>.iloc</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">d   -1b   -3f    1dtype: int64 c   -2d   -1dtype: int64</code></pre><ul><li><code>iloc</code> 和 <code>loc</code> 互相混用</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>s<span class="token punctuation">.</span>index<span class="token punctuation">.</span>get_indexer<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>s<span class="token punctuation">.</span>index<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">c   -2d   -1dtype: int64 d   -1c   -2dtype: int64</code></pre><ul><li>按条件过滤筛选</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>s <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>s <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>s <span class="token operator">></span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>s <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>s <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">a   -4b   -3c   -2d   -1e    0f    1g    2dtype: int64 d   -1dtype: int64 a   -4b   -3c   -2d   -1h    3dtype: int64</code></pre><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>​        Pandas 的数据筛选方法比 Numpy 丰富多了，介绍的篇幅也有点多，我日常用的最多的还是用条件来筛选，比如在处理机器学习的脏数据的时候，要用很多筛选逻辑。 有时甚至我会觉得 Numpy 的筛选方式不够多，专门把 Numpy 数据转换成 Pandas 数据，然后再用 Pandas 提供的丰富工具处理数据，再转回 Numpy。 相信你用熟了之后，数据处理将要简单很多。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Pandas基本操作&quot;&gt;&lt;a href=&quot;#Pandas基本操作&quot; class=&quot;headerlink&quot; title=&quot;Pandas基本操作&quot;&gt;&lt;/a&gt;Pandas基本操作&lt;/h1&gt;&lt;p&gt;​        本文对Pandas中的一些基本操作进行描述。&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="tags/python/"/>
    
    <category term="机器学习基础" scheme="tags/机器学习基础/"/>
    
  </entry>
  
  <entry>
    <title>Numpy关于数据</title>
    <link href="2022/05/29/Numpy%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE/"/>
    <id>2022/05/29/Numpy%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE/</id>
    <published>2022-05-29T11:41:37.000Z</published>
    <updated>2022-06-05T09:31:05.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Numpy关于数据"><a href="#Numpy关于数据" class="headerlink" title="Numpy关于数据"></a>Numpy关于数据</h1><h2 id="Numpy读取保存数据"><a href="#Numpy读取保存数据" class="headerlink" title="Numpy读取保存数据"></a>Numpy读取保存数据</h2><p>​        数据一般都被记录在存储当中，我们常见的小规模数据大多是 Excel 的 xlsx，csv, json, 或 txt，log 等等格式。 当我们要处理数据，特别是运算数据的时候，我们都能拿 Python 读取出来。而在大数据这种情况下，数据是存储在 MySQL，Mongodb 等这种数据库中的， 同样，Python 也提供了很多接口来读取这些数据。</p><p>​        今天我们想聊聊其中的一部分，用 Numpy 来直接读取数据（通常是纯数值形式的数据），并加以运算的流程。而且看看我们可以如何保存 Numpy 里的数据。</p><span id="more"></span><h3 id="加载常用数据格式"><a href="#加载常用数据格式" class="headerlink" title="加载常用数据格式"></a>加载常用数据格式</h3><ul><li><code>np.loadtxt(), np.fromstring()</code></li></ul><p>​        一般我们都把数据存放在文件中，数据一般长这样：</p><p>![](<a href="http://cdn.leafii.top/img/Screen">http://cdn.leafii.top/img/Screen</a> Shot 2022-06-02 at 22.36.26.png)</p><p>​        如果用Excel打开数据，也有可能像下面这样：</p><p><img src="http://cdn.leafii.top/img/20220603170252.png" loading="lazy"></p><p>​        下面，请使用已经为你准备好了的数据，从上篇文章的里面拷贝了一份，作为csv格式存起来了，使用以下的代码查看文件中的数据：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"data file in directory:"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"data/data.csv"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;] # StudentID, Age, Score20131,10,6720132,11,8820133,12,9820134,8,10020135,9,7520136,12,78</code></pre><p>​        如果现在要模拟经常要加载的情况，从文件中加载出来。如果使用纯python，可以一行一行读出来，然后保存在list中；但是也可以直接用numpy的方式读取出来：使用<code>np.loadtxt()</code>功能，我们就可以自定义地读取出来数据了。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span><span class="token string">"data/data.csv"</span><span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">,</span> skiprows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[[20131    10    67] [20132    11    88] [20133    12    98] [20134     8   100] [20135     9    75] [20136    12    78]]</code></pre><p>​        在<code>loadtxt</code>的参数中，我们传入<code>，</code>让numpy在做数据分隔的时候，以逗号作为分隔符。同时<code>skiprow</code>可以skip掉第一行的描述型文字（默认也会自动skip掉第一行），还有读取出来的数据要放到定义好了的&#96;dtype&#x3D;np.int类型的array中，这一行的功能就可以轻松读取这个csv文件的数据了。</p><p>​        请注意：<code>np.loadtxt()</code>为什么不叫<code>np.loadcsv()</code>呢？因为csv数据也属于纯文本数据，如果想要加载后缀名为<code>txt</code>的文件，也是没问题的。以上就是最普通的一种加载数据方式。下面我们来看一种更加有趣的加载过程。能不能直接从字符中加载数据呢？</p><p>​        有时候，我需要对字符串加工处理后，直接读这个加工之后的字符串。</p><pre class="language-python" data-language="python"><code class="language-python">row_string <span class="token operator">=</span> <span class="token string">"20131, 10, 67, 20132, 11, 88, 20133, 12, 98, 20134, 8, 100, 20135, 9, 75, 20136, 12, 78"</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>fromstring<span class="token punctuation">(</span>row_string<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[[20131    10    67] [20132    11    88] [20133    12    98] [20134     8   100] [20135     9    75] [20136    12    78]]</code></pre><p>​        请注意，这种方法目前只能读取一个数值序列，读完这个序列之后，可以再使用numpy的<code>reshape</code>方法把数据定义成你想要的样子。另外要注意的一点是对比<code>np.loadtxt(delimiter=&quot;,&quot;)</code>和<code>np.fromstring(sep=&quot;,&quot;)</code>这两个用来判断分隔符的参数，它们的参数命名是不一样的。</p><p>​        numpy可以读取<code>csv</code>和<code>txt</code>格式的数据，但是无法读取Excel中的xlsx数据格式，未来可以使用Pandas库进行xlsx数据格式的读取。</p><h3 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h3><p>​        在日常生活中经常会碰到的数据格式，都能用Numpy读，在读取完之后或者处理完数据之后，如果想把数据保存起来，怎么办呢？好在Numpy还是挺人性化的，也有丰富的方法来处理保存数据这件事。</p><ul><li><code>np.savetxt()</code></li></ul><p>​        Numpy存数据，存哪种数据格式，取决于你想不想这份数据被人查看，或者被其他语言编辑，如果想的话，你就会保存成一些通用的数据格式，比如<code>csv</code>或<code>txt</code>。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"numpy data:\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>np<span class="token punctuation">.</span>savetxt<span class="token punctuation">(</span><span class="token string">"data/save_data.csv"</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">,</span> fmt<span class="token operator">=</span><span class="token string">'%s'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"data file in directory:"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"data/save_data.csv"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">numpy data: [[20131    10    67] [20132    11    88] [20133    12    98] [20134     8   100] [20135     9    75] [20136    12    78]]data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;] 20131,10,6720132,11,8820133,12,9820134,8,10020135,9,7520136,12,78</code></pre><ul><li><code>np.save(), np.savez(), np.savez_compressed()</code></li></ul><p>​        还有一些Numpy独有的模式，那就是用二进制的格式保存。如果你没有想让别人看你的数据，你只想自己使用Numpy时加载的话，那你完全就可以用这种方式存储下来。请注意，使用<code>np.save()</code>来保存，保存的是一个以<code>.npy</code>结尾的二进制文件。加载的时候，我们能用<code>np.load()</code>直接加载这个二进制数据文件。</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"data/save_data.npy"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"data file in directory:"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>npy_data <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"data/save_data.npy"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>npy_data<span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;, &#39;save_data.npy&#39;][[20131    10    67] [20132    11    88] [20133    12    98] [20134     8   100] [20135     9    75] [20136    12    78]]</code></pre><p>​        还有一种神奇的保存方式，在一个numpy文件中保存多个numpy array。有时候，你是分开多个array来存放不同类型的数据，比如机器学习中的traindata和testdata。这时我们能用<code>np.savez()</code>保存一个<code>.npz</code>文件将这两个array同时存储好。</p><pre class="language-python" data-language="python"><code class="language-python">train_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>savez<span class="token punctuation">(</span><span class="token string">"data/save_data.npz"</span><span class="token punctuation">,</span> train<span class="token operator">=</span>train_data<span class="token punctuation">,</span> test<span class="token operator">=</span>test_data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"data file in directory:"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;, &#39;save_data.npy&#39;, &#39;save_data.npz&#39;]</code></pre><p>​        <code>np.savez()</code> 第二、三个参数名 <code>train=xx</code>, <code>test=xx</code> 其实是可以自定义的，这些参数名会作为之后我们加载回来的索引标签。</p><pre class="language-python" data-language="python"><code class="language-python">npz_data <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"data/save_data.npz"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"train:"</span><span class="token punctuation">,</span> npz_data<span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test:"</span><span class="token punctuation">,</span> npz_data<span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">train: [1 2 3]test: [11 22 33]</code></pre><p>用 <code>np.savez()</code> 的时候，还有一个方法可以让你更节省空间，那就是用 <code>np.savez_compressed()</code> 来做一次数据压缩。</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>savez_compressed<span class="token punctuation">(</span><span class="token string">"data/save_data_compressed.npz"</span><span class="token punctuation">,</span> train<span class="token operator">=</span>train_data<span class="token punctuation">,</span> test<span class="token operator">=</span>test_data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"data file in directory:"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>npz_data_compressed <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"data/sace_data_compressed.npz"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"train:"</span><span class="token punctuation">,</span> npz_compressed<span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test:"</span><span class="token punctuation">,</span> npz_data_compressed<span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"compressed file size:"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span><span class="token string">"data/save_data_compressed.npz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"original file size:"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span><span class="token string">"data/save_data.npz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;, &#39;save_data.npy&#39;, &#39;save_data.npz&#39;, &#39;save_data_compressed.npz&#39;]train: [1 2 3]test: [11 22 33]compressed file size: 402original file size: 528</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​        说了这么多用 numpy 的方式读取与保存的方法，可见 numpy 还是很用心在做数据这件事的。如果你喜欢纯文本，我们看上去比较有意义的存储格式，那你就用 txt 或者 csv 这种方式，如果你追求存储空间和速度，我建议还是用二进制来存储吧~</p><h2 id="标准数据生成"><a href="#标准数据生成" class="headerlink" title="标准数据生成"></a>标准数据生成</h2><p>​        数据是多变的，不光是数据的形态多变，里面的数值也是多变的。通常，我们在创建一个Numpy Array的时候，是想带着一些数值来初始化的，比如我想先要一个全是0的Array</p><p>​        所以这节内容我们来说一说怎么带着数值初始化，可以带着怎样的数值初始化。</p><h3 id="创建统一数据"><a href="#创建统一数据" class="headerlink" title="创建统一数据"></a>创建统一数据</h3><ul><li><code>np.zeros(),np.ones(),np.full()</code></li></ul><p>​        首先来点简单的，初始化Array的时候，让他们全部为某数。最简单的就是全0或者全1的数据。</p><p><img src="http://cdn.leafii.top/img/20220604123440.png" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npzeros <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"zeros:\n"</span><span class="token punctuation">,</span> zeros<span class="token punctuation">)</span>ones <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nones:\n"</span><span class="token punctuation">,</span> ones<span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">zeros: [[0. 0. 0.] [0. 0. 0.]]ones: [[1. 1.] [1. 1.] [1. 1.]]</code></pre><p>​        当我们创建这些数据时，我们不仅仅是可以给定创建的具体数值是0还是1，而且还能指定这个数据的shape是什么。创建出来之后，就可以把它当作普通的Array数据使用就好了，要<code>reshape，transpose，sum</code>等操作，都是可以进行的。</p><p>​        我们可以创建0或1的数据，那我们能不能创建其他数值的数据？答案是肯定的，使用<code>np.full()</code>功能就好了。同样，我们先输入这份数据的shape，然后指定这份数据全部元素的数值。</p><pre class="language-python" data-language="python"><code class="language-python">nines <span class="token operator">=</span> np<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>nines<span class="token punctuation">)</span><span class="token comment">#[[9 9 9]</span><span class="token comment"># [9 9 9]]</span></code></pre><p>​        在处理shape的时候，有一件有趣的事：如果我们手头已经有一份数据，我们想创建一个和它类型一样，大小一样的另一份数据，我们可以调用<code>np.xxx_like()</code>这种形式的功能。看下面的例子：</p><pre class="language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">)</span>ones <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>data<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> dtype<span class="token operator">=</span>data<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>ones_like <span class="token operator">=</span> np<span class="token punctuation">.</span>ones_like<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ones:"</span><span class="token punctuation">,</span> ones<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> ones<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ones_like:"</span><span class="token punctuation">,</span> ones_like<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> ones_like<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ones_like value:\n"</span><span class="token punctuation">,</span> ones_like<span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">ones: (2, 3) int32ones_like: (2, 3) int32ones_like value: [[1 1 1] [1 1 1]]</code></pre><ul><li><code>np.zeros_like(),np.ones_like(),np.full_like()</code></li></ul><p>​        因为dtype和shape都和源数据一样，那么它们之间做加减乘除运算就很契合了。其实<code>ones_like()</code>算是一种偷懒功能；同理，我们还有<code>np.zeros_like()</code>和<code>np.full_like()</code>这两种。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>full_like<span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[[0 0 0] [0 0 0]][[6 6 6] [6 6 6]]</code></pre><h3 id="创建规则数据"><a href="#创建规则数据" class="headerlink" title="创建规则数据"></a>创建规则数据</h3><ul><li><code>np.arange(), np.linspace()</code></li></ul><p>​        而创建有些规律的数据也是Numpy的拿手好戏。首先说一个最常见的<code>arange</code>功能，用来得到一个序列，如：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"python range:"</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># python range: [0, 1, 2, 3, 4]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"numpy arange:"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># numpy arange: [0 1 2 3 4]</span></code></pre><p>​        同样，<code>np.arange()</code>也可以像<code>range()</code>一样，对范围做自定义变更或者跳跃取值。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># (start, end, step)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"python range:"</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># python range: [3, 5, 7, 9]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"numpy arange:"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># numpy arange: [3 5 7 9]</span></code></pre><p>​        还有一个也是用来取一段数字中的值，这个也比较常用，特别是在画折线图的时候，我想要连续在一个区间内取间隔一致的数据点。里面的参数分别代表从start的值到end的值，一共返回这中间num个数据点。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># (start, end, num)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"linspace:"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># linspace: [-1.  -0.5  0.   0.5  1. ]</span></code></pre><p>​        更厉害的是，有时候我们会很纠结，上面是在-1 至 1 之间分了 4 个区域。 而我们想在-1 至 1 之间分 5 个区域，怎么搞？加一个 <code>endpoint=False</code> 就可以返回这 5 个区域的结节点了。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"5 segments:"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 5 segments: [-1.  -0.6 -0.2  0.2  0.6]</span></code></pre><p>​        还有很多做特殊规则的数据的方式，比如 <code>np.identity()</code>, <code>np.eye()</code>, <code>np.logspace()</code> 等等， 这个教学我先介绍一些常用的，当你有需要的时候，你再单个搜索就行了。</p><h3 id="快速创建再添加值"><a href="#快速创建再添加值" class="headerlink" title="快速创建再添加值"></a>快速创建再添加值</h3><ul><li><code>np.empty(), np.empty_like()</code></li></ul><p>​        和 <code>np.ones()</code> 这种很相似的，有一个叫 <code>np.empty()</code> 功能，我想单独拎出来介绍一下。 如果你对运算速度有要求，你就得仔细听一下。</p><p>​        <code>np.empty()</code> 功能，不会初始化新建 array 里面的数值，所以你会看到这里面的数值都是乱乱的。 <strong>注意，虽然乱乱的，但是它不是随机数哦，你不能把它当随机数使用。</strong> 想用随机数的话，我后面有单独一个教学讲随机数。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[[9.03433771e-308 5.09847862e-304 3.53009707e-305] [7.52473700e-302 8.90332017e-305 8.01478727e-302] [2.34157518e-301 6.86145138e-302 3.06135986e-301] [1.17801178e-300 8.83208360e-302 1.14834727e-302]]</code></pre><p>​        不能作随机数，又没有具体数值，那么empty为什么存在呢？</p><ol><li>可以把它当成一个placeholder，作为一个容器先放着，之后满满的放数据进去</li><li>创建起来比<code>ones,zeros,full</code>都快一点</li></ol><p>​        所以在这种情况下，我们才想使用<code>np.empty()</code>，编写代码查看用两种方法创建的速度：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timet0 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    _ <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    _ <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ones time:"</span><span class="token punctuation">,</span> t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"empty time:"</span><span class="token punctuation">,</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token comment">#ones time: 0.015000104904174805</span><span class="token comment">#empty time: 0.002000093460083008</span></code></pre><p>​        因此我们能知道empty比ones快了很多很多，给你看一下它的日常使用场景：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> randomempty <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"empty before:\n"</span><span class="token punctuation">,</span> empty<span class="token punctuation">)</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        empty<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">*</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"empty after:\n"</span><span class="token punctuation">,</span> empty<span class="token punctuation">)</span></code></pre><p>​        所以一般当我有一个数据要根据另一份数据生成的时候，无论我初始化是什么值，到最终都要全部被替换的时候，我就喜欢用 <code>np.empty()</code>。 ok，最后说一句，有 <code>np.empty()</code>，我们也有 <code>np.empty_like()</code> 用法和 <code>np.zeros_like()</code> 这种类似，很方便用的。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>​        现在你能够按自己的想法初始化最符合你需要的数据啦。</p><h2 id="随机数和随机操作"><a href="#随机数和随机操作" class="headerlink" title="随机数和随机操作"></a>随机数和随机操作</h2><p>​        计算机能模拟随机，是一件十分重要的事。因为计算机本来是一种执行确定步骤，返回确定结果的机器。但是你想要它模拟随机，就得有一些特殊处理。 好在 Python 自己有专门处理随机的功能。而 Numpy 作为 Python 的网红库，当然也自带了很丰富的随机功能。比如各式随机数的生成方式， 随机化当前数列等。甚至你还能加随机，复现一些随机后的结果。</p><h3 id="多种随机数生成"><a href="#多种随机数生成" class="headerlink" title="多种随机数生成"></a>多种随机数生成</h3><p>​        提到随机，首先我们想到的当然是生成一批随机数，对这批随机数做计算啦。在深度学习中，这是一件非常重要的事，比如你常会随机生成神经网络的权重，生成遗传算法中的基因序列等等。</p><ul><li><code>np.random.rand(), np.random.random()</code></li></ul><p>​        假设现在没有 Numpy，我们当然也能用 Python 自带的 <code>random</code> 来解决，但是效率会低不少。 用 Python 自带的 <code>random</code>，大概是怎么用的呢？</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 0.5015630814097707</span><span class="token comment"># 10</span></code></pre><p>​        但是Python的<code>random</code>没有考虑数组类型的高效数据结构，所以我们在array类型的数据结构时，更喜欢直接使用Numpy来生成。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdim1<span class="token punctuation">,</span> dim2 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>dim1<span class="token punctuation">,</span> dim2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 你还可以继续添加dim3等更多</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[[0.83325372 0.6412798 ] [0.32903089 0.41498545] [0.18548333 0.27637162]]</code></pre><p>​        <code>np.random.rand()</code>是一种最方便去生成带shape的<code>[0,1)</code>之间取值的Array。还有一种写法可以实现同样目的：<code>np.random.random()</code>，在其中传入一个shape进去。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">[</span>dim1<span class="token punctuation">,</span> dim2<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[[0.51226037 0.13982879] [0.75661115 0.49357135] [0.01439348 0.00078817]]</code></pre><ul><li><code>np.random.randn(), np.random.randint()</code></li></ul><p>​        除了生成<code>[0,1)</code>之间的随机数，Numpy还可以生成其他数值，或使用其他生成规则。比如按照<strong>标准正态分布</strong>去生成。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>dim1<span class="token punctuation">,</span> dim2<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[[-1.74779413 -1.81986096] [-0.97003389 -0.19717489] [ 1.29311087  1.51706469]]</code></pre><p>​        使用<code>np.random.randint()</code>生成随机整数：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>low<span class="token operator">=</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> high<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#[ 5 -2  5  4 -2 -1  1 -2 -1  5]</span></code></pre><h3 id="给你施加随机"><a href="#给你施加随机" class="headerlink" title="给你施加随机"></a>给你施加随机</h3><ul><li><code>np.random.choice()</code></li></ul><p>​        我们已经可以自动生成一批随机数啦，但是 Numpy 的好用功能可不止有这么一些简单的生成功能哦。它还可以对已有的数据做随机化处理。 比如我想随机从一组数据中选择，我就可以用 <code>np.random.choice()</code>。在做遗传算法的时候, 做基因重组配对，就需要经常使用到这个函数。</p><pre class="language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>aray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"选一个："</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 选一个： 3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"选多个："</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>data<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 选多个： [2 6 1]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不重复地选多个（不放回）："</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>data<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> replace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 不重复地选多个(不放回)： [6 4 2]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"带权重地选择："</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>data<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 带权重地选择： [4 6 6 6 6 6 4 6 6 4]</span></code></pre><ul><li><code>np.random.shuffle(), np.random.permutation()</code></li></ul><p>​        choice这个功能真的经常会用到。而在机器学习中，你也许会经常在epoch迭代训练数据的时候，碰到shuffle的概念。如果你在机器学习中没弄懂也没关系，给你补充一下。Numpy里也有<code>np.random.shuffle()</code>的功能，就是用来<strong>洗牌</strong>的。请注意：<strong>它会将源数据重新排列，如果你想保留原数据的话，记得使用<code>np.copy(data)</code>备份一下</strong></p><pre class="language-python" data-language="python"><code class="language-python">data_copy <span class="token operator">=</span> np<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>data<span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"源数据："</span><span class="token punctuation">,</span> data_copy<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"after shuffled:"</span>， data<span class="token punctuation">)</span><span class="token comment"># 源数据： [2 1 3 4 6]</span><span class="token comment"># shuffled: [6 2 1 3 4]</span></code></pre><p>​        还有一个功能，<code>np.random.permutation()</code>, 它实现的是 <code>np.random.shuffle()</code> 的一种特殊形式。可以说是一种简单处理特殊情况的功能。 它有两个方便之处，1. 直接生成乱序的序列号，2. 对数据乱序。</p><p>而且相比 <code>np.random.shuffle()</code>，<strong>permutation 有一个好处，就是可以返回一个新数据，对原本的数据没有影响。而且还可以处理多维数据。</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"直接出乱序序列："</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"多维数据在第一维度上乱序："</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">直接出乱序序列： [2 0 8 5 7 6 1 9 3 4]多维数据在第一维度上乱序： [[ 6  7] [ 2  3] [10 11] [ 4  5] [ 0  1] [ 8  9]]</code></pre><h3 id="随机分布"><a href="#随机分布" class="headerlink" title="随机分布"></a>随机分布</h3><ul><li><code>np.random.normal(), np.random.uniform()</code></li></ul><p>​        对于统计学或者机器学习，我们在生成数据的时候，有时需要按照特定的统计学分布来生成，比如需要一个正态分布的抽样数据，或者均匀分布的数据抽样结果。 又或者是其他更高级的，比如泊松分布等等，都可以用 Numpy 来实现。这里我们只介绍一下在机器学习中比较常用的 正态分布 和 均匀分布。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># （均值，方差，size）</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正态分布："</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># (最低，最高，size)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"均匀分布:"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">正态分布： [0.94567776 1.12786411 1.31172487 1.20797385 0.65761211 1.35564439 1.02341514 0.89390523 1.34336123 1.13994983]均匀分布： [-0.15584577  0.49379278 -0.51443373  0.47639447  0.85539253 -0.12520956  0.38551024  0.92961516  0.43014289  0.54910227]</code></pre><h3 id="随机种子的重要性"><a href="#随机种子的重要性" class="headerlink" title="随机种子的重要性"></a>随机种子的重要性</h3><p>​        在机器学习中，我们要对比两种随机初始化模型的优劣，或者在强化学习中要固定随机环境的随机序列，用于复现当前配置的情况，我们通常要做的事情就是<strong>伪随机</strong>。 简单说，就是每次都是一组随机，但是我可以后续再完整运行一遍一模一样的随机效果。比如生成两遍一模一样的随机序列。</p><ul><li><code>np.random.seed()</code></li></ul><p>​        为了达到这个目的，我们要了解Numpy中的random seed概念，随机种子。当我们把种子固定的时候（用一个数字），同一个种子（数字）产生的随机序列就会一样。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#seed(1) 代表的就是1号随机序列</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[[4.17022005e-01 7.20324493e-01 1.14374817e-04] [3.02332573e-01 1.46755891e-01 9.23385948e-02]]2</code></pre><p>​        此时无论你运行多少次上面的代码，你看到的随机结果，都是同一种结果。当你想改变随机种子的时候，可以在<code>seed()</code>中传入不同的数字。</p><p>​        有时候还可以这么用：在同一次执行代码时，重新设定种子，让随机在同一次执行中复现。</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#[0.4359949  0.02592623]</span><span class="token comment"># [0.4359949  0.02592623]</span></code></pre><p>​        对于同一份代码，两次运行都是一样的结果。</p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>​        你不光可以利用 Numpy 来创建很多种不同的随机数，还能对数据做随机化处理，甚至还能当上帝，控制计算机的随机过程（seed），让电脑可以复现你的随机过程。</p><h2 id="对速度有洁癖？快来了解Numpy的View与Copy"><a href="#对速度有洁癖？快来了解Numpy的View与Copy" class="headerlink" title="对速度有洁癖？快来了解Numpy的View与Copy"></a>对速度有洁癖？快来了解Numpy的View与Copy</h2><p>​        通过这节内容理解Numpy的底层逻辑，在这其中有一个非常重要的概念：那就是<strong>View和Copy</strong>，你会发现，有可能前几天要花10天处理完的数据，学完这个之后，一优化，只需要1小时就搞定了。</p><p>​        <strong>如果你对 Numpy 运算速度有追求，我十分建议你了解接下来的内容。如果你是萌新， 目前阶段不用 Numpy 处理大数据（上百MB 的文件），那下面的内容你可以以后再作了解。</strong></p><h3 id="Numpy-Array和Python-List内部结构差别"><a href="#Numpy-Array和Python-List内部结构差别" class="headerlink" title="Numpy Array和Python List内部结构差别"></a>Numpy Array和Python List内部结构差别</h3><p>以后再学！该开始Pandas了噢！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Numpy关于数据&quot;&gt;&lt;a href=&quot;#Numpy关于数据&quot; class=&quot;headerlink&quot; title=&quot;Numpy关于数据&quot;&gt;&lt;/a&gt;Numpy关于数据&lt;/h1&gt;&lt;h2 id=&quot;Numpy读取保存数据&quot;&gt;&lt;a href=&quot;#Numpy读取保存数据&quot; class=&quot;headerlink&quot; title=&quot;Numpy读取保存数据&quot;&gt;&lt;/a&gt;Numpy读取保存数据&lt;/h2&gt;&lt;p&gt;​        数据一般都被记录在存储当中，我们常见的小规模数据大多是 Excel 的 xlsx，csv, json, 或 txt，log 等等格式。 当我们要处理数据，特别是运算数据的时候，我们都能拿 Python 读取出来。而在大数据这种情况下，数据是存储在 MySQL，Mongodb 等这种数据库中的， 同样，Python 也提供了很多接口来读取这些数据。&lt;/p&gt;
&lt;p&gt;​        今天我们想聊聊其中的一部分，用 Numpy 来直接读取数据（通常是纯数值形式的数据），并加以运算的流程。而且看看我们可以如何保存 Numpy 里的数据。&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="tags/python/"/>
    
    <category term="机器学习基础" scheme="tags/机器学习基础/"/>
    
  </entry>
  
  <entry>
    <title>Numpy练习_数据清洗</title>
    <link href="2022/05/25/Numpy%E7%BB%83%E4%B9%A0-%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/"/>
    <id>2022/05/25/Numpy%E7%BB%83%E4%B9%A0-%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/</id>
    <published>2022-05-24T16:24:09.000Z</published>
    <updated>2022-05-29T11:32:23.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Numpy练习-数据清洗"><a href="#Numpy练习-数据清洗" class="headerlink" title="Numpy练习_数据清洗"></a>Numpy练习_数据清洗</h1><p>​        Numpy 的一切都是和数据打交道，那么在大数据时代，数据其实是不完整，不完美的。比如下面这张图里面， 你会发现，这份数据显然有些不完整的地方，city有数据缺失，duration 虽然是时间上的数据，但是时间单位不统一，时间格式不统一， 这都给后面我们让机器使用这份数据增加难度。</p><span id="more"></span><p><img src="http://cdn.leafii.top/img/20220529123648.png" loading="lazy"></p><p>​        这次课程我会展示如何用 Numpy 处理 Numpy 比较擅长的数据清理。但是在数据清理上，还有一个更好用的 Pandas 库，我们会在后期的教学当中，一步步深入到。</p><h2 id="脏数据"><a href="#脏数据" class="headerlink" title="脏数据"></a>脏数据</h2><p>​        如果你真有做过数据分析，当你拿到一份数据的时候，是十分期望这份数据没什么问题的，但是事与愿违，通常这份数据都多多少少有些问题。 常见的脏数据种类有：</p><ol><li>数据值缺失</li><li>数据值异常大或小</li><li>格式错误</li><li>非独立数据错误</li></ol><p>​        一般来说，你遇到的数都是需要从外部存储读取出来的，但是为了简化这节的内容，我们直接用Python的List来做一份数据。想要学习使用Numpy读取保存数据的话，可以看下一篇文章。</p><p>​        自造数据</p><pre class="language-python" data-language="python"><code class="language-python">raw_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"Name"</span><span class="token punctuation">,</span> <span class="token string">"StudentID"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">,</span> <span class="token string">"AttendClass"</span><span class="token punctuation">,</span> <span class="token string">"Score"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"小明"</span><span class="token punctuation">,</span> <span class="token number">20131</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"小花"</span><span class="token punctuation">,</span> <span class="token number">20132</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"小菜"</span><span class="token punctuation">,</span> <span class="token number">20133</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"98"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"小七"</span><span class="token punctuation">,</span> <span class="token number">20134</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"花菜"</span><span class="token punctuation">,</span> <span class="token number">20134</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"刘欣"</span><span class="token punctuation">,</span> <span class="token number">20136</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>raw_data<span class="token punctuation">)</span></code></pre><p>​        这是一份学生上课的考试的数据，里面记录了学生姓名，ID，年龄，是否上过课（1-上过，0-没上），课程成绩信息。 比这复杂的数据还有很多，但是这份数据中的脏数据类型基本上都涵盖了我上面讲的那些。</p><p>​        首先，我们要做的就是把这份 Python list 数据转化成 Numpy 数据。其实用 Python 列表也能做数据清洗工作， 但为什么要用 Numpy 来做呢？这不得不提到 Numpy 面对大数据时，它得天独厚的计算速度优势了。同样一份 1GB 的数据，Python List 处理起来可能要 1 小时， Numpy 优化后，速度可以成倍增长。</p><p>​        首先，我们尝试直接转一下 Python list 到 Numpy Array，看看会不会有问题。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>raw_data<span class="token punctuation">)</span>data</code></pre><p>​         运行结果</p><pre class="language-none"><code class="language-none">array([[&#39;Name&#39;, &#39;StudentID&#39;, &#39;Age&#39;, &#39;AttendClass&#39;, &#39;Score&#39;],       [&#39;小明&#39;, 20131, 10, 1, 67],       [&#39;小花&#39;, 20132, 11, 1, 88],       [&#39;小菜&#39;, 20133, None, 1, &#39;98&#39;],       [&#39;小七&#39;, 20134, 8, 1, 110],       [&#39;花菜&#39;, 20134, 98, 0, None],       [&#39;刘欣&#39;, 20136, 12, 0, 12]], dtype&#x3D;object)</code></pre><p>​        你会发现，这时的 array 输出的结果，结尾处有一个标识。<code>dtype=object</code>，这是什么意思呢？（剧透一下：这种 dtype 会对后续数据处理带来很多麻烦） 我们对比一下如果是纯数据的格式，numpy 的 dtype 是什么样。</p><pre class="language-python" data-language="python"><code class="language-python">test1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span><span class="token number">2.3</span><span class="token punctuation">,</span><span class="token number">3.4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test1.dtype"</span><span class="token punctuation">,</span> test1<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test2.dtype"</span><span class="token punctuation">,</span> test2<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test3.dtype"</span><span class="token punctuation">,</span> test3<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test2 > 2 "</span><span class="token punctuation">,</span> test2 <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"data > 2"</span><span class="token punctuation">,</span> data <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 这里会报错</span><span class="token comment">#TypeError: '>' not supported between instances of 'str' and 'int'</span></code></pre><p>​        我们可以看到不同的array创建方式，可能有不同的dtype，而之前的<code>data.dtype=object</code>，说明Python list直接转换的 <code>data</code>是无法参与诸多Numpy计算的。而只有<code>dtype</code>为<code>int</code>,<code>float</code>这样的数值格式，才能参与运算。</p><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>​        那怎么办呢？我们怎么才能把那个又有 string，又有 None，还有数值的数据转换为 Numpy 能运算的数据呢？ 方法很简单，我们筛选过滤一下。</p><pre class="language-python" data-language="python"><code class="language-python">data_process <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>raw_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token comment"># 不要首行字符串</span>    <span class="token comment"># 去掉首列名字</span>    data_process<span class="token punctuation">.</span>append<span class="token punctuation">(</span>raw_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data_process<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"data.dtype"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> </code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[[2.0131e+04 1.0000e+01 1.0000e+00 6.7000e+01] [2.0132e+04 1.1000e+01 1.0000e+00 8.8000e+01] [2.0133e+04        nan 1.0000e+00 9.8000e+01] [2.0134e+04 8.0000e+00 1.0000e+00 1.1000e+02] [2.0134e+04 9.8000e+01 0.0000e+00        nan] [2.0136e+04 1.2000e+01 0.0000e+00 1.2000e+01]]</code></pre><p>​        有同学可能注意到了，这份数据没有 <code>float</code>，应该是全部是整数 <code>int</code>，为什么我在创建 array 的时候，选的 <code>dtype=np.float</code> 呢？ 那是因为 <code>dtype=np.int</code> 会报错呀，不信你试试。因为这份数据中存在 <code>None</code>，而只有 <code>np.float</code> 能转换 <code>None</code>，所以不是我不想，而是人家不让。</p><p>另外有趣的一个点是，我们在原始数据中有一个字符串的 98，这个字符串也被转换成数字了，可见 numpy 还自动帮我们处理了一部份能被转换的数字。</p><p>好了，现在总算是把这个数据的预处理做好了，接下来就要来清洗数据啦。</p><h2 id="清洗数据"><a href="#清洗数据" class="headerlink" title="清洗数据"></a>清洗数据</h2><p>​        怎么清洗脏数据，取决于你要拿这个数据做什么，很明显，我们想要看看有没有什么数据是不合逻辑的。比如我发现学号有重复，可能是在输入学生信息的时候手误输错了。</p><pre class="language-python" data-language="python"><code class="language-python">sid <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>unique<span class="token punctuation">,</span> counts <span class="token operator">=</span> np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>sid<span class="token punctuation">,</span> return_counts<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token comment">#[1 1 1 2 1]</span></code></pre><p>​        <code>np.unique()</code> 功能为用来查找数据中独一无二的数据的，<code>return_counts</code> 让我能清楚看到是数据的重复数量。 比如有一个数据重复出现了 2 次。我们来看看是哪个数据出现了多次。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>unique<span class="token punctuation">[</span>counts <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#[20134.]</span></code></pre><p>​        然后综合判断，我们的数据中少了一个 <code>20135</code>，可能就是把某个同学的学号输错了，我们将错误的同学修改过来。</p><pre class="language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20135</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><p>​        学号应该就没有大问题了。我们来看看第二列 <code>Age</code> 年龄。一眼可以发现，存在两个问题，有一个同学没有年龄。我们看看能不能用平均年龄补全这个缺失的信息。</p><pre class="language-python" data-language="python"><code class="language-python">is_nan <span class="token operator">=</span> np<span class="token punctuation">.</span>isnan<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"is_nan:"</span><span class="token punctuation">,</span> is_nan<span class="token punctuation">)</span>nan_idx <span class="token operator">=</span> np<span class="token punctuation">.</span>argwhere<span class="token punctuation">(</span>is_nan<span class="token punctuation">)</span><span class="token comment"># 计算有数据的平均年龄，用 ~ 符号可以 True/False 对调</span>mean_age <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token operator">~</span>np<span class="token punctuation">.</span>isnan<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"有数据的平均年龄："</span><span class="token punctuation">,</span> mean_age<span class="token punctuation">)</span></code></pre><p>​        <strong>呀！为啥平均年龄有 27.8 岁，不正常啊！是的，在你处理自己的数据的时候，也会遇到不太正常的情况。</strong> 是哪里出问题了呢？原来仔细看，我们居然有一个 98 岁的学生。 这不太正常啊，所以我觉得我也得把这个 98 岁的当异常数据看待。（在你的项目中，你也要综合判断哪些是异常数据）。我也没什么好办法，就用除开 98 和 nan 的数据， 计算其它数的平均值代替他们吧。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># ~ 表示 True/False 对调，&amp; 就是逐个做 Python and 的运算</span>normal_age_mask <span class="token operator">=</span> <span class="token operator">~</span>np<span class="token punctuation">.</span>isnan<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"normal_age_mask:"</span><span class="token punctuation">,</span> normal_age_mask<span class="token punctuation">)</span>normal_age_mean <span class="token operator">=</span> data<span class="token punctuation">[</span>normal_age_mask<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"normal_age_mean:"</span><span class="token punctuation">,</span> normal_age_mean<span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token operator">~</span>normal_age_mask<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> normal_age_mean<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ages:"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        到这一步之后，我们要看看上课和成绩的数据需不需要清洗。按理来说，如果没有上课（0），课程的成绩应该是不存在的（nan）；上课了（1）才会有成绩。 所以我们观察下面两组数据：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        你会发现，倒数第二行的数据还算是 ok 的，因为没上课，就没成绩，但是倒数第一行，没上课，怎么还有成绩？还有倒数第三行，成绩居然超出了满分 100 分。这些情况都是我们要处理的情况。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 没上课的转成 nan</span>data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>nan<span class="token comment"># 超过 100 分和低于 0 分的都处理一下</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>clip<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好了，数据清洗的工作已经告一段落啦。你会发现，即使是这么小规模的数据，我们也能体验到多种不同情况的数据清洗工作:</p><ol><li>数据值缺失</li><li>数据值异常大或小</li><li>格式错误</li><li>非独立数据错误</li></ol><p>有了这次体验，我相信你在自己的数据上也能更清楚如何操作了。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Numpy练习-数据清洗&quot;&gt;&lt;a href=&quot;#Numpy练习-数据清洗&quot; class=&quot;headerlink&quot; title=&quot;Numpy练习_数据清洗&quot;&gt;&lt;/a&gt;Numpy练习_数据清洗&lt;/h1&gt;&lt;p&gt;​        Numpy 的一切都是和数据打交道，那么在大数据时代，数据其实是不完整，不完美的。比如下面这张图里面， 你会发现，这份数据显然有些不完整的地方，city有数据缺失，duration 虽然是时间上的数据，但是时间单位不统一，时间格式不统一， 这都给后面我们让机器使用这份数据增加难度。&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="tags/python/"/>
    
    <category term="机器学习基础" scheme="tags/机器学习基础/"/>
    
  </entry>
  
  <entry>
    <title>Numpy练习_疫情数据分析</title>
    <link href="2022/05/23/Numpy%E7%BB%83%E4%B9%A0-%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <id>2022/05/23/Numpy%E7%BB%83%E4%B9%A0-%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</id>
    <published>2022-05-22T17:36:03.000Z</published>
    <updated>2022-05-24T16:23:43.672Z</updated>
    
    <content type="html"><![CDATA[<p>​        20年开始的新冠肺炎席卷全球，我们能从肺炎数据中发现什么规律呢？我提前给你准备了从 2020 年 1 月 22 日到 2020 年 7 月 27 日的数据。</p><span id="more"></span><h1 id="疫情数据分析"><a href="#疫情数据分析" class="headerlink" title="疫情数据分析"></a>疫情数据分析</h1><h2 id="数据下载"><a href="#数据下载" class="headerlink" title="数据下载"></a>数据下载</h2><p>​        2020年1月22日到2020年7月27日的数据<a href="https://pan.baidu.com/s/1HX83ebLmbcGJmf5ErXZiVg">下载链接</a>：提取码：5mrb</p><h2 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h2><p>​        用下面的代码在你本地加载数据。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"你下载的 day_wise.csv 数据"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    data <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>covid <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"date"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"header"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>h <span class="token keyword">for</span> h <span class="token keyword">in</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> row <span class="token keyword">in</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    split_row <span class="token operator">=</span> row<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>    covid<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>split_row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    covid<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> split_row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        确保你的文件引入正确</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>covid<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 数据太多了，我先打 5 行</span><span class="token comment"># print(covid["data"]) # 如果你实在想看全部，就执行这一行</span><span class="token comment"># 日期数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>covid<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 数据太多了，我先打 5 行</span><span class="token comment"># print(covid["date"]) # 如果你实在想看全部，就执行这一行</span></code></pre><p>​        了解了数据的大概样子，那么来使用你所学到的 Numpy 技能，我们来分析下面这几个问题。</p><ol><li>获取 2020 年 2 月 3 日的所有数据</li><li>2020 年 1 月 24 日之前的累积确诊病例有多少个？</li><li>2020 年 7 月 23 日的新增死亡数是多少？</li><li>从 1 月 25 日到 7 月 22 日，一共增长了多少确诊病例？</li><li>每天新增确诊数和新恢复数的比例？平均比例，标准差各是多少？</li><li>画图展示新增确诊的变化曲线</li><li>画图展示死亡率的变化曲线</li></ol><h2 id="某日所有数据"><a href="#某日所有数据" class="headerlink" title="某日所有数据"></a>某日所有数据</h2><ul><li>获取 2020 年 2 月 3 日的所有数据</li></ul><p>​        解决这个问题之前，我们需要搞懂使用Numpy获取到特定数据的时候，数据的索引是什么。在Numpy中，我们用来索引的大概率是数字，所以我们得搞清楚对应的数字标号是什么。因为我在为你准备的covid数据中，把日期和标题都用Python列表装起来了，所以你可以通过<code>.index(&quot;xxx&quot;)</code>功能来获取到它的索引。</p><p>​        我们需要思考的是：找到这一天所对应的索引。还好我已经把日期都用列表给存储起来了。看看日期的存储方式。将日期转换成<code>date_idx</code>之后，我们就能用这个index来获取到那一天的全部数据了。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"日期列表摘取："</span><span class="token punctuation">,</span> covid<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>date_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"2020-02-03"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"日期->索引转换："</span><span class="token punctuation">,</span> date_idx<span class="token punctuation">)</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>covid<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> header<span class="token punctuation">,</span> number <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>covid<span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>date_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>header<span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span></code></pre><p>​        至于，这些人数为什么会是一个小数呢？因为 Numpy 在存储一批数据的时候，它会把数据都存成一个模式，在这套数据中，我们都是以小数（float64）的形式存储的， 所以你才会看到有小数点。</p><h2 id="累计确诊"><a href="#累计确诊" class="headerlink" title="累计确诊"></a>累计确诊</h2><ul><li>2020 年 1 月 24 日之前的累积确诊病例有多少个？</li></ul><p>​        有了上一个任务的基础，这个任务我们就更加细致地去获取某个具体的数值，我们确定完日期（row）的 index 之后，再确定标题 （column）的 index。 在这个案例中，我们要确定累积确诊数（Conformed）的索引。</p><pre class="language-python" data-language="python"><code class="language-python">row_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"2020-01-24"</span><span class="token punctuation">)</span>     <span class="token comment"># 获取日期索引</span>column_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"Confirmed"</span><span class="token punctuation">)</span> <span class="token comment"># 获取标题的索引</span>confirmed0124 <span class="token operator">=</span> data<span class="token punctuation">[</span>row_idx<span class="token punctuation">,</span> column_idx<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"截止 1 月 24 日的累积确诊数："</span><span class="token punctuation">,</span> confirmed0124<span class="token punctuation">)</span></code></pre><h2 id="新增死亡"><a href="#新增死亡" class="headerlink" title="新增死亡"></a>新增死亡</h2><ul><li>2020年7月23日的新增死亡数是多少？</li></ul><p>​        这还是一个在Numpy Array中选取数据的过程，我们要搞清楚具体的索引是什么。”New deaths”对应的就是新增死亡数，按照之前的流程把数据拿出来：</p><pre class="language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>covid<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>row_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"2020-07-23"</span><span class="token punctuation">)</span>column_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"New deaths"</span><span class="token punctuation">)</span>result <span class="token operator">=</span> data<span class="token punctuation">[</span>row_idx<span class="token punctuation">,</span>column_idx<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2020 年 7 月 23 日的新增死亡数是:"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span></code></pre><h2 id="总增长数"><a href="#总增长数" class="headerlink" title="总增长数"></a>总增长数</h2><ul><li>从 1 月 25 日到 7 月 22 日，一共增长了多少确诊病例？</li></ul><p>​        获取数据都是小儿科，我们来点真正的数据分析。要基于原有的数据，进行多次加工，来获取新的结论和结果。在这个任务中，我们要进行一次累和的计算。</p><pre class="language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>covid<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>row1_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"2020-01-25"</span><span class="token punctuation">)</span>row2_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"2020-07-22"</span><span class="token punctuation">)</span>column_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"New cases"</span><span class="token punctuation">)</span><span class="token comment"># 注意要 row1_idx+1 得到从 01-25 这一天的新增</span><span class="token comment"># row2_idx+1 来包含 7 月 22 的结果</span>new_cases <span class="token operator">=</span> data<span class="token punctuation">[</span>row1_idx<span class="token punctuation">:</span>row2_idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>column_idx<span class="token punctuation">]</span>overall <span class="token operator">=</span> new_cases<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"共新增："</span><span class="token punctuation">,</span>overall<span class="token punctuation">)</span></code></pre><p>​        但这是通过将每日的新增进行求和，数据是不准确的，我们接下来按照累计确诊的个数计算</p><pre class="language-python" data-language="python"><code class="language-python">confirm_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"Confirmed"</span><span class="token punctuation">)</span>confirmed <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>confirm_idx<span class="token punctuation">]</span>overall2 <span class="token operator">=</span> confirmed<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"另一版本的新增："</span><span class="token punctuation">,</span>overall2<span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">共新增： 15247802.0另一版本的新增： 15226291.0</code></pre><p>​        可以看到，两个数据不一致，这是因为有人感染了不止一次，因此导致新增的数据里重复计算了，所以用新增数据计算的结果比累计确诊的方式来计算的要多。</p><p>​        具体分析看看，具体是哪天的数据对不上，详细输出一下。</p><pre class="language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>covid<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>row1_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"2020-01-25"</span><span class="token punctuation">)</span>row2_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"2020-07-22"</span><span class="token punctuation">)</span>column_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"New cases"</span><span class="token punctuation">)</span>confirm_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"Confirmed"</span><span class="token punctuation">)</span>confirmed <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>confirm_idx<span class="token punctuation">]</span>new_cases <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>column_idx<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>row1_idx<span class="token punctuation">,</span>row2_idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    diff <span class="token operator">=</span> new_cases<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>confirmed<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> confirmed<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> diff <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"data index:"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token string">"差异："</span><span class="token punctuation">,</span>diff<span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">data index: 62 差异： 15.0data index: 81 差异： 21.0...data index: 176 差异： 3.0data index: 181 差异： 110.0</code></pre><h2 id="确诊恢复比例"><a href="#确诊恢复比例" class="headerlink" title="确诊恢复比例"></a>确诊恢复比例</h2><ul><li>每天新增确诊数和新恢复数的比例？平均比例，标准差各是多少？</li></ul><p>​        这一个任务，我们需要再计算计算，会要使用到 Numpy 的批量计算功能，首先确定要拿取到的数据是什么，然后再对这些数据进行计算。 按要求，我们要拿到新增确诊数（New cases），和新的恢复数（New recovered）,然后再相除，最后再计算平均值和标准差。</p><pre class="language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>covid<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>new_cases_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"New cases"</span><span class="token punctuation">)</span>new_recovered_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"New recovered"</span><span class="token punctuation">)</span><span class="token comment">#ratio</span>ratio <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>new_cases_idx<span class="token punctuation">]</span> <span class="token operator">/</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>new_recovered_idx<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"比例样本："</span><span class="token punctuation">,</span>ratio<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#比例样本： [         nan  49.5         47.83333333 164.33333333  52.61538462]</span></code></pre><p>​        我靠，为什么有一个nan啊，nan在Numpy中表示的是 Not a Number， 说明计算有问题。我们单独打印一下，看看为什么出现 <code>nan</code>。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>new_cases_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>new_recovered_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 0.0</span><span class="token comment"># 0.0</span></code></pre><p>​        原来是因为 <code>new_recovered_idx</code> 的第一个位置数据为 0，任何数除以 0 是不成立的，所以才会把这个计算给出一个 <code>nan</code> 的结果。 你看做数据分析还是挺有意思吧，会出现各种意想不到的状况。然后我们把 new_recovered 为零的数都剔除掉。</p><pre class="language-python" data-language="python"><code class="language-python">not_zero_mask <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> new_recovered_idx<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span>ratio <span class="token operator">=</span> data<span class="token punctuation">[</span>not_zero_mask<span class="token punctuation">,</span> new_cases_idx<span class="token punctuation">]</span> <span class="token operator">/</span> data<span class="token punctuation">[</span>not_zero_mask<span class="token punctuation">,</span> new_recovered_idx<span class="token punctuation">]</span><span class="token comment"># 平均比例, 标准差</span>ratio_mean <span class="token operator">=</span> ratio<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>ratio_std <span class="token operator">=</span> ratio<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"比例样本："</span><span class="token punctuation">,</span>ratio<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"平均比例："</span><span class="token punctuation">,</span> ratio_mean<span class="token punctuation">,</span> <span class="token string">"；标准差："</span><span class="token punctuation">,</span> ratio_std<span class="token punctuation">)</span><span class="token comment">#比例样本： [ 49.5         47.83333333 164.33333333  52.61538462  89.88888889]</span><span class="token comment">#平均比例： 7.049556348053241 ；标准差： 19.094025710450307</span></code></pre><p>​        得到计算结果后，我们还是能明显发现，被治好的人的确比新增的要多，这就说明，我们自己的存活率还是挺高的。</p><h2 id="可视化数据"><a href="#可视化数据" class="headerlink" title="可视化数据"></a>可视化数据</h2><ul><li>画图展示新增确诊的变化曲线</li></ul><p>​        有时候，光秃秃的数字并不能生动表现这些数字背后的规律。我们还可以把它画出来。至于如何画，我给你做了一个 <code>draw_line()</code> 的函数，这个函数的背后是 Python 的画图工具 <code>Matplotlib</code>. 不过在这个教程中，并不是重点，我会在<a href="https://mofanpy.com/learning-steps/">之后的画图教程</a>中详细介绍。</p><p>​        现在，我们就来做新增确诊的可视化数据吧。</p><pre class="language-python" data-language="python"><code class="language-python">new_cases_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"New cases"</span><span class="token punctuation">)</span>draw_line<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> new_cases_idx<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        画图部分省略</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        数据分析是一件非常有趣的事情。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​        20年开始的新冠肺炎席卷全球，我们能从肺炎数据中发现什么规律呢？我提前给你准备了从 2020 年 1 月 22 日到 2020 年 7 月 27 日的数据。&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="tags/python/"/>
    
    <category term="机器学习基础" scheme="tags/机器学习基础/"/>
    
  </entry>
  
  <entry>
    <title>numpy和pandas学习笔记</title>
    <link href="2022/05/17/numpy%E5%92%8Cpandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>2022/05/17/numpy%E5%92%8Cpandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-05-17T13:36:13.000Z</published>
    <updated>2022-06-05T15:20:54.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Numpy和Pandas学习笔记"><a href="#Numpy和Pandas学习笔记" class="headerlink" title="Numpy和Pandas学习笔记"></a>Numpy和Pandas学习笔记</h1><p>记录学习的内容，方便今后查阅</p><span id="more"></span><h2 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h2><h3 id="Numpy的安装"><a href="#Numpy的安装" class="headerlink" title="Numpy的安装"></a>Numpy的安装</h3><p>​        直接使用<code>pip3 install numpy</code>即可，可以在终端使用<code>python3 -c &quot;import numpy&quot;</code>判断是否安装成功，如果在终端里直接输入这个语句没有任何反应，那么说明numpy是安装成功可以使用了的</p><h3 id="Numpy-array-和-Python的List的差别"><a href="#Numpy-array-和-Python的List的差别" class="headerlink" title="Numpy array 和 Python的List的差别"></a>Numpy array 和 Python的List的差别</h3><h4 id="Numpy-array的定义"><a href="#Numpy-array的定义" class="headerlink" title="Numpy array的定义"></a>Numpy array的定义</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment">#定义numpy array</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="List-和-Numpy-array-共同点"><a href="#List-和-Numpy-array-共同点" class="headerlink" title="List 和 Numpy array 共同点"></a>List 和 Numpy array 共同点</h4><ul><li>它们都可以用来存储、提取以及修改</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npmy_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>my_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#都可以正常打印噢</span>my_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>my_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_array<span class="token punctuation">)</span></code></pre><h4 id="Numpy-array的优势何在？"><a href="#Numpy-array的优势何在？" class="headerlink" title="Numpy array的优势何在？"></a>Numpy array的优势何在？</h4><p>​        Numpy的运算速度快，numpy array在内存中使用连续地址，并不像List使用不连续的地址块，因此速度上就有差异，而且Numpy对于批量数据的存储的数据格式也更有效率</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​        Numpy Array 和 Python List 在很多使用场景上是可以互换的，不过在大数据处理的场景下，而且你的数据类型又高度统一， 那么 Numpy 绝对是你不二的人选，能提升的运算速度也是杠杠的~</p><h3 id="Numpy的基本操作"><a href="#Numpy的基本操作" class="headerlink" title="Numpy的基本操作"></a>Numpy的基本操作</h3><h4 id="Numpy中的维度"><a href="#Numpy中的维度" class="headerlink" title="Numpy中的维度"></a>Numpy中的维度</h4><p>​        Numpy在多维数据的计算上速度很快！！！我们来学一下怎么用numpy创建并处理多维数据</p><h5 id="创建多维数据"><a href="#创建多维数据" class="headerlink" title="创建多维数据"></a>创建多维数据</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment">#创建一维</span>cars <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据："</span><span class="token punctuation">,</span>cars<span class="token punctuation">,</span><span class="token string">"维度："</span><span class="token punctuation">,</span>cars<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span><span class="token comment">#创建二维</span>cars <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">5.1</span><span class="token punctuation">,</span><span class="token number">8.2</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">6.3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">4.4</span><span class="token punctuation">,</span><span class="token number">9.1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6.6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据："</span><span class="token punctuation">,</span>cars<span class="token punctuation">,</span><span class="token string">"维度："</span><span class="token punctuation">,</span>cars<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span><span class="token comment">#创建三维</span>cars <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">5.1</span><span class="token punctuation">,</span><span class="token number">8.2</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">6.3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">4.4</span><span class="token punctuation">,</span><span class="token number">9.1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6.6</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">6.1</span><span class="token punctuation">,</span><span class="token number">9.2</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">7.3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">5.4</span><span class="token punctuation">,</span><span class="token number">10.1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">7.6</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据："</span><span class="token punctuation">,</span>cars<span class="token punctuation">,</span><span class="token string">"维度："</span><span class="token punctuation">,</span>cars<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"场地1 数据：\n"</span><span class="token punctuation">,</span>cars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"\n场地1 维度:"</span>，cars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ndim<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"场地2 数据：\n"</span><span class="token punctuation">,</span>cars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"\n场地2 维度:"</span>，cars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ndim<span class="token punctuation">)</span></code></pre><h5 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h5><ul><li>把两个一维数组变成一个二维数组</li></ul><pre class="language-python" data-language="python"><code class="language-python">cars1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cars2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5.2</span><span class="token punctuation">,</span><span class="token number">4.2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cars <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>cars1<span class="token punctuation">,</span>cars2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#concatenate的意思是连接</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span></code></pre><ul><li>数据换成二维数组之后想要添加数据</li></ul><pre class="language-python" data-language="python"><code class="language-python">test1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5.1</span><span class="token punctuation">,</span> <span class="token number">8.2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">6.3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 首先需要把它们都变成二维，下面这两种方法都可以加维度</span>test1 <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>test1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>test2 <span class="token operator">=</span> test2<span class="token punctuation">[</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test1加维度后 "</span><span class="token punctuation">,</span> test1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test2加维度后 "</span><span class="token punctuation">,</span> test2<span class="token punctuation">)</span><span class="token comment"># 然后再在第一个维度上叠加</span>all_tests <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>test1<span class="token punctuation">,</span> test2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"括展后\n"</span><span class="token punctuation">,</span> all_tests<span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">test1加维度后  [[ 5 10 12  6]]test2加维度后  [[ 5.1  8.2 11.   6.3]]括展后 [[ 5.  10.  12.   6. ] [ 5.1  8.2 11.   6.3]]</code></pre><h5 id="合并数据"><a href="#合并数据" class="headerlink" title="合并数据"></a>合并数据</h5><ul><li>只要维度能够对齐，你可以在任意维度上进行合并操作</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第一维度叠加：\n"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>all_tests<span class="token punctuation">,</span> all_tests<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第二维度叠加：\n"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>all_tests<span class="token punctuation">,</span> all_tests<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">第一维度叠加： [[ 5.  10.  12.   6. ] [ 5.1  8.2 11.   6.3] [ 5.  10.  12.   6. ] [ 5.1  8.2 11.   6.3]]第二维度叠加： [[ 5.  10.  12.   6.   5.  10.  12.   6. ] [ 5.1  8.2 11.   6.3  5.1  8.2 11.   6.3]]</code></pre><p>​        看来axis为0的时候，就是把二维数组和二维数组直接合并，而axis为1的时候就是把相对应的数据合并成一个数组，两个数组的原有位置关系不变</p><ul><li>转载一个好的理解axis方法：axis这个参数实际上就是表示的你要修改哪一维度的数据。举个栗子：<br>   有两组数据，它们的维度都是（2，3），即都是两行三列的数据。有小伙伴可能会发愁，当这两组数据合并时，axis参数设为0到底是横向操作还是竖向操作，肯定有小伙伴要在这里思考一下，实际上不用这么麻烦哒~<br>    当axis设为0时，表示我们要修改第一个维度的数据，两组数据的第一个维度都是2，当它们合并时就变成了4，所以合并后的数据的维度就是（4，3），即变成了四行三列。通过这样子思考，就再也不用努力回想到底是横向合并还是竖向合并啦hh<br>    同理，axis设为1，合并后的数据维度就变成了（2，6），即两行六列~<br>    同理，axis参数在其他方法里也可以用同样的方法思考，比如求均值的mean方法，当axis设为0时，对第一个维度的数据进行求均值，维度为（2，3）的数据计算完后就变成了维度为（1，3）的数据，是不是很好理解~</li></ul><p>​        而且除了<code>np.concatenate()</code>之外，还有&#96;&#96;np.vstack()<code>, </code>np.hstack()<code>.</code>这两个方法在二维数组上可以将数据进行横向合并和纵向合并：</p><p><img src="http://cdn.leafii.top/img/Screen%20Shot%202022-05-19%20at%2020.05.47.png" alt="横向合并" loading="lazy"></p><p><img src="http://cdn.leafii.top/img/Screen%20Shot%202022-05-19%20at%2020.29.07.png" alt="纵向合并" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"竖直合并\n"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"水平合并\n"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">竖直合并 [[1 2] [3 4] [5 6] [7 8]]水平合并 [[1 2 5 6] [3 4 7 8]]</code></pre><h5 id="观察形态"><a href="#观察形态" class="headerlink" title="观察形态"></a>观察形态</h5><p>​        除了 <code>np.ndim</code> 来查看数据的形态，其实我们有时候还想更加了解数据的细节问题，比如这个数据的大小，规格。方便我们管理这些数据。</p><ul><li>当我想知道到底有多少车辆测试数据时，你可能会通过遍历的方法来计数。</li></ul><pre class="language-python" data-language="python"><code class="language-python">cars <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5.1</span><span class="token punctuation">,</span> <span class="token number">8.2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">6.3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4.4</span><span class="token punctuation">,</span> <span class="token number">9.1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6.6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        count <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"总共多少测试数据："</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>        </code></pre><p>​        但以下代码与上面代码等价：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"总共多少测试数据："</span><span class="token punctuation">,</span> cars<span class="token punctuation">.</span>size<span class="token punctuation">)</span></code></pre><ul><li>想知道数组有几行（第一维度）几列（第二维度）</li></ul><pre class="language-python" data-language="python"><code class="language-python">cars <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5.1</span><span class="token punctuation">,</span> <span class="token number">8.2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">6.3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4.4</span><span class="token punctuation">,</span> <span class="token number">9.1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6.6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第一个维度："</span><span class="token punctuation">,</span> cars<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第二个维度："</span><span class="token punctuation">,</span> cars<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"所有维度："</span><span class="token punctuation">,</span> cars<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">第一个维度： 3第二个维度： 4所有维度： (3, 4)</code></pre><p>​        <strong>要好好理解维度噢，这很重要</strong></p><h4 id="用numpy进行数据选择"><a href="#用numpy进行数据选择" class="headerlink" title="用numpy进行数据选择"></a>用numpy进行数据选择</h4><p>​        可以使用numpy进行对数据的选择，不管是批量划分，还是按条件筛选，都可以哦qwq</p><h5 id="单个选取"><a href="#单个选取" class="headerlink" title="单个选取"></a>单个选取</h5><ul><li><code>array[1]</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#一个一个选qwq！</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a[0]:"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a[1]:"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><img src="http://cdn.leafii.top/img/20220519202955.png" alt="array[1]" loading="lazy"></p><ul><li><code>array[1,2,3]</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#一次选择多个</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a[[0,1]]:\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a[[1,1,0]]:\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ul><li><code>array[1][1]</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#对二维数组进行选择</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 选第 2 行所有数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b[1]:\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 选第 2 行，第 1 列的数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b[1,0]:\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 这个看着有点纠结，如果对应到数据，</span><span class="token comment"># 第一个拿的是数据位是 [1,2]</span><span class="token comment"># 第二个拿的是 [0,3]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b[[1,0],[2,3]]:\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        总之，不管是几维数据，我们都可以在其不同维度上挑选那个维度上对应序号上的数值。而且还能一次从原数据上选取多个数据点。</p><h5 id="切片划分"><a href="#切片划分" class="headerlink" title="切片划分"></a>切片划分</h5><ul><li><code>array[:3]</code></li></ul><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a[0:2]：\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a[1:]：\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a[-2:]：\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#使用 : 就能让你跨着取数字，而且一次取一批。注意，在 Numpy 中：一次取一批和一个个拎起来，拎了一批，是不同的概念哦 一次取一批来的更快， 因为它不用去一个个查看，一个个数了。</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">a[0:2]： [1 2]a[1:]： [2 3]a[-2:]： [2 3]</code></pre><p><img src="http://cdn.leafii.top/img/20220520104622.png" alt="切片划分" loading="lazy"></p><ul><li><code>array[2:4, 1:3]</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#在多维上，也可以进行切片划分</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b[:2]:\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b[:2, :3]:\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b[1:3, -2:]:\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">b[:2]: [[1 2 3 4] [5 6 7 8]]b[:2, :3]: [[1 2 3] [5 6 7]]b[1:3, -2:]: [[ 7  8] [11 12]]</code></pre><h5 id="条件筛选"><a href="#条件筛选" class="headerlink" title="条件筛选"></a>条件筛选</h5><ul><li><code>array[array&lt;0]</code></li></ul><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>a<span class="token operator">></span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#运行结果如下</span><span class="token comment">#[ 8  9 10 11 12]</span><span class="token comment">#a>7 的返回结果是布尔类型</span>condition <span class="token operator">=</span> a <span class="token operator">></span> <span class="token number">7</span><span class="token keyword">print</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>condition<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#运行结果如下</span><span class="token comment">#[[False False False False]</span><span class="token comment">#[False False False  True]</span><span class="token comment">#[ True  True  True  True]]</span><span class="token comment">#[ 8  9 10 11 12]</span></code></pre><p>​        这种筛选的底层逻辑就是只要我们得到一种True和False数据，那么就可以进行筛选。</p><pre class="language-python" data-language="python"><code class="language-python">condition <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>condition<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#[ 8  9 11 12]</span></code></pre><ul><li><code>np.where(array, array &lt; 0)</code></li></ul><p>​        除了这种直接用<code>[]</code>的形式，在 Numpy 中，还有一个专用的函数来做数据筛选。这种筛选更强大，它还能做筛选结果的替换工作。 它可已将满足条件的位置变成你设定的数字。下面满足条件的，都改成 <code>-1</code>，不满足的，都还是 <code>a</code> 里面的数字。</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>condition <span class="token operator">=</span> a <span class="token operator">></span> <span class="token number">7</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>condition<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#[[ 1  2  3  4]</span><span class="token comment">#[ 5  6  7 -1]</span><span class="token comment">#[-1 -1 -1 -1]]</span></code></pre><p>​        或者将不满足条件的也变成你期望的数字或者另一组数据</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>condition <span class="token operator">=</span> a <span class="token operator">></span> <span class="token number">7</span><span class="token comment">#满足的变成-1，不满足的变成2</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>condition<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#[[ 2  2  2  2]</span><span class="token comment">#[ 2  2  2 -1]</span><span class="token comment">#[-1 -1 -1 -1]]</span><span class="token comment">#定义b</span>b <span class="token operator">=</span> <span class="token operator">-</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>condition<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#[[-2 -3 -4 -5]</span><span class="token comment">#[-6 -7 -8  8]</span><span class="token comment">#[ 9 10 11 12]]</span></code></pre><p>​        所以 <code>np.where()</code> 函数真的十分强大，每每当我想要按条件选择、替换数据的时候，我脑海中，都是 <code>np.where()</code> 的身影。</p><h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><p>​        数据虽然有格式，但是如果要把数据用起来，还是得学会挑选和筛选。而今天介绍的单个、分段、条件筛选，都是数据工程师必备的一项技能。也是后续数据分析和机器学习的基石。</p><h4 id="基础运算"><a href="#基础运算" class="headerlink" title="基础运算"></a>基础运算</h4><h5 id="加减乘除"><a href="#加减乘除" class="headerlink" title="加减乘除"></a>加减乘除</h5><ul><li>在Python的List中进行计算的常规步骤</li></ul><pre class="language-python" data-language="python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">166</span><span class="token punctuation">,</span><span class="token number">183</span><span class="token punctuation">,</span><span class="token number">170</span><span class="token punctuation">]</span><span class="token comment">#* 使用循环</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>    l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token comment">#[153, 169, 186, 173]</span><span class="token comment">#* 使用map函数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">166</span><span class="token punctuation">,</span><span class="token number">183</span><span class="token punctuation">,</span><span class="token number">170</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#[153, 169, 186, 173]</span></code></pre><ul><li>使用numpy的方式进行计算 <code>+-*/</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">166</span><span class="token punctuation">,</span><span class="token number">183</span><span class="token punctuation">,</span><span class="token number">170</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">#[153 169 186 173]</span></code></pre><p>​        Numpy 是可以批量进行计算的，只需要简单的 <code>+-*/</code>，就能进行全元素的运算，也就是向量化运算。同理，我们也可以进行其他符号的批量运算。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a + 3:"</span><span class="token punctuation">,</span> a <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a - 3:"</span><span class="token punctuation">,</span> a <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a * 3:"</span><span class="token punctuation">,</span> a <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a / 3:"</span><span class="token punctuation">,</span> a <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">#a + 3: [153 169 186 173]</span><span class="token comment">#a - 3: [147 163 180 167]</span><span class="token comment">#a * 3: [450 498 549 510]</span><span class="token comment">#a / 3: [50.         55.33333333 61.         56.66666667]</span></code></pre><ul><li>矩阵点积运算 <code>np.dot()</code></li></ul><p><img src="http://cdn.leafii.top/img/20220520232800.png" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#[[19 22]</span><span class="token comment">#[43 50]]</span><span class="token comment">#[[19 22]</span><span class="token comment">#[43 50]]</span></code></pre><p>​        因此，我们可以得知，dot函数有两种写法，一种是<code>a.dot(b)</code>，另一种是<code>np.dot(a,b)</code>，矩阵还有很多其他的计算，比如 <code>np.outer()</code> 矩阵外积，<code>np.inner()</code> 矩阵内积 （和 <code>np.dot()</code> 的用法稍稍有些不同，你可以理解成 <code>np.dot(a, b）= np.inner(a, b.T)</code>, 把 b 做一次转置）。</p><h5 id="数据统计分析"><a href="#数据统计分析" class="headerlink" title="数据统计分析"></a>数据统计分析</h5><p>​        在数据分析时，大部分时间还是以pandas的使用为主，但是数据量比较大的时候，可以使用numpy，毕竟numpy的速度比Pandas要快上不少。</p><p>​        数据分析的定义：在数据中找到你想要的一些变量，总结数据的规律。</p><ul><li><code>np.max() np.min() np.sum() np.prod() np.count()</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#对给定的身高数据，找最高的和最矮的</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">166</span><span class="token punctuation">,</span><span class="token number">183</span><span class="token punctuation">,</span><span class="token number">170</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"max:"</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"min:"</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#或者</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"max:"</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"min:"</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#计算累加和</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#计算累乘</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>prod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#计算总共有几个值</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token comment">#计算一共有多少个非零值</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>arrat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"非零总数："</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>count_nonzero<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><code>np.std() np.mean() np.median()</code></li></ul><pre class="language-python" data-language="python"><code class="language-python">month_salary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">2.1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"标准差："</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>month_salary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"平均工资："</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>month_salary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"工资中位数："</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>median<span class="token punctuation">(</span>month_salary<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="特殊运算符号"><a href="#特殊运算符号" class="headerlink" title="特殊运算符号"></a>特殊运算符号</h5><ul><li><code>np.argmax() np.argmin()</code></li></ul><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">166</span><span class="token punctuation">,</span> <span class="token number">183</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">]</span><span class="token punctuation">)</span>name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"小米"</span><span class="token punctuation">,</span> <span class="token string">"OPPO"</span><span class="token punctuation">,</span> <span class="token string">"Huawei"</span><span class="token punctuation">,</span> <span class="token string">"诺基亚"</span><span class="token punctuation">]</span><span class="token comment">#关心最大/最小数值的序号 使用argmax()/argmin()</span>high_idx <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>a<span class="token punctuation">)</span>low_idx <span class="token operator">=</span> np<span class="token punctuation">.</span>argmin<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; 最高"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span>high_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; 最矮"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span>low_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><code>np.ceil() np.floor() np.clip()</code></li></ul><p>​        另外一个时不时会用到的功能是，取天花板的值还是地板的值，这个在 AI 算法中也比较常见， 比如我要对其做<strong>取整处理</strong>，抹除小数部分。</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">150.1</span><span class="token punctuation">,</span> <span class="token number">166.4</span><span class="token punctuation">,</span> <span class="token number">183.7</span><span class="token punctuation">,</span> <span class="token number">170.8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ceil:"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"floor:"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        可以用 <code>np.clip()</code> 来做上下界限的值截取</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">150.1</span><span class="token punctuation">,</span> <span class="token number">166.4</span><span class="token punctuation">,</span> <span class="token number">183.7</span><span class="token punctuation">,</span> <span class="token number">170.8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"clip:"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>clip<span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h5><p>​        其实 Numpy 中做数据运算的功能，比我这里列举的要多很多，我只是列举了一些我在数据分析和人工智能算法中，经常会使用到的一些功能。 还有更多的功能，可以在他的<a href="https://numpy.org/devdocs/user/quickstart.html#basic-operations">官方网站</a>查找哦。</p><h4 id="改变数据形态"><a href="#改变数据形态" class="headerlink" title="改变数据形态"></a>改变数据形态</h4><p>​        如何做数据的变换？</p><h5 id="改变形态"><a href="#改变形态" class="headerlink" title="改变形态"></a>改变形态</h5><ul><li><code>array[np.newaxis, :]</code></li></ul><p>​        改变形态，其实是针对与多维度空间上的数据，要改变它的维度信息，和每个维度中的数据格式。所以第一点你就要清楚，如何添加维度。 其实在 <a href="https://mofanpy.com/tutorials/data-manipulation/numpy/ndarray/">多维数据教程中</a> 中我们就提到过添加维度的方法，我这里在总结括展一下。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a_2d <span class="token operator">=</span> a<span class="token punctuation">[</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> a_2d<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment">#(6,) (1, 6)</span></code></pre><p>​        除了这种方式的其它几种，能达到同样效果的方式。比如用 <code>None</code> 或者 <code>np.expand_dims()</code></p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a_none <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>a_expand <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a_none<span class="token punctuation">.</span>shape<span class="token punctuation">,</span>a_expand<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment">#(6, 1) (6, 1)</span></code></pre><p>​         除了添加维度，我们还能减少维度，但是下面介绍的减少维度，只能减少那些维度 shape 上为 1 的维度。因为减掉这个维度，数据结构上是没有变化的。</p><pre class="language-python" data-language="python"><code class="language-python">a_squeeze <span class="token operator">=</span> np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>a_expand<span class="token punctuation">)</span>a_squeeze_axis <span class="token operator">=</span> a_expand<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a_squeeze<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a_squeeze_axis<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment">#(6,)</span><span class="token comment">#(6,)</span></code></pre><ul><li><code>array.reshape()</code></li></ul><p>​        上述方法都是添加维度的方式，但是，在机器学习中，我们还有一个更常见的操作，是要改变 shape。维度的添加减少，只能添加减少一个维度，数据结构是不变的。 但是 <code>np.reshape()</code> 可以改变数据结构。 举个例子，<code>a[None, :]</code> 之后，<code>a.shape</code> 会在第一个维度上多一个 1，而 <code>a.reshape([2,3])</code> 则可以更加自定义的将维度内的个数进行修改。 从而达到改变维度及尺寸。</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a1 <span class="token operator">=</span> a<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a2 <span class="token operator">=</span> a<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a1 shape:"</span><span class="token punctuation">,</span> a1<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a2 shape:"</span><span class="token punctuation">,</span> a2<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">a1 shape: (2, 3)[[1 2 3] [4 5 6]]a2 shape: (3, 1, 2)[[[1 2]] [[3 4]] [[5 6]]]</code></pre><ul><li><code>array.ravel(), array.flatten()</code></li></ul><p>​        其实还有更过的改变形态的方法，比如让数据变直、展平 的 <code>np.ravel()</code>, <code>np.flatten()</code>，这两个比较特殊， 我会在对速度有洁癖这节的时候详细说明。</p><ul><li><code>array.transpose()</code></li></ul><p>​        在矩阵运算的时候，也有一种形态的转化，叫做矩阵转置，<code>np.transpose()</code>, 在机器学习中也用得很多。这里提一下， 给一个小案例，你们玩玩试试。</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>aT1 <span class="token operator">=</span> a<span class="token punctuation">.</span>TaT2 <span class="token operator">=</span> np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>aT1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>aT2<span class="token punctuation">)</span></code></pre><p>​         运行结果</p><pre class="language-none"><code class="language-none">[[1 4] [2 5] [3 6]][[1 4] [2 5] [3 6]]</code></pre><h5 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h5><ul><li><code>np.column_stack(), np.row_stack()</code></li></ul><p>​        在介绍多维数组的时候， 我们也稍微介绍了一下如何添加和并数组。现在我们再详细把数组的合并拆解都细说一下。</p><p>​        一般来说，在数据分析统计，机器学习中的数据，都是以二维来存储的。行是数据样本（第一维度），列是特征（第二维度）。 所以我们可以组合特征和组合样本。 比如将列<code>column</code>合并，特征 a 的数据和特征 b 的数据合并。</p><pre class="language-python" data-language="python"><code class="language-python">feature_a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>feature_b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">)</span>c_stack <span class="token operator">=</span> np<span class="token punctuation">.</span>column_stack<span class="token punctuation">(</span><span class="token punctuation">[</span>feature_a<span class="token punctuation">,</span> feature_b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c_stack<span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[[ 1 11] [ 2 22] [ 3 33] [ 4 44] [ 5 55] [ 6 66]]</code></pre><p>​        一条条的数据 sample 和并。</p><pre class="language-python" data-language="python"><code class="language-python">sample_a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>sample_b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>c_stack <span class="token operator">=</span> np<span class="token punctuation">.</span>row_stack<span class="token punctuation">(</span><span class="token punctuation">[</span>sample_a<span class="token punctuation">,</span> sample_b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c_stack<span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[[0.  1.1] [1.  2.2]]</code></pre><ul><li><code>np.vstack(), np.hstack(), np.stack()</code></li></ul><p>​        上面的两种方法 <code>np.column_stack()</code> 和 <code>np.row_stack()</code> 和后面的 <code>np.vstack()</code>、<code>np.hstack()</code> 相比， 有些特殊之处，我们先看看使用 <code>vstack</code> 和 <code>hstack</code> 的案例，再说说不同处吧。</p><pre class="language-python" data-language="python"><code class="language-python">feature_a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>feature_b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>c_stack <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">[</span>feature_a<span class="token punctuation">,</span>feature_b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c_stack<span class="token punctuation">)</span>sample_a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1.1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>sample_b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2.2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>c_stack <span class="token operator">=</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">[</span>sample_a<span class="token punctuation">,</span>sample_b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c_stack<span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[[ 1 11] [ 2 22] [ 3 33] [ 4 44] [ 5 55] [ 6 66]][[0.  1.1] [1.  2.2]]</code></pre><p>​        看到了吗？用 <code>column_stack</code> 和 <code>row_stack()</code> 的时候，Numpy 自动帮你处理的维度信息，而用 <code>vstack</code> 和 <code>hstack</code> 的时候，你需要先确保维度信息是正确的，然后再合并。</p><ul><li><code>np.concatenate()</code></li></ul><p>​        有时候，你想要用统一的方法来处理各种不同情况的合并，<code>np.concatenate()</code> 是我最喜欢的方法，管它什么 <code>vstack</code> <code>hstack</code> 甚至是在更高维度上要合并， 我们都可以用 <code>concatenate()</code> 一个功能实现。</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[[1 2] [3 4] [5 6] [7 8]][[1 2 5 6] [3 4 7 8]]</code></pre><h5 id="拆解"><a href="#拆解" class="headerlink" title="拆解"></a>拆解</h5><ul><li><code>np.vsplit(), np.hsplit(), np.split()</code></li></ul><p>​        同样，能横着，竖着合并，那也能横着竖着拆解。<code>np.vsplit()</code> 和 <code>np.hsplit()</code> 就是干这事的。 如果直接在 <code>indices_or_sections</code> 后填入数字，就是要整分的段数， 而如果接着的是一个列表，那就按照列表中的 index 来取区间。可以看看下面代码注解中的意思。</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>vsplit<span class="token punctuation">(</span>a<span class="token punctuation">,</span> indices_or_sections<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 分成两段</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>vsplit<span class="token punctuation">(</span>a<span class="token punctuation">,</span> indices_or_sections<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 分片成 [:2]，[2:3], [3:]</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[array([[ 1, 11,  2, 22],       [ 3, 33,  4, 44]]), array([[ 5, 55,  6, 66],       [ 7, 77,  8, 88]])][array([[ 1, 11,  2, 22],       [ 3, 33,  4, 44]]), array([[ 5, 55,  6, 66]]), array([[ 7, 77,  8, 88]])]</code></pre><p>​        <code>np.vsplit</code> 是拿着刀沿着横向切分，那么 <code>np.hsplit</code> 就是沿纵向切分，我就不再举例了。那么有没有既能横切也能纵切的函数呢？ 当然有呀，和 <code>stack</code> 一样，如果直接用 <code>np.split()</code> 你就能选择要切分的维度来自定义切分了。</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>a<span class="token punctuation">,</span> indices_or_sections<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 分成两段</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>a<span class="token punctuation">,</span> indices_or_sections<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 在第二维度，分片成 [:2]，[2:3]，[3:]</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[array([[ 1, 11,  2, 22],       [ 3, 33,  4, 44]]), array([[ 5, 55,  6, 66],       [ 7, 77,  8, 88]])][array([[ 1, 11],       [ 3, 33],       [ 5, 55],       [ 7, 77]]), array([[2],       [4],       [6],       [8]]), array([[22],       [44],       [66],       [88]])]</code></pre><h5 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h5><p>​         形态变化和合并拆解都是十分有用的功能，我们介绍了很多种实用的方法来完成这些事， 而懂了这些之后，你的数据分析和机器学习才算是真正迈入入圈的第一步。</p><h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><h3 id="Pandas简介-amp-安装"><a href="#Pandas简介-amp-安装" class="headerlink" title="Pandas简介&amp;安装"></a>Pandas简介&amp;安装</h3><h4 id="为什么用Pandas"><a href="#为什么用Pandas" class="headerlink" title="为什么用Pandas"></a>为什么用Pandas</h4><p>​        进入大数据时代，感觉我们如果不会一些分析数据的能力，就将要被时代淘汰（明目张胆拉焦虑）。 不过好在现在的技术越来越好，越来越易用，而且网络上也有越来越多的教学内容。 只要你有一些耐心，入门其实并不难。</p><p>​        现在我们将要步入新的阶段，对大数据做出新的定义，直面大数据带来的挑战，学会使用 Pandas 来处理你日常的表格&#x2F;画图&#x2F;数据分析等问题。</p><h5 id="你正在面临的问题"><a href="#你正在面临的问题" class="headerlink" title="你正在面临的问题"></a>你正在面临的问题</h5><p>​        大数据虽然描述的是海量的数据，但是大数据离你却并不远，特别是大数据所涵盖的技术，在你生活当中，是时刻都能使用这些大数据涉及到的技术， 来解决你生活中的具体问题。</p><p>​        是什么时候才会让我想要使用 Pandas 来处理问题呢？我下面列一条，说不定就有你正面临的问题：</p><ul><li>办公自动化<ul><li>上学上班，有 Excel 或者格式化的文本文件，需要进行数据加工处理</li><li>对大量的这些文本文件作图，想要自动化处理</li></ul></li><li>人工智能<ul><li>数据分析，可视化数据规律</li><li>数据前处理，为 AI 模型展平道路</li></ul></li></ul><h4 id="Pandas是什么"><a href="#Pandas是什么" class="headerlink" title="Pandas是什么"></a>Pandas是什么</h4><p>​        简单来说，Pandas 是 Python 中一个比较常用的第三方库，里面集成了很多和数据相关的功能组件。上面提到的那些场景中， 无非就是要：</p><ol><li>处理数据</li><li>分析数据</li><li>画图</li></ol><p>​        所以 Pandas 就围绕着这些环节施展能力。而且它承接了 Numpy 的能力，使用的底层也是 Numpy。按理来说，我们也能用 Numpy 来实现上述功能， 但为什么 Pandas 还是这么广为流传呢？关于这个话题，我想在后文中详细论述。</p><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p>​        Pandas 是数据的伙伴，帮你处理和分析海量数据，学会用 Python，会很常需要处理数据，只要需要处理数据，希望你都能回想起来有这么一位数据伙伴的存在。</p><h3 id="安装Pandas"><a href="#安装Pandas" class="headerlink" title="安装Pandas"></a>安装Pandas</h3><h5 id="安装Python（略）"><a href="#安装Python（略）" class="headerlink" title="安装Python（略）"></a>安装Python（略）</h5><h5 id="安装Pandas-1"><a href="#安装Pandas-1" class="headerlink" title="安装Pandas"></a>安装Pandas</h5><p>​        打开cmd或者terminal，输入指令：</p><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> pandas<span class="token comment">#或者</span>pip3 <span class="token function">install</span> pandas</code></pre><p>​        安装完成后，打开python编辑器，输入下列代码</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">print</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#0    1</span><span class="token comment">#1    2</span><span class="token comment">#2    3</span><span class="token comment">#dtype: int64</span></code></pre><h5 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h5><p>​        在本地安装起来很简单，使用 Python 自带的 pip 就好了。记得安装好了之后检查一下是否能正常运行， 和是否安装到其他 Python 版本里去了（如果你电脑里有多个 Python 版本的话）。</p><h3 id="Pandas和Numpy的差别"><a href="#Pandas和Numpy的差别" class="headerlink" title="Pandas和Numpy的差别"></a>Pandas和Numpy的差别</h3><p>​        我们已经讲过，Pandas 是在 Numpy 上的封装。 继承了 Numpy 的所有优点，但是这种封装有好有坏，我们在这节内容中就先来阐述一下 Pandas 和 Numpy 的对比。</p><h4 id="类比Python"><a href="#类比Python" class="headerlink" title="类比Python"></a>类比Python</h4><p>​        用过 Python，你肯定熟悉里面的 List 和 Dictionary, 我比较常拿这两种形态来对比 Numpy 和 Pandas 的关系。</p><pre class="language-python" data-language="python"><code class="language-python">a_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>a_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"list:"</span><span class="token punctuation">,</span> a_list<span class="token punctuation">)</span><span class="token comment">#list: [1, 2, 3]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"dict:"</span><span class="token punctuation">,</span> a_dict<span class="token punctuation">)</span><span class="token comment">#dict: &#123;'a': 1, 'b': 2, 'c': 3&#125;</span></code></pre><p>​        上面就是一种最常见的 Python 列表和字典表达方式。而下面，我们展示的就是 Numpy 和 Pandas 的一种构建方式。 试着执行下面的代码。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"numpy array:\n"</span><span class="token punctuation">,</span> a_array<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\npandas df:\n"</span><span class="token punctuation">,</span> a_df<span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">numpy array: [[1 2] [3 4]]pandas df:    a  b0  1  21  3  4</code></pre><p>​        你会发现，我们看到的结果中，Numpy的是没有任何数据标签信息的，你可以认为它是纯数据；而Pandas就像字典一样，还记录着数据的外围信息，比如标签名(Column)和索引(Row index)。所以我总说Numpy是Python里的列表，而Pandas是Python里的字典。</p><h4 id="对比Numpy"><a href="#对比Numpy" class="headerlink" title="对比Numpy"></a>对比Numpy</h4><p>​        对于数据运算，既然我们有了 Numpy，为什么还要用 Pandas？对比列表和字典，我们很容易感受到其中的一种原因：Pandas帮我们记录的信息量变多了。</p><p>​        在Numpy中，如果你不特别在其他地方标注，你是不清楚记录的这里边记录的是什么信息的，而Pandas记录的信息可以特别丰富，你给别人使用传播数据的时候，这些信息也会一起传递过去。或者你自己处理数据时对照着信息来加工数据，也会更加友善。这就是在我看来Pandas对比Numpy的一个最直观的好处。</p><p>​        <strong>另外 Pandas 用于处理数据的功能也比较多，信息种类也更丰富，特别是你有一些包含字符的表格，Pandas 可以帮你处理分析这些字符型的数据表。 当然还有很多其它功能，比如处理丢失信息，多种合并数据方式，读取和保存为更可读的形式等等。</strong></p><p>​        但是Pandas也有不足的地方：<strong>运算速度稍微比Numpy慢一些。</strong></p><p>​        你想想，因为Pandas是在Numpy之上的一层封装，所以肯定在处理数据的时候要多几层处理，小数据量的处理不要紧，慢一点就慢一点，你也感受不到处理速度的变化；但是当数据量变大时，Numpy处理需要1小时的数据，你用Pandas处理可能得2小时。所以在使用时需要注意自己的实际需求。比如：如果在做少量数据的分析时，因为不涉及到机器学习的模型运算等，我都可以用 Pandas，但如果要模型训练， 训练过程中还一直要调用数据处理的功能， 我肯定毫不犹豫都用 Numpy 来做。</p><h4 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h4><p>​        Pandas 是 Numpy 的封装库，继承了 Numpy 的很多优良传统，也具备丰富的功能组件，但是你还是得分情况来酌情选择要使用的工具。</p><hr><p>注：该笔记非原创，主要是对<a href="https://mofanpy.com/">该网站</a>中教程内容的记录</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Numpy和Pandas学习笔记&quot;&gt;&lt;a href=&quot;#Numpy和Pandas学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Numpy和Pandas学习笔记&quot;&gt;&lt;/a&gt;Numpy和Pandas学习笔记&lt;/h1&gt;&lt;p&gt;记录学习的内容，方便今后查阅&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="tags/python/"/>
    
    <category term="机器学习基础" scheme="tags/机器学习基础/"/>
    
  </entry>
  
  <entry>
    <title>python入门笔记</title>
    <link href="2022/04/24/python%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <id>2022/04/24/python%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</id>
    <published>2022-04-24T06:15:16.000Z</published>
    <updated>2022-05-20T02:57:11.473Z</updated>
    
    <content type="html"><![CDATA[<p>本文章旨在记录本人python基础语法学习的回顾总结。知识点来自B站莫烦python的<a href="https://www.bilibili.com/video/BV1wW411Y7ai">python基础教程</a><span id="more"></span></p><h2 id="python入门笔记"><a href="#python入门笔记" class="headerlink" title="python入门笔记"></a>python入门笔记</h2><h3 id="python的安装"><a href="#python的安装" class="headerlink" title="python的安装"></a>python的安装</h3><p><a href="https://www.python.org/downloads/">下载链接</a> 按需下载噢，建议直接下载3.5以上的版本，不推荐2.X版本</p><ul><li>macOS下的安装：直接一直点下一步即可</li><li>windows下的安装：点下一步即可，记得勾选“添加到command line…..”的那个选项噢（否则无法正常使用pip3）</li><li>linux下的安装：<a href="https://www.jianshu.com/p/fd75a5cfe4dd">转载一篇博客</a></li></ul><p>安装完成后进入命令行输入python3 显示如下界面：</p><p><img src="http://cdn.leafii.top/img/20220520104806.png" alt="python3成功安装后iterm界面" loading="lazy"></p><hr><h3 id="print函数"><a href="#print函数" class="headerlink" title="print函数"></a>print函数</h3><p>直接上代码吧 比较浅显易懂</p><pre class="language-python" data-language="python"><code class="language-python">say_hi <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你的第一行代码："</span><span class="token punctuation">,</span> say_hi<span class="token punctuation">)</span></code></pre><p>输出结果：</p><pre class="language-none"><code class="language-none">你的第一行代码： Hello World</code></pre><hr><h3 id="有关数学符号"><a href="#有关数学符号" class="headerlink" title="有关数学符号"></a>有关数学符号</h3><p>在数学里，“&#x3D;”就是等于的意思 但是在编程环境中“&#x3D;”就是赋值的意思，比如<code>sa y_hi = &quot;Hello World&quot;</code>就是把“Hello World”这个值赋值给名为say_hi的变量。在编程环境中的“&#x3D;&#x3D;”符号，才是用来判断是否相等的，比如<code>123==321</code>就会返回一个False值 QWQ！</p><p>还要记得在python里&#x2F;&#x2F;相当于整除，%相当于取余数噢</p><hr><h3 id="自变量variable"><a href="#自变量variable" class="headerlink" title="自变量variable"></a>自变量variable</h3><p>python不用定义类型，可以直接定义变量</p><pre class="language-python" data-language="python"><code class="language-python">apple <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span>APPLE_EGG <span class="token operator">=</span> <span class="token number">11</span>appleEgg <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>appleEgg<span class="token punctuation">)</span></code></pre><p>如同第二节里的say_hi 一样，apple和say_hi都是变量的名称，定义变量的方式就是如此</p><p><img src="http://cdn.leafii.top/img/20220520104910.png" alt="运行结果" loading="lazy"></p><hr><h3 id="关于循环与判断"><a href="#关于循环与判断" class="headerlink" title="关于循环与判断"></a>关于循环与判断</h3><ul><li>while循环</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#while循环</span>num1 <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">while</span><span class="token punctuation">(</span>num1 <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"现在num的值为："</span><span class="token punctuation">,</span>num1<span class="token punctuation">,</span><span class="token string">"num自增1！"</span><span class="token punctuation">)</span>    num1 <span class="token operator">=</span> num1 <span class="token operator">+</span> <span class="token number">1</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">现在num的值为： 3 num自增1！现在num的值为： 4 num自增1！现在num的值为： 5 num自增1！现在num的值为： 6 num自增1！现在num的值为： 7 num自增1！现在num的值为： 8 num自增1！</code></pre><ul><li>for循环</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#迭代遍历</span>a_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> a_list<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">#使用下标遍历</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>a_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 关于range：range(1,3) --> 1 2 (左闭右开) len(a_list)就是返回a_list这个list的长度</span></code></pre><p>运行结果：</p><p><img src="http://cdn.leafii.top/img/20220520104947.png" alt="for循环代码运行结果" loading="lazy"></p><ul><li>if，if else，if elif else</li></ul><pre class="language-python" data-language="python"><code class="language-python">inin <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个数字"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> inin <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这个数字小于0"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> inin <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这个数字等于3"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment">#else是相对于if来说的</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这个数字大于等于0且不等于3"</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><p><img src="http://cdn.leafii.top/img/20220520105046.png" alt="if判断代码运行结果" loading="lazy"></p><hr><h3 id="使用def定义函数"><a href="#使用def定义函数" class="headerlink" title="使用def定义函数"></a>使用def定义函数</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># a,b为参数 函数可以有返回值也可以没有噢</span>    c <span class="token operator">=</span> a<span class="token operator">+</span>b    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment">#可以通过运行结果看到调用的顺序</span>    <span class="token keyword">return</span> c<span class="token keyword">print</span><span class="token punctuation">(</span>fun<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">35</code></pre><ul><li>函数默认参数</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#可以设置函数的参数为默认值，未写明的调用就直接用定义好的调用值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token comment">#请注意未定义好初始值的变量不能在已经定义好初始值的变量后面</span>fun1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>fun1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">1 30 201 2 3</code></pre><hr><h3 id="全局变量-amp-局部变量"><a href="#全局变量-amp-局部变量" class="headerlink" title="全局变量&amp;局部变量"></a>全局变量&amp;局部变量</h3><pre class="language-python" data-language="python"><code class="language-python">APPLE <span class="token operator">=</span> <span class="token number">100</span>a <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a    <span class="token comment">#不加global a就会None</span>    a <span class="token operator">=</span> <span class="token number">20</span>    <span class="token keyword">global</span> b    b <span class="token operator">=</span> <span class="token number">120</span>    <span class="token string">'print(a)'</span>    <span class="token keyword">return</span> a<span class="token operator">+</span><span class="token number">103</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'past a:'</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"later a:"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token comment">#通过添加global，使原来是局部变量作用域的变量变为全局变量</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">past a: None123120later a: 20</code></pre><hr><h3 id="模块安装"><a href="#模块安装" class="headerlink" title="模块安装"></a>模块安装</h3><ul><li>macOS&#x2F;Linux下的模块安装：使用终端里的iterm即可：</li></ul><p><img src="http://cdn.leafii.top/img/20220520105116.png" alt="模块安装" loading="lazy"></p><ul><li>Windows下的安装：去官网下载</li></ul><hr><h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><ul><li>创建一个文件并向其写入一些文字</li></ul><pre class="language-python" data-language="python"><code class="language-python">text <span class="token operator">=</span> <span class="token string">"This is my first test.\nThis is next line.\nThis is last line"</span><span class="token comment">#\n代表回车，在文件中就相当于输入一个句子换行</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>my_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'my file.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>my_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span>my_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#open函数第一个参数是要打开的文件的文件名，第二个参数是打开方式，w代表写，r代表只读，如果以w方式打开不存在的文件则会直接创建新文件，编辑完文件记得使用close方法保存文件</span></code></pre><ul><li>使用append打开方式（a）向文件末尾添加文字</li></ul><pre class="language-python" data-language="python"><code class="language-python">append_text <span class="token operator">=</span> <span class="token string">"\nThis is appended file."</span><span class="token comment">#a的意思是append</span>my_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"my file.txt"</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>my_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>append_text<span class="token punctuation">)</span>my_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>读取文件并print</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"my file.txt"</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token comment">#content = file.read()</span><span class="token comment">#readline是一行一行读</span>content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> content<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>second_read_time <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span>second_read_time<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">This is my first test.This is next line.This is last lineThis is appended file.This is appended file.[&#39;This is my first test.\n&#39;, &#39;This is next line.\n&#39;, &#39;This is last line\n&#39;, &#39;This is appended file.\n&#39;, &#39;This is appended file.&#39;] [&#39;This is my first test.\n&#39;, &#39;This is next line.\n&#39;, &#39;This is last line\n&#39;, &#39;This is appended file.\n&#39;, &#39;This is appended file.&#39;]</code></pre><hr><h3 id="类-class"><a href="#类-class" class="headerlink" title="类 class"></a>类 class</h3><ul><li><p>类的定义：</p><p>一般类名首字母大写 再跟上冒号，比如这样：</p></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Calculator</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"Casio Calculator"</span>    price <span class="token operator">=</span> <span class="token string">"199"</span>    <span class="token comment">#self是类内函数默认参数 self就是类本身 类似与java中的this</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        result <span class="token operator">=</span> x <span class="token operator">+</span> y        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">minus</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> x <span class="token operator">-</span> y        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">times</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> x <span class="token operator">*</span> y        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">divide</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> x <span class="token operator">/</span> y        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p>在类里可以定义属性，也可以定义类中的函数，但注意<strong>类中的函数参数列表的第一个参数必须是self，self类似于java对象中的this指针</strong></p><ul><li>类的实例化及调用：</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#类的实例化</span>cal <span class="token operator">=</span> Calculator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#类中的元素</span>cal<span class="token punctuation">.</span>name<span class="token comment">#类中的方法</span>cal<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><ul><li>类的__init__方法</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Calculator</span><span class="token punctuation">:</span>    <span class="token comment">#name = "Casio Calculator"</span>    <span class="token comment">#price = "199"</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>price<span class="token punctuation">,</span>height<span class="token punctuation">,</span>width<span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#init这个函数类似java中类的构造函数,但是类中的元素不像java需要提前定义好 类在初始化时会自动执行__init__()函数QWQ！</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'!!!initinit!!!'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>price <span class="token operator">=</span> price        self<span class="token punctuation">.</span>h <span class="token operator">=</span> height        self<span class="token punctuation">.</span>wi <span class="token operator">=</span> width        self<span class="token punctuation">.</span>we <span class="token operator">=</span> weight    <span class="token comment">#self是类内函数默认参数 self就是类本身 类似与java中的this</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        result <span class="token operator">=</span> x <span class="token operator">+</span> y        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">minus</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> x <span class="token operator">-</span> y        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">times</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> x <span class="token operator">*</span> y        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">divide</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> x <span class="token operator">/</span> y        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> </code></pre><hr><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><pre class="language-python" data-language="python"><code class="language-python">a_input <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'Please give me a number:'</span><span class="token punctuation">)</span> <span class="token comment">#return a string so it equals '1' not equals 1</span><span class="token keyword">if</span> a_input<span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"this is a good one"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> a_input<span class="token operator">==</span><span class="token string">'2'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"see you next time"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"FKU!"</span><span class="token punctuation">)</span>b_input <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'Please give me a b number:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#return a string so it equals '1' not equals 1</span><span class="token keyword">if</span> b_input<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"this is a good one"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> b_input<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"see you next time"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"FKU!"</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">Please give me a number:1this is a good onePlease give me a b number:3FKU!</code></pre><p><strong>请注意，python3中的input，默认输入的是字符串，记得转格式再使用</strong></p><hr><h3 id="元组-amp-列表-amp-字典"><a href="#元组-amp-列表-amp-字典" class="headerlink" title="元组&amp;列表&amp;字典"></a>元组&amp;列表&amp;字典</h3><ul><li>元组(tuple)</li></ul><p>元组tuple最大的特征是内容不可变，因此使用频率低，一般常用List</p><ul><li>列表(List)</li></ul><p>列表是我们最常用的一种存储数据机制。它就像一个抽屉一样，存放着各种信息，每一格都是一个存储单元，每一格都可以单独获取。</p><pre class="language-python" data-language="python"><code class="language-python">files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"f1.txt"</span><span class="token punctuation">,</span> <span class="token string">"f2.txt"</span><span class="token punctuation">,</span> <span class="token string">"f3.txt"</span><span class="token punctuation">,</span> <span class="token string">"f4.txt"</span><span class="token punctuation">,</span> <span class="token string">"f5.txt"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"files[0] "</span><span class="token punctuation">,</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"files[3] "</span><span class="token punctuation">,</span> files<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"files[-1] "</span><span class="token punctuation">,</span> files<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"files[-3] "</span><span class="token punctuation">,</span> files<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>运行结果</p><pre class="language-none"><code class="language-none">files[0]  f1.txtfiles[3]  f4.txtfiles[-1]  f5.txtfiles[-3]  f3.txt</code></pre><p>在列表中，既然你已经把东西按顺序存放到抽屉中了，那你就可以按照顺序拿到你存放的东西。 在Python中，我们将上面的数字号叫做 index 索引。现实中第1个位置的东西，在Python中，是第0位。 <strong>所以Python的第一个索引永远都是 0。</strong> 除了正着来取东西，我们完全也可以反着来取东西，第一个反着取的序号是 <strong>-1</strong>。以此类推，-3 这个索引就是倒着数第三个。</p><p>而且在Python中，还很方便的可以一次性拿到多个抽屉的结果。比如下面我们就来演示一下取从多少位到多少位的东西。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"files[:3] "</span><span class="token punctuation">,</span> files<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"files[2:4] "</span><span class="token punctuation">,</span> files<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"files[-3:] "</span><span class="token punctuation">,</span> files<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">files[:3]  [&#39;f1.txt&#39;, &#39;f2.txt&#39;, &#39;f3.txt&#39;]files[2:4]  [&#39;f3.txt&#39;, &#39;f4.txt&#39;]files[-3:]  [&#39;f3.txt&#39;, &#39;f4.txt&#39;, &#39;f5.txt&#39;]</code></pre><p><strong>在列表中，你可以存放不同类型的元素，字符，数字，甚至列表里还能有列表。</strong></p><ul><li>多维List</li></ul><pre class="language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>multi_dim_a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>multi_dim_a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">13</code></pre><ul><li>字典(dictionary)</li></ul><p>key-&gt;value  一一对应 这里的key对应的就是list中的index哦！这个字典中的 key 都是唯一的，如果你的抽屉出现了重名，我相信你应该也不知道到底是哪个抽屉放着想要找的东西吧。 而 value 是多样的，你可以放一个字符，一个数字，甚至一个列表，甚至是另一个字典。当你想要索引的时候，用 key 就能找到里面的内容。同列表，字典也是可以修改的。</p><pre class="language-python" data-language="python"><code class="language-python">a_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'apple'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'pear'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span>d2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">'abandon'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token string">'bear'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token string">'ciliba'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>d2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#删除字典元素 del</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">del</span> d<span class="token punctuation">[</span><span class="token string">'orange'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment">#添加元素的话直接定义就行</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>d<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment">#字典里也可以加字典 function</span>dd <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'apple'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'pear'</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string">'a'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dd<span class="token punctuation">[</span><span class="token string">'pear'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p> 运行结果：</p><pre class="language-none"><code class="language-none">abandon1&#123;&#39;apple&#39;: 1, &#39;pear&#39;: 2, &#39;orange&#39;: 3&#125;&#123;&#39;apple&#39;: 1, &#39;pear&#39;: 2&#125;&#123;&#39;apple&#39;: 1, &#39;pear&#39;: 2&#125;&#123;&#39;apple&#39;: 1, &#39;pear&#39;: 2, &#39;b&#39;: 20&#125;a</code></pre><hr><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul><li>载入模块</li></ul><p>可以使用<code>import 模块名</code> 来载入模块，也可以用<code>import time as t</code>使t成为被引入模块time的别名，方便调用。如果只想使用一个模块中的部分功能：<code>from time import time,localtime</code>,其中time，localtime就是time模块中的两个方法名。也可以使用from引入模块中的所有方法，引入后调用方法无需输入方法前的模块名，如<code>from time import *</code></p><ul><li>自定义模块</li></ul><p>自己编写的.py文件和当前在编码的文件同路径时，直接使用import引入即可，或者把自己编写的.py文件复制&#x2F;移动到python系统下载其他模块的默认目录中也可以。</p><hr><h3 id="continue-amp-break"><a href="#continue-amp-break" class="headerlink" title="continue&amp;break"></a>continue&amp;break</h3><ul><li>在没有continue，break时：</li></ul><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">while</span> a<span class="token punctuation">:</span>    b <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'type sth:'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> b<span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"finish running"</span><span class="token punctuation">)</span></code></pre><ul><li>有break时</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'type sth:'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> b<span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"still in while"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"finish running"</span><span class="token punctuation">)</span></code></pre><ul><li>有continue时 continue跳过循环范围内的的后续代码:else … print… 从而不输出still in while</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'type sth:'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> b<span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">:</span>d        <span class="token keyword">continue</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"still in while"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"finish running"</span><span class="token punctuation">)</span></code></pre><hr><h3 id="错误处理try"><a href="#错误处理try" class="headerlink" title="错误处理try"></a>错误处理try</h3><ul><li>没有try时</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'eee.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token comment">#如果文件名输入错误，或者文件不存在时会直接报错，影响程序后续执行</span></code></pre><ul><li>使用try</li></ul><pre class="language-python" data-language="python"><code class="language-python">filename <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'input file name:'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'r+'</span><span class="token punctuation">)</span><span class="token comment"># 捕获错误</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'there is no file QWQ'</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'do you want to create a new file?(y/n)'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> response <span class="token operator">==</span> <span class="token string">'y'</span><span class="token punctuation">:</span>        <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token comment">#如果try成功了</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h3 id="使用lambda，zip，map"><a href="#使用lambda，zip，map" class="headerlink" title="使用lambda，zip，map"></a>使用lambda，zip，map</h3><p>map 分两部分 功能和参数合起来，lambda相当于简化的功能&#x2F;函数，zip是迭代器所需要的东西，直接上代码：</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token comment">#zip是把a和b竖向合并</span><span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token comment">#zip返回值是一个功能</span>ll <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token comment">##[(1, 4), (2, 5), (3, 6)] 此为print(ll)的结果</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>j<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">## 0.5 8</span><span class="token comment">## 1.0 10</span><span class="token comment">## 1.5 12</span><span class="token comment">#能否zip更多元素？</span>lll <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lll<span class="token punctuation">)</span><span class="token comment">##[(1, 1, 4), (2, 2, 5), (3, 3, 6)]  此为print(lll)的结果</span><span class="token comment">#lambda:</span><span class="token comment"># 未使用lambda</span><span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fun1<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">## 5</span>  <span class="token comment"># 使用lambda 可提高代码可读性</span>fun2 <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>x<span class="token operator">+</span>y<span class="token keyword">print</span><span class="token punctuation">(</span>fun2<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">## 5</span><span class="token comment">#map</span><span class="token comment">#把已知的功能加上所要给的参数一起输入运算 是一个object</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span>fun1<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">## [10]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span>fun1<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">## [5, 7, 9]</span></code></pre><hr><h3 id="深复制-amp-浅复制"><a href="#深复制-amp-浅复制" class="headerlink" title="深复制&amp;浅复制"></a>深复制&amp;浅复制</h3><ul><li><p>浅复制与深复制的区别：浅拷贝，拷贝父对象不会拷贝子对象，深拷贝的话完全拷贝父及子对象</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> copya <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> a<span class="token comment">#id是在硬盘中的索引</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">11</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">12</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment">#改变a的值，b也跟着变</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">==</span><span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#浅复制 只复制值 不复制地址</span>c <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">==</span><span class="token builtin">id</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">22222</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>d<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>e <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">==</span><span class="token builtin">id</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token builtin">id</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#True</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">333</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token comment">#所以浅复制的list中的list是无法幸免的 还是会被同步</span>e <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token builtin">id</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#False</span><span class="token comment">#list表有单独索引，这个不一样。但是表内元素索引一样的，说明都指向那个元素，感觉空间节省了。</span></code></pre></li></ul><hr><h3 id="pickle存放数据"><a href="#pickle存放数据" class="headerlink" title="pickle存放数据"></a>pickle存放数据</h3><p>可以使用pickle保存一些你之后想再次利用的数据，以二进制形式保存噢，后缀名一般为.pickle。</p><ul><li>保存数据</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token comment">#可以在你想保存运算结果时做到保存和提取的功能</span>a_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'da'</span><span class="token punctuation">:</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'23'</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">:</span><span class="token string">'sad'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'pickle_example.pickle'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token comment">#dump()函数！！file的后缀名记得是.pickle哦</span>pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>a_dict<span class="token punctuation">,</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>从.pickle文件中读取数据</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'pickle_example.pickle'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span><span class="token comment">#使用with开头的这个句子不用file.close()诶 好神奇qwq！</span><span class="token comment">#file = open('pickle_example.pickle','rb')</span>    a_dict1 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a_dict1<span class="token punctuation">)</span><span class="token comment">#file.close()</span></code></pre><hr><h3 id="使用set来找不同"><a href="#使用set来找不同" class="headerlink" title="使用set来找不同"></a>使用set来找不同</h3><pre class="language-python" data-language="python"><code class="language-python">char_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>char_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#&#123;'a', 'c', 'b', 'd'&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>char_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#&lt;class 'set'></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#&lt;class 'dict'></span>sentence <span class="token operator">=</span> <span class="token string">'Welcome Back to This Tutorial'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#&#123;'T', 'W', 'h', 'i', 'r', 'o', 'm', 'a', ' ', 'u', 'e', 'c', 'B', 't', 'l', 's', 'k'&#125;</span><span class="token comment">#print(set([sentence,char_list])) 会报错 不能传列表+列表的形式</span>unique_char <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>char_list<span class="token punctuation">)</span>unique_char<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>unique_char<span class="token punctuation">)</span><span class="token comment">#&#123;'b', 'a', 'x', 'd', 'c'&#125;</span><span class="token comment">#unique_char.add(['a','x']) 也错了捏</span><span class="token comment">#可以减东西吗？qwq</span>unique_char<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>unique_char<span class="token punctuation">)</span><span class="token comment">#单独去除东西呢？</span>unique_char<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token comment">#返回值为None哦 打印出的结果就是None</span><span class="token keyword">print</span><span class="token punctuation">(</span>unique_char<span class="token punctuation">)</span><span class="token comment">#&#123;'a', 'c', 'd', 'b'&#125;</span><span class="token comment">#如果remove一个不存在的元素，就会报错 所以使用discard()</span><span class="token keyword">print</span><span class="token punctuation">(</span>unique_char<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>unique_char<span class="token punctuation">)</span><span class="token comment">#比较两个set set1=&#123;'b', 'a', 'x', 'd', 'c'&#125; set2 = &#123;'a','e','i'&#125;</span>set1 <span class="token operator">=</span> unique_charset2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>set2<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#&#123;'e', 'i'&#125; differece是做差 不具备可交换性</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#&#123;'x', 'b', 'd', 'c'&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#&#123;'a'&#125; intersection为取交集</span><span class="token keyword">print</span><span class="token punctuation">(</span>set2<span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#&#123;'a'&#125;</span></code></pre><hr><h3 id="RegEx-正则表达"><a href="#RegEx-正则表达" class="headerlink" title="RegEx 正则表达"></a>RegEx 正则表达</h3><p>请参考<a href="https://mofanpy.com/tutorials/python-basic/interactive-python/regex/">这个链接</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文章旨在记录本人python基础语法学习的回顾总结。知识点来自B站莫烦python的&lt;a href=&quot;https://www.bilibili.com/video/BV1wW411Y7ai&quot;&gt;python基础教程&lt;/a&gt;</summary>
    
    
    
    
    <category term="python" scheme="tags/python/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树的操作（pta题目）</title>
    <link href="2022/03/29/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%93%8D%E4%BD%9C%EF%BC%88pta%E9%A2%98%E7%9B%AE%EF%BC%89/"/>
    <id>2022/03/29/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%93%8D%E4%BD%9C%EF%BC%88pta%E9%A2%98%E7%9B%AE%EF%BC%89/</id>
    <published>2022-03-29T05:29:16.000Z</published>
    <updated>2022-05-20T06:57:29.013Z</updated>
    
    <content type="html"><![CDATA[<p>本题要求实现给定二叉搜索树的5种常用操作。</p><span id="more"></span>函数接口定义：<pre class="language-C" data-language="C"><code class="language-C">BinTree Insert( BinTree BST, ElementType X );BinTree Delete( BinTree BST, ElementType X );Position Find( BinTree BST, ElementType X );Position FindMin( BinTree BST );Position FindMax( BinTree BST );</code></pre><p>其中BinTree结构定义如下：</p><pre class="language-C" data-language="C"><code class="language-C">typedef struct TNode *Position;typedef Position BinTree;struct TNode&#123;    ElementType Data;    BinTree Left;    BinTree Right;&#125;;</code></pre><ul><li>函数<code>Insert</code>将<code>X</code>插入二叉搜索树<code>BST</code>并返回结果树的根结点指针；</li><li>函数<code>Delete</code>将<code>X</code>从二叉搜索树<code>BST</code>中删除，并返回结果树的根结点指针；如果<code>X</code>不在树中，则打印一行<code>Not Found</code>并返回原树的根结点指针；</li><li>函数<code>Find</code>在二叉搜索树<code>BST</code>中找到<code>X</code>，返回该结点的指针；如果找不到则返回空指针；</li><li>函数<code>FindMin</code>返回二叉搜索树<code>BST</code>中最小元结点的指针；</li><li>函数<code>FindMax</code>返回二叉搜索树<code>BST</code>中最大元结点的指针。</li></ul><h2 id="裁判测试程序样例："><a href="#裁判测试程序样例：" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h2><pre class="language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef int ElementType;typedef struct TNode *Position;typedef Position BinTree;struct TNode&#123;    ElementType Data;    BinTree Left;    BinTree Right;&#125;;void PreorderTraversal( BinTree BT ); &#x2F;* 先序遍历，由裁判实现，细节不表 *&#x2F;void InorderTraversal( BinTree BT );  &#x2F;* 中序遍历，由裁判实现，细节不表 *&#x2F;BinTree Insert( BinTree BST, ElementType X );BinTree Delete( BinTree BST, ElementType X );Position Find( BinTree BST, ElementType X );Position FindMin( BinTree BST );Position FindMax( BinTree BST );int main()&#123;    BinTree BST, MinP, MaxP, Tmp;    ElementType X;    int N, i;    BST &#x3D; NULL;    scanf(&quot;%d&quot;, &amp;N);    for ( i&#x3D;0; i&lt;N; i++ ) &#123;        scanf(&quot;%d&quot;, &amp;X);        BST &#x3D; Insert(BST, X);    &#125;    printf(&quot;Preorder:&quot;); PreorderTraversal(BST); printf(&quot;\n&quot;);    MinP &#x3D; FindMin(BST);    MaxP &#x3D; FindMax(BST);    scanf(&quot;%d&quot;, &amp;N);    for( i&#x3D;0; i&lt;N; i++ ) &#123;        scanf(&quot;%d&quot;, &amp;X);        Tmp &#x3D; Find(BST, X);        if (Tmp &#x3D;&#x3D; NULL) printf(&quot;%d is not found\n&quot;, X);        else &#123;            printf(&quot;%d is found\n&quot;, Tmp-&gt;Data);            if (Tmp&#x3D;&#x3D;MinP) printf(&quot;%d is the smallest key\n&quot;, Tmp-&gt;Data);            if (Tmp&#x3D;&#x3D;MaxP) printf(&quot;%d is the largest key\n&quot;, Tmp-&gt;Data);        &#125;    &#125;    scanf(&quot;%d&quot;, &amp;N);    for( i&#x3D;0; i&lt;N; i++ ) &#123;        scanf(&quot;%d&quot;, &amp;X);        BST &#x3D; Delete(BST, X);    &#125;    printf(&quot;Inorder:&quot;); InorderTraversal(BST); printf(&quot;\n&quot;);    return 0;&#125;&#x2F;* 你的代码将被嵌在这里 *&#x2F;</code></pre><h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><pre class="language-none"><code class="language-none">105 8 6 2 4 1 0 10 9 756 3 10 0 555 7 0 10 3</code></pre><h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><pre class="language-none"><code class="language-none">Preorder: 5 2 1 0 4 8 6 7 10 96 is found3 is not found10 is found10 is the largest key0 is found0 is the smallest key5 is foundNot FoundInorder: 1 2 4 6 8 9</code></pre><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><pre class="language-C" data-language="C"><code class="language-C">BinTree Insert( BinTree BST, ElementType X )&#123;    &#x2F;&#x2F;如果是一个空节点    if(!BST)&#123;        BST &#x3D; (BinTree)malloc(sizeof(struct TNode));&#x2F;&#x2F;既然为空所以要生成一个        BST-&gt;Data &#x3D; X;        BST-&gt;Left &#x3D; NULL;        BST-&gt;Right &#x3D; NULL;    &#125;    else&#123;&#x2F;&#x2F;一般情况        if(X &lt; BST-&gt;Data)&#123;&#x2F;&#x2F;插入值小于节点，应该往左子树中找位置            BST-&gt;Left &#x3D; Insert(BST-&gt;Left,X);&#x2F;&#x2F;递归插入左子树        &#125;        else if(X &gt; BST-&gt;Data)&#123;&#x2F;&#x2F;插入值大于节点，应该往右子树中找            BST-&gt;Right &#x3D; Insert(BST-&gt;Right,X);&#x2F;&#x2F;递归插入右子树        &#125;        &#x2F;&#x2F;如果相等说明X已经存在，什么也不做    &#125;    return BST;&#125;Position Find( BinTree BST, ElementType X )&#123;    while(BST)&#123;&#x2F;&#x2F;直接循环查找，类似链表        if(X &lt; BST-&gt;Data)&#123;            BST &#x3D; BST-&gt;Left;&#x2F;&#x2F;小于节点，找左子树        &#125;        else if(X &gt; BST-&gt;Data)&#123;&#x2F;&#x2F;大于节点，找右子树            BST &#x3D; BST-&gt;Right;        &#125;        else&#123;&#x2F;&#x2F;相等则找到            return BST;        &#125;    &#125;    return NULL;&#125;Position FindMin( BinTree BST )&#123;    if(!BST)&#123;        return NULL;    &#125;    else if(!BST-&gt;Left)        return BST;    else return FindMin(BST-&gt;Left);&#125;Position FindMax( BinTree BST )&#123;    if(!BST)return NULL;    else if(!BST-&gt;Right)return BST;    else return FindMax(BST-&gt;Right);&#125;BinTree Delete( BinTree BST, ElementType X )&#123;    Position temp;    if(!BST)&#123;        printf(&quot;Not Found\n&quot;);&#x2F;&#x2F;如果最终树为空，说明没有    &#125;    else&#123;&#x2F;&#x2F;这里类似于插入重点在于找到后怎么办        if(X &lt; BST-&gt;Data)&#123;            BST-&gt;Left &#x3D; Delete(BST-&gt;Left,X);&#x2F;&#x2F;从左子树递归删除        &#125;        else if(X &gt; BST-&gt;Data)&#123;            BST-&gt;Right &#x3D; Delete(BST-&gt;Right,X);&#x2F;&#x2F;从右子树递归删除        &#125;        else&#123;&#x2F;&#x2F;当前BST就是要删除的节点              if(BST-&gt;Left &amp;&amp; BST-&gt;Right)&#123;&#x2F;&#x2F;要被删除的节点有左右两个孩子，就从右子树中找最小的数填充删除的节点                temp &#x3D; FindMin(BST-&gt;Right);&#x2F;&#x2F;找最小                BST-&gt;Data &#x3D; temp-&gt;Data;&#x2F;&#x2F;填充删除的节点                BST-&gt;Right &#x3D; Delete(BST-&gt;Right,temp-&gt;Data);&#x2F;&#x2F;删除拿来填充的那个节点              &#125;              else&#123;&#x2F;&#x2F;只有一个子节点                temp &#x3D; BST;                if(!BST-&gt;Left)&#123;&#x2F;&#x2F;只有右节点                    BST &#x3D; BST-&gt;Right;&#x2F;&#x2F;直接赋值就可以                &#125;                else if(!BST-&gt;Right)&#123;&#x2F;&#x2F;只有左节点                    BST &#x3D; BST-&gt;Left;&#x2F;&#x2F;直接赋值就可以                &#125;                free(temp);&#x2F;&#x2F;如果啥也没有直接删除就可以，当然上面两种情况赋值后也要删除              &#125;        &#125;    &#125;    return BST;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;本题要求实现给定二叉搜索树的5种常用操作。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="tags/数据结构/"/>
    
  </entry>
  
  <entry>
    <title>macOs汇编入门(HelloWorld)</title>
    <link href="2021/05/13/macOs%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8-HelloWorld/"/>
    <id>2021/05/13/macOs%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8-HelloWorld/</id>
    <published>2021-05-13T08:11:30.000Z</published>
    <updated>2022-05-20T03:05:33.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="汇编入门"><a href="#汇编入门" class="headerlink" title="汇编入门"></a>汇编入门</h1><p>本文介绍在macOs下如何安装nasm以及在nasm下进行HelloWorld的编写</p><span id="more"></span><hr><h2 id="安装nasm"><a href="#安装nasm" class="headerlink" title="安装nasm"></a>安装nasm</h2><p>在终端中输入<code>brew install nasm</code>即可。默认的nasm版本太低无法写64位程序 呜呜！</p><ul><li>注：安装完成后输入命令nasm -v查看是否可以显示版本！可以显示版本就说明安装好了哦!</li></ul><p><img src="http://cdn.leafii.top/img/20220520110215.png" alt="安装成功" loading="lazy"></p><hr><h2 id="nasm的helloworld的编写"><a href="#nasm的helloworld的编写" class="headerlink" title="nasm的helloworld的编写"></a>nasm的helloworld的编写</h2><ol><li>编写以下代码(文件命名为helloworld.asm):</li></ol><pre class="language-nasm" data-language="nasm"><code class="language-nasm"><span class="token keyword">SECTION .data</span>   <span class="token label function">msg:</span> db <span class="token string">"hello world!"</span>, <span class="token number">0x0a</span><span class="token label function">len:</span> equ <span class="token operator">$</span><span class="token operator">-</span>msg  <span class="token keyword">SECTION .text</span><span class="token keyword">global _main</span>  <span class="token label function">kernel:</span>     syscall     ret <span class="token label function">_main:</span>     mov <span class="token register variable">rax</span>,<span class="token number">0x2000004</span>     mov <span class="token register variable">rdi</span>,<span class="token number">1</span>     mov <span class="token register variable">rsi</span>,msg     mov <span class="token register variable">rdx</span>,len     call kernel       mov <span class="token register variable">rax</span>,<span class="token number">0x2000001</span>     mov <span class="token register variable">rdi</span>,<span class="token number">0</span>     call kernel</code></pre><ol start="2"><li>保存后退出，进入iterm中该文件所在的目录，按ls确认当前文件是否在目录中</li></ol><p><img src="http://cdn.leafii.top/img/20220520110255.png" alt="确定文件" loading="lazy"></p><ol start="3"><li><p>输入以下命令生成helloworld.o文件：<code>nasm -f macho64 -o helloworld.o helloworld.asm</code></p><p><img src="http://cdn.leafii.top/img/20220520110333.png" alt="生成" loading="lazy"></p></li><li><p>输入以下命令生成helloworld可执行文件:<code>ld -o helloworld -e _main helloworld.o -lSystem</code></p></li></ol><p><img src="http://cdn.leafii.top/img/20220520110408.png" alt="生成可执行文件" loading="lazy"></p><ol start="5"><li>输入命令<code>./helloworld</code>运行可执行文件</li></ol><p><img src="http://cdn.leafii.top/img/20220520110441.png" alt="运行可执行文件" loading="lazy"></p><hr><p>参考链接：<a href="https://blog.csdn.net/u011987514/article/details/72615406">https://blog.csdn.net/u011987514/article/details/72615406</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;汇编入门&quot;&gt;&lt;a href=&quot;#汇编入门&quot; class=&quot;headerlink&quot; title=&quot;汇编入门&quot;&gt;&lt;/a&gt;汇编入门&lt;/h1&gt;&lt;p&gt;本文介绍在macOs下如何安装nasm以及在nasm下进行HelloWorld的编写&lt;/p&gt;</summary>
    
    
    
    
    <category term="nasm" scheme="tags/nasm/"/>
    
  </entry>
  
  <entry>
    <title>vim的配置及其使用</title>
    <link href="2021/04/27/vim%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/"/>
    <id>2021/04/27/vim%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/</id>
    <published>2021-04-27T07:35:24.000Z</published>
    <updated>2022-05-20T06:57:45.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vim的配置及其使用"><a href="#vim的配置及其使用" class="headerlink" title="vim的配置及其使用"></a>vim的配置及其使用</h1><p>本文将记录本人学习vim的一些笔记以及对自己mac上面的vim的一些配置。</p><span id="more"></span><hr><h2 id="vim教程"><a href="#vim教程" class="headerlink" title="vim教程"></a>vim教程</h2><p><code>vim 文件名</code> 进入vim (默认进入命令模式)</p><ul><li>输入<code>i</code> (it means insert)进入编辑模式(在当前字符前)</li><li>输入<code>a</code>(it means append)进入编辑模式（在当前字符后添加字符）</li><li>输入<code>shift+i </code>在行前插入</li><li>输入<code>shift+a</code> 在行尾插入</li><li>输入<code>o</code>在下一行进行插入</li><li>输入<code>shift + o</code> 在当前一行的上一行插入</li><li>按<code>esc</code>退出编辑模式</li></ul><p>退出编辑模式后，回到命令模式下</p><ul><li>按<code>w</code>(word)跳动到下一个单词</li><li>按<code>b</code>(back)跳动到上一个单词</li><li><code>control+f</code>(forward) 代表下一页（等同于pagedown）</li><li><code>control+b</code>(backward)代表上一页（等同于pageup）</li><li><code>数字+gg</code>跳转到指定行</li><li><code>xx+j/k</code>跳转到这一行的下&#x2F;上xx行 比如向上10行 就是10j，向下10行就是10k</li><li>命令输入错误可以按esc进行命令的清除</li><li><code>/word+回车</code>查找指定单词，按<code>n</code>查找符合条件的下一个 <code>shift+n</code>查找符合条件的上一个</li><li><code>?word+回车</code>查找指定单词，按<code>n</code>查找符合条件的上一个 <code>shift+n</code>查找符合条件的下一个</li><li><code>cc</code>剪切光标所在的一行 删除后自动进入编辑模式</li><li><code>c2c</code>连续剪切两行</li><li><code>p</code>粘贴命令 </li><li><code>u</code>（undo）恢复上一步操作</li></ul><p>按：就可以开始输入指令</p><ul><li><code>：w</code> 保存</li><li><code>：q</code> 退出</li><li></li></ul><hr><p>vim中的方向键</p><p>hjkl means 左下上右</p><hr><p>Visual模式： <code>v</code> 这时可以通过hjkl移动光标选择文本，再使用c（剪切）yy（复制）p（粘贴）</p><p>808</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;vim的配置及其使用&quot;&gt;&lt;a href=&quot;#vim的配置及其使用&quot; class=&quot;headerlink&quot; title=&quot;vim的配置及其使用&quot;&gt;&lt;/a&gt;vim的配置及其使用&lt;/h1&gt;&lt;p&gt;本文将记录本人学习vim的一些笔记以及对自己mac上面的vim的一些配置。&lt;/p&gt;</summary>
    
    
    
    
    <category term="vim" scheme="tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-1021-删除最外层的括号</title>
    <link href="2021/03/14/leetcode-1021-%E5%88%A0%E9%99%A4%E6%9C%80%E5%A4%96%E5%B1%82%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <id>2021/03/14/leetcode-1021-%E5%88%A0%E9%99%A4%E6%9C%80%E5%A4%96%E5%B1%82%E7%9A%84%E6%8B%AC%E5%8F%B7/</id>
    <published>2021-03-13T18:07:25.000Z</published>
    <updated>2022-05-20T08:01:43.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-1021-删除最外层的括号"><a href="#leetcode-1021-删除最外层的括号" class="headerlink" title="leetcode:1021.删除最外层的括号"></a>leetcode:1021.删除最外层的括号</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>有效括号字符串为空 <code>(&quot;&quot;)</code>、<code>&quot;(&quot; + A + &quot;)&quot; </code>或 <code>A + B</code>，其中 <code>A </code>和<code>B</code>都是有效的括号字符串，<code>+</code> 代表字符串的连接。例如，<code>&quot;&quot;</code>，<code>&quot;()&quot;</code>，<code>&quot;(())()&quot;</code> 和 <code>&quot;(()(()))&quot;</code> 都是有效的括号字符串。</p><p>如果有效字符串<code> S</code> 非空，且不存在将其拆分为 <code>S = A+B </code>的方法，我们称其为<strong>原语（primitive）</strong>，其中 <code>A </code>和 <code>B</code> 都是非空有效括号字符串。</p><p>给出一个非空有效字符串 <code>S</code>，考虑将其进行原语化分解，使得：<code>S = P_1 + P_2 + ... + P_k</code>，其中 <code>P_i </code>是有效括号字符串原语。</p><p>对<code> S</code> 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回<code>S</code>。</p><span id="more"></span><ul><li>示例1：</li></ul><pre class="language-none"><code class="language-none">输入：&quot;(()())(())&quot;输出：&quot;()()()&quot;解释：输入字符串为 &quot;(()())(())&quot;，原语化分解得到 &quot;(()())&quot; + &quot;(())&quot;，删除每个部分中的最外层括号后得到 &quot;()()&quot; + &quot;()&quot; &#x3D; &quot;()()()&quot;。</code></pre><ul><li>示例2:</li></ul><pre class="language-none"><code class="language-none">输入：&quot;(()())(())(()(()))&quot;输出：&quot;()()()()(())&quot;解释：输入字符串为 &quot;(()())(())(()(()))&quot;，原语化分解得到 &quot;(()())&quot; + &quot;(())&quot; + &quot;(()(()))&quot;，删除每个部分中的最外层括号后得到 &quot;()()&quot; + &quot;()&quot; + &quot;()(())&quot; &#x3D; &quot;()()()()(())&quot;。</code></pre><ul><li>示例3:</li></ul><pre class="language-none"><code class="language-none">输入：&quot;()()&quot;输出：&quot;&quot;解释：输入字符串为 &quot;()()&quot;，原语化分解得到 &quot;()&quot; + &quot;()&quot;，删除每个部分中的最外层括号后得到 &quot;&quot; + &quot;&quot; &#x3D; &quot;&quot;。</code></pre><p><small>提示：</small></p><ol><li><code>S.length &lt;= 10000</code></li><li><code>S[i]</code>为<code>(</code>或<code>)</code></li><li><code>S</code>是一个有效括号字符串</li></ol><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><ol><li>简洁的Java实现</li></ol><p>主要思路：定义level作为层数，初始化level为0，遍历输入的String对象的每个字符，如果遇到’(‘，就level++，如果遇到’)’就level–，如果level&gt;&#x3D;1，则在要输出的字符串末尾加上被遍历的字符，代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">removeOuterParentheses</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">S</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> outputStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> <span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                level<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>level <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                outputStr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">'('</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                level<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> outputStr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>作者：huaouo</p><ol start="2"><li>借助栈原语化分解后删除最外层括号——Java</li></ol><p>主要思路：遍历字符串，遇到左括号就入栈，遇到右括号就出栈，每次栈空的时候，都说明找到了一个原语，记录下每个原语的起始位置和结束位置，取原字符串在原语的起始位置+1到原语的结束位置的子串便得到原语删除了最外层括号的字符串，拼接，即可解出答案。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">removeOuterParentheses</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">S</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 初始化原语的起始位置</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 初始化原语的结束位置</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// 标志每个原语</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">'('</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 遇到左括号，入栈</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 遇到的第一个左括号，是原语的开始位置，记录下原语开始位置</span>                    start <span class="token operator">=</span> i<span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">')'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 遇到右括号，出栈</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 当栈空的时候，找到了一个完整的原语</span>                    end <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">// 记录下结束位置</span>                    ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 去掉原语的最外层括号，并追加到答案中</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// 置标志为false，往后接着找下一个原语</span>                    start <span class="token operator">=</span> end<span class="token punctuation">;</span><span class="token comment">// 往后找，再次初始化原语开始位置</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>作者：zi-mo-10</p><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-outermost-parentheses">https://leetcode-cn.com/problems/remove-outermost-parentheses</a></p><p>链接：<a href="https://leetcode-cn.com/problems/remove-outermost-parentheses/solution/jian-ji-de-java-shi-xian-by-huaouo/">https://leetcode-cn.com/problems/remove-outermost-parentheses/solution/jian-ji-de-java-shi-xian-by-huaouo/</a></p><p>链接：<a href="https://leetcode-cn.com/problems/remove-outermost-parentheses/solution/chao-xiang-xi-ti-jie-si-lu-jie-zhu-zhan-yuan-yu-hu/">https://leetcode-cn.com/problems/remove-outermost-parentheses/solution/chao-xiang-xi-ti-jie-si-lu-jie-zhu-zhan-yuan-yu-hu/</a></p><p>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;leetcode-1021-删除最外层的括号&quot;&gt;&lt;a href=&quot;#leetcode-1021-删除最外层的括号&quot; class=&quot;headerlink&quot; title=&quot;leetcode:1021.删除最外层的括号&quot;&gt;&lt;/a&gt;leetcode:1021.删除最外层的括号&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;有效括号字符串为空 &lt;code&gt;(&amp;quot;&amp;quot;)&lt;/code&gt;、&lt;code&gt;&amp;quot;(&amp;quot; + A + &amp;quot;)&amp;quot; &lt;/code&gt;或 &lt;code&gt;A + B&lt;/code&gt;，其中 &lt;code&gt;A &lt;/code&gt;和&lt;code&gt;B&lt;/code&gt;都是有效的括号字符串，&lt;code&gt;+&lt;/code&gt; 代表字符串的连接。例如，&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;，&lt;code&gt;&amp;quot;()&amp;quot;&lt;/code&gt;，&lt;code&gt;&amp;quot;(())()&amp;quot;&lt;/code&gt; 和 &lt;code&gt;&amp;quot;(()(()))&amp;quot;&lt;/code&gt; 都是有效的括号字符串。&lt;/p&gt;
&lt;p&gt;如果有效字符串&lt;code&gt; S&lt;/code&gt; 非空，且不存在将其拆分为 &lt;code&gt;S = A+B &lt;/code&gt;的方法，我们称其为&lt;strong&gt;原语（primitive）&lt;/strong&gt;，其中 &lt;code&gt;A &lt;/code&gt;和 &lt;code&gt;B&lt;/code&gt; 都是非空有效括号字符串。&lt;/p&gt;
&lt;p&gt;给出一个非空有效字符串 &lt;code&gt;S&lt;/code&gt;，考虑将其进行原语化分解，使得：&lt;code&gt;S = P_1 + P_2 + ... + P_k&lt;/code&gt;，其中 &lt;code&gt;P_i &lt;/code&gt;是有效括号字符串原语。&lt;/p&gt;
&lt;p&gt;对&lt;code&gt; S&lt;/code&gt; 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回&lt;code&gt;S&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="leetcode" scheme="tags/leetcode/"/>
    
    <category term="算法" scheme="tags/算法/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:1.两数之和</title>
    <link href="2021/03/13/leetcode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>2021/03/13/leetcode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2021-03-12T16:45:23.000Z</published>
    <updated>2022-05-20T10:46:24.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-1-两数之和"><a href="#leetcode-1-两数之和" class="headerlink" title="leetcode:1.两数之和"></a>leetcode:1.两数之和</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><span id="more"></span><p>你可以按任意顺序返回答案。</p><ul><li>示例1:</li></ul><pre class="language-none"><code class="language-none">输入：nums &#x3D; [2,7,11,15], target &#x3D; 9输出：[0,1]解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。</code></pre><ul><li>示例2</li></ul><pre class="language-none"><code class="language-none">输入：nums &#x3D; [3,2,4], target &#x3D; 6输出：[1,2]</code></pre><ul><li>示例3</li></ul><pre class="language-none"><code class="language-none">输入：nums &#x3D; [3,3], target &#x3D; 6输出：[0,1]</code></pre><p><small>提示：</small></p><ul><li><code>2 &lt;= nums.length &lt;= 10^3</code></li><li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li><li><code>-10^9 &lt;= target &lt;= 10^9</code></li></ul><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><ol><li>暴力解法</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                    <span class="token keyword">return</span> a<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>哈希表解法：</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> hashtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hashtable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>hashtable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*作者：LeetCode-Solution链接：https://leetcode-cn.com/problems/two-sum/solution/liang-shu-zhi-he-by-leetcode-solution/来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。*/</span></code></pre><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum">https://leetcode-cn.com/problems/two-sum</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;leetcode-1-两数之和&quot;&gt;&lt;a href=&quot;#leetcode-1-两数之和&quot; class=&quot;headerlink&quot; title=&quot;leetcode:1.两数之和&quot;&gt;&lt;/a&gt;leetcode:1.两数之和&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。&lt;/p&gt;
&lt;p&gt;你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。&lt;/p&gt;</summary>
    
    
    
    
    <category term="leetcode" scheme="tags/leetcode/"/>
    
    <category term="算法" scheme="tags/算法/"/>
    
  </entry>
  
  <entry>
    <title>IDEA2020版如何创建Servlet的javaWeb项目</title>
    <link href="2021/03/05/IDEA2020%E7%89%88%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BAServlet%E7%9A%84javaWeb%E9%A1%B9%E7%9B%AE/"/>
    <id>2021/03/05/IDEA2020%E7%89%88%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BAServlet%E7%9A%84javaWeb%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-03-05T05:01:33.000Z</published>
    <updated>2022-05-20T06:19:47.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA2020版如何创建Servlet的javaWeb项目"><a href="#IDEA2020版如何创建Servlet的javaWeb项目" class="headerlink" title="IDEA2020版如何创建Servlet的javaWeb项目"></a>IDEA2020版如何创建Servlet的javaWeb项目</h1><p>2020款idea很多地方都变了，昨天在创建javaweb项目中发现已经不会创建了，所以我写这篇笔记记录一下QAQ</p><span id="more"></span><h2 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h2><p>主要思路：先创建空白项目，然后添加框架支持。</p><ol><li>在idea中点击file-&gt;new-&gt;Project&#x2F;Module；</li></ol><p><img src="http://cdn.leafii.top/img/20220520110725.png" loading="lazy"></p><ol start="2"><li>在选中Java的情况下，直接点击Next；</li></ol><p><img src="http://cdn.leafii.top/img/20220520110904.png" loading="lazy"></p><ol start="3"><li>然后再点击下一步；</li></ol><p><img src="http://cdn.leafii.top/img/20220520110921.png" loading="lazy"></p><ol start="4"><li>填写你的项目名称和位置，点击finish;</li></ol><p><img src="http://cdn.leafii.top/img/20220520110957.png" loading="lazy"></p><ol start="5"><li><p>此时的工程目录结构如下：，我们在工程的文件夹上鼠标右键-&gt;add FrameWork Support ；<img src="http://cdn.leafii.top/img/20220520111035.png" loading="lazy"><img src="http://cdn.leafii.top/img/20220520111157.png" loading="lazy"></p></li><li><p>在新的页面勾选Web Application，并点击OK；<img src="http://cdn.leafii.top/img/20220520114704.png" loading="lazy"></p></li><li><p>在WEB-INF中增加 classes 和 lib<img src="http://cdn.leafii.top/img/20220520141823.png" loading="lazy"></p></li><li><p>进入Project Structure配置classes和lib两个目录<img src="http://cdn.leafii.top/img/20220520141844.png" loading="lazy"></p></li><li><p>添加TomCat到Idea中，点击AddConfiguration，点击新窗口左上角的+号，选择Tomcat下的local，配置好tomcat的路径，然后在deployment标签下添加你的项目的exploded包，点击OK;<img src="http://cdn.leafii.top/img/20220520141902.png" loading="lazy"></p></li><li><p>配置ServletApi到工程的运行库里：点击File-&gt;Project Structure,点击Modules标签，点击下方的+号，选择Library…，然后选择你的相应的Tomcat，点击ok，就可以添加ServletApi到你的项目中。<img src="http://cdn.leafii.top/img/20220520141920.png" loading="lazy"></p></li><li><p>新建一个Servlet类，这个就不截图了奥直接上代码</p></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了Servlet哦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="12"><li>对应的web.xml文件</li></ol><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>top.leafii.servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><ol start="13"><li>调用了HelloServlet后<img src="http://cdn.leafii.top/img/20220520141942.png" loading="lazy"></li></ol><p>可以看到 已经完成了 可以开始你的javaWeb之旅了</p><hr><p>参考链接：<a href="https://blog.csdn.net/gaoqingliang521/article/details/108677301">IntelliJ IDEA创建Servlet最新方法 Idea版本2020.2.2以及IntelliJ IDEA创建Servlet 404问题（超详细）_gaoqingliang521的专栏-CSDN博客</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;IDEA2020版如何创建Servlet的javaWeb项目&quot;&gt;&lt;a href=&quot;#IDEA2020版如何创建Servlet的javaWeb项目&quot; class=&quot;headerlink&quot; title=&quot;IDEA2020版如何创建Servlet的javaWeb项目&quot;&gt;&lt;/a&gt;IDEA2020版如何创建Servlet的javaWeb项目&lt;/h1&gt;&lt;p&gt;2020款idea很多地方都变了，昨天在创建javaweb项目中发现已经不会创建了，所以我写这篇笔记记录一下QAQ&lt;/p&gt;</summary>
    
    
    
    
    <category term="javaWeb" scheme="tags/javaWeb/"/>
    
  </entry>
  
  <entry>
    <title>常用正则表达式</title>
    <link href="2021/03/03/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>2021/03/03/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-03-03T08:49:46.000Z</published>
    <updated>2022-05-20T06:58:41.719Z</updated>
    
    <content type="html"><![CDATA[<p>很多不太懂正则的朋友，在遇到需要用正则校验数据时，往往是在网上去找很久，结果找来的还是不很符合要求。所以我最近把开发中常用的一些正则表达式整理了一下，在这里分享一下。给自己留个底，也给朋友们做个参考。</p><span id="more"></span><h2 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h2><pre class="language-none"><code class="language-none">1. 数字：^[0-9]*$2. n位的数字：^\d&#123;n&#125;$3. 至少n位的数字：^\d&#123;n,&#125;$4. m-n位的数字：^\d&#123;m,n&#125;$5. 零和非零开头的数字：^(0|[1-9][0-9]*)$6. 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$7. 带1-2位小数的正数或负数：^(\-)?\d+(\.\d&#123;1,2&#125;)?$8. 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$9. 有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$10. 有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$11. 非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\+?[1-9][0-9]*$12. 非零的负整数：^\-[1-9][]0-9&quot;*$ 或 ^-[1-9]\d*$13. 非负整数：^\d+$ 或 ^[1-9]\d*|0$14. 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$15. 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$16. 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$17. 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$18. 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$19. 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></pre><h2 id="二、校验字符的表达式"><a href="#二、校验字符的表达式" class="headerlink" title="二、校验字符的表达式"></a>二、校验字符的表达式</h2> <pre class="language-none"><code class="language-none">1. 汉字：^[\u4e00-\u9fa5]&#123;0,&#125;$2. 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$3. 长度为3-20的所有字符：^.&#123;3,20&#125;$4. 由26个英文字母组成的字符串：^[A-Za-z]+$5. 由26个大写英文字母组成的字符串：^[A-Z]+$6. 由26个小写英文字母组成的字符串：^[a-z]+$7. 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$8. 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;3,20&#125;$9. 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$10. 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;$11. 可以输入含有^%&amp;&#39;,;&#x3D;?$\&quot;等字符：[^%&amp;&#39;,;&#x3D;?$\x22]+ 12. 禁止输入含有~的字符：[^~\x22]+</code></pre><h2 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h2> <pre class="language-none"><code class="language-none">1. Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$2. 域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(&#x2F;.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+&#x2F;.?3. InternetURL：[a-zA-z]+:&#x2F;&#x2F;[^\s]* 或 ^http:&#x2F;&#x2F;([\w-]+\.)+[\w-]+(&#x2F;[\w-.&#x2F;?%&amp;&#x3D;]*)?$4. 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$5. 电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$6. 国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;7. 身份证号(15位、18位数字)：^\d&#123;15&#125;|\d&#123;18&#125;$ 8. 短身份证号码(数字、字母x结尾)：^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$ 9. 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$ 10. 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$11. 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?&#x3D;.*\d)(?&#x3D;.*[a-z])(?&#x3D;.*[A-Z]).&#123;8,10&#125;$ 12. 日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;13. 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$14. 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$15. 钱的输入格式： 16. 1.有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^[1-9][0-9]*$ 17. 2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ 18. 3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ 19. 4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ 20. 5.必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$ 21. 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$ 22. 7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$ 23 8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$ 24. 备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里 25. xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$26. 中文字符的正则表达式：[\u4e00-\u9fa5] 27. 双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1)) 28. 空白行的正则表达式：\n\s*\r (可以用来删除空白行) 29. HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;&#x2F;\1&gt;|&lt;.*? &#x2F;&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力) 30. 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式) 31. 腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始)32. 中国邮政编码：[1-9]\d&#123;5&#125;(?!\d) (中国邮政编码为6位数字)33. IP地址：\d+\.\d+\.\d+\.\d+ (提取IP地址时有用)34. IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</code></pre><hr><p>原文：<a href="http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html">http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;很多不太懂正则的朋友，在遇到需要用正则校验数据时，往往是在网上去找很久，结果找来的还是不很符合要求。所以我最近把开发中常用的一些正则表达式整理了一下，在这里分享一下。给自己留个底，也给朋友们做个参考。&lt;/p&gt;</summary>
    
    
    
    
    <category term="正则表达式" scheme="tags/正则表达式/"/>
    
  </entry>
  
  <entry>
    <title>Go语言の排序和查找</title>
    <link href="2021/01/28/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E6%8E%92%E5%BA%8F%E5%92%8C%E6%9F%A5%E6%89%BE/"/>
    <id>2021/01/28/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E6%8E%92%E5%BA%8F%E5%92%8C%E6%9F%A5%E6%89%BE/</id>
    <published>2021-01-28T09:32:11.000Z</published>
    <updated>2022-05-20T07:10:14.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go语言の排序和查找"><a href="#Go语言の排序和查找" class="headerlink" title="Go语言の排序和查找"></a>Go语言の排序和查找</h1><ul><li>本文主要讲Go语言的以下知识点<ul><li>冒牌排序</li><li>顺序查找</li><li>二分法查找</li><li>二维数组</li></ul></li></ul><span id="more"></span><h2 id="排序的基本介绍"><a href="#排序的基本介绍" class="headerlink" title="排序的基本介绍"></a>排序的基本介绍</h2><p>排序是将一组数据，依指定的顺序进行排列的过程。</p><p>排序的分类：</p><ol><li><p>内部排序：</p><p>指将需要处理的所有数据都加载到内部存储器中进行排序。包括（交换式排序法，选择式排序法和插入式排序法）；</p></li><li><p>外部排序法：</p><p>数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。包括（合并排序法和直接合并排序法）。</p></li></ol><p>冒泡排序（Bubble Sorting）的基本思想是：通过对待排序序列从后向前（从下标较大的元素开始），依次比较相邻元素的排序码，若发现逆序则交换，使排序码较小的元素逐渐从后部移向前部（从下标较大的单元移向下标较小的单元），就像水底下的气泡一样逐渐向上冒。</p><p>因为排序的过程中，各元素不断接近自己的位置，如果一趟比较下来没有进行过交换，就说明序列有序，因此要在排序过程中设置一个标志flag判断元素是否进行过交换。从而减少不必要的比较（优化）。</p><h2 id="冒泡排序的思路分析"><a href="#冒泡排序的思路分析" class="headerlink" title="冒泡排序的思路分析"></a>冒泡排序的思路分析</h2><p><img src="http://cdn.leafii.top/img/20220520150853.png" loading="lazy"></p><h2 id="冒泡排序实现"><a href="#冒泡排序实现" class="headerlink" title="冒泡排序实现"></a>冒泡排序实现</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span>arr <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"排序前arr="</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>temp <span class="token operator">:=</span> <span class="token number">0</span><span class="token comment">//用于交换的临时变量</span><span class="token comment">//冒泡排序--一步一步推导出来的</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token comment">//交换</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"排序后arr="</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//定义数组</span>arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">&#125;</span><span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main arr="</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token comment">//有序的哦</span><span class="token punctuation">&#125;</span></code></pre><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><p>需要牢记冒泡排序的代码！能默写出来才行</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><ul><li><p>介绍</p><p>在Golang中，我们常用的查找有两种：</p><ol><li>顺序查找</li><li>二分查找（数组有序）</li></ol></li><li><p>案例演示：</p><ol><li>有一个数列：白眉鹰王、金毛狮王、紫衫龙王、青翼蝠王</li></ol><p>猜数游戏：从键盘中任意输入一个名称，判断数列中是否包含此名称【使用顺序查找】</p><p>代码：</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>names <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token string">"白眉鹰王"</span><span class="token punctuation">,</span><span class="token string">"金毛狮王"</span><span class="token punctuation">,</span><span class="token string">"紫衫龙王"</span><span class="token punctuation">,</span><span class="token string">"青翼蝠王"</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> heroName <span class="token operator">=</span> <span class="token string">""</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入要查找的人名..."</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heroName<span class="token punctuation">)</span><span class="token comment">//按顺序查找 第一种方式</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> heroName <span class="token operator">==</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"找到%v，下标为%v \n"</span><span class="token punctuation">,</span> heroName<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"没有找到%v \n"</span><span class="token punctuation">,</span> heroName<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//顺序查找 第二种方式 （推荐）</span>index <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> heroName <span class="token operator">==</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>index <span class="token operator">=</span> i <span class="token comment">//赋值</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> index <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"找到%v, 下标为%v\n"</span><span class="token punctuation">,</span> heroName<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"没有找到"</span><span class="token punctuation">,</span>heroName<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter08&#x2F;demo02&#x2F;main  go run .&#x2F;main.go请输入要查找的人名...金毛狮王找到金毛狮王，下标为1 找到金毛狮王, 下标为1</code></pre><ol start="2"><li>请对一个有序数组进行二分查找 {1,8,10,89,1000,1234},输入一个数看看该数组是否存在此数，并且求出下标，如果没有就提示“没有这个数”。【使用到递归】</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token comment">//"time"</span><span class="token comment">//"math/rand"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">BinaryFind</span><span class="token punctuation">(</span>arr <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span>leftIndex <span class="token builtin">int</span><span class="token punctuation">,</span>rightIndex <span class="token builtin">int</span><span class="token punctuation">,</span>findVal <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> leftIndex <span class="token operator">></span> rightIndex <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"找不到哦找不到哦"</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">&#125;</span>middle <span class="token operator">:=</span> <span class="token punctuation">(</span>leftIndex <span class="token operator">+</span> rightIndex<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">></span> findVal <span class="token punctuation">&#123;</span><span class="token function">BinaryFind</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> leftIndex<span class="token punctuation">,</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> findVal<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&lt;</span> findVal <span class="token punctuation">&#123;</span><span class="token function">BinaryFind</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rightIndex<span class="token punctuation">,</span> findVal<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"这个数字的下标位置在"</span><span class="token punctuation">,</span>middle<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> arrs <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入一个数："</span><span class="token punctuation">)</span><span class="token keyword">var</span> num <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token function">BinaryFind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arrs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>arrs<span class="token punctuation">)</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter08&#x2F;demo03&#x2F;main  go run .&#x2F;main.go请输入一个数：1001找不到哦找不到哦 ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter08&#x2F;demo03&#x2F;main  go run .&#x2F;main.go请输入一个数：1000这个数字的下标位置在 4</code></pre><h2 id="二维数组的介绍"><a href="#二维数组的介绍" class="headerlink" title="二维数组的介绍"></a>二维数组的介绍</h2><p>如你所见 就是二维数组罢了</p><h2 id="二维数组应用场景"><a href="#二维数组应用场景" class="headerlink" title="二维数组应用场景"></a>二维数组应用场景</h2><p>比如开发了一个五子棋游戏，棋盘就需要二维数组来表示。如图<img src="http://cdn.leafii.top/img/20220520150929.png" loading="lazy"></p><h2 id="二维数组快速入门"><a href="#二维数组快速入门" class="headerlink" title="二维数组快速入门"></a>二维数组快速入门</h2><p>快速入门案例：</p><ul><li>请用二维数组输出如下图形</li></ul><pre class="language-none"><code class="language-none">0 0 0 0 0 00 0 1 0 0 00 2 0 3 0 00 0 0 0 0 0</code></pre><ul><li>代码演示</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">int</span>  arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>  arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v "</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="使用方式1-先声明-x2F-定义，再赋值"><a href="#使用方式1-先声明-x2F-定义，再赋值" class="headerlink" title="使用方式1:先声明&#x2F;定义，再赋值"></a>使用方式1:先声明&#x2F;定义，再赋值</h2><ul><li>语法 <code>var 数组名 [大小][大小]类型</code></li><li>比如 <code>var arr [2][3]int</code>,再赋值</li><li>使用演示</li><li>二维数组在内存的存在形式（重点）</li></ul><p><img src="http://cdn.leafii.top/img/20220520150952.png" loading="lazy"></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> arr2 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment">// 以这个为例来分析arr2在内存的布局！！</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"arr2[0]的地址%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"arr2[1]的地址%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"arr2[0][0]的地址%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"arr2[1][0]的地址%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter08&#x2F;demo04&#x2F;main  go run .&#x2F;main.go[[0 0 0] [0 10 0]]arr2[0]的地址0xc0000ac030arr2[1]的地址0xc0000ac048arr2[0][0]的地址0xc0000ac030arr2[1][0]的地址0xc0000ac048</code></pre><h2 id="使用方式2-直接初始化"><a href="#使用方式2-直接初始化" class="headerlink" title="使用方式2:直接初始化"></a>使用方式2:直接初始化</h2><ul><li>声明：<code>var 数组名 [大小][大小]类型 = [大小][大小]类型&#123;&#123;初值..&#125;,&#123;初值..&#125;&#125;</code></li><li>赋值（有默认值，比如int类型的就是0）</li><li>使用演示</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> arr3 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"arr3="</span><span class="token punctuation">,</span>arr3<span class="token punctuation">)</span></code></pre><pre class="language-none"><code class="language-none">arr3&#x3D; [[1 2 3] [4 5 6]]</code></pre><ul><li>说明：二维数组在声明&#x2F;定义时也对应有四种写法[和一维数组类似]</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> 数组名 <span class="token punctuation">[</span>大小<span class="token punctuation">]</span><span class="token punctuation">[</span>大小<span class="token punctuation">]</span>类型 <span class="token operator">=</span> <span class="token punctuation">[</span>大小<span class="token punctuation">]</span><span class="token punctuation">[</span>大小<span class="token punctuation">]</span>类型<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> 数组名 <span class="token punctuation">[</span>大小<span class="token punctuation">]</span><span class="token punctuation">[</span>大小<span class="token punctuation">]</span>类型 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">[</span>大小<span class="token punctuation">]</span>类型<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>初值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>初值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> 数组名 <span class="token operator">=</span> <span class="token punctuation">[</span>大小<span class="token punctuation">]</span><span class="token punctuation">[</span>大小<span class="token punctuation">]</span>类型<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>初值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>初值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> 数组名 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">[</span>大小<span class="token punctuation">]</span>类型<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>初值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>初值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="二维数组的遍历"><a href="#二维数组的遍历" class="headerlink" title="二维数组的遍历"></a>二维数组的遍历</h2><ul><li>双层for循环完成遍历</li><li>for-range方式完成遍历</li></ul><p><strong>实例演示：</strong></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token comment">//for循环遍历</span>  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>arr3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"arr3[%v][%v] = %v\t"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> arr3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//for-range遍历二维数组</span>  <span class="token keyword">for</span> i<span class="token punctuation">,</span> v1 <span class="token operator">:=</span> <span class="token keyword">range</span> arr3 <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> j<span class="token punctuation">,</span> v2 <span class="token operator">:=</span> <span class="token keyword">range</span> v1 <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"arr3[%v][%v] = %v \t"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> v2<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter08&#x2F;demo05&#x2F;main  go run .&#x2F;main.goarr3[0][0] &#x3D; 1  arr3[0][1] &#x3D; 2  arr3[0][2] &#x3D; 3arr3[1][0] &#x3D; 4  arr3[1][1] &#x3D; 5  arr3[1][2] &#x3D; 6arr3[0][0] &#x3D; 1  arr3[0][1] &#x3D; 2  arr3[0][2] &#x3D; 3 arr3[1][0] &#x3D; 4  arr3[1][1] &#x3D; 5  arr3[1][2] &#x3D; 6 </code></pre><h2 id="二维数组的应用案例"><a href="#二维数组的应用案例" class="headerlink" title="二维数组的应用案例"></a>二维数组的应用案例</h2><ul><li><p>要求如下：</p><p>定义二维数组，用于保存三个班，每个班五名同学成绩，并求出每个班级平均分，以及所有班级平均分</p></li><li><p>代码</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> scores <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">float64</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请按照提示输入成绩："</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"请输入%v班的第%v个成绩："</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>      fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//计算各班平均分</span>  totalSum <span class="token operator">:=</span> <span class="token number">0.0</span>  count <span class="token operator">:=</span> <span class="token number">0</span>  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    sum <span class="token operator">:=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>      sum <span class="token operator">+=</span> scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>      count<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>    totalSum <span class="token operator">+=</span> sum    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"第%d个班的总分为%v,平均分为%v \n"</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> sum <span class="token operator">/</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"所有人总分为%v,平均分为%v\n"</span><span class="token punctuation">,</span>totalSum<span class="token punctuation">,</span> totalSum <span class="token operator">/</span> <span class="token function">float64</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter08&#x2F;demo06&#x2F;main  go run .&#x2F;main.go请按照提示输入成绩：请输入1班的第1个成绩：70请输入1班的第2个成绩：80请输入1班的第3个成绩：60.5请输入1班的第4个成绩：99请输入1班的第5个成绩：100请输入2班的第1个成绩：78请输入2班的第2个成绩：97请输入2班的第3个成绩：87请输入2班的第4个成绩：67请输入2班的第5个成绩：66请输入3班的第1个成绩：99请输入3班的第2个成绩：56请输入3班的第3个成绩：87请输入3班的第4个成绩：75请输入3班的第5个成绩：70.4第1个班的总分为409.5,平均分为81.9 第2个班的总分为395,平均分为79 第3个班的总分为387.4,平均分为77.47999999999999 所有人总分为1191.9,平均分为79.46000000000001</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Go语言の排序和查找&quot;&gt;&lt;a href=&quot;#Go语言の排序和查找&quot; class=&quot;headerlink&quot; title=&quot;Go语言の排序和查找&quot;&gt;&lt;/a&gt;Go语言の排序和查找&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;本文主要讲Go语言的以下知识点&lt;ul&gt;
&lt;li&gt;冒牌排序&lt;/li&gt;
&lt;li&gt;顺序查找&lt;/li&gt;
&lt;li&gt;二分法查找&lt;/li&gt;
&lt;li&gt;二维数组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Go" scheme="tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言の数组与切片</title>
    <link href="2021/01/25/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E6%95%B0%E7%BB%84%E4%B8%8E%E5%88%87%E7%89%87/"/>
    <id>2021/01/25/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E6%95%B0%E7%BB%84%E4%B8%8E%E5%88%87%E7%89%87/</id>
    <published>2021-01-25T05:34:21.000Z</published>
    <updated>2022-05-20T07:14:55.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go语言の数组与切片"><a href="#Go语言の数组与切片" class="headerlink" title="Go语言の数组与切片"></a>Go语言の数组与切片</h1><ul><li>本文章主要讲Go语言的数组与切片</li></ul><span id="more"></span><h2 id="为什么需要数组"><a href="#为什么需要数组" class="headerlink" title="为什么需要数组"></a>为什么需要数组</h2><ul><li><p>问题</p><p>一个养鸡场有 6 只鸡，它们的体重分别是 3kg,5kg,1kg,3.4kg,2kg,50kg 。请问这六只鸡的总体重是多少?平均体重是多少? 请你编一个程序。&#x3D;》数组</p></li><li><p>使用传统方法来解决</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>hen1 <span class="token operator">:=</span> <span class="token number">3.0</span>hen2 <span class="token operator">:=</span> <span class="token number">5.0</span>hen3 <span class="token operator">:=</span> <span class="token number">1.0</span>hen4 <span class="token operator">:=</span> <span class="token number">3.4</span>hen5 <span class="token operator">:=</span> <span class="token number">2.0</span>hen6 <span class="token operator">:=</span> <span class="token number">50.0</span>totalWeight <span class="token operator">:=</span> hen1 <span class="token operator">+</span> hen2 <span class="token operator">+</span> hen3 <span class="token operator">+</span> hen4 <span class="token operator">+</span> hen5 <span class="token operator">+</span> hen6avgWeight <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span> totalWeight <span class="token operator">/</span> <span class="token number">6</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"totalWeight = %v,avgWeight = %v \n"</span><span class="token punctuation">,</span> totalWeight<span class="token punctuation">,</span> avgWeight<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">totalWeight &#x3D; 64.4,avgWeight &#x3D; 10.73 </code></pre><p><strong>说明：</strong></p><ol><li>使用传统方法不利于数据的管理和维护</li><li>传统的方法不够灵活，因此我们需要引出新的数据类型：数组</li></ol></li></ul><h2 id="数组介绍"><a href="#数组介绍" class="headerlink" title="数组介绍"></a>数组介绍</h2><p>​    数组可以存放多个同一类型数据。数组也是一种数据类型，在 Go 中，数组是值类型。</p><h2 id="数组的快速入门"><a href="#数组的快速入门" class="headerlink" title="数组的快速入门"></a>数组的快速入门</h2><p>我们使用数组的方法来解决养鸡场的问题</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> hens <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token builtin">float64</span>hens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3.0</span>hens<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5.0</span>hens<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0</span>hens<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3.4</span>hens<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2.0</span>hens<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50.0</span>hens<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">150.0</span>totalWeight <span class="token operator">:=</span> <span class="token number">0.0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>hens<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>totalWeight <span class="token operator">+=</span> hens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">&#125;</span>avgWeight <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span> totalWeight <span class="token operator">/</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>hens<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"totalWeight = %v,avgWeight = %v \n"</span><span class="token punctuation">,</span> totalWeight<span class="token punctuation">,</span> avgWeight<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">totalWeight &#x3D; 214.4,avgWeight &#x3D; 30.63 </code></pre><p>​    <strong>说明：</strong></p><pre><code>1. 使用数组来解决问题，程序的可维护性增加2. 方法代码更加清晰，也容易扩展</code></pre><h2 id="数组定义和内存布局"><a href="#数组定义和内存布局" class="headerlink" title="数组定义和内存布局"></a>数组定义和内存布局</h2><ul><li><p>定义</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> 数组名 <span class="token punctuation">[</span>数组大小<span class="token punctuation">]</span>数据类型<span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token comment">//赋初值</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span> <span class="token comment">//......</span></code></pre></li><li><p>数组在内存布局（重要）</p><p><img src="http://cdn.leafii.top/img/20220520151438.png" loading="lazy"></p><ul><li>对上图的总结：</li></ul><ol><li>数组的地址可以通过数组名来获取 <code>&amp;intArr</code></li><li>数组的第一个元素的地址，就是数组的首地址</li><li>数组的各个元素的地址间隔是依据数组的类型决定，比如 <code>int64-&gt;8 int32-&gt;4...</code></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> intArr <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment">// int占8个字节</span><span class="token comment">//当我们定义完数组后，其实数组的各个元素有默认值 0</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>intArr<span class="token punctuation">)</span>intArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>intArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span>intArr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>intArr<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"intArr的地址=%p intArr[0]的地址=%p intArr[1]的地址=%p intArr[2]的地址=%p \n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>intArr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>intArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>intArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>intArr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go[0 0 0][10 20 30]intArr的地址&#x3D;0xc0000b8000 intArr[0]的地址&#x3D;0xc0000b8000 intArr[1]的地址&#x3D;0xc0000b8008 intArr[2]的地址&#x3D;0xc0000b8010 </code></pre><h2 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h2><ul><li>访问数组元素</li></ul><p><strong>数组名[下标]</strong> 比如：你要使用a数组的第三个元素 a[2]</p><ul><li>快速入门案例</li></ul><p>从终端循环输入5个成绩，保存到float64数组，并输出。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> score <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"请输入第%d个元素的值\n"</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//变量数组打印</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"score[%d]=%v"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go请输入第1个元素的值5请输入第2个元素的值4请输入第3个元素的值3请输入第4个元素的值2请输入第5个元素的值1score[0]&#x3D;5      score[1]&#x3D;4      score[2]&#x3D;3      score[3]&#x3D;2      score[4]&#x3D;1 </code></pre><ul><li>四种初始化数组的方式</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//四种初始化数组的方式</span><span class="token keyword">var</span> numArr01 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"numArr01="</span><span class="token punctuation">,</span> numArr01<span class="token punctuation">)</span><span class="token keyword">var</span> numArr02 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"numArr02="</span><span class="token punctuation">,</span> numArr02<span class="token punctuation">)</span><span class="token comment">//这里的[...]是规定的写法</span><span class="token keyword">var</span> numArr03 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"numArr03="</span><span class="token punctuation">,</span> numArr03<span class="token punctuation">)</span><span class="token keyword">var</span> numArr04 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">900</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">999</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"numArr04="</span><span class="token punctuation">,</span> numArr04<span class="token punctuation">)</span><span class="token comment">//类型推导</span>strArr05 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token string">"rose"</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"strArr05="</span><span class="token punctuation">,</span>strArr05<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.gonumArr01&#x3D; [1 2 3]numArr02&#x3D; [5 6 7]numArr03&#x3D; [8 9 10]numArr04&#x3D; [900 800 999]strArr05&#x3D; [ tom jack rose]</code></pre><h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><h3 id="方式1-常规遍历"><a href="#方式1-常规遍历" class="headerlink" title="方式1-常规遍历"></a>方式1-常规遍历</h3><p>看上面的，不再赘述</p><h3 id="方式2-for-range结构遍历"><a href="#方式2-for-range结构遍历" class="headerlink" title="方式2-for-range结构遍历"></a>方式2-for-range结构遍历</h3><p>这是Go语言的独有的结构，可以用来遍历访问数组的元素。</p><ul><li>for-range的基本语法</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> array01 <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span></code></pre><p>说明</p><ol><li>第一个返回值index是数组的下标</li><li>第二个value是在该下标位置的值</li><li>他们都是仅在for循环内部可见的局部变量</li><li>遍历数组元素的时候，如果不想使用下标index，可以直接把下标index标为下划线_</li><li>index和value的名称不是固定的，即程序员可以自行指定，一般命名为index和value</li></ol><ul><li>for-range的案例</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//演示for-range遍历数组</span>heroes <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"宋江"</span><span class="token punctuation">,</span> <span class="token string">"吴用"</span><span class="token punctuation">,</span> <span class="token string">"卢俊义"</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> heroes <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i=%v v=%v"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"heroes[%d]=%v\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> heroes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> heroes <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"元素的值=%v\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.goi&#x3D;0 v&#x3D;宋江heroes[0]&#x3D;宋江i&#x3D;1 v&#x3D;吴用heroes[1]&#x3D;吴用i&#x3D;2 v&#x3D;卢俊义heroes[2]&#x3D;卢俊义元素的值&#x3D;宋江元素的值&#x3D;吴用元素的值&#x3D;卢俊义</code></pre><h2 id="数组使用的注意事项和细节"><a href="#数组使用的注意事项和细节" class="headerlink" title="数组使用的注意事项和细节"></a>数组使用的注意事项和细节</h2><ol><li>数组是多个相同类型数据的组合，一个数组一旦声明&#x2F;定义了，其长度是固定的，不能动态变化</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//数组是多个相同类型数据的组合，一个数组一旦声明/定义了，其长度是固定的，不能动态变化。</span><span class="token keyword">var</span> arr01 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>arr01<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>arr01<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token comment">//会报错</span>arr01<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.1</span> <span class="token comment">//数组类型和初始化的值的类型不匹配哦</span><span class="token comment">//其长度是固定的，不能动态变化，否则报越界</span>arr01<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">890</span> <span class="token comment">//数组不能动态增长</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr01<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li><p><code>var arr []int</code>这时arr就是一个slice切片，切片后面专门讲解。</p></li><li><p>数组中的元素可以是任何数据类型，包括值类型和引用类型，但是不能混用。</p></li><li><p>数组创建后，如果没有赋值，有默认值（零值）</p><pre class="language-none"><code class="language-none">数组类型数组： 默认值为 0字符串数组： 默认值为 &quot;&quot;bool数组： 默认值为false</code></pre></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> arr01 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">float32</span><span class="token keyword">var</span> arr02 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token keyword">var</span> arr03 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">bool</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"arr01=%v arr02=%v arr03=%v\n"</span><span class="token punctuation">,</span> arr01<span class="token punctuation">,</span> arr02<span class="token punctuation">,</span> arr03<span class="token punctuation">)</span></code></pre><ol start="5"><li>使用数组的步骤<ol><li>生命数组并开辟空间</li><li>给数组各个元素赋值（默认零值）</li><li>使用数组</li></ol></li><li>数组的下标是从0开始的</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> arr04 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token comment">// 0-2</span><span class="token keyword">var</span> index <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">3</span>arr04<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"tom"</span> <span class="token comment">//arr04[3]越界奥</span></code></pre><ol start="7"><li>数组下标必须在指定范围内使用，否则报panic：数组越界，比如<code>var arr [5]int</code> 则有效下标为0-4</li><li>Go的数组属值类型，在默认情况下是值传递，因此会进行值拷贝。数组见不会相互影响</li></ol><p><img src="http://cdn.leafii.top/img/20220520151047.png" loading="lazy"></p><ol start="9"><li><p>如想在其它函数中，去修改原来的数组，可以使用引用传递（指针方式）<img src="http://cdn.leafii.top/img/20220520151231.png" loading="lazy"></p></li><li><p>长度是数组类型的一部分，在传递函数参数时 需要考虑数组的长度，看下面的案例：</p></li></ol><p><img src="http://cdn.leafii.top/img/20220520151128.png" loading="lazy"></p></li></ul><h2 id="数组的应用案例"><a href="#数组的应用案例" class="headerlink" title="数组的应用案例"></a>数组的应用案例</h2><ol><li>创建一个byte类型的26个元素的数组，分别放置’A’-‘Z’.使用for循环访问所有元素并打印出来。提示：字符数据运算’A’+1-&gt;’B’</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> arr01 <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>arr01<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  arr01<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span> <span class="token operator">+</span> <span class="token function">byte</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">//要将i转成byte类型</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>arr01<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> arr01<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go      ABCDEFGHIJKLMNOPQRSTUVWXYZ</code></pre><ol start="2"><li>请求出一个数组的最大值，并得到对应的下标。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> intArr <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">932</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">&#125;</span>maxVal <span class="token operator">:=</span> intArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>maxValIndex <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>intArr<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> intArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>maxVal <span class="token punctuation">&#123;</span>maxVal <span class="token operator">=</span> intArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>maxValIndex <span class="token operator">=</span> i<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"maxVal = %v, maxValIndex = %v \n"</span><span class="token punctuation">,</span> maxVal<span class="token punctuation">,</span> maxValIndex<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.gomaxVal &#x3D; 932, maxValIndex &#x3D; 2 </code></pre><ol start="3"><li>请求出一个数组的和和平均值 for-range</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> doubleArr2 <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">float64</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> sum <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> doubleArr2 <span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> val<span class="token punctuation">&#125;</span><span class="token keyword">var</span> avg <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>doubleArr2<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"sum = %v avg = %v\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> avg<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.gosum &#x3D; 55 avg &#x3D; 5.5</code></pre><ol start="4"><li>要求：随机生成五个数，并将其反转打印，复杂应用。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token string">"math/rand"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> intArr3 <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token builtin">len</span> <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>intArr3<span class="token punctuation">)</span>rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  intArr3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"交换前："</span><span class="token punctuation">,</span>intArr3<span class="token punctuation">)</span><span class="token comment">//反转打印</span>temp <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  temp <span class="token operator">=</span> intArr3<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span>  intArr3<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> intArr3<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  intArr3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"交换后："</span><span class="token punctuation">,</span>intArr3<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go交换前： [76 85 22 96 35]交换后： [35 96 22 85 76] ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo02&#x2F;main  go run .&#x2F;main.go交换前： [8 60 13 96 46]交换后： [46 96 13 60 8]</code></pre><h2 id="为什么需要切片"><a href="#为什么需要切片" class="headerlink" title="为什么需要切片"></a>为什么需要切片</h2><ul><li><p>需求</p><p>我们需要一个数组用于保存学生的成绩，但是学生的个数是不确定的，怎么办？ 答案：使用切片</p></li></ul><h2 id="切片的基本介绍"><a href="#切片的基本介绍" class="headerlink" title="切片的基本介绍"></a>切片的基本介绍</h2><ol><li><p>切片的英文是 slice</p></li><li><p>切片是数组的一个引用，因此切片是引用类型，在进行传递时，遵守引用传递的机制。</p></li><li><p>切片的使用和数组类似，遍历切片、访问切片的元素和求切片长度 len(slice)都一样。 </p></li><li><p>切片的长度是可以变化的，因此切片是一个可以动态变化数组。</p></li><li><p>切片定义的基本语法:</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//var 切片名 []类型</span><span class="token comment">//比如</span><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span></code></pre></li></ol><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>演示一个切片的基本使用：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> intArr <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">&#125;</span><span class="token comment">//声明/定义一个切片</span><span class="token comment">//slice := intArr[1:3]</span><span class="token comment">//1. slice就是切片名</span><span class="token comment">//2. intArr[1:3]表示slice引用到intArr这个数组</span><span class="token comment">//3. 引用intArr数组的起始下标为1，最后的下标为3（但是不包含3）</span>slice <span class="token operator">:=</span> intArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"intArr:"</span><span class="token punctuation">,</span> intArr<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice 的元素是 :"</span><span class="token punctuation">,</span> slice<span class="token punctuation">)</span> <span class="token comment">// 22  33</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice的元素个数:"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice的容量:"</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 切片的容量是可以动态变化的</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo03&#x2F;main  go run .&#x2F;main.gointArr: [1 22 33 66 99]slice 的元素是 : [22 33]slice的元素个数: 2slice的容量: 4</code></pre><h2 id="切片在内存中形式（重要）"><a href="#切片在内存中形式（重要）" class="headerlink" title="切片在内存中形式（重要）"></a>切片在内存中形式（重要）</h2><ul><li><p>基本介绍</p><p>为了让大家更加深入的理解切片，我们画图分析切片在内存中是如何布局的，这是一个非常重要的知识点：（以前面的案例来分析）</p></li><li><p>画出前面的切片内存布局</p></li></ul><p><img src="http://cdn.leafii.top/img/20220520151257.png" loading="lazy"></p><ul><li><p>对上面的分析图总结</p><ol><li>slice的确是一个引用类型</li><li>slice从底层来说，其实就是一个数据结构（strcut结构体）</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> slice <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  ptr <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span>  <span class="token builtin">len</span> <span class="token builtin">int</span>  <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h2 id="切片的使用"><a href="#切片的使用" class="headerlink" title="切片的使用"></a>切片的使用</h2><ul><li><p>方式1</p><p>第一种方式：定义一个切片，然后让切片去引用一个已经创建好的数组，比如前面的案例就是这样的。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> slice <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"arr:"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice 的元素是 :"</span><span class="token punctuation">,</span> slice<span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice的元素个数:"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice的容量:"</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>方式2</p><p>第二种方式：通过make来创建切片</p><p>基本语法：<code>var 切片名 []type = make([]type,len,[cap])</code></p><p>参数说明：type就是数据类型，len是大小，cap是指定切片容量，可选，<strong>如果你分配了cap，则要求cap&gt;&#x3D;len</strong></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> slice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>slice<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>slice<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token comment">//对于切片，必须make使用</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice的size="</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice的cap="</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="http://cdn.leafii.top/img/20220520151314.png" loading="lazy"></p><p>对上面代码的小结：</p><ol><li>通过make方式创建切片可以指定切片的大小和容量</li><li>如果没有给切片的各个元素赋值，那么就会使用默认值【int, float &#x3D;&gt;0     string&#x3D;&gt;””   bool&#x3D;&gt;false】</li><li>通过make方式创建的切片对应的数组是由make底层维护，对外不可见，即只能通过slice去访问各个元素。</li></ol></li><li><p>方式3</p><p>第三种方式：定义一个切片，直接就指定具体数组，使用原理类似make的方式</p><p>案例演示：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//方式3</span><span class="token comment">//第3种方式：定义一个切片，直接就指定具体数组，使用原理类似make的方式</span><span class="token keyword">var</span> strSlice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"mary"</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"strSlice = "</span><span class="token punctuation">,</span> strSlice<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"strSlice size = "</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>strSlice<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"strSlice cap = "</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>strSlice<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>方式1和方式2的区别（面试）</p><p>方式1是直接引用数组，这个数组是事先存在的，程序员是可见的。</p><p>方式2是通过make来创建切片，make也会创建一个数组，是由切片在底层进行维护，程序员是看不见的。make创建切片的示意图：</p><p><img src="http://cdn.leafii.top/img/20220520151330.png" loading="lazy"></p></li></ul><h2 id="切片的遍历"><a href="#切片的遍历" class="headerlink" title="切片的遍历"></a>切片的遍历</h2><p>切片的遍历和数组一样，也有两种方式</p><ul><li>for循环常规方式遍历</li><li>for-range结构遍历切片</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">&#125;</span>slice <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">// 20,30,40</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"slice[%v] = %v\t"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> slice<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token operator">:=</span> <span class="token keyword">range</span> slice <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i = %v, v = %v\t"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo04&#x2F;main  go run .&#x2F;main.goslice[0] &#x3D; 20   slice[1] &#x3D; 30   slice[2] &#x3D; 40i &#x3D; 0, v &#x3D; 20   i &#x3D; 1, v &#x3D; 30   i &#x3D; 2, v &#x3D; 40</code></pre><h2 id="切片的使用的注意事项和细节讨论"><a href="#切片的使用的注意事项和细节讨论" class="headerlink" title="切片的使用的注意事项和细节讨论"></a>切片的使用的注意事项和细节讨论</h2><ol><li><p>切片初始化时 var slice &#x3D; arr[startIndex:endIndex]</p><pre class="language-none"><code class="language-none">说明:从 arr 数组下标为 startIndex，取到 下标为 endIndex 的元素(不含 arr[endIndex])。</code></pre></li><li><p>切片初始化时，仍然不能越界。范围在 [0-len(arr)] 之间，但是可以动态增长.</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> slice <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>end<span class="token punctuation">]</span> <span class="token operator">&lt;=</span><span class="token operator">></span> <span class="token keyword">var</span> slice <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token keyword">var</span> slice <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span><span class="token operator">></span> <span class="token keyword">var</span> slice <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">var</span> slice <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span><span class="token operator">></span> <span class="token keyword">var</span> slice <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span></code></pre></li><li><p>cap是一个内置函数，用于统计切片的容量，即最大可以存放多少个元素。</p></li><li><p>切片定义完后，还不能使用，因为本身是一个空的，需要让其引用到一个数组，或者 make一个空间供切片来使用</p></li><li><p>切片可以继续切片【演示】</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">&#125;</span>slice <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">// 20,30,40</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"slice[%v] = %v\t"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> slice<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token operator">:=</span> <span class="token keyword">range</span> slice <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i = %v, v = %v\t"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//定义slice2</span>  slice2 <span class="token operator">:=</span> slice<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">// slice [ 20, 30, 40]   [30]</span>  slice2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">// 因为arr， slice和slcie2指向的数据空间是同一个，因此slice2[0]=100</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice2 = "</span><span class="token punctuation">,</span> slice2<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice = "</span><span class="token punctuation">,</span>slice<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"arr = "</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>用append内置函数，可以对切片进行动态追加</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> slice3 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token comment">//通过append直接给slice3追加具体的元素</span>slice3 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice3<span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice3="</span>，slice3<span class="token punctuation">)</span> <span class="token comment">// 100 200 300 400 500 600</span><span class="token comment">//通过append将切片slice3追加给slice3</span>slice3 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice3<span class="token punctuation">,</span> slice3<span class="token operator">...</span><span class="token punctuation">)</span><span class="token comment">//100 200 300 400 500 600 100 200 300 400 500 600</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice3 append slice3 = "</span><span class="token punctuation">,</span> slice3<span class="token punctuation">)</span></code></pre><p>对上面的代码的小结</p><p><img src="http://cdn.leafii.top/img/20220520151348.png" loading="lazy"></p><p>切片append操作的底层原理分析：</p><p>切片append操作的本质就是对数组扩容</p><p>go 底层会创建一下新的数组newArr(安装扩容后大小)</p><p>将 slice 原来包含的元素拷贝到新的数组 newArr<br>slice 重新引用到 newArr<br>注意 newArr 是在底层来维护的，程序员不可见.</p></li><li><p>切片的拷贝操作</p><p>切片使用copy内置函数完成拷贝，举例说明</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> slice4 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">var</span> slice5 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token function">copy</span><span class="token punctuation">(</span>slice5<span class="token punctuation">,</span> slice4<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice4="</span><span class="token punctuation">,</span> slice4<span class="token punctuation">)</span><span class="token comment">// 1 , 2, 3 , 4 , 5</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice5="</span><span class="token punctuation">,</span> slice5<span class="token punctuation">)</span><span class="token comment">// 1 ,2, 3,4,5,0,0,0,0,0</span></code></pre><p><strong>对上面代码的说明：</strong></p><ol><li>copy(para1, para2) 参数的数据类型是切片</li><li>按照上面的代码来看, slice4 和 slice5 的数据空间是独立，相互不影响，也就是说 slice4[0]&#x3D; 999,slice5[0] 仍然是 1</li></ol></li><li><p>关于拷贝的注意事项</p><ul><li>下面的代码又没有错误？</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> slice <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token comment">// [0]</span><span class="token function">copy</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span>a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span></code></pre><p>**上面的代码没有问题，可以运行，最后输出的是[1]</p></li><li><p>切片是引用类型，所以在传递时，遵守引用传递机制。看两段代码，并分析底层原理<img src="http://cdn.leafii.top/img/20220520151403.png" loading="lazy"></p></li></ol><h2 id="string和slice"><a href="#string和slice" class="headerlink" title="string和slice"></a>string和slice</h2><ol><li>string底层是一个byte数组，因此string也可以进行切片处理案例演示:</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//string底层是一个byte数组，因此string也可以进行切片处理</span>  str <span class="token operator">:=</span> <span class="token string">"hello@atguigu"</span>  <span class="token comment">//使用切片获取到 atguigu</span>  slice <span class="token operator">:=</span> str<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice="</span><span class="token punctuation">,</span>slice<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>string和切片在内存的形式，以”abcd”画出内存示意图</li></ol><p><img src="http://cdn.leafii.top/img/20220520151421.png" loading="lazy"></p><ol start="3"><li>string是不可变的，也就是说不能通过str[0]&#x3D;’z’方式来修改字符串</li></ol><pre class="language-go" data-language="go"><code class="language-go">str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'z'</span> <span class="token comment">//编译不会通过，会报错，因为string是不可变的</span></code></pre><ol start="4"><li>如果需要修改字符串，可以先将string -&gt; []byte  或者 []rune -&gt; 修改 -&gt; 重写转成string</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//如果需要修改字符串，可以先将string -> []byte  或者 []rune -> 修改 -> 重写转成string</span><span class="token comment">//"hello@atguigu"=>改成"zello@atguigu"</span>str <span class="token operator">:=</span> <span class="token string">"hello@atguigu"</span>arr1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'z'</span>str <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"str="</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token comment">//细节，我们转成[]byte后，可以处理英文和数字，但是不能处理中文</span><span class="token comment">//原因：[]byte字节来处理string中的字符，而一个汉子是3个字节，因此会出现乱码</span><span class="token comment">//解决方法：将string转成[]rune即可，因为[]rune是按字符处理，兼容汉字</span>arr1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'北'</span>str <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"str="</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span></code></pre><h2 id="切片的课堂练习"><a href="#切片的课堂练习" class="headerlink" title="切片的课堂练习"></a>切片的课堂练习</h2><p><strong>题目</strong>：编写一个函数fbn(n int)，要求完成</p><ol><li>可以接收一个 n int</li><li>能够将斐波那契的数列放到切片中</li><li>提示, 斐波那契的数列形式:</li></ol><p><code>arr[0] = 1; arr[1] = 1; arr[2]=2; arr[3] = 3; arr[4]=5; arr[5]=8</code></p><ul><li>代码+思路：</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">fbn</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//声明一个切片，切片大小n</span>  fbnSlice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>  <span class="token comment">//第一个数和第二个数的斐波那契数为1</span>  fbnSlice<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  fbnSlice<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">//进行for循环存放斐波那契数列</span>  <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    fbnSlice<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fbnSlice<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> fbnSlice<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> fbnSlice<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  fnbSlice <span class="token operator">:=</span> <span class="token function">fbn</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"fnbSlice="</span><span class="token punctuation">,</span> fnbSlice<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter07&#x2F;demo04&#x2F;main  go run .&#x2F;main.gofnbSlice&#x3D; [1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765]</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Go语言の数组与切片&quot;&gt;&lt;a href=&quot;#Go语言の数组与切片&quot; class=&quot;headerlink&quot; title=&quot;Go语言の数组与切片&quot;&gt;&lt;/a&gt;Go语言の数组与切片&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;本文章主要讲Go语言的数组与切片&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Go" scheme="tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言の函数、包和错误处理</title>
    <link href="2021/01/19/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E5%87%BD%E6%95%B0%E3%80%81%E5%8C%85%E5%92%8C%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>2021/01/19/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E5%87%BD%E6%95%B0%E3%80%81%E5%8C%85%E5%92%8C%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</id>
    <published>2021-01-19T07:49:52.000Z</published>
    <updated>2022-05-20T07:22:57.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go语言の函数、包和错误处理"><a href="#Go语言の函数、包和错误处理" class="headerlink" title="Go语言の函数、包和错误处理"></a>Go语言の函数、包和错误处理</h1><p>本文章主要讲解了Go语言的函数，包和错误处理等知识。</p><span id="more"></span><h2 id="为什么需要函数"><a href="#为什么需要函数" class="headerlink" title="为什么需要函数"></a>为什么需要函数</h2><h3 id="完成需求"><a href="#完成需求" class="headerlink" title="完成需求"></a>完成需求</h3><p>输入两个数，再输入一个运算符（+-*&#x2F;），得到结果。</p><h3 id="使用传统的方法解决"><a href="#使用传统的方法解决" class="headerlink" title="使用传统的方法解决"></a>使用传统的方法解决</h3><ul><li>代码</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> n1 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">1.2</span><span class="token keyword">var</span> n2 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">2.3</span><span class="token keyword">var</span> operator <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">'-'</span><span class="token keyword">switch</span> operator <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token char">'+'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v + %v = %v\n"</span><span class="token punctuation">,</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token char">'-'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v - %v = %v\n"</span><span class="token punctuation">,</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n1 <span class="token operator">-</span> n2<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token char">'*'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v * %v = %v\n"</span><span class="token punctuation">,</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n1 <span class="token operator">*</span> n2<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token char">'/'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v / %v = %v\n"</span><span class="token punctuation">,</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n1 <span class="token operator">/</span> n2<span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go1.2 - 2.3 &#x3D; -1.0999999999999999</code></pre><ul><li>分析上面的代码问题<ol><li>可以完成功能需求，但代码冗余</li><li>与此同时不利于代码的维护</li><li>函数可以解决这个问题奥</li></ol></li></ul><h2 id="函数的基本概念"><a href="#函数的基本概念" class="headerlink" title="函数的基本概念"></a>函数的基本概念</h2><p>​    为完成某一功能的程序指令（语句）的集合，称为函数。</p><p>在Go中，函数分为：自定义函数、系统函数（查看Go编程手册）</p><h2 id="函数的基本语法"><a href="#函数的基本语法" class="headerlink" title="函数的基本语法"></a>函数的基本语法</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> 函数名 <span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span> <span class="token punctuation">(</span>返回值列表<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  执行语句<span class="token operator">...</span>  <span class="token keyword">return</span> 返回值列表<span class="token punctuation">&#125;</span></code></pre><ol><li>形参列表：表示函数的输入</li><li>函数的语句：表示为了实现某一功能代码块</li><li>函数可以有返回值，也可以没有</li></ol><h2 id="快速入门案例"><a href="#快速入门案例" class="headerlink" title="快速入门案例"></a>快速入门案例</h2><p>使用函数解决前面的计算问题。</p><p>走代码：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">cal</span><span class="token punctuation">(</span>n1 <span class="token builtin">float64</span><span class="token punctuation">,</span>n2 <span class="token builtin">float64</span><span class="token punctuation">,</span> operator <span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> res <span class="token builtin">float64</span><span class="token keyword">switch</span> operator <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token char">'+'</span><span class="token punctuation">:</span>res <span class="token operator">=</span> n1 <span class="token operator">+</span> n2<span class="token keyword">case</span> <span class="token char">'-'</span><span class="token punctuation">:</span>res <span class="token operator">=</span> n1 <span class="token operator">-</span> n2<span class="token keyword">case</span> <span class="token char">'*'</span><span class="token punctuation">:</span>res <span class="token operator">=</span> n1 <span class="token operator">*</span> n2<span class="token keyword">case</span> <span class="token char">'/'</span><span class="token punctuation">:</span>res <span class="token operator">=</span> n1 <span class="token operator">/</span> n2<span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"操作符号错误哦！"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> n1 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">1.2</span><span class="token keyword">var</span> n2 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">2.3</span><span class="token keyword">var</span> operator <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">'+'</span>result <span class="token operator">:=</span> <span class="token function">cal</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> operator<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="包的引出"><a href="#包的引出" class="headerlink" title="包的引出"></a>包的引出</h2><ol><li>在实际的开发中，我们往往需要在不同的文件中，去调用其他文件的定义的函数，比如main.go中，去使用utils.go文件中的函数，如何实现？-&gt;包</li><li>现在有两个程序员共同开发一个Go项目，程序员xiaoming希望定义函数Cal，程序员xiaoqiang也想定义函数也叫Cal。两个程序员为此还吵了起来，怎么办？-&gt;包</li></ol><h2 id="包的原理图"><a href="#包的原理图" class="headerlink" title="包的原理图"></a>包的原理图</h2><p>包的本质实际上就是创建不同的文件夹，来存放程序文件。</p><p><img src="http://cdn.leafii.top/img/20220520151521.png" loading="lazy"></p><h2 id="包的基本概念"><a href="#包的基本概念" class="headerlink" title="包的基本概念"></a>包的基本概念</h2><p>​    说明：go的每一个文件都是属于一个包的，也就是说go是以包的形式来管理文件和项目目录结构的</p><h2 id="包的三大作用"><a href="#包的三大作用" class="headerlink" title="包的三大作用"></a>包的三大作用</h2><ul><li><p>区分相同名字的函数、变量等标识符</p></li><li><p>当程序文件很多时，可以很好的管理项目</p></li><li><p>控制函数、变量等访问范围，即作用域</p></li></ul><h2 id="包的相关说明"><a href="#包的相关说明" class="headerlink" title="包的相关说明"></a>包的相关说明</h2><ul><li><p>打包基本语法</p><p><code>package 包名</code></p></li><li><p>引入包的基本语法</p><p><code>import &quot;包的路径&quot;</code></p></li></ul><h2 id="包使用的快速入门"><a href="#包使用的快速入门" class="headerlink" title="包使用的快速入门"></a>包使用的快速入门</h2><p>包快速入门-Go相互调用函数，我们将func Cal定义到文件utils.go，将utils.go放到一个包中，当其它文件需要使用到utils.go的方法时，可以import该包，就可以使用了。【演示：新建项目的目录结构】</p><p><img src="http://cdn.leafii.top/img/20220520151536.png" loading="lazy"></p><ul><li>utils.go:</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> utils<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//将计算的功能，放到一个函数中，然后在需要使用，调用即可</span><span class="token comment">//为了让其它包的文件使用Cal函数，需要将C大写类似其它语言的public</span><span class="token keyword">func</span> <span class="token function">Cal</span><span class="token punctuation">(</span>n1 <span class="token builtin">float64</span><span class="token punctuation">,</span>n2 <span class="token builtin">float64</span><span class="token punctuation">,</span> operator <span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> res <span class="token builtin">float64</span><span class="token keyword">switch</span> operator <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token char">'+'</span><span class="token punctuation">:</span>res <span class="token operator">=</span> n1 <span class="token operator">+</span> n2<span class="token keyword">case</span> <span class="token char">'-'</span><span class="token punctuation">:</span>res <span class="token operator">=</span> n1 <span class="token operator">-</span> n2<span class="token keyword">case</span> <span class="token char">'*'</span><span class="token punctuation">:</span>res <span class="token operator">=</span> n1 <span class="token operator">*</span> n2<span class="token keyword">case</span> <span class="token char">'/'</span><span class="token punctuation">:</span>res <span class="token operator">=</span> n1 <span class="token operator">/</span> n2<span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"操作符号错误哦！"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> res<span class="token punctuation">&#125;</span></code></pre><ul><li>Main.go</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"go_code/chapter06/demo02/utils"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//请大家完成这样一个需求：</span><span class="token comment">//输入两个数，再输入一个运算符（+,-,*,/)，得到结果。。</span><span class="token comment">//分析思路...</span><span class="token keyword">var</span> n1 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">1.2</span><span class="token keyword">var</span> n2 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">2.3</span><span class="token keyword">var</span> operator <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">'+'</span>result <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">Cal</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">,</span>operator<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"result="</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="包使用的注意事项和细节讨论"><a href="#包使用的注意事项和细节讨论" class="headerlink" title="包使用的注意事项和细节讨论"></a>包使用的注意事项和细节讨论</h2><ol><li>在给一个文件打包时，该包对应一个文件夹，比如这里的utils文件夹对应的包名就是utils，文件的包名通常和文件所在的文件夹名一致，一般为小写字母。</li><li>当一个文件要使用其它包函数或变量时，需要先引入对应的包</li></ol><ul><li>引入方式1:<code>import &quot;包名&quot;</code></li><li>引入方式2:</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"包名"</span>  <span class="token string">"包名"</span><span class="token punctuation">)</span></code></pre><ul><li>package指令在文件第一行，然后是import指令。</li><li>在import包时，路径从$GOPATH的src下开始，不用带src，编译器会自动从src开始引入。</li></ul><ol start="3"><li>为了让其它包的文件可以访问到本包的函数，则该函数名的首字母需要大写，类似其他语言的public，这样才能跨包访问。比如utils.go的<em>Cal</em>函数</li><li>在访问其它包函数，变量时，其语法是 包名.函数名,比如这个main.go文件中的<code>utils.Cal(90, 80, &quot;+&quot;)</code></li><li>如果包名较长，Go支持给包取别名，注意细节；取别名后，原来的包名就不能使用了<ul><li>说明：如果给包取了别名，则**需要使用别名来访问该包的函数和变量。</li></ul></li><li>在同一包下，不能有相同的函数名（也不能有相同的全局变量名），否则报重复定义</li><li>如果你要编译成一个可执行程序文件，就需要将这个包声明为main，即<code>package main</code>这个就是一个语法规范，如果你是写一个库，包名可以自定义</li></ol><p><img src="http://cdn.leafii.top/img/20220520151554.png" loading="lazy"></p><h2 id="函数的调用机制"><a href="#函数的调用机制" class="headerlink" title="函数的调用机制"></a>函数的调用机制</h2><h3 id="通俗易懂的方式的理解"><a href="#通俗易懂的方式的理解" class="headerlink" title="通俗易懂的方式的理解"></a>通俗易懂的方式的理解</h3><p><img src="http://cdn.leafii.top/img/20220520151621.png" loading="lazy"></p><h3 id="函数-调用过程"><a href="#函数-调用过程" class="headerlink" title="函数-调用过程"></a>函数-调用过程</h3><p>介绍：为了让大家更好地理解函数调用过程，看两个案例，并画出示意图，这个很重要</p><ol><li>传入一个数+1</li></ol><p><img src="http://cdn.leafii.top/img/20220520151636.png" loading="lazy"></p><p>对上图说明</p><ol><li><p>在调用一个函数时，会给该函数分配一个新的空间，编译器会通过自身的处理让这个新的空间和其它的栈的空间去分开来</p></li><li><p>在每个函数对应的栈中，数据空间时独立的，不会混淆</p></li><li><p>当一个函数调用完毕（执行完毕）后，程序会销毁这个函数对应的栈空间。</p></li><li><p>计算两个数，并返回</p></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//一个函数 test</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>n1 <span class="token operator">=</span> n1 <span class="token operator">+</span> <span class="token number">1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"test() n1="</span><span class="token punctuation">,</span>n1<span class="token punctuation">)</span> <span class="token comment">//输入结果=？</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">getSum</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>sum <span class="token operator">:=</span> n1 <span class="token operator">+</span> n2fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"getSum sum = "</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token comment">// 30</span><span class="token comment">//当函数有return语句时，就是将结果返回给调用者</span><span class="token comment">//即谁调用我，就返回给谁</span><span class="token keyword">return</span> sum<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>n1 <span class="token operator">:=</span> <span class="token number">10</span><span class="token comment">//调用test</span><span class="token function">test</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main() n1="</span><span class="token punctuation">,</span>n1<span class="token punctuation">)</span><span class="token comment">//输出结果=？</span>sum <span class="token operator">:=</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main sum="</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token comment">// 30</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo03&#x2F;main  go run main.go test() n1&#x3D; 11main() n1&#x3D; 10getSum sum &#x3D;  30main sum&#x3D; 30</code></pre><h3 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h3><ul><li>基本语法和说明</li></ul><pre class="language-go" data-language="go"><code class="language-go">Go函数支持返回多个值，这一点是其它编程语言没有的。<span class="token keyword">func</span> 函数名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span> （返回值类型列表） <span class="token punctuation">&#123;</span>  语句<span class="token operator">...</span>  <span class="token keyword">return</span> 返回值列表<span class="token punctuation">&#125;</span></code></pre><ol><li>如果返回多个值时，在接收时，希望忽略某个返回值，则使用<code>_</code>符号表示占位忽略</li><li>如果返回值只有一个，（返回值类型列表）可以不写<code>()</code></li></ol><ul><li><p>案例演示1</p><p>请编写要给函数，可以计算两个数的和和差，并返回结果。</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  n1 <span class="token operator">:=</span> <span class="token number">10</span>  <span class="token comment">//调用test</span>  <span class="token function">test</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main() n1="</span><span class="token punctuation">,</span>n1<span class="token punctuation">)</span><span class="token comment">//输出结果？</span>  sum <span class="token operator">:=</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main sum ="</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token comment">//30</span>  <span class="token comment">//调用getSumAndSub</span>  res1<span class="token punctuation">,</span>res2 <span class="token operator">:=</span> <span class="token function">getSumAndSub</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//res1 = 3 res2 = -1 </span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"res1=%v res2=%v\n"</span><span class="token punctuation">,</span>res1<span class="token punctuation">,</span> res2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//编写函数，可以计算两个数的和和差，并返回结果</span><span class="token keyword">func</span> <span class="token function">getSumAndSub</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">int</span> <span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  sum <span class="token operator">:=</span> n1 <span class="token operator">+</span> n2  sub <span class="token operator">:=</span> n1 <span class="token operator">-</span> n2  <span class="token keyword">return</span> sum<span class="token punctuation">,</span> sub<span class="token punctuation">&#125;</span></code></pre><ul><li><p>案例演示2</p><p>一个细节说明：希望忽略某个返回值，则使用<code>_</code>符号表示占位忽略</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//希望忽略某个返回值，则使用`_`符号表示占位忽略</span><span class="token boolean">_</span><span class="token punctuation">,</span> res3 <span class="token operator">=</span> <span class="token function">getSumAndSub</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"res3="</span><span class="token punctuation">,</span>res3<span class="token punctuation">)</span></code></pre><h2 id="函数的递归调用"><a href="#函数的递归调用" class="headerlink" title="函数的递归调用"></a>函数的递归调用</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>一个函数在<strong>函数体内</strong>又<strong>调用了本身</strong>，我们称为递归调用</p><h3 id="递归调用快速入门"><a href="#递归调用快速入门" class="headerlink" title="递归调用快速入门"></a>递归调用快速入门</h3><ul><li>代码1</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> n <span class="token operator">></span> <span class="token number">2</span> <span class="token punctuation">&#123;</span>    n<span class="token operator">--</span>    <span class="token function">test</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"n="</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">//通过分析来看递归调用的特点</span><span class="token punctuation">&#125;</span></code></pre><p>上面代码的分析图：</p><p><img src="http://cdn.leafii.top/img/20220520151656.png" loading="lazy"></p><ul><li>代码2</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">test2</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> n <span class="token operator">></span> <span class="token number">2</span> <span class="token punctuation">&#123;</span>    n<span class="token operator">--</span>    <span class="token function">test2</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"n="</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//看一段代码</span>  <span class="token comment">//test(4) //通过分析来看下递归调用的特点</span>  <span class="token function">test2</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// ？通过分析来看下递归调用的特点</span><span class="token punctuation">&#125;</span></code></pre><p>对上面代码分析的示意图：</p><p><img src="http://cdn.leafii.top/img/20220520151726.png" loading="lazy"></p><h3 id="递归调用的总结"><a href="#递归调用的总结" class="headerlink" title="递归调用的总结"></a>递归调用的总结</h3><p><strong>函数递归需要遵守的重要原则：</strong></p><ol><li>执行一个函数时，就创建一个新的受保护的独立空间（新函数栈）</li><li>函数的局部变量是独立的，不会相互影响</li><li>递归必须向退出递归的条件逼近，否则就是无限递归，死循环了 :) </li><li>当一个函数执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，同时当函数执行完毕或者返回时，该函数本身也会被系统销毁</li></ol><h3 id="递归课堂练习题"><a href="#递归课堂练习题" class="headerlink" title="递归课堂练习题"></a>递归课堂练习题</h3><ul><li><p>题1:斐波那契数</p><p>请使用递归的方式，求出斐波那契数1，1，2，3，5，8，13…</p><p>给你一个整数n，求出它的斐波那切数是多少？</p><ul><li>思路</li></ul><ol><li>当n&#x3D;&#x3D;1 || n&#x3D;&#x3D;2, 返回1</li><li>当n&gt;2, 返回f(n-1) + f(n-2)</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">fbn</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">||</span> n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">1</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">fbn</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fbn</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res <span class="token operator">:=</span> <span class="token function">fbn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">//测试</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"res="</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"res="</span><span class="token punctuation">,</span><span class="token function">fbn</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"res="</span><span class="token punctuation">,</span><span class="token function">fbn</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"res="</span><span class="token punctuation">,</span><span class="token function">fbn</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>题2:求函数值</p><p>已知 <em><em>f(1)&#x3D;3;f(n)&#x3D;2</em>(n-1)+1</em>*;</p><p>请使用递归的思想编程，求出f(n)的值？</p><ul><li><p>思路</p><p>递归就完事了奥铁子</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">/*已知 f(1)=3;f(n)=2*(n-1)+1;请使用递归的思想编程，求出f(n)的值？*/</span><span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">1</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"f(1)="</span><span class="token punctuation">,</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"f(5)="</span><span class="token punctuation">,</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p>题3:猴子吃桃子问题</p><p>有一堆桃子，猴子第一天吃了其中的一半，并再多吃了一个!以后每天猴子都吃其中的一半，然后再多吃一个。当到第十天时，想再吃时(还没吃)，发现只有 <strong>1</strong> 个桃子了。问题:最初共多少个桃子? </p><ul><li>思路分析:<ol><li>第10天只有1个桃子</li><li>第9天有（第十天桃子数量+1）*2个</li><li>第n天有peach(n)&#x3D;(peach(n+1)+1)*2</li></ol></li><li>代码</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">peach</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">10</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">1</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">peach</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h2 id="函数使用的注意事项和细节讨论"><a href="#函数使用的注意事项和细节讨论" class="headerlink" title="函数使用的注意事项和细节讨论"></a>函数使用的注意事项和细节讨论</h2><ol><li>函数的形参列表可以是多个，返回值列表也可以是多个。</li><li>形参列表和返回值列表的数据类型可以是值类型和引用类型。</li><li>函数的命名遵循标识符命名规范，首字母不能是数字，首字母大写该函数可以被本包文件和其它包文件使用，类似 public , 首字母小写，只能被本包文件使用，其它包文件不能使用，类似 private</li><li>函数中的变量是局部的，函数外不生效【案例说明】</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//n1 是 test函数的局部变量，只能在test函数中使用</span>  <span class="token keyword">var</span> n1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//这里不能使用n1，因为n1是test函数的局部变量</span>  <span class="token comment">//fmt.Println("n1=",n1)</span><span class="token punctuation">&#125;</span></code></pre><ol start="5"><li>基本数据类型和数组默认都是<strong>值传递</strong>，即进行值拷贝。在函数内修改，不会影响到原来的值。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">test02</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  n1 <span class="token operator">=</span> n1 <span class="token operator">+</span> <span class="token number">10</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"test02() n1="</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  num <span class="token operator">:=</span> <span class="token number">20</span>  <span class="token function">test02</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main() num="</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="6"><li>如果希望函数内的变量能修改函数外的变量（指的是默认以值传递的方式的数据类型），可以传入变量的地址&amp;，函数内以指针的方式操作变量。从效果上看类似引用。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">test03</span><span class="token punctuation">(</span>n1 <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token operator">*</span>n1 <span class="token operator">=</span> <span class="token operator">*</span>n1 <span class="token operator">+</span> <span class="token number">10</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"test03() n1="</span><span class="token punctuation">,</span> <span class="token operator">*</span>n1<span class="token punctuation">)</span> <span class="token comment">//30</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  num <span class="token operator">:=</span> <span class="token number">20</span>  <span class="token function">test03</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main() num="</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token comment">// 30</span><span class="token punctuation">&#125;</span></code></pre><p><img src="http://cdn.leafii.top/img/20220520151742.png" loading="lazy"></p><ol start="7"><li>Golang的函数不支持函数重载</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">test02</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  n1 <span class="token operator">=</span> n1 <span class="token operator">+</span> <span class="token number">10</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"test02() n1="</span><span class="token punctuation">,</span>n1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">test02</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//这是错误的奥！！！！！</span><span class="token punctuation">&#125;</span></code></pre><ol start="8"><li>在Golang中，<strong>函数也是一种数据类型</strong>，可以赋值给一个变量，则该变量就是一个函数类型的变量了。<strong>通过该变量可以对函数调用</strong></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">getSum</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  a <span class="token operator">:=</span> getSum  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a的类型%T， getSum类型是%T \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> getSum<span class="token punctuation">)</span>    res <span class="token operator">:=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token comment">//等价 res := getSum(10, 40)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"res="</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="9"><li>函数既然是一种数据类型，因此在Golang中，函数可以作为形参，并且调用哦</li></ol><pre class="language-go" data-language="go"><code class="language-go">res2 <span class="token operator">:=</span> <span class="token function">myFun</span><span class="token punctuation">(</span>getSum<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"res2="</span><span class="token punctuation">,</span> res2<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">myFun</span><span class="token punctuation">(</span>funvar <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">,</span> num1 <span class="token builtin">int</span><span class="token punctuation">,</span> num2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">funvar</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="10"><li><p>为了简化数据类型定义，Golang支持自定义数据类型</p><p>基本语法：<code>type 自定义数据类型名 数据类型 //理解：相当于一个别名</code></p><p>案例：<code>type myInt int  //这时myInt就等价int来使用了哦！ </code></p><p>案例：<code>type mySum func(int, int) int //这时mySum就等价一个 函数类型fu nc(int, int) int</code></p></li></ol><p><img src="http://cdn.leafii.top/img/20220520151809.png" loading="lazy"></p><ol start="11"><li>支持对函数返回值命名</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">getSumAndSub</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>sum <span class="token builtin">int</span><span class="token punctuation">,</span> sub <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sub <span class="token operator">=</span> n1 <span class="token operator">-</span> n2sum <span class="token operator">=</span> n1 <span class="token operator">+</span> n2<span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a1<span class="token punctuation">,</span> b1 <span class="token operator">:=</span> <span class="token function">getSumAndSub</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a1=%v,b1=%v \n"</span><span class="token punctuation">,</span>a1<span class="token punctuation">,</span> b1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="12"><li>使用<code>_</code>标示符，忽略返回值</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">cal</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>sum <span class="token builtin">int</span><span class="token punctuation">,</span> sub <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  sum <span class="token operator">=</span> n1 <span class="token operator">+</span> n2  sub <span class="token operator">=</span> n1 <span class="token operator">-</span> n2  <span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  res1<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>  fml<span class="token punctuation">.</span><span class="token function">Ptintf</span><span class="token punctuation">(</span><span class="token string">"res1=%d"</span><span class="token punctuation">,</span>res1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="13"><li>Go支持可变参数</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//支持0到多个参数</span><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>args<span class="token operator">...</span> <span class="token builtin">int</span><span class="token punctuation">)</span> sum <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//支持1到多个参数</span><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> args<span class="token operator">...</span> <span class="token builtin">int</span><span class="token punctuation">)</span> sum <span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>说明：<ol><li>args是slice切片，通过args[index]可以访问到各个值。</li><li>案例演示：编写一个函数sum，可以求出1到多个int的和</li><li>如果一个函数的形参列表中有可变参数，则可变参数需要放在形参列表最后。</li></ol></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//案例演示:编写一个函数sum，可以求出 1到多个int的和</span><span class="token comment">//参数的使用</span><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> args<span class="token operator">...</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">&#123;</span>  sum <span class="token operator">:=</span> n1  <span class="token comment">//遍历args</span>  <span class="token keyword">for</span> i<span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    sum <span class="token operator">+=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment">//args[0] 表示取出args切片的第一个元素值，其它以此类推</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> sum<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res4 <span class="token operator">:=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"res4="</span><span class="token punctuation">,</span>res4<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="函数的课堂练习"><a href="#函数的课堂练习" class="headerlink" title="函数的课堂练习"></a>函数的课堂练习</h2><ul><li>题1</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2 <span class="token builtin">float32</span><span class="token punctuation">)</span> <span class="token builtin">float32</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"n1 type=%T \n"</span><span class="token punctuation">,</span>n1<span class="token punctuation">)</span>  <span class="token comment">//n1 type = float32</span>  <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sum="</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// sum = 3</span><span class="token punctuation">&#125;</span><span class="token comment">//代码有误错误？输出什么？</span></code></pre><p>没有错误。</p><pre class="language-none"><code class="language-none">n1 type&#x3D;float32 sum&#x3D; 3</code></pre><ul><li>题2</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> mySum <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">sum2</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">,</span>n3 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">&#125;</span><span class="token comment">//使用自定义数据类型（type）来简化定义 </span><span class="token keyword">func</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>funcVar mySum<span class="token punctuation">,</span> num1 <span class="token builtin">int</span><span class="token punctuation">,</span> num2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">funcVar</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  a <span class="token operator">:=</span> sum  b <span class="token operator">:=</span> sum2  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">myFunc</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//ok</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">myFunc</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//error</span>  <span class="token punctuation">&#125;</span><span class="token comment">/*错误：fmt.Println(myFunc(b,1,2))错误，原因是类型不匹配。因为不能把func sum2(n1,n2,n3 int) int 赋给func(int,int) int*/</span></code></pre><ul><li>题3：请编写一个函数swap(n1 *int,n2 *int)可以交换n1和n2的值</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">swap</span><span class="token punctuation">(</span>n1 <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//定义一个临时变量</span>  t <span class="token operator">:=</span> <span class="token operator">*</span>n1  <span class="token operator">*</span>n1 <span class="token operator">=</span> <span class="token operator">*</span>n2  <span class="token operator">*</span>n2 <span class="token operator">=</span> t<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  a <span class="token operator">:=</span> <span class="token number">10</span>  b <span class="token operator">:=</span> <span class="token number">20</span>  <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a=%v,b=%v \n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">a&#x3D;20,b&#x3D;10 </code></pre><h2 id="init函数"><a href="#init函数" class="headerlink" title="init函数"></a>init函数</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>​    每一个源文件都可以包含一个init函数，该函数会在main函数执行前，被Go运行框架调用，也就是说init会在main函数前被调用。</p><h3 id="案例说明："><a href="#案例说明：" class="headerlink" title="案例说明："></a>案例说明：</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//init函数，通常可以在init函数中完成初始化工作 </span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"init()..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main()..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果是：</p><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo04&#x2F;main  go run .&#x2F;main.goinit()...main()...</code></pre><h3 id="init函数的注意事项和细节"><a href="#init函数的注意事项和细节" class="headerlink" title="init函数的注意事项和细节"></a>init函数的注意事项和细节</h3><ol><li>如果一个文件同时包含<strong>全局变量定义，init函数和main函数</strong>，则执行的流程全局变量定义-&gt;init函数-&gt;main函数</li></ol><p><img src="http://cdn.leafii.top/img/20220520151852.png" loading="lazy"></p><ol start="2"><li>init函数最主要的作用，就是完成一些初始化的工作，比如下面的案例</li></ol><p><img src="http://cdn.leafii.top/img/20220520151828.png" loading="lazy"></p><p><img src="http://cdn.leafii.top/img/20220520151920.png" loading="lazy"></p><ol start="3"><li>细节说明：面试题：案例如果main.go和utils.go都含有变量定义，init函数时，执行的流程又是什么样呢？</li></ol><p><img src="http://cdn.leafii.top/img/20220520152039.png" loading="lazy"></p><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>​    Go支持匿名函数，匿名函数就是没有名字的函数，如果我们某个函数只是希望使用一次，可以考虑使用匿名函数，匿名函数也可以实现多次调用。</p><h3 id="匿名函数使用方式1"><a href="#匿名函数使用方式1" class="headerlink" title="匿名函数使用方式1"></a>匿名函数使用方式1</h3><p>​    在定义匿名函数时就直接调用，这种方式匿名函数只能调用一次。【案例演示】</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//在定义匿名函数时就直接调用，这种方式匿名函数只能调用一次</span>    <span class="token comment">//案例演示，求两个数的和，使用匿名函数的方式完成</span>  res1 <span class="token operator">:=</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2  <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"res1="</span><span class="token punctuation">,</span> res1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="匿名函数使用方式2"><a href="#匿名函数使用方式2" class="headerlink" title="匿名函数使用方式2"></a>匿名函数使用方式2</h3><p>​    将<strong>匿名函数赋给一个变量</strong>（函数变量），再通过该<strong>变量来调用匿名函数</strong>【案例演示】</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//将匿名函数func (n1 int, n2 int) int 赋给a变量</span><span class="token comment">//则a的数据类型就是函数类型，此时，我们可以通过a完成调用</span>a <span class="token operator">:=</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> n1 <span class="token operator">-</span> n2<span class="token punctuation">&#125;</span>res2 <span class="token operator">:=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"res2="</span><span class="token punctuation">,</span> res2<span class="token punctuation">)</span>res3 <span class="token operator">:=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"res3="</span><span class="token punctuation">,</span> res3<span class="token punctuation">)</span></code></pre><h3 id="全局匿名函数"><a href="#全局匿名函数" class="headerlink" title="全局匿名函数"></a>全局匿名函数</h3><p>​    如果将匿名函数赋给一个全局变量，那么这个匿名函数，就成为一个全局匿名函数，可以在程序有效。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>  <span class="token comment">//func1就是一个全局匿名函数</span>  Fun1 <span class="token operator">=</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> n1 <span class="token operator">*</span> n2  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//全局匿名函数的使用</span>res4 <span class="token operator">:=</span> <span class="token function">Fun1</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"res4="</span><span class="token punctuation">,</span> res4<span class="token punctuation">)</span></code></pre><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>​    基本介绍：闭包就是<strong>一个函数</strong>和<strong>其相关的引用环境</strong>组合的一个整体（实体）</p><h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//累加器</span><span class="token keyword">func</span> <span class="token function">AddUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> n <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>  <span class="token keyword">return</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    n <span class="token operator">=</span> n <span class="token operator">+</span> x    <span class="token keyword">return</span> n  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//使用前面的代码</span>  f <span class="token operator">:=</span> <span class="token function">AddUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//11</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//13</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//16</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>对上面代码的说明和总结</p><ol><li><p>AddUpper是一个函数，返回的数据类型是<code>fun (int) int</code></p></li><li><p>闭包的说明</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> n <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">return</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>  n <span class="token operator">=</span> n <span class="token operator">+</span> x  <span class="token keyword">return</span> n<span class="token punctuation">&#125;</span></code></pre><p>返回的是一个匿名函数，但是这个匿名函数引用到函数外的n，因此这个匿名函数就和n形成一个整体，构成闭包。</p></li><li><p>可以这么理解：闭包是类，函数是操作，n是字段。函数和它使用到n构成闭包。</p></li><li><p>当我们反复的调用f函数时，n初始化一次，所以每调用一次就进行累计。</p></li><li><p>我们要搞清楚闭包的关键，就是要分析出返回的函数它使用（引用）到那些变量，因为函数和它引用到的变量共同构成闭包。</p></li><li><p>对上面代码的一个修改，加深对闭包的理解</p></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//累加器</span><span class="token keyword">func</span> <span class="token function">AddUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> n <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>  <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello"</span>  <span class="token keyword">return</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    n <span class="token operator">=</span> n <span class="token operator">+</span> x    str <span class="token operator">+=</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span> <span class="token comment">// => 36 = '$'</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"str="</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token comment">//1. str = "hello$" 2. str = "hello$$" 3. str = "hello$$$"</span>    <span class="token keyword">return</span> n  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//使用前面的代码</span>  f <span class="token operator">:=</span> <span class="token function">AddUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//11</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//13</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//16</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h3 id="闭包的最佳实践"><a href="#闭包的最佳实践" class="headerlink" title="闭包的最佳实践"></a>闭包的最佳实践</h3><ul><li>请编写一个程序，具体要求如下：</li></ul><ol><li>编写一个函数 makeSuffix (suffix string) 可以接收一个文件后缀名(比如.jpg)，并返回一个闭包</li><li>调用闭包，可以传入一个文件名，如果该文件名没有指定的后缀(比如.jpg)，则返回 文件名.jpg，如果已经有.jpg后缀，则返回原文件名。</li><li>要求使用闭包的方式完成</li><li>Strings.HasSuffix， 该函数可以判断某个字符串是否有指定的后缀 。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span>  <span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">makeSuffix</span><span class="token punctuation">(</span>suffix <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token operator">!</span>strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>suffix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> name <span class="token operator">+</span> suffix    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> name    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//返回一个闭包</span>  f <span class="token operator">:=</span> <span class="token function">makeSuffix</span><span class="token punctuation">(</span><span class="token string">".jpg"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"文件名处理后="</span><span class="token punctuation">,</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token string">"winter"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"文件名处理后="</span><span class="token punctuation">,</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token string">"winter.jpg.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>上面代码的总结和说明：</p><ol><li>返回的匿名函数和 makeSuffix (suffix string) 的 suffix 变量 组合成一个闭包,因为 返回的函数引用 到 suffix 这个变量</li><li>我们体会一下闭包的好处，如果使用传统的方法，也可以轻松实现这个功能，但是传统方法需要每 次都传入 后缀名，比如 .jpg ,而闭包因为可以保留上次引用的某个值，所以我们传入一次就可以反复 使用。可以仔细的体会一把!</li></ol><h2 id="函数的defer"><a href="#函数的defer" class="headerlink" title="函数的defer"></a>函数的defer</h2><h3 id="为什么需要defer"><a href="#为什么需要defer" class="headerlink" title="为什么需要defer"></a>为什么需要defer</h3><p>​    在函数中，程序员经常需要创建资源（比如：数据库连接、文件句柄、锁等），为了在<strong>函数执行完毕后，及时的释放资源</strong>，Go的设计者提供defer（延时机制）。</p><h3 id="快速入门案例-1"><a href="#快速入门案例-1" class="headerlink" title="快速入门案例"></a>快速入门案例</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//当执行到defer时，暂时不执行，会将defer后面的语句压入到独立的栈（defer栈）</span>  <span class="token comment">//当函数执行完毕后，再从defer栈，按照先入后出的方式出栈，执行</span>  <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok1 n1="</span><span class="token punctuation">,</span>n1<span class="token punctuation">)</span><span class="token comment">//defer 3. ok1 n1 = 10</span>  <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok2 n2="</span><span class="token punctuation">,</span>n2<span class="token punctuation">)</span><span class="token comment">//defer 2. ok2 n2 = 20</span>    res <span class="token operator">:=</span> n1 <span class="token operator">+</span> n2 <span class="token comment">// res = 30</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok3 res="</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  res <span class="token operator">:=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"res="</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token comment">// 4. res = 30</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo06&#x2F;main  go run .&#x2F;main.gook3 res&#x3D; 30ok2 n2&#x3D; 20ok1 n1&#x3D; 10res&#x3D; 30</code></pre><h3 id="defer的注意事项和细节"><a href="#defer的注意事项和细节" class="headerlink" title="defer的注意事项和细节"></a>defer的注意事项和细节</h3><ol><li>当go执行到一个defer时，不会立即执行defer后的语句，而是将defer后的语句压入到一个栈中【暂时称此栈为defer栈】，然后继续执行函数下一个语句</li><li>当函数执行完毕后，再从defer栈中，依次从栈顶取出语句执行（注：遵守栈 先入后出的机制），所以可以看到前面案例输出的顺序。</li><li>在defer将语句放入到栈时，也会将相关的值拷贝同时入栈。<strong>请看一段代码：</strong></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//当执行到defer时，暂时不执行，会讲defer后面的语句压入到独立的栈(defer栈)</span>  <span class="token comment">//当函数执行完毕后，再从defer栈，按照先入后出的方式出栈，执行</span>  <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok1 n1="</span><span class="token punctuation">,</span>n1<span class="token punctuation">)</span> <span class="token comment">//defer 3. ok1 n1=10</span>  <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok2 n2="</span><span class="token punctuation">,</span>n2<span class="token punctuation">)</span> <span class="token comment">//defer 2. ok2 n2=20</span>  <span class="token comment">//增加一句话</span>  n1<span class="token operator">++</span> <span class="token comment">//n1 = 11</span>  n2<span class="token operator">++</span> <span class="token comment">//n2 = 21</span>  res <span class="token operator">:=</span> n1 <span class="token operator">+</span> n2 <span class="token comment">// res = 32</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok3 res="</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token comment">//1. ok3 res= 32</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  res <span class="token operator">:=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"res="</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token comment">//4. res = 32</span><span class="token punctuation">&#125;</span></code></pre><p><img src="http://cdn.leafii.top/img/20220520152102.png" loading="lazy"></p><h3 id="defer的最佳实践"><a href="#defer的最佳实践" class="headerlink" title="defer的最佳实践"></a>defer的最佳实践</h3><p>defer最主要的价值是在，当函数执行完毕后可以及时的释放函数创建的资源。看看模拟代码： </p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//关闭文件资源</span>  file <span class="token operator">=</span> <span class="token function">openfile</span><span class="token punctuation">(</span>文件名<span class="token punctuation">)</span>  <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//其他代码</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//释放数据库资源</span>  connect <span class="token operator">=</span> <span class="token function">openDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">defer</span> cinnect<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//其他代码</span><span class="token punctuation">&#125;</span></code></pre><p>说明</p><ol><li>在Golang编程中的通常做法是，创建资源后，比如（打开了文件，获取了数据库的链接，或者是锁资源），可以执行defer file.Close() defer connect.Close()</li><li>在defer后，可以继续使用创建资源。</li><li>当函数完毕后，系统会依次从defer栈中，取出语句，关闭资源</li><li>这种机制，非常简洁，程序员不用再为什么时候关闭资源而烦心。</li></ol><h2 id="函数参数传递方式"><a href="#函数参数传递方式" class="headerlink" title="函数参数传递方式"></a>函数参数传递方式</h2><h3 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>​    我们在讲解函数注意事项和使用细节时，已经讲过值类型和引用类型了，这里我们再系统总结一 下，因为这是重难点，值类型参数默认就是值传递，而引用类型参数默认就是引用传递。</p><h3 id="两种传递方式"><a href="#两种传递方式" class="headerlink" title="两种传递方式"></a>两种传递方式</h3><ol><li>值传递</li><li>引用传递</li></ol><p>  其实，不管是值传递还是引用传递，传递给函数的都是变量的副本，不同的是，值传递的是值的拷贝，引用传递的是地址的拷贝，一般来说，地址拷贝效率高，因为数据量小，而值拷贝决定拷贝的 数据大小，数据越大，效率越低。</p><h3 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h3><ol><li>值类型：基本数据类型int系列，float系列，bool，string，数组和结构体struct</li><li>引用类型：指针、slice切片、map、管道chan、interface等都是引用类型</li></ol><h3 id="值传递和引用传递使用特点"><a href="#值传递和引用传递使用特点" class="headerlink" title="值传递和引用传递使用特点"></a>值传递和引用传递使用特点</h3><ol><li>值类型默认是值传递，变量直接存储值，内存通常在栈中分配【示意图】</li></ol><p><img src="http://cdn.leafii.top/img/20220520152119.png" loading="lazy"></p><ol start="2"><li>引用类型默认是引用传递：变量存储的是一个地址，这个地址对应的空间才真正存储数据（值），内存通常在堆上分配，当没有任何变量引出这个地址时，该地址对应的数据空间就成为一个垃圾，由GC来回收。【示意图】</li></ol><p><img src="http://cdn.leafii.top/img/20220520152137.png" loading="lazy"></p><ol start="3"><li>如果希望函数内的变量能修改函数外的变量，可以传入变量的地址&amp;，函数内以指针的方式操作变量。从效果上看类似引用。这个案例在前面详解函数使用注意事项中有。</li></ol><p><img src="http://cdn.leafii.top/img/20220520152150.png" loading="lazy"></p><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><ol><li>函数内部声明&#x2F;定义的变量叫局部变量，作用域仅限于<strong>函数内部</strong></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//age 和 Name 的作用域就只在test函数内部</span>  age <span class="token operator">:=</span> <span class="token number">10</span>  Name <span class="token operator">:=</span> <span class="token string">"tom~"</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>函数外部声明&#x2F;定义的变量叫全局变量，作用域在整个包都有效，如果其首字母为大写，则作用 域在整个程序有效</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span><span class="token punctuation">(</span>  <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//函数外部声明/定义的变量叫全局变量</span><span class="token comment">//作用域在整个包都有效，如果其首字母为大写，则作用域在整个程序有效</span><span class="token keyword">var</span> age <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token keyword">var</span> Name <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"jack~"</span><span class="token comment">//函数</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//age和Name的作用域就只在test函数内部</span>  age <span class="token operator">:=</span> <span class="token number">10</span>  Name <span class="token operator">:=</span> <span class="token string">"tom~"</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"age="</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token comment">//10</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Name="</span><span class="token punctuation">,</span> Name<span class="token punctuation">)</span> <span class="token comment">// tom~</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"age="</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token comment">// 50</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Name="</span><span class="token punctuation">,</span> Name<span class="token punctuation">)</span> <span class="token comment">//jack~</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="3"><li>如果变量是在一个代码块，比如for&#x2F;if中，那么这个变量的作用域就在该代码块</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//如果变量是在一个代码块，比如for/if中，那么这个变量的作用域就在该代码块</span><span class="token keyword">for</span> i<span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token comment">//局部变量</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span></code></pre><h3 id="变量作用域的课堂练习"><a href="#变量作用域的课堂练习" class="headerlink" title="变量作用域的课堂练习"></a>变量作用域的课堂练习</h3><ul><li>题1</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"tom~"</span><span class="token keyword">func</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// tom~</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  name <span class="token operator">:=</span> <span class="token string">"jack~"</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// jack</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// tom</span>  <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//tom</span>  <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// jack</span>  <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// tom</span><span class="token punctuation">&#125;</span></code></pre><ul><li>题2</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> Age <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">20</span> <span class="token comment">// ok</span>Name <span class="token operator">:=</span> <span class="token string">"tom"</span> <span class="token comment">// var Name stringName = "tom"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>Name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><strong>错误，因为赋值语句 不能在函数体外面</strong></p><h2 id="函数课堂练习（综合）"><a href="#函数课堂练习（综合）" class="headerlink" title="函数课堂练习（综合）"></a>函数课堂练习（综合）</h2><ol><li>函数可以没有返回值案例，编写一个函数，从终端输入一个整数打印出对应的金字塔</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//将打印金字塔的代码封装到函数中</span><span class="token keyword">func</span> <span class="token function">printPyramid</span><span class="token punctuation">(</span>totalLevel <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//i表示层数</span>  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> totalLevel<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//在打印*前先打印空格</span>    <span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> totalLevel <span class="token operator">-</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//j表示每层打印多少</span>    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//调用printPyramid函数就可以打印金字塔</span>  <span class="token comment">//从终端输入一个整数打印出对应的金字塔</span>  <span class="token keyword">var</span> n <span class="token builtin">int</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入打印金字塔的层数"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span>  <span class="token function">printPyramid</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">请输入打印金字塔的层数3  * ********</code></pre><ol start="2"><li>编写一个函数，从终端输入一个整数（1到9），打印出对应的乘法表</li></ol><ul><li>思路：将九九乘法表以函数的方式封装，在需要打印时，直接调用即可</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">printMulti</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//打印出九九乘法表</span>  <span class="token comment">//i表示层数</span>  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> j<span class="token operator">:=</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v * %v = %v \t"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">*</span> i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//从终端输入一个整数表示要打印的乘法表对应的数</span>  <span class="token keyword">var</span> num <span class="token builtin">int</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入九九乘法表的对应数"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span>  <span class="token function">printMulti</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">请输入九九乘法表的对应数71 * 1 &#x3D; 1 1 * 2 &#x3D; 2       2 * 2 &#x3D; 4 1 * 3 &#x3D; 3       2 * 3 &#x3D; 6       3 * 3 &#x3D; 9 1 * 4 &#x3D; 4       2 * 4 &#x3D; 8       3 * 4 &#x3D; 12      4 * 4 &#x3D; 16 1 * 5 &#x3D; 5       2 * 5 &#x3D; 10      3 * 5 &#x3D; 15      4 * 5 &#x3D; 20      5 * 5 &#x3D; 25 1 * 6 &#x3D; 6       2 * 6 &#x3D; 12      3 * 6 &#x3D; 18      4 * 6 &#x3D; 24      5 * 6 &#x3D; 30      6 * 6 &#x3D; 36 1 * 7 &#x3D; 7       2 * 7 &#x3D; 14      3 * 7 &#x3D; 21      4 * 7 &#x3D; 28      5 * 7 &#x3D; 35      6 * 7 &#x3D; 42       7 * 7 &#x3D; 49 </code></pre><ol start="3"><li>编写函数，对给定的一个二位数组（3 * 3）转置，这个题将数组的时候再完成8</li></ol><h2 id="字符串常用的系统函数"><a href="#字符串常用的系统函数" class="headerlink" title="字符串常用的系统函数"></a>字符串常用的系统函数</h2><p>​    说明：字符串在我们程序开发中，使用的是非常多的，常用的函数需要同学们掌握[带看手册或者 官方编程指南]</p><ol><li>统计字符串的长度，按字节 len(str)</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  str <span class="token operator">:=</span> <span class="token string">"hello叶"</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"str len="</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 8</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>字符串遍历，同时处理有中文的问题 <code>r := []rune(str)</code></li></ol><pre class="language-go" data-language="go"><code class="language-go">str2 <span class="token operator">:=</span> <span class="token string">"hello北京"</span><span class="token comment">//字符串遍历，同时处理有中文的问题 r := []rune(str)</span>r <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"字符=%c\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="3"><li>字符串转整数：<code>n,err := strong.Atoi(&quot;12&quot;)</code></li></ol><pre class="language-go" data-language="go"><code class="language-go">n<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"转换错误"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"转成的结果是"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="4"><li>整数转字符串 <code>str = strconv.Itoa(12345)</code></li></ol><pre class="language-go" data-language="go"><code class="language-go">str <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str=%v, str=%T"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span></code></pre><ol start="5"><li>字符串 转 []byte: <code>var bytes = []byte(&quot;hello go&quot;)</code></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> bytes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello go"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"bytes = %v \n"</span><span class="token punctuation">,</span>bytes<span class="token punctuation">)</span></code></pre><ol start="6"><li>[]byte 转 字符串：<code>str = string([]byte&#123;97,98,99&#125;)</code></li></ol><pre class="language-go" data-language="go"><code class="language-go">str <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">&#123;</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str=%v\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span></code></pre><ol start="7"><li>10进制转2，8，16进制： <code>str = strconv.FormatInt(123,2) // 2-&gt;8, 16</code></li></ol><pre class="language-go" data-language="go"><code class="language-go">str <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"123对应的二进制是=%v\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span>str <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"123对应的16进制是%v\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span></code></pre><ol start="8"><li>查找子串是否在指定的字符串中： <code>strings.Contains(&quot;seafood&quot;, &quot;foo&quot;) //true</code></li></ol><pre class="language-go" data-language="go"><code class="language-go">b <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Contaions</span><span class="token punctuation">(</span><span class="token string">"seafood"</span><span class="token punctuation">,</span> <span class="token string">"mary"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"b=%v\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span></code></pre><ol start="9"><li>统计一个字符串有几个指定的子串： <code>strings.Count(&quot;seheese&quot;, &quot;e&quot;) //4</code></li></ol><pre class="language-go" data-language="go"><code class="language-go">num <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token string">"ceheese"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"num=%v\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span></code></pre><ol start="10"><li>不区分大小写的字符串比较(&#x3D;&#x3D;是区分字母大小写的): <code>fmt.Println(strings.EqualFold(&quot;abc&quot;, &quot;Abc&quot;)) // true</code></li></ol><pre class="language-go" data-language="go"><code class="language-go">b <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">EqualFold</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"Abc"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"b=%v\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">// true</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"结果"</span><span class="token punctuation">,</span><span class="token string">"abc"</span> <span class="token operator">==</span> <span class="token string">"Abc"</span><span class="token punctuation">)</span> <span class="token comment">//false 区分字母大小写</span></code></pre><ol start="11"><li>返回子串在字符串第一次出现的index值，如果没有返回-1:<code>strings.Index(&quot;NLT_abc&quot;, &quot;abc&quot;) //4</code></li></ol><pre class="language-go" data-language="go"><code class="language-go">index <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span><span class="token string">"NLT_abc"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"index=%v\n"</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token comment">// true</span></code></pre><ol start="12"><li>返回子串在字符串最后一次出现的index，如没有返回-1:<code>strings.LastIndex(&quot;go golang&quot;,&quot;go&quot;)</code></li></ol><pre class="language-go" data-language="go"><code class="language-go">index <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">LastIndex</span><span class="token punctuation">(</span><span class="token string">"go golang"</span><span class="token punctuation">,</span><span class="token string">"go"</span><span class="token punctuation">)</span> <span class="token comment">//3</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"index=%v\n"</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span></code></pre><ol start="13"><li>将指定的子串替换成 另外一个子串:<code> strings.Replace(&quot;go go hello&quot;, &quot;go&quot;, &quot;go 语言&quot;, n)</code> n 可以指定你希望替换几个，如果 n&#x3D;-1 表示全部替换</li></ol><pre class="language-go" data-language="go"><code class="language-go">str2 <span class="token operator">=</span> <span class="token string">"go go hello"</span>str <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token string">"go"</span><span class="token punctuation">,</span> <span class="token string">"北京"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str=%v str2=%v\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">,</span> str2<span class="token punctuation">)</span></code></pre><ol start="14"><li><p>按照指定的某个字符，为分割标识，将一个字符串拆分成字符串数组:</p><p><code>strings.Split(&quot;hello,wrold,ok&quot;, &quot;,&quot;)</code></p></li></ol><pre class="language-go" data-language="go"><code class="language-go">strArr <span class="token operator">:=</span> <span class="token builtin">string</span><span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">"hello,world,ok"</span><span class="token punctuation">,</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str[%v]=%v\n"</span><span class="token punctuation">,</span> strArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"strArr=%v\n"</span><span class="token punctuation">,</span>strArr<span class="token punctuation">)</span></code></pre><ol start="15"><li>将字符串的字母进行大小写的转换：<code>strings.ToLower(&quot;Go&quot;) // go strings.ToUpper(&quot;Go&quot;) // GO</code></li></ol><pre class="language-go" data-language="go"><code class="language-go">str <span class="token operator">:=</span> <span class="token string">"golang Hello"</span>str <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>str <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str=%v\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token comment">// GOLANG HELLO</span></code></pre><ol start="16"><li>将字符串左右两边的空格去掉：<code> strings.TrimSpace(&quot;tn a lone gopher ntrn&quot;)</code></li></ol><pre class="language-go" data-language="go"><code class="language-go">str <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span><span class="token string">"tn a lone gopher ntrn"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str=%q\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span> </code></pre><ol start="17"><li>将字符串左右两边指定的字符去掉 : <code>strings.Trim(&quot;! hello! &quot;, &quot; !&quot;)//// [&quot;hello&quot;] //将左右两边 !和 &quot;&quot;去掉</code></li></ol><pre class="language-go" data-language="go"><code class="language-go">str <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token string">"! hello! "</span><span class="token punctuation">,</span> <span class="token string">" !"</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str=%q\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span></code></pre><ol start="18"><li><p>将字符串左边指定的字符去掉：<code> strings.TrimLeft(&quot;!hello!&quot;,&quot;!&quot;) //[&quot;hello&quot;]将左边！和&quot;&quot;去掉</code></p></li><li><p>将字符串右边指定的字符去掉：<code> strings.TrimRight(&quot;!hello!&quot;,&quot;!&quot;) //[&quot;hello&quot;]将右边！和&quot;&quot;去掉</code></p></li><li><p>判断字符串是否以指定的字符串开头:<code> strings.HasPrefix(&quot;ftp://192.168.10.1&quot;, &quot;ftp&quot;) // true</code></p></li></ol><pre class="language-go" data-language="go"><code class="language-go">b <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span><span class="token string">"ftp://192.168.10.1"</span><span class="token punctuation">,</span> <span class="token string">"hsp"</span><span class="token punctuation">)</span> <span class="token comment">// false</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"b=%v\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span></code></pre><ol start="21"><li>判断字符串是否以指定的字符串结束：<code>strings.HasSuffix(&quot;NLT_abc.jpg&quot;,&quot;abc&quot;) //false</code></li></ol><h2 id="时间和日期相关函数"><a href="#时间和日期相关函数" class="headerlink" title="时间和日期相关函数"></a>时间和日期相关函数</h2><h3 id="基本的介绍"><a href="#基本的介绍" class="headerlink" title="基本的介绍"></a>基本的介绍</h3><p>​    说明：在编程中，程序员会经常用到日期相关的函数，比如：统计某段代码执行花费的时间等等。</p><ol><li>时间和日期相关函数，需要导入time包</li></ol><p><img src="http://cdn.leafii.top/img/20220520152211.png" loading="lazy"></p><ol start="2"><li>time.Time类型，用于表示时间</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span>  <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//看看日期和时间相关函数和方法使用</span>  <span class="token comment">// 1.获取当前时间</span>  now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"now=%v now type=%T\n"</span><span class="token punctuation">,</span> now<span class="token punctuation">,</span> now<span class="token punctuation">)</span>  <span class="token comment">// 2.通过now可以获取到年月日，时分秒</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"年=%v\n"</span><span class="token punctuation">,</span> now<span class="token punctuation">.</span><span class="token function">Year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"月=%v\n"</span><span class="token punctuation">,</span> now<span class="token punctuation">.</span><span class="token function">Month</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"月=%v\n"</span><span class="token punctuation">,</span> <span class="token function">int</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">Month</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"日=%v\n"</span><span class="token punctuation">,</span> now<span class="token punctuation">.</span><span class="token function">Day</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"时=%v\n"</span><span class="token punctuation">,</span> now<span class="token punctuation">.</span><span class="token function">Hour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"分=%v\n"</span><span class="token punctuation">,</span> now<span class="token punctuation">.</span><span class="token function">Minute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"秒=%v\n"</span><span class="token punctuation">,</span> now<span class="token punctuation">.</span><span class="token function">Second</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="4"><li><p>格式化日期时间</p><ul><li>方式1:就是使用Printf或者Sprintf</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//格式化日期时间</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前年月日 %d-%d-%d %d:%d:%d \n"</span><span class="token punctuation">,</span>now<span class="token punctuation">.</span><span class="token function">Year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> now<span class="token punctuation">.</span><span class="token function">Month</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> now<span class="token punctuation">.</span><span class="token function">Day</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> now<span class="token punctuation">.</span><span class="token function">Hour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> now<span class="token punctuation">.</span><span class="token function">Minute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> now<span class="token punctuation">.</span><span class="token function">Second</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"dateStr=%v\n"</span><span class="token punctuation">,</span> dateStr<span class="token punctuation">)</span></code></pre><ul><li>使用time.Format()方法完成：</li></ul><pre class="language-go" data-language="go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006-01-02 15:04:05"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006-01-02"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"15:04:05"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>对上面代码的说明：</p><p>“2006&#x2F;01&#x2F;02 15:04:05”    这个字符串的各个数字是固定的，必须是这样写。</p><p>“2006&#x2F;01&#x2F;02 15:05:05”    这个字符串各个数字可以自由的组合，这样可以按程序需求来返回时间和日期</p><ol start="5"><li>时间的常量</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span><span class="token punctuation">(</span>  Nanosecond Duration <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">//纳秒</span>  Microsecond<span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> Nanosecond <span class="token comment">//微秒</span>  Millisecond<span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> Microsecond <span class="token comment">//毫秒</span>  Second<span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> Millisecond <span class="token comment">//秒</span>  Minute<span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> Second <span class="token comment">//分钟</span>  Hour<span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> Minute <span class="token comment">//小时</span><span class="token punctuation">)</span></code></pre><p>​    常量的作用：<strong>在程序中可用于获取指定时间单位的时间，比如想得到100毫秒</strong></p><p>​    100 * time.Millisecond</p><ol start="6"><li>结合Sleep来使用一下时间常量</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//需求，每隔1秒打印一个数字，打印到100时就退出</span><span class="token comment">//需求2:每隔0.1秒打印一个数字，打印到100时就退出</span>i <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>  i<span class="token operator">++</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token comment">//休眠</span>  <span class="token comment">//time.Sleep(time.Second)</span>  time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">100</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">break</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="7"><li>time的Unix和UnixNano的方法</li></ol><p><img src="http://cdn.leafii.top/img/20220520152226.png" loading="lazy"></p></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//Unix和UnixNano的使用</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"unix时间戳=%v unixnano时间戳=%v\n"</span><span class="token punctuation">,</span> now<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> now<span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">2018</span>unix时间戳<span class="token operator">=</span><span class="token number">1527584269</span> unixnano时间戳<span class="token operator">=</span><span class="token number">1527584269975756200</span></code></pre><h3 id="时间和日期的课堂练习"><a href="#时间和日期的课堂练习" class="headerlink" title="时间和日期的课堂练习"></a>时间和日期的课堂练习</h3><p>编写一段代码来统计 函数test03执行的时间</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span>  <span class="token string">"time"</span>  <span class="token string">"strconv"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  str <span class="token operator">:=</span> <span class="token string">""</span>  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    str <span class="token operator">+=</span> <span class="token string">"hello"</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//在执行test03前，先获取到当前的unix时间戳</span>  start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  end <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"执行test03()耗费时间为%v秒\n"</span><span class="token punctuation">,</span> end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><p>​    Golang设计者为了编程方便，提供了一些函数，这些函数可以直接使用，我们称为Go的内置函数。文档：<a href="https://studygolang.com/pkgdoc">https://studygolang.com/pkgdoc</a> -&gt; builtin</p><ol><li>len:用来求长度，比如string、array、slice、map、channel</li><li>new:用来分配内存，主要用来分配值类型，比如int、float32,struct…返回的是指针</li></ol><p>举例说明 <strong>new</strong> 的使用:</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  num1 <span class="token operator">:=</span> <span class="token number">100</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"num1的类型%T , num1的值=%v , num1的地址%v\n"</span><span class="token punctuation">,</span> num1<span class="token punctuation">,</span> num1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>num1<span class="token punctuation">)</span>  num2 <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// *int</span>  <span class="token comment">//num2的类型%T => *int</span>  <span class="token comment">//num2的值 = 地址 0xc0420404c098 （系统分配）</span>  <span class="token comment">//num2的地址 %v = 地址 0xc04206a020 (系统分配)</span>  <span class="token comment">//num2指向的值 = 100</span>  <span class="token operator">*</span>num2 <span class="token operator">=</span> <span class="token number">100</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"num2的类型%T , num2的值=%v , num2的地址%v\n nu2这个指针， 指向的值=%v"</span><span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>num2<span class="token punctuation">,</span> <span class="token operator">*</span>num2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">num1的类型int , num1的值&#x3D;100 , num1的地址0xc00001e090num2的类型*int , num2的值&#x3D;0xc00001e098 , num2的地址0xc00000e030 num2这个指针指向的值&#x3D;100 </code></pre><p>上面代码对应的内存分析图：</p><p><img src="http://cdn.leafii.top/img/20220520152245.png" loading="lazy"></p><ol start="3"><li>make: 用来<strong>分配内存</strong>，主要用来<strong>分配引用类型</strong>，比如channel 、 map 、slice。这个之后讲解。</li></ol><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  num1 <span class="token operator">:=</span> <span class="token number">10</span>  num2 <span class="token operator">:=</span> <span class="token number">0</span>  res <span class="token operator">:=</span> num1 <span class="token operator">/</span> num2  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"res="</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//测试</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main()下面的代码..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">panic: runtime error: integer divide by zerogoroutine 1 [running]:main.test()        &#x2F;Users&#x2F;leafii&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo10&#x2F;main&#x2F;main.go:8 +0x11main.main()        &#x2F;Users&#x2F;leafii&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo10&#x2F;main&#x2F;main.go:13 +0x25exit status 2</code></pre><ul><li>对上面代码的总结<ol><li>在默认情况下，当发生错误后(panic) ,程序就会退出(崩溃.)</li><li>如果我们希望:当发生错误后，可以捕获到错误，并进行处理，保证程序可以继续执行。还可 以在捕获到错误后，给管理员一个提示(邮件,短信。。。)</li><li>这里引出我们要将的错误处理机制</li></ol></li></ul><h3 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h3><ol><li><p>Go语言追求简洁优雅，所以，Go 语言不支持传统的 try…catch…finally 这种处理。 </p></li><li><p>Go中引入的处理方式为:<strong>defer</strong>,<strong>panic</strong>,**recover<br>**</p></li><li><p>这几个异常的使用场景可以这么简单描述:Go 中可以抛出一个 panic 的异常，然后在 defer 中</p><p>通过 recover 捕获这个异常，然后正常处理</p></li></ol><h3 id="使用defer-recover来处理错误"><a href="#使用defer-recover来处理错误" class="headerlink" title="使用defer+recover来处理错误"></a>使用defer+recover来处理错误</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span>  <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//使用defer + recover 来捕获和处理异常</span>  <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//recover() 内置函数，可以捕获到异常</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> nul <span class="token punctuation">&#123;</span> <span class="token comment">//说明捕获到错误</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  num1 <span class="token operator">:=</span> <span class="token number">10</span>  num2 <span class="token operator">:=</span> <span class="token number">0</span>  res <span class="token operator">:=</span> num1 <span class="token operator">/</span> num2  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"res="</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//测试</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main()下面的代码..."</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo10&#x2F;main  go run .&#x2F;main.goerr&#x3D; runtime error: integer divide by zeromain()下面的代码...main()下面的代码...main()下面的代码...^Csignal: interrupt</code></pre><h3 id="错误处理的好处"><a href="#错误处理的好处" class="headerlink" title="错误处理的好处"></a>错误处理的好处</h3><p>进行错误处理后，程序不会轻易挂掉，如果加入预警代码，就可以让程序更加的健壮。【案例演示】</p><pre class="language-go" data-language="go"><code class="language-go"> ~<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>go_code<span class="token operator">/</span>chapter06<span class="token operator">/</span>demo11<span class="token operator">/</span>main  <span class="token keyword">go</span> run <span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span>err<span class="token operator">=</span> runtime <span class="token builtin">error</span><span class="token punctuation">:</span> integer divide by zero发送邮件给admin@outlook<span class="token punctuation">.</span>com~~~~~~~~~<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>下面的代码<span class="token operator">...</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>下面的代码<span class="token operator">...</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>下面的代码<span class="token operator">...</span><span class="token operator">^</span>Csignal<span class="token punctuation">:</span> interrupt</code></pre><h2 id="自定义错误"><a href="#自定义错误" class="headerlink" title="自定义错误"></a>自定义错误</h2><h3 id="自定义错误的介绍"><a href="#自定义错误的介绍" class="headerlink" title="自定义错误的介绍"></a>自定义错误的介绍</h3><p>Go程序中，也支持自定义错误，使用error.New和panic内置函数</p><ol><li>errors.New(“错误说明”)，会返回一个error类型的值，表示一个错误</li><li>panic内置函数，接收一个interface{}类型的值（也就是任何值了）作为参数。可以接收error类型的变量，<strong>输出错误信息，并退出程序。</strong></li></ol><h3 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span>  <span class="token string">"errors"</span><span class="token punctuation">)</span><span class="token comment">//函数去读取以配置文件init.conf的信息</span><span class="token comment">//如果文件名传入不正确，我们就返回一个自定义的错误</span><span class="token keyword">func</span> <span class="token function">readConf</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"config.ini"</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//读取</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//返回一个自定义错误</span>    <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"读取文件错误.."</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  err <span class="token operator">:=</span> <span class="token function">readConf</span><span class="token punctuation">(</span><span class="token string">"config2.ini"</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果读取文件发送错误，就输出这个错误，并终止程序</span>    <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"test02()继续执行..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//测试</span>  <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main()下面的代码..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">panic: 读取文件错误..goroutine 1 [running]:main.test02()        &#x2F;Users&#x2F;leafii&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo12&#x2F;main&#x2F;main.go:21 +0x5amain.main()        &#x2F;Users&#x2F;leafii&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo12&#x2F;main&#x2F;main.go:27 +0x25exit status 2</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Go语言の函数、包和错误处理&quot;&gt;&lt;a href=&quot;#Go语言の函数、包和错误处理&quot; class=&quot;headerlink&quot; title=&quot;Go语言の函数、包和错误处理&quot;&gt;&lt;/a&gt;Go语言の函数、包和错误处理&lt;/h1&gt;&lt;p&gt;本文章主要讲解了Go语言的函数，包和错误处理等知识。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Go" scheme="tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言の程序流程控制</title>
    <link href="2021/01/15/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>2021/01/15/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</id>
    <published>2021-01-15T14:28:36.000Z</published>
    <updated>2022-05-20T07:27:25.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go语言の程序流程控制"><a href="#Go语言の程序流程控制" class="headerlink" title="Go语言の程序流程控制"></a>Go语言の程序流程控制</h1><h2 id="程序流程控制介绍"><a href="#程序流程控制介绍" class="headerlink" title="程序流程控制介绍"></a>程序流程控制介绍</h2><p>在程序中，程序运行的流程控制决定程序是如何执行的，是我们必须掌握的，主要有三大流程控制语句。</p><ol><li>顺序控制</li><li>分支控制</li><li>循环控制</li></ol><span id="more"></span><h2 id="顺序控制"><a href="#顺序控制" class="headerlink" title="顺序控制"></a>顺序控制</h2><p>​    程序从上到下逐行执行，中间没有任何判断和跳转。</p><p>​    一个案例说明，必须下面的代码中，没有判断，也没有跳转，因此程序按照默认的流程执行，即顺序控制。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> days <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">97</span><span class="token keyword">var</span> week <span class="token builtin">int</span> <span class="token operator">=</span> days <span class="token operator">/</span> <span class="token number">7</span><span class="token keyword">var</span> day <span class="token builtin">int</span> <span class="token operator">=</span> days <span class="token operator">%</span> <span class="token number">7</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d个星期零%d天\n"</span><span class="token punctuation">,</span> week<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token keyword">var</span> huashi <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">134.2</span><span class="token keyword">var</span> sheshi <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">5.0</span> <span class="token operator">/</span> <span class="token number">9</span> <span class="token operator">*</span> <span class="token punctuation">(</span>huashi <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v 对应的摄氏温度=%v \n"</span><span class="token punctuation">,</span> huashi<span class="token punctuation">,</span> sheshi<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">13个星期零6天134.2对应的摄氏温度&#x3D; 19 </code></pre><h3 id="程序控制的流程图"><a href="#程序控制的流程图" class="headerlink" title="程序控制的流程图"></a>程序控制的流程图</h3><p><img src="http://cdn.leafii.top/img/20220520152341.png" loading="lazy"></p><h3 id="顺序控制举例和注意事项"><a href="#顺序控制举例和注意事项" class="headerlink" title="顺序控制举例和注意事项"></a>顺序控制举例和注意事项</h3><p>​    Golang中定义变量时采用合法的前向引用。如：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> num1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">//声明了num1</span>  <span class="token keyword">var</span> num2 <span class="token builtin">int</span> <span class="token operator">=</span> num1 <span class="token operator">+</span> <span class="token number">20</span> <span class="token comment">//使用num1</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>错误形式：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> num2 <span class="token builtin">int</span> <span class="token operator">=</span> num1 <span class="token operator">+</span> <span class="token number">20</span> <span class="token comment">//使用num1</span>  <span class="token keyword">var</span> num1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">//声明num1 (❌)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="分支控制"><a href="#分支控制" class="headerlink" title="分支控制"></a>分支控制</h2><h3 id="分支控制的基本介绍"><a href="#分支控制的基本介绍" class="headerlink" title="分支控制的基本介绍"></a>分支控制的基本介绍</h3><p>分支控制就是让程序有选择执行。有下面三种形式</p><ol><li>单分支</li><li>双分支</li><li>多分枝</li></ol><h3 id="单分支控制"><a href="#单分支控制" class="headerlink" title="单分支控制"></a>单分支控制</h3><ul><li>基本语法</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> 条件表达式<span class="token punctuation">&#123;</span>  执行代码块<span class="token punctuation">&#125;</span></code></pre><p><strong>说明：当条件表达式为true时，就会执行{}的代码。注意{}是必须有的，就算你只写一行代码。</strong></p><ul><li>应用案例</li></ul><p>编写一个程序，可以输入人的年龄,如果该同志的年龄大于 18 岁,则输出 “你年龄大 于 18,要对自己的行为负责!”。      需求—【分析】—&gt;代码</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> age <span class="token builtin">int</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入年龄："</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>age<span class="token punctuation">)</span>    <span class="token keyword">if</span> age <span class="token operator">></span> <span class="token number">18</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你年龄大于18，要对自己的行为负责！"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go请输入年龄：10➜  main go run .&#x2F;main.go请输入年龄：29你年龄大于18，要对自己的行为负责！➜  main </code></pre><ul><li><p>单分支的流程图</p><p>流程图可以用<strong>图形方式</strong>来更加清晰的描述程序执行的流程。</p><p><img src="http://cdn.leafii.top/img/20220520152357.png" loading="lazy"></p></li><li><p>单分支的细节说明</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> age <span class="token operator">:=</span> <span class="token number">20</span><span class="token punctuation">;</span> age <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你年龄大于18，要对自己的行为负责!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="双分支控制"><a href="#双分支控制" class="headerlink" title="双分支控制"></a>双分支控制</h3><ul><li>基本语法</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> 条件表达式<span class="token punctuation">&#123;</span>  执行代码块<span class="token number">1</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  执行代码块<span class="token number">2</span><span class="token punctuation">&#125;</span></code></pre><p><strong>说明：当条件表达式成立，即执行代码块1，否则执行代码块2.{}也是必须有的。</strong></p><ul><li>应用案例</li></ul><p>编写一个程序,可以输入人的年龄,如果该同志的年龄大于 18 岁,则输出 “你年龄大于 18,要对 自己的行为负责!”。否则 ,输出”你的年龄不大这次放过你了.”</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> age <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入年龄："</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>age<span class="token punctuation">)</span><span class="token keyword">if</span> age <span class="token operator">></span> <span class="token number">18</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你年龄大于18，要对自己的行为负责！"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你的年龄不大这次放过你了."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go请输入年龄：19你年龄大于18，要对自己的行为负责！➜  main go run .&#x2F;main.go请输入年龄：12你的年龄不大这次放过你了.</code></pre><ul><li>双分支流程图的分析</li></ul><p><img src="http://cdn.leafii.top/img/20220520152412.png" loading="lazy"></p><ul><li>对双分支的总结</li></ul><ol><li>从上图看，条件表达式就是age&gt;18</li><li>执行代码块1 就是 fmt.Prinltn(“你的年龄大于18”)…</li><li>执行代码块2 就是 fmt.Println(“你的年龄不大”)…</li><li>双分支<strong>只会执行其中的一个分支。</strong></li></ol><h3 id="单分支和双分支的案例"><a href="#单分支和双分支的案例" class="headerlink" title="单分支和双分支的案例"></a>单分支和双分支的案例</h3><ol><li>对下列代码，若有输出，指出输出结果.</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> x <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">var</span> y <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hihihi"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"x is ="</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果是 hihihi</span></code></pre><ol start="2"><li>对下列代码，若有输出，指出输出结果.</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> x <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">2</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token keyword">else</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token comment">//没有&#123;&#125; 所以编译错误哦</span></code></pre><ol start="3"><li>对下列代码，若有输出，指出输出结果.</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> x <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//编译错误，因为else不能换行</span></code></pre><ol start="4"><li>对下列代码，若有输出，指出输出结果.</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> x <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//输出ok 但是建议把if(x>2)写成if x > 2</span></code></pre><ol start="5"><li>编写程序，声明 2 个 int32 型变量并赋值。判断两数之和，如果大于等于 50，打印“hello world!</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> n1 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">10</span>  <span class="token keyword">var</span> n2 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">50</span>  <span class="token keyword">if</span> n1 <span class="token operator">+</span> n2 <span class="token operator">>=</span><span class="token number">50</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello,world"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="6"><li>编写程序，声明 2 个 float64 型变量并赋值。判断第一个数大于 10.0，且第 2 个数小于 20.0，打 印两数之和。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> n3 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">11.0</span><span class="token keyword">var</span> n4 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">17.0</span><span class="token keyword">if</span> n3 <span class="token operator">></span> <span class="token number">10.0</span> <span class="token operator">&amp;&amp;</span> n4 <span class="token operator">&lt;</span> <span class="token number">20.0</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"和="</span><span class="token punctuation">,</span><span class="token punctuation">(</span>n3<span class="token operator">+</span>n4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="7"><li>定义两个变量 int32，判断二者的和，是否能被 3 又能被 5 整除，打印提示信息</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> num1 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">var</span> num2 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"能被3又能被5整除"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="8"><li>判断一个年份是否是闰年，闰年的条件是符合下面二者之一:(1)年份能被4整除，但不能被100 整除;(2)能被 400 整除</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> year <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">2019</span><span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">||</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token string">"是闰年!``"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="多分支控制"><a href="#多分支控制" class="headerlink" title="多分支控制"></a>多分支控制</h3><ul><li>基本语法</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> 条件表达式<span class="token number">1</span> <span class="token punctuation">&#123;</span>  执行代码块<span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">&#123;</span>  执行代码块<span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  执行代码块n<span class="token punctuation">&#125;</span></code></pre><ul><li>说明：</li></ul><ol><li>多分支的判断流程如下：<ol><li>先判断条件表达式1是否成立，如果为真，就执行代码块1</li><li>如果条件表达式1如果为假，就去判断条件表达式2是否成立，如果条件表达式2为真，就执行代码块2</li><li>以此类推</li><li>如果所有的条件表达式不成立，则执行else的语句块。</li></ol></li><li>else 不是必须的</li><li>多分支只能有一个执行入口。</li></ol><ul><li>看一个多分支的流程图</li></ul><p><img src="http://cdn.leafii.top/img/20220520152427.png" loading="lazy"></p><ul><li>多分支的快速入门案例</li></ul><p>岳小鹏参加 Golang 考试，他和父亲岳不群达成承诺: 如果:</p><p>​    成绩为 100 分时，奖励一辆 BMW; </p><p>​    成绩为(80，99]时，奖励一台 iphone7plus; </p><p>​    当成绩为[60,80]时，奖励一个 iPad; </p><p>​    其它时，什么奖励也没有。 请从键盘输入岳小鹏的期末成绩，并加以判断</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> score <span class="token builtin">int</span>  fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"请输入成绩:"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>score<span class="token punctuation">)</span>  <span class="token keyword">if</span> score <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"奖励BMW"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> score <span class="token operator">></span> <span class="token number">80</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">99</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"奖励一台iphone12 pro max"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> score <span class="token operator">>=</span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span><span class="token number">80</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"奖励一个iPad"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"啥也没"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>多分支的课堂练习</p><p>案例演示2</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> b <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> b<span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token operator">!</span>b<span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token comment">//c</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果是b</span><span class="token comment">//如果写成b=flase;能编译通过吗？如果能，结果是？（不能通过，if的条件表达式不是赋值语句)</span></code></pre><p>​    案例演示3</p><p><img src="http://cdn.leafii.top/img/20220520152442.png" loading="lazy"></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> a <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">1.0</span><span class="token keyword">var</span> b <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">4.0</span><span class="token keyword">var</span> c <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">2.0</span>m <span class="token operator">:=</span> b <span class="token operator">*</span> b <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> a <span class="token operator">*</span> c<span class="token comment">//多分支判断</span><span class="token keyword">if</span> m <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>  x1 <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">+</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> a  x2 <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">-</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> a  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x1=%v x2=%v \n"</span><span class="token punctuation">,</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">&#123;</span>  x1 <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">+</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> a  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x1=%v\n"</span><span class="token punctuation">,</span> x1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"无解..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.gox1&#x3D;-4%                                                                                           ➜  main go run .&#x2F;main.gox1&#x3D;-0.5857864376269049 x2&#x3D;-3.414213562373095%                                                    ➜  main go run .&#x2F;main.gox1&#x3D;-0.5857864376269049 x2&#x3D;-3.414213562373095 ➜  main </code></pre><p>​    案例演示4</p><p><img src="http://cdn.leafii.top/img/20220520152501.png" loading="lazy"></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> height <span class="token builtin">int32</span><span class="token keyword">var</span> money <span class="token builtin">float32</span><span class="token keyword">var</span> handsome <span class="token builtin">bool</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入身高（厘米）"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>height<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入财富（千万）"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>money<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入是否帅气（true or false）"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>handsome<span class="token punctuation">)</span><span class="token keyword">if</span> height <span class="token operator">></span> <span class="token number">180</span> <span class="token operator">&amp;&amp;</span> money <span class="token operator">></span><span class="token number">1.0</span> <span class="token operator">&amp;&amp;</span> handsome <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"一定要嫁给他！！！"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> height <span class="token operator">></span> <span class="token number">180</span> <span class="token operator">||</span> money <span class="token operator">></span><span class="token number">1.0</span> <span class="token operator">||</span> handsome<span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"勉勉强强嫁给他吧"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"不嫁......"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go请输入年龄：10➜  main go run .&#x2F;main.go请输入年龄：29➜  main go run .&#x2F;main.go请输入身高（厘米）190请输入财富（千万）12请输入是否帅气（true or false）true一定要嫁给他！！！➜  main go run .&#x2F;main.go请输入身高（厘米）120请输入财富（千万）1请输入是否帅气（true or false）false不嫁......➜  main go run .&#x2F;main.go请输入身高（厘米）120请输入财富（千万）1.2请输入是否帅气（true or false）false勉勉强强嫁给他吧➜  main </code></pre><h3 id="嵌套分支"><a href="#嵌套分支" class="headerlink" title="嵌套分支"></a>嵌套分支</h3><ul><li><p>基本介绍</p><p>在一个分支结构中又完整的嵌套了另一个完整的分支结构，里面的分支的结构称为内层分支外面的分支结构称为外层分支。</p></li><li><p>基本语法</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> 条件表达式<span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> 条件表达式<span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>说明：嵌套分支不宜过多，建议控制在3层内</strong></p><ul><li>示例代码1</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> second <span class="token builtin">float64</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入秒数"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>second<span class="token punctuation">)</span><span class="token keyword">if</span> second <span class="token operator">&lt;=</span> <span class="token number">8</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> gender <span class="token builtin">string</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入性别"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gender<span class="token punctuation">)</span>  <span class="token keyword">if</span> gender <span class="token operator">==</span> <span class="token string">"男"</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"进入决赛的男子组"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"进入决赛的女子组"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"out......"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go 请输入秒数100out......➜  main go run .&#x2F;main.go请输入秒数3请输入性别男进入决赛的男子组➜  main go run .&#x2F;main.go请输入秒数4请输入性别女进入决赛的女子组</code></pre><ul><li><p>示例代码2</p><p>出票系统：根据淡旺季的月份和年龄，打印票价</p><p>4到10是旺季：</p><p>​    成人（18-60）：60</p><p>​    儿童（&lt;18):半价 30</p><p>​    老人（&gt;60): 1&#x2F;3 20</p><p>淡季: </p><p>​    成人:40</p><p>​    其他:20</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> month <span class="token builtin">int</span><span class="token keyword">var</span> age <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入月份"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>month<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>month<span class="token operator">>=</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> month <span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入购票人年龄:"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>age<span class="token punctuation">)</span>  <span class="token keyword">if</span> age<span class="token operator">&lt;</span><span class="token number">18</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"您购买的票是旺季儿童票，享受半价优惠：30元"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> age <span class="token operator">></span> <span class="token number">60</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"您购买的票是旺季老人票，享受1/3折：20元"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"您购买的票是旺季成人票，原价购买，60元"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入购票人年龄:"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>age<span class="token punctuation">)</span>  <span class="token keyword">if</span> age<span class="token operator">&lt;</span><span class="token number">18</span> <span class="token operator">||</span> age<span class="token operator">></span><span class="token number">60</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"您购买的票是淡季其他票，享受半价优惠：20元"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"您购买的票是淡季成人票，原价购买，40元"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go 请输入秒数100➜  main go run .&#x2F;main.go# command-line-arguments➜  main go run .&#x2F;main.go请输入月份6请输入购票人年龄:19您购买的票是旺季成人票，60元➜  main go run .&#x2F;main.go请输入月份2请输入购票人年龄:12您购买的票是淡季其他票，20元➜  main go run .&#x2F;main.go请输入月份9请输入购票人年龄:61您购买的票是旺季老人票，20元➜  main go run .&#x2F;main.go请输入月份10请输入购票人年龄:71您购买的票是旺季老人票，20元➜  main </code></pre><h2 id="switch分支控制"><a href="#switch分支控制" class="headerlink" title="switch分支控制"></a>switch分支控制</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>switch语句用于基于不同条件执行不同动作，每一个case分支都是唯一的，从上到下逐疫测试，知道匹配为止。</li><li>匹配项后面也不需要再加break</li></ol><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">switch</span> 表达式 <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> 表达式<span class="token number">1</span><span class="token punctuation">,</span>表达式<span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">:</span>  语句块<span class="token number">1</span>  <span class="token keyword">case</span> 表达式<span class="token number">3</span>，表达式<span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">:</span>  语句块<span class="token number">2</span>  <span class="token comment">//这里可以有多个case语句</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>  语句块<span class="token punctuation">&#125;</span></code></pre><h3 id="switch的流程图"><a href="#switch的流程图" class="headerlink" title="switch的流程图"></a>switch的流程图</h3><p><img src="http://cdn.leafii.top/img/20220520152516.png" loading="lazy"></p><ul><li>说明和总结<ol><li>switch的执行的流程是，先执行表达式，得到值，然后和case的表达式进行比较，如果相等，就匹配到，然后执行对应的case的语句块，然后退出switch控制。</li><li>如果switch的表达式的值没有和任何的case的表达式匹配成功，则执行default的语句块，执行后退出switch的控制</li><li>golang的case后的表达式可以有多个，使用 逗号 间隔。</li><li>golang中的case语句块不需要写break，因为默认会有，即在默认情况下，当程序执行完case语句块后，就直接退出该switch控制结构。</li></ol></li></ul><h3 id="switch快速入门案例"><a href="#switch快速入门案例" class="headerlink" title="switch快速入门案例"></a>switch快速入门案例</h3><ul><li><p>案例：</p><p>请编写一个程序，该程序可以接收一个字符，比如: a,b,c,d,e,f,g a表示星期一，b表示星期二 … 根据用户的输入显示相依的信息.要求使用 switch 语句完成</p></li><li><p>代码</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token comment">//分析思路</span><span class="token comment">//1. 定义一个变量接收字符</span><span class="token comment">//2. 使用switch完成</span><span class="token keyword">var</span> key <span class="token builtin">byte</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入一个字符 a,b,c,d,e,f,g"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token keyword">switch</span> key <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token char">'a'</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周一"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token char">'b'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周二"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token char">'c'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周三"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token char">'d'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周四"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token char">'e'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周五"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token char">'f'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周六"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token char">'g'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周日"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"输入有误..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">请输入一个字符 a,b,c,d,e,f,ga周一➜  main ➜  main go run .&#x2F;main.go请输入一个字符 a,b,c,d,e,f,gq输入有误...</code></pre><h3 id="switch的使用的注意事项"><a href="#switch的使用的注意事项" class="headerlink" title="switch的使用的注意事项"></a>switch的使用的注意事项</h3><ol><li>case&#x2F;switch后是一个表达式（即：常量值、变量、一个有返回值的函数等都可以）</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//写一个很简单的函数</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span>char <span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">byte</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> char <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//</span>  <span class="token keyword">var</span> key <span class="token builtin">byte</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入一个字符 a,b,c,d,e,f,g"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">)</span>    <span class="token keyword">switch</span> <span class="token function">test</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">&#123;</span> <span class="token comment">//修改成函数了哦！！</span><span class="token keyword">case</span> <span class="token char">'a'</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周一"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token char">'b'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周二"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token char">'c'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周三"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token char">'d'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周四"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token char">'e'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周五"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token char">'f'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周六"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token char">'g'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周日"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"输入有误..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>case后的各个表达式的值的数据类型，必须和switch的表达式数据类型一致</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> n1 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">var</span> n2 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">switch</span> n1 <span class="token punctuation">&#123;</span><span class="token keyword">case</span> n2 <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span> <span class="token comment">//错误，因为n2和n1的数据类型不一致</span><span class="token keyword">default</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"没匹配到"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="3"><li>case 后面可以带多个表达式，使用逗号间隔。比如<code>case 表达式1，表达式2...</code></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> n1 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">var</span> n2 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">switch</span> n1 <span class="token punctuation">&#123;</span><span class="token keyword">case</span> n2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span><span class="token keyword">default</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"没匹配到"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="4"><li>case后面的表达式如果是常量值（字面量），则要求不能重复</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> n1 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">var</span> n2 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">switch</span> n1 <span class="token punctuation">&#123;</span><span class="token keyword">case</span> n2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">:</span>        <span class="token comment">//case后面可以有多个表达式</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span> <span class="token keyword">case</span> <span class="token number">5</span> <span class="token punctuation">:</span>                <span class="token comment">// 错误，因为前面我们有常量5，因此重复，就会报错哦</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok2~"</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"没匹配到"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="5"><li>case后面不需要带break，程序匹配到一个case后就会执行对应的代码块，然后退出switch，如果一个都匹配不到，则执行default</li><li>default语句不是必须的</li><li>switch后也可以不带表达式，类似 if-else分支来使用。【案例演示】</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> age <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">switch</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> age <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"age == 10"</span><span class="token punctuation">)</span><span class="token keyword">case</span> age <span class="token operator">==</span> <span class="token number">20</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"age == 20"</span><span class="token punctuation">)</span><span class="token keyword">default</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"没有匹配到哦"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>score <span class="token operator">:=</span> <span class="token number">90</span><span class="token keyword">switch</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> score <span class="token operator">></span> <span class="token number">90</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"成绩优秀.."</span><span class="token punctuation">)</span><span class="token keyword">case</span> score <span class="token operator">>=</span><span class="token number">70</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"成绩优良.."</span><span class="token punctuation">)</span><span class="token keyword">case</span> score <span class="token operator">>=</span><span class="token number">60</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">70</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"成绩及格.."</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"不及格！"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="8"><li>switch后也可以直接声明&#x2F;定义一个变量，分号结束，<strong>不推荐</strong>。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">switch</span> grade <span class="token operator">:=</span> <span class="token number">90</span><span class="token punctuation">;</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> grade <span class="token operator">></span> <span class="token number">90</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"成绩优秀.."</span><span class="token punctuation">)</span><span class="token keyword">case</span> grade <span class="token operator">>=</span><span class="token number">70</span> <span class="token operator">&amp;&amp;</span> grade <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"成绩优良.."</span><span class="token punctuation">)</span><span class="token keyword">case</span> grade <span class="token operator">>=</span><span class="token number">60</span> <span class="token operator">&amp;&amp;</span> grade <span class="token operator">&lt;=</span> <span class="token number">70</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"成绩及格.."</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"不及格！"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="9"><li>switch穿透-fallthrough，如果在case语句块后增加fallthrough，则会继续执行下一个case，也叫switch穿透。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//switch的穿透fallthrought</span><span class="token keyword">var</span> num <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">switch</span> num <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">10</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span><span class="token keyword">fallthrough</span><span class="token comment">//默认只能穿透一层</span><span class="token keyword">case</span> <span class="token number">20</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok2"</span><span class="token punctuation">)</span><span class="token keyword">fallthrough</span><span class="token keyword">case</span> <span class="token number">30</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok3"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"没有匹配到哦"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.gook1ok2ok3➜  main </code></pre><ol start="10"><li>Type Switch : switch 语句还可以被用于 type-switch 来判断某个interface变量中实际指向的变量类型【interface体验】</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> x <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">10.0</span>x <span class="token operator">=</span> y<span class="token keyword">switch</span> i <span class="token operator">:=</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" x 的类型～ : %T"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x 是 int 型"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token builtin">float64</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x 是 float64 型 "</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">float64</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x 是 func(int) 型"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x 是 bool 或 string 型"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"未知型"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.gox 是 float64 型 </code></pre><h3 id="switch课堂练习"><a href="#switch课堂练习" class="headerlink" title="switch课堂练习"></a>switch课堂练习</h3><ol><li>使用switch把小写类型的char型转为大写（键盘输入）。只转换a,b,c,d,e 其他的输出”other”。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> ch <span class="token builtin">byte</span>fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ch<span class="token punctuation">)</span> <span class="token comment">//获取输入</span><span class="token comment">//fmt.Printf("%c",ch)</span><span class="token comment">//fmt.Println();</span><span class="token keyword">switch</span> ch <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token char">'a'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token char">'b'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token char">'c'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token char">'d'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token char">'e'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"E"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"other"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>对学生成绩大于60分的，输出“合格”。低于60分的，输出“不合格”。（注：输入的成绩不能大于100）</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> score <span class="token builtin">float64</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入成绩"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>score<span class="token punctuation">)</span><span class="token keyword">switch</span> <span class="token function">int</span><span class="token punctuation">(</span>score <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"输入有误..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go请输入成绩86及格➜  main go run .&#x2F;main.go请输入成绩12不及格</code></pre><h3 id="switch和if的比较"><a href="#switch和if的比较" class="headerlink" title="switch和if的比较"></a>switch和if的比较</h3><p>总结了什么情况下使用switch，什么情况下使用if</p><ol><li>如果判断的具体数值不多，而且符合整数、浮点数、字符、字符串这几种类型。建议使用switch语句，简洁高效。</li><li>其他情况：对区间判断和结果为bool类型的判断，使用if，if的使用范围更广。</li></ol><h2 id="for循环控制"><a href="#for循环控制" class="headerlink" title="for循环控制"></a>for循环控制</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>听其名而知其意。这就是让我们的一段代码循环的执行。</p><h3 id="一个实际的需求"><a href="#一个实际的需求" class="headerlink" title="一个实际的需求"></a>一个实际的需求</h3><ul><li><p>案例：</p><p>编写一个程序，可以打印10句</p><p>“你好 Golang！”。想一想怎么做？</p><ul><li>使用传统的方式实现</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li>for循环的快速入门</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h3 id="for循环的基本语法"><a href="#for循环的基本语法" class="headerlink" title="for循环的基本语法"></a>for循环的基本语法</h3><ul><li><p>语法格式</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> 循环变量初始化；循环条件；循环变量迭代 <span class="token punctuation">&#123;</span>  循环操作（语句）<span class="token punctuation">&#125;</span></code></pre></li><li><p>对上面的语法格式说明</p><ul><li>对for循环来说，有四个要素：<ol><li>循环变量初始化</li><li>循环条件</li><li>循环操作（语句），有人也叫循环体</li><li>循环变量迭代</li></ol></li></ul></li><li><p>for循环执行的顺序说明：</p><ol><li>执行循环变量初始化，比如 <code>i:=1</code></li><li>执行循环条件，比如 <code>i &lt;= 10</code></li><li>如果循环条件为真，就执行循环操作：比如<code>fmt.Println(&quot;...&quot;)</code></li><li>执行循环变量迭代，比如 <code>i++</code></li><li>反复执行2， 3， 4步骤，直到 循环条件为False，就退出for循环。</li></ol></li></ul><h3 id="for循环执行流程分析"><a href="#for循环执行流程分析" class="headerlink" title="for循环执行流程分析"></a>for循环执行流程分析</h3><ul><li>for循环的流程图</li></ul><p><img src="http://cdn.leafii.top/img/20220520152530.png" loading="lazy"></p><ul><li>对照代码分析for循环的执行过程</li></ul><p><img src="http://cdn.leafii.top/img/20220520152543.png" loading="lazy"></p><h3 id="for循环的使用注意事项和细节讨论"><a href="#for循环的使用注意事项和细节讨论" class="headerlink" title="for循环的使用注意事项和细节讨论"></a>for循环的使用注意事项和细节讨论</h3><ol><li>循环条件是返回一个布尔值的表达式</li><li>for循环的第二种使用方式</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> 循环执行条件 <span class="token punctuation">&#123;</span>  <span class="token comment">//循环执行语句</span><span class="token punctuation">&#125;</span></code></pre><p>将变量初始化和变量迭代写到其他位置</p><ul><li>案例演示：</li></ul><p><img src="http://cdn.leafii.top/img/20220520152555.png" loading="lazy"></p><ol start="3"><li>for循环的第三种使用方式</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//循环执行语句</span><span class="token punctuation">&#125;</span></code></pre><p>上面的写法等价 <code>for ; ; &#123;&#125;</code> 是一个<strong>无限循环</strong>，通常需要<strong>配合break语句</strong>使用</p><p><img src="http://cdn.leafii.top/img/20220520152608.png" loading="lazy"></p><ol start="4"><li>Golang提供for-range的方式，可以方便遍历字符串和数组（注：数组的遍历，我们放到讲数组的时候再讲解），<strong>案例说明如何遍历字符串</strong>。</li></ol><ul><li>字符串遍历方式1-传统方式</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> str <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"hello,world"</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%c \n"</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//使用到下标</span><span class="token punctuation">&#125;</span></code></pre><ul><li>字符串遍历方式2-for-range</li></ul><pre class="language-go" data-language="go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>str <span class="token operator">=</span> <span class="token string">"abc~ok"</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> str <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"index=%d, val=%c \n"</span><span class="token punctuation">,</span>index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>上面代码的细节讨论</p><p>如果我们的字符串含有中文，那么传统的遍历字符串方式就是错误的，会出现乱码。原因是传统的对字符串的遍历是按照<strong>字节来遍历</strong>，而一个汉字在utf8编码是对应3个字节。</p><p>如何解决？</p><p>​    需要要将 str 转成 []rune切片。</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> str <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"hello,world!北京"</span>str2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">// 就是把str转成[]rune</span><span class="token keyword">for</span> i <span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%c \n"</span><span class="token punctuation">,</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//使用到下标</span><span class="token punctuation">&#125;</span></code></pre><p>​    对应for-range遍历方式而言，是按照字符方式遍历。因此如果有字符串有中文，也是ok的</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> str <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"abc~ok上海"</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> str <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"index=%d, val=%c \n"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>golang中还有一个<strong>byte</strong>数据类型与rune相似，它们都是用来表示字符类型的变量类型。它们的不同在于：</p><ul><li>byte 等同于int8，常用来处理ascii字符</li><li>rune 等同于int32,常用来处理unicode或utf-8字符</li></ul><h3 id="for循环的课堂练习"><a href="#for循环的课堂练习" class="headerlink" title="for循环的课堂练习"></a>for循环的课堂练习</h3><ol><li>打印1-100之间所有是9的倍数的整数的个数及总和。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> sum <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">9</span><span class="token operator">==</span><span class="token number">0</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>sum <span class="token operator">+=</span> i<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"sum = %d \n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go0 9 18 27 36 45 54 63 72 81 90 99 sum &#x3D; 594 ➜  main </code></pre><ol start="2"><li>完成下面的表达式输出，6是可变的。</li></ol><p><img src="http://cdn.leafii.top/img/20220520152624.png" loading="lazy"></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> n <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"请输入参数:"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token keyword">var</span> m <span class="token builtin">int</span> <span class="token operator">=</span> n<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d \n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>m<span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>m<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go请输入参数:60 + 6 &#x3D; 6 1 + 5 &#x3D; 6 2 + 4 &#x3D; 6 3 + 3 &#x3D; 6 4 + 2 &#x3D; 6 5 + 1 &#x3D; 6 6 + 0 &#x3D; 6 ➜  main go run .&#x2F;main.go请输入参数:80 + 8 &#x3D; 8 1 + 7 &#x3D; 8 2 + 6 &#x3D; 8 3 + 5 &#x3D; 8 4 + 4 &#x3D; 8 5 + 3 &#x3D; 8 6 + 2 &#x3D; 8 7 + 1 &#x3D; 8 8 + 0 &#x3D; 8 </code></pre><h2 id="while和do-while的实现"><a href="#while和do-while的实现" class="headerlink" title="while和do..while的实现"></a>while和do..while的实现</h2><p>​    Go语言没有while和do…while语法，这一点需要注意，如果我们需要使用类似的其他语言（java&#x2F;c的while和do…while)，<strong>可以通过for循环来实现其使用效果。</strong></p><h3 id="while循环的实现"><a href="#while循环的实现" class="headerlink" title="while循环的实现"></a>while循环的实现</h3><pre class="language-go" data-language="go"><code class="language-go">循环变量初始化<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> 循环条件表达式 <span class="token punctuation">&#123;</span>    <span class="token keyword">break</span> <span class="token comment">//跳出for循环..</span>  <span class="token punctuation">&#125;</span>  循环操作（语句）  循环变量迭代<span class="token punctuation">&#125;</span></code></pre><ul><li>说明<ol><li>for循环是一个无限循环</li><li>break语句就是跳出for循环</li></ol></li><li>使用上面的while实现完成输出10句“HelloWorld”</li></ul><pre class="language-go" data-language="go"><code class="language-go">i <span class="token operator">:=</span> <span class="token number">10</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">0</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"HelloWorld \n"</span><span class="token punctuation">)</span>  i<span class="token operator">--</span><span class="token punctuation">&#125;</span></code></pre><h3 id="do-while的实现"><a href="#do-while的实现" class="headerlink" title="do..while的实现"></a>do..while的实现</h3><pre class="language-go" data-language="go"><code class="language-go">循环变量初始化<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>  循环操作（语句）  循环变量迭代  <span class="token keyword">if</span> 循环条件表达式 <span class="token punctuation">&#123;</span>    <span class="token keyword">break</span> <span class="token comment">//跳出for循环..</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre><ul><li><p>说明</p><ol><li>上面的循环是先执行，再判断，因此至少执行一次。</li><li>当循环条件成立后，就会执行break，break就是跳出for循环，结束循环。</li></ol></li><li><p>案例演示</p><p>使用do..while实现10句“HelloWorldd”</p></li></ul><pre class="language-go" data-language="go"><code class="language-go">i <span class="token operator">:=</span> <span class="token number">10</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"HelloWorld \n"</span><span class="token punctuation">)</span>i<span class="token operator">--</span><span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">0</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="多重循环控制（重点，难点）"><a href="#多重循环控制（重点，难点）" class="headerlink" title="多重循环控制（重点，难点）"></a>多重循环控制（重点，难点）</h2><h3 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>将一个循环放在另一个循环体内，就形成了嵌套循环。在外边的 for 称为外层循环在里面的 for 循环称为内层循环。【建议一般使用两层，最多不要超过3层】</li><li>实质上，嵌套循环就是把内层循环当成外层循环的循环体。当只有内层循环的循环条件为 false 时，才会完全跳出内层循环，才可结束外层的当次循环，开始下一次的循环。</li><li>外层循环次数为 <strong>m</strong> 次，内层为 <strong>n</strong> 次，则内层循环体实际上需要执行 <strong>m*n</strong> 次</li></ol><h3 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h3><ol><li>统计 3 个班成绩情况，每个班有 5 名同学，求出各个班的平均分和所有班级的平均分[学生的成绩从键盘输入]</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> classNum <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">var</span> stuNum <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">var</span> sum <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token keyword">var</span> score <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token keyword">var</span> totalsum <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> classNum<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> stuNum<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"请输入%d班级的 第%d个学生的成绩： \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>score<span class="token punctuation">)</span>sum <span class="token operator">+=</span> score<span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"第%d个班级的平均分为：%v \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> sum <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">(</span>stuNum<span class="token punctuation">)</span><span class="token punctuation">)</span>totalsum <span class="token operator">+=</span> sum<span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"全体学生的平均分为: %v \n"</span><span class="token punctuation">,</span> totalsum <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>classNum<span class="token punctuation">)</span> <span class="token operator">*</span> stuNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>统计三个班及格人数，每个班有5名同学</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> classNum <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">var</span> stuNum <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">var</span> sum <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token keyword">var</span> score <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token keyword">var</span> totalsum <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> classNum<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>sum <span class="token operator">=</span> <span class="token number">0.0</span>topNum <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> stuNum<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"请输入%d班级的 第%d个学生的成绩： \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>score<span class="token punctuation">)</span><span class="token keyword">if</span> score <span class="token operator">>=</span> <span class="token number">60</span> <span class="token punctuation">&#123;</span>topNum<span class="token operator">++</span><span class="token punctuation">&#125;</span>sum <span class="token operator">+=</span> score<span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"第%d个班级的及格人数为%d, 平均分为：%v \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> topNum<span class="token punctuation">,</span> sum <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">(</span>stuNum<span class="token punctuation">)</span><span class="token punctuation">)</span>totalsum <span class="token operator">+=</span> sum<span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"全体学生的平均分为: %v \n"</span><span class="token punctuation">,</span> totalsum <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>classNum<span class="token punctuation">)</span> <span class="token operator">*</span> stuNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go请输入1班级的 第1个学生的成绩： 88请输入1班级的 第2个学生的成绩： 88请输入1班级的 第3个学生的成绩： 66请输入1班级的 第4个学生的成绩： 77请输入1班级的 第5个学生的成绩： 88第1个班级的平均分为：81.4 请输入2班级的 第1个学生的成绩： 请输入2班级的 第2个学生的成绩： 9请输入2班级的 第3个学生的成绩： 00请输入2班级的 第4个学生的成绩： 7请输入2班级的 第5个学生的成绩： 6➜  main go run .&#x2F;main.go请输入1班级的 第1个学生的成绩： 59请输入1班级的 第2个学生的成绩： 59请输入1班级的 第3个学生的成绩： 5请输入1班级的 第4个学生的成绩： 69请输入1班级的 第5个学生的成绩： 69第1个班级的及格人数为2, 平均分为：52.2 请输入2班级的 第1个学生的成绩： 99请输入2班级的 第2个学生的成绩： 99请输入2班级的 第3个学生的成绩： 99请输入2班级的 第4个学生的成绩： 99请输入2班级的 第5个学生的成绩： 99第2个班级的及格人数为5, 平均分为：99 请输入3班级的 第1个学生的成绩： 98请输入3班级的 第2个学生的成绩： 98请输入3班级的 第3个学生的成绩： 98请输入3班级的 第4个学生的成绩： 98请输入3班级的 第5个学生的成绩： 98第3个班级的及格人数为5, 平均分为：98 全体学生的平均分为: 83.06666666666666 </code></pre><ol start="3"><li>打印金字塔 【经典案例】</li></ol><p>使用for循环完成下面的案例：请编写一个程序，可以接受一个整数，表示层数，打印出金字塔。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token comment">/*     * ********   *******      **********/</span><span class="token keyword">var</span> n <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"请输入层数："</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> j <span class="token operator">:=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><strong>有手就行</strong></p><pre class="language-none"><code class="language-none">请输入层数：3   *  *** *****➜  main go run .&#x2F;main.go请输入层数：5     *    ***   *****  ******* *********➜  main go run .&#x2F;main.go请输入层数：12            *           ***          *****         *******        *********       ***********      *************     ***************    *****************   *******************  ********************* ***********************➜  main </code></pre><ol start="4"><li>打印出九九乘法表</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d*%d=%d\t"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">1*1&#x3D;11*2&#x3D;2   2*2&#x3D;41*3&#x3D;3   2*3&#x3D;6   3*3&#x3D;91*4&#x3D;4   2*4&#x3D;8   3*4&#x3D;12  4*4&#x3D;161*5&#x3D;5   2*5&#x3D;10  3*5&#x3D;15  4*5&#x3D;20  5*5&#x3D;251*6&#x3D;6   2*6&#x3D;12  3*6&#x3D;18  4*6&#x3D;24  5*6&#x3D;30  6*6&#x3D;361*7&#x3D;7   2*7&#x3D;14  3*7&#x3D;21  4*7&#x3D;28  5*7&#x3D;35  6*7&#x3D;42  7*7&#x3D;491*8&#x3D;8   2*8&#x3D;16  3*8&#x3D;24  4*8&#x3D;32  5*8&#x3D;40  6*8&#x3D;48  7*8&#x3D;56  8*8&#x3D;641*9&#x3D;9   2*9&#x3D;18  3*9&#x3D;27  4*9&#x3D;36  5*9&#x3D;45  6*9&#x3D;54  7*9&#x3D;63  8*9&#x3D;72  9*9&#x3D;81</code></pre><h2 id="跳转控制语句–break"><a href="#跳转控制语句–break" class="headerlink" title="跳转控制语句–break"></a>跳转控制语句–break</h2><h3 id="看一个具体需求，引出break"><a href="#看一个具体需求，引出break" class="headerlink" title="看一个具体需求，引出break"></a>看一个具体需求，引出break</h3><p>随机生成1-100的一个数，直到生成了99这个数，看看你一共用了几次？</p><ul><li><p>分析：</p><p>编写一个无限循环的控制，不停的生成随机数，当生成了99时，退出这个无限循环</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//如何生成随机数</span><span class="token comment">//在Go中需要生成一个随机种子，否则返回的值总是固定的。</span><span class="token comment">//time.Now().Unix():返回一个从1970.1.1 00:00:00到现在的秒数</span>rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">,</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><h3 id="break的快速入门案例"><a href="#break的快速入门案例" class="headerlink" title="break的快速入门案例"></a>break的快速入门案例</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> n <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">var</span> count <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span>rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">&#123;</span>n <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">99</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"生成99共进行了 %d 次"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li>运行结果：</li></ul><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go生成99共进行了 26 次➜  main go run .&#x2F;main.go生成99共进行了 76 次➜  main go run .&#x2F;main.go生成99共进行了 15 次➜  main go run .&#x2F;main.go生成99共进行了 15 次➜  main go run .&#x2F;main.go生成99共进行了 25 次</code></pre><h3 id="基本介绍-3"><a href="#基本介绍-3" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>​    break语句用于终止某个语句块的执行，用于中断当前for循环或跳出switch语句。</p><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token punctuation">&#123;</span>  <span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span>  <span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span>  <span class="token keyword">break</span>  <span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span>  <span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><h3 id="以for循环使用break为例，画出示意图"><a href="#以for循环使用break为例，画出示意图" class="headerlink" title="以for循环使用break为例，画出示意图"></a>以for循环使用break为例，画出示意图</h3><p><img src="http://cdn.leafii.top/img/20220520152638.png" loading="lazy"></p><h3 id="break的注意事项和使用细节"><a href="#break的注意事项和使用细节" class="headerlink" title="break的注意事项和使用细节"></a>break的注意事项和使用细节</h3><ol><li>break语句出现在多层嵌套的语句块中时，可以<strong>通过标签</strong>指明要终止的是哪一层语句块</li><li>案例：</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> i <span class="token builtin">int</span><span class="token keyword">var</span> j <span class="token builtin">int</span><span class="token keyword">var</span> k <span class="token builtin">int</span><span class="token comment">//lable2:</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>lable1<span class="token punctuation">:</span><span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">122</span><span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span><span class="token comment">//break // break 默认会跳出最近的for循环</span><span class="token keyword">break</span> lable1<span class="token comment">//break lable2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i:%d j:%d k:%d \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="3"><li>对上面案例的说明：<ol><li>break默认会跳出最近的for循环</li><li>break后面可以指定标签，跳出标签对应的for循环</li></ol></li></ol><h3 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h3><ol><li>100以内的数求和，求出 当和 第一次大于20的当前数</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> sum <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> i<span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">></span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i:%d \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.goi:6 ➜  main </code></pre><ol start="2"><li>实现登录验证，有三次机会，如果用户名为“张无忌”，密码“888”提示登录成功，否则提示还有几次机会。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> username <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"张无忌"</span><span class="token keyword">var</span> loginname <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">var</span> loginpwd <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">var</span> pwd <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"888"</span><span class="token keyword">var</span> count <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">for</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> count <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"欢迎登陆，剩余的尝试登录次数错误次数：%d次 \n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"请输入用户名："</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>loginname<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>loginpwd<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"已经无法继续登陆了！"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> loginname <span class="token operator">==</span> username <span class="token operator">&amp;&amp;</span> loginpwd <span class="token operator">==</span> pwd <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"登录成功！"</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>count<span class="token operator">--</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"密码输入错误，剩余尝试次数减一！\n"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go欢迎登陆，剩余的尝试登录次数错误次数：3次 请输入用户名：张三丰请输入密码：888密码输入错误，剩余尝试次数减一！欢迎登陆，剩余的尝试登录次数错误次数：2次 请输入用户名：张无忌请输入密码：888登录成功！</code></pre><h2 id="跳转控制语句-continue"><a href="#跳转控制语句-continue" class="headerlink" title="跳转控制语句-continue"></a>跳转控制语句-continue</h2><h3 id="基本介绍-4"><a href="#基本介绍-4" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>continue语句用于结束本次循环，继续执行下一次循环。</li><li>continue语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环，这个和前面的break标签的使用的规则一样。</li></ul><h3 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token punctuation">&#123;</span>  <span class="token operator">...</span><span class="token operator">...</span>  <span class="token keyword">continue</span>  <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span></code></pre><h3 id="continue流程图"><a href="#continue流程图" class="headerlink" title="continue流程图"></a>continue流程图</h3><p><img src="http://cdn.leafii.top/img/20220520152656.png" loading="lazy"></p><h3 id="案例分析continue的使用"><a href="#案例分析continue的使用" class="headerlink" title="案例分析continue的使用"></a>案例分析continue的使用</h3><p><img src="http://cdn.leafii.top/img/20220520152710.png" loading="lazy"></p><h3 id="continue的课堂练习"><a href="#continue的课堂练习" class="headerlink" title="continue的课堂练习"></a>continue的课堂练习</h3><ul><li>continue实现：打印1到100之间的奇数（要求使用for循环+continue）</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99 </code></pre><h2 id="跳转控制语句-goto"><a href="#跳转控制语句-goto" class="headerlink" title="跳转控制语句-goto"></a>跳转控制语句-goto</h2><h3 id="goto的基本介绍"><a href="#goto的基本介绍" class="headerlink" title="goto的基本介绍"></a>goto的基本介绍</h3><ol><li>Go语言的goto语句可以无条件地转移到程序中指定的行。</li><li>goto语句通常与条件语句配合使用。可用来实现条件转移，跳出循环体等功能。</li><li>在Go程序设计中一般不主张使用goto语句，以免造成程序流程的混乱，使理解和调试程序都产生困难</li></ol><h3 id="goto基本语法"><a href="#goto基本语法" class="headerlink" title="goto基本语法"></a>goto基本语法</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">goto</span> label <span class="token operator">...</span><span class="token operator">...</span>label<span class="token punctuation">:</span>statement</code></pre><h3 id="goto的流程图"><a href="#goto的流程图" class="headerlink" title="goto的流程图"></a>goto的流程图</h3><p><img src="http://cdn.leafii.top/img/20220520152325.png" loading="lazy"></p><h3 id="快速入门案例"><a href="#快速入门案例" class="headerlink" title="快速入门案例"></a>快速入门案例</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> n <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token comment">//演示goto的使用</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span><span class="token keyword">if</span> n <span class="token operator">></span> <span class="token number">20</span> <span class="token punctuation">&#123;</span><span class="token keyword">goto</span> label1<span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok2"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok3"</span><span class="token punctuation">)</span>label1<span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok4"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok5"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok6"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok7"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.gook1ok4ok5ok6ok7</code></pre><h2 id="跳转控制语句-return"><a href="#跳转控制语句-return" class="headerlink" title="跳转控制语句-return"></a>跳转控制语句-return</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>return使用在方法或者函数中，表示跳出所在的方法或函数，在讲解函数的时候，会详细的介绍。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">3</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"哇哇"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go哇哇 1哇哇 2</code></pre><ul><li>说明<ol><li>如果return是在普通的函数，则表示跳出该函数，即不再执行函数中return后面代码，也可以理解成终止函数。</li><li>如果return是在main函数，表示终止main函数，也就是说终止程序。</li></ol></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Go语言の程序流程控制&quot;&gt;&lt;a href=&quot;#Go语言の程序流程控制&quot; class=&quot;headerlink&quot; title=&quot;Go语言の程序流程控制&quot;&gt;&lt;/a&gt;Go语言の程序流程控制&lt;/h1&gt;&lt;h2 id=&quot;程序流程控制介绍&quot;&gt;&lt;a href=&quot;#程序流程控制介绍&quot; class=&quot;headerlink&quot; title=&quot;程序流程控制介绍&quot;&gt;&lt;/a&gt;程序流程控制介绍&lt;/h2&gt;&lt;p&gt;在程序中，程序运行的流程控制决定程序是如何执行的，是我们必须掌握的，主要有三大流程控制语句。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;顺序控制&lt;/li&gt;
&lt;li&gt;分支控制&lt;/li&gt;
&lt;li&gt;循环控制&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="Go" scheme="tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言の运算符</title>
    <link href="2021/01/09/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>2021/01/09/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2021-01-09T13:43:50.000Z</published>
    <updated>2022-05-20T07:45:41.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go语言の运算符"><a href="#Go语言の运算符" class="headerlink" title="Go语言の运算符"></a>Go语言の运算符</h1><p>本文介绍了Go语言的运算符</p><span id="more"></span><h2 id="运算符的基本介绍"><a href="#运算符的基本介绍" class="headerlink" title="运算符的基本介绍"></a>运算符的基本介绍</h2><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等等</p><ol><li>算术运算符</li><li>赋值运算符</li><li>比较运算符&#x2F;关系运算符</li><li>逻辑运算符</li><li>位运算符</li><li>其他运算符</li></ol><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p>算术运算符是对数值类型的变量进行运算的，比如：加减乘除。在Go程序中使用的非常多</p><h3 id="算术运算符的一览表"><a href="#算术运算符的一览表" class="headerlink" title="算术运算符的一览表"></a>算术运算符的一览表</h3><table><thead><tr><th>运算符</th><th>运算</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-4</td><td>-4</td></tr><tr><td>+</td><td>加</td><td>5+5</td><td>10</td></tr><tr><td>-</td><td>减</td><td>6-4</td><td>2</td></tr><tr><td>*</td><td>乘</td><td>3*4</td><td>12</td></tr><tr><td>&#x2F;</td><td>除</td><td>5&#x2F;5</td><td>1</td></tr><tr><td>%</td><td>取模（取余）</td><td>7%5</td><td>2</td></tr><tr><td>++</td><td>自增</td><td>a&#x3D;2 a++</td><td>a&#x3D;3</td></tr><tr><td>–</td><td>自减</td><td>a&#x3D;2 a–</td><td>a&#x3D;1</td></tr><tr><td>+</td><td>字符串相加</td><td>“He” + “llo”</td><td>“Hello”</td></tr></tbody></table><h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><ul><li>案例：演示算术运算符的使用。</li></ul><p>+，-，*，&#x2F;，%，++，–，重点讲解&#x2F;、%</p><p>自增：++</p><p>自减：–</p><ul><li>演示&#x2F;的使用的特点</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//重点讲解 / 、%</span><span class="token comment">//说明：如果运算的数都是整数，那么除后，去掉小数部分，保留整数部分</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">var</span> n1 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">4</span> <span class="token comment">//</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token comment">//如果我们希望保留小数部分，则需要有浮点数参与运算</span><span class="token keyword">var</span> n2 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">10.0</span> <span class="token operator">/</span> <span class="token number">4</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><strong>运行结果</strong></p><pre class="language-none"><code class="language-none">222.5</code></pre><ul><li>演示 % 的使用特点</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//演示 % 的使用</span><span class="token comment">// 看一个公式 a % b = a - a / b * b</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"10 % 3 ="</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">// =-1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"-10 % 3 = "</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// =-10-(-10)/3*3=-10-(-9)=-1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"10 % -3 = "</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// =1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"-10 % -3 = "</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//=-1</span><span class="token punctuation">&#125;</span></code></pre><p><strong>运行结果</strong></p><pre class="language-none"><code class="language-none">10 % 3 &#x3D; 1-10 % 3 &#x3D;  -110 % -3 &#x3D;  1-10 % -3 &#x3D;  -1</code></pre><ul><li>++和–的使用</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//演示 ++ 和 -- 的使用</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>i<span class="token operator">++</span> <span class="token comment">//等价 i = i + 1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment">//11</span>i<span class="token operator">--</span> <span class="token comment">//等价 i = i - 1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment">// 10</span><span class="token punctuation">&#125;</span></code></pre><p><strong>运行结果</strong></p><pre class="language-none"><code class="language-none">i&#x3D; 11i&#x3D; 10</code></pre><h3 id="算术运算符使用的注意事项"><a href="#算术运算符使用的注意事项" class="headerlink" title="算术运算符使用的注意事项"></a>算术运算符使用的注意事项</h3><ol><li>对于除号”&#x2F;“，它的整数除和小数除是有区别的：整数之间做除法时，只保留整数部分而舍弃小数部分。例如： x:&#x3D;19&#x2F;5, 结果是3</li><li>当对一个数取模时，可以等价 a%b&#x3D;a-a&#x2F;b*b, 这样我们可以看到 取模的一个本质运算。</li><li>Golang的自增自减只能当作一个独立语言使用时，不能这样使用：</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//在Golang中，++ 和 -- 只能独立使用</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token keyword">var</span> a <span class="token builtin">int</span>a <span class="token operator">=</span> i<span class="token operator">++</span> <span class="token comment">//错误 i++只能独立使用</span>a <span class="token operator">=</span> i<span class="token operator">--</span> <span class="token comment">//错误 i--只能独立使用</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="4"><li>Golang的++和–只能写在变量的后面，不能写在变量的前面，即：只有a++,a–；没有++a,–a</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>i<span class="token operator">++</span><span class="token operator">++</span>i <span class="token comment">//错误，在Golang没有 前++</span>i<span class="token operator">--</span><span class="token operator">--</span>i <span class="token comment">//错误，在Golang没有 前--</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span></code></pre><ol start="5"><li>Golang的设计者去掉 c&#x2F;java 中的自增自减的容易混淆的写法，让Golang更加简洁，统一。（强制性的）</li></ol><h3 id="课堂练习1"><a href="#课堂练习1" class="headerlink" title="课堂练习1"></a>课堂练习1</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>i <span class="token operator">=</span> i<span class="token operator">++</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">//问 结果是多少，为什么？</span><span class="token comment">//上面的代码报错，因为i=i++编译不通过</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">if</span> i<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">10</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token comment">//问 结果是多少，为什么？</span><span class="token comment">//上面的代码报错，因为i++ > 10编译不通过</span></code></pre><h3 id="课堂练习2"><a href="#课堂练习2" class="headerlink" title="课堂练习2"></a>课堂练习2</h3><ol><li>假如还有97天放假，问:97天相当于几个星期零几天?</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> day <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">97</span><span class="token keyword">var</span> week <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">97</span> <span class="token operator">/</span> <span class="token number">7</span><span class="token keyword">var</span> day <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">97</span> <span class="token operator">%</span> <span class="token number">7</span></code></pre><ul><li>解答</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> day <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">97</span><span class="token keyword">var</span> week <span class="token builtin">int</span> <span class="token operator">=</span> day <span class="token operator">/</span> <span class="token number">7</span><span class="token keyword">var</span> aday <span class="token builtin">int</span> <span class="token operator">=</span> day <span class="token operator">%</span> <span class="token number">7</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>week<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>aday<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/**打印结果：13    6 **/</span></code></pre><ol start="2"><li>定义一个变量保存华氏温度，华氏温度转换摄氏温度的公式为5&#x2F;9*(华氏温度-100),请求出华氏温度对应的摄氏温度。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> huashi <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">134.2</span><span class="token keyword">var</span> sheshi <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">5.0</span> <span class="token operator">/</span> <span class="token number">9</span> <span class="token operator">*</span> <span class="token punctuation">(</span>huashi <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v 对应的摄氏温度=%v\n"</span><span class="token punctuation">,</span> huashi<span class="token punctuation">,</span> sheshi<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/**134.2 对应的摄氏温度=19**/</span></code></pre><h2 id="关系运算符（比较运算符）"><a href="#关系运算符（比较运算符）" class="headerlink" title="关系运算符（比较运算符）"></a>关系运算符（比较运算符）</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>关系运算符的结果都是bool型，也就是 要么是true，要么是false</li><li>关系表达式常用于<strong>if结构</strong>的条件中或<strong>循环结构</strong>的条件中</li></ol><h3 id="关系运算符一览图"><a href="#关系运算符一览图" class="headerlink" title="关系运算符一览图"></a>关系运算符一览图</h3><table><thead><tr><th>运算符</th><th>运算</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>相等于</td><td>4&#x3D;&#x3D;3</td><td>false</td></tr><tr><td>!&#x3D;</td><td>不等于</td><td>4！&#x3D;3</td><td>true</td></tr><tr><td>&lt;</td><td>小于</td><td>4&lt;3</td><td>false</td></tr><tr><td>&gt;</td><td>大于</td><td>4&gt;3</td><td>true</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td><td>4&lt;&#x3D;3</td><td>false</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td><td>4&gt;&#x3D;3</td><td>true</td></tr></tbody></table><h3 id="案例演示-1"><a href="#案例演示-1" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//演示关系运算符的使用</span>varn1int<span class="token operator">=</span><span class="token number">9</span>varn2int<span class="token operator">=</span><span class="token number">8</span>fmt<span class="token punctuation">.</span> <span class="token function">Println</span><span class="token punctuation">(</span>n1 <span class="token operator">==</span> n2<span class="token punctuation">)</span> <span class="token comment">//false</span>fmt<span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token function">Print1n</span><span class="token punctuation">(</span>n1 <span class="token operator">!=</span> n2<span class="token punctuation">)</span> <span class="token comment">//true</span>fmt <span class="token punctuation">.</span><span class="token function">Print1n</span><span class="token punctuation">(</span>n1 <span class="token operator">></span> n2<span class="token punctuation">)</span> <span class="token comment">//true</span>fmt<span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token function">Print1n</span><span class="token punctuation">(</span>n1 <span class="token operator">>=</span> n2<span class="token punctuation">)</span> <span class="token comment">//true</span>fmt <span class="token punctuation">.</span><span class="token function">Print1n</span><span class="token punctuation">(</span>n1 <span class="token operator">&lt;</span> n2<span class="token punctuation">)</span> <span class="token comment">//flase</span>fmt <span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n1 <span class="token operator">&lt;=</span> n2<span class="token punctuation">)</span> <span class="token comment">//flase</span>flag<span class="token operator">:=</span>n1<span class="token operator">></span>n2fmt<span class="token punctuation">.</span> <span class="token function">Print1n</span><span class="token punctuation">(</span><span class="token string">" flag="</span><span class="token punctuation">,</span> f1ag<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> </code></pre><h3 id="关系运算符的细节说明"><a href="#关系运算符的细节说明" class="headerlink" title="关系运算符的细节说明"></a>关系运算符的细节说明</h3><ol><li>关系运算符的结果都是bool型，也就是要么是true，要么是false。</li><li>关系运算符组成的表达式，我们称为关系表达式：a&gt;b</li><li>**比较运算符”&#x3D;&#x3D;”不能误写成”&#x3D;” **</li></ol><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>用于连接多个条件（一般来讲就是关系表达式），最终的结果也是一个bool值</p><h3 id="逻辑运算的说明"><a href="#逻辑运算的说明" class="headerlink" title="逻辑运算的说明"></a>逻辑运算的说明</h3><p><strong>假定A值为true，B值为false</strong></p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td><strong>逻辑与</strong>运算符。如果两边的操作数都是true，则为true，否则为false</td><td>（A&amp;&amp;B)为false</td></tr><tr><td>||</td><td><strong>逻辑或</strong>运算符。如果两边的操作数有一个true,则为true，否则为false。</td><td>（A||B）为true</td></tr><tr><td>！</td><td><strong>逻辑非</strong>运算符。如果条件为true，则逻辑为false，否则为true。</td><td>！(A&amp;&amp;B)为true</td></tr></tbody></table><h3 id="案例演示-2"><a href="#案例演示-2" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//演示逻辑运算符的使用8&amp;</span><span class="token keyword">var</span> age <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">40</span><span class="token keyword">if</span> age <span class="token operator">></span><span class="token number">30</span><span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;</span> <span class="token number">50</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span> <span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> age <span class="token operator">></span><span class="token number">30</span><span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;</span> <span class="token number">40</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span> <span class="token function">Print1n</span><span class="token punctuation">(</span> <span class="token string">"ok2"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//演示逻辑运算符的使用</span><span class="token keyword">if</span> age<span class="token operator">></span>38Ilage<span class="token operator">&lt;</span>5e<span class="token punctuation">&#123;</span>fmt <span class="token punctuation">.</span> <span class="token function">PrintIn</span><span class="token punctuation">(</span> <span class="token string">"ok3"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> age<span class="token operator">></span><span class="token number">30</span><span class="token operator">|</span>age<span class="token operator">&lt;</span><span class="token number">40</span><span class="token punctuation">&#123;</span>fmt <span class="token punctuation">.</span> <span class="token function">Println</span><span class="token punctuation">(</span> <span class="token string">"ok4"</span> <span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//演示逻辑运算符的使用!</span><span class="token keyword">if</span> age<span class="token operator">></span><span class="token number">30</span><span class="token punctuation">&#123;</span>fmt <span class="token punctuation">.</span> <span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok5"</span> <span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span><span class="token punctuation">(</span>age <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span> <span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok6"</span> <span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="注意事项和细节说明"><a href="#注意事项和细节说明" class="headerlink" title="注意事项和细节说明"></a>注意事项和细节说明</h3><ol><li><p>&amp;&amp;也叫<strong>短路与</strong>：如果<strong>第一个条件为false</strong>，则第二个条件不会判断，最终结果为<strong>false</strong></p></li><li><p>||也叫<strong>短路或</strong>：如果<strong>第一个条件为true</strong>，则第二个条件不会判断，最终结果为<strong>true</strong></p></li><li><p>案例演示</p></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//声明一个函数(测试)</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span> <span class="token string">"test..."</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span><span class="token number">10</span><span class="token comment">//短路与</span><span class="token comment">//说明因为i &lt; 9为false ,因此后面的test() 就不执行</span><span class="token keyword">if</span> i<span class="token operator">&lt;</span><span class="token number">9</span> <span class="token operator">&amp;&amp;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span> <span class="token function">Println</span><span class="token punctuation">(</span> <span class="token string">"ok.."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//说明 因为 i > 9为true ,因此后面的test() 就不执行</span><span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">||</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span> <span class="token function">Print1n</span><span class="token punctuation">(</span> <span class="token string">"hello..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><h3 id="基本的介绍"><a href="#基本的介绍" class="headerlink" title="基本的介绍"></a>基本的介绍</h3><p>赋值运算符就是将某个运算后的值，赋给指定的变量。</p><h3 id="赋值运算符的分类"><a href="#赋值运算符的分类" class="headerlink" title="赋值运算符的分类"></a>赋值运算符的分类</h3><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&#x3D;</td><td>简单的赋值运算符，将一个表达式的值赋给一个左值</td><td>C&#x3D;A+B将A+B表达式结果赋值给C</td></tr><tr><td>+&#x3D;</td><td>相加后再赋值</td><td>C+&#x3D;A 等于 C&#x3D;C+A</td></tr><tr><td>-&#x3D;</td><td>相减后再赋值</td><td>C-&#x3D;A 等于 C&#x3D;C-A</td></tr><tr><td>*&#x3D;</td><td>相乘后再赋值</td><td>C*&#x3D;A 等于 C&#x3D;C*A</td></tr><tr><td>&#x2F;&#x3D;</td><td>相除后再赋值</td><td>C&#x2F;&#x3D;A 等于 C&#x3D;C&#x2F;A</td></tr><tr><td>%&#x3D;</td><td>求余后再赋值</td><td>C%&#x3D;A 等于 C&#x3D;C%A</td></tr><tr><td>&lt;&lt;&#x3D;</td><td>左移后赋值</td><td>C&lt;&lt;&#x3D;2 等于 C&#x3D;C&lt;&lt;2</td></tr><tr><td>&gt;&gt;&#x3D;</td><td>右移后赋值</td><td>C&gt;&gt;&#x3D;2 等于 C&#x3D;C&gt;&gt;2</td></tr><tr><td>&amp;&#x3D;</td><td>按位与后赋值</td><td>C&amp;&#x3D;2 等于 C&#x3D;C&amp;2</td></tr><tr><td>^&#x3D;</td><td>按位异或后赋值</td><td>C^&#x3D;2 等于 C&#x3D;C^2</td></tr><tr><td>|&#x3D;</td><td>按位或后赋值</td><td>C|&#x3D;2 等于 C&#x3D;C|2</td></tr></tbody></table><p>**说明:**后半部分的赋值运算涉及到二进制相关知识哦！</p><h3 id="赋值运算的案例演示"><a href="#赋值运算的案例演示" class="headerlink" title="赋值运算的案例演示"></a>赋值运算的案例演示</h3><ol><li>赋值基本案例</li><li>有两个变量，a和b，要求将其进行交换，最终打印结果</li><li>+&#x3D;的使用案例</li><li>案例</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//赋值运算符的使用演示</span>    <span class="token comment">//var i int</span>    <span class="token comment">// i = 10 // 基本赋值</span>        <span class="token comment">//有两个变量，a和b，要求将其进行交换，最终打印结果</span>    <span class="token comment">// a = 9, b = 2 ==> a = 2 , b = 9</span>    a <span class="token operator">:=</span> <span class="token number">9</span>    b <span class="token operator">:=</span> <span class="token number">2</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"交换前的情况： a = %v, b = %v\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>    <span class="token comment">//定义一个临时变量</span>    t <span class="token operator">:=</span> a    a <span class="token operator">=</span> b    b <span class="token operator">=</span> t    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"交换后的情况: a = %v, b = %v\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>        <span class="token comment">//复合赋值的操作</span>    a <span class="token operator">+=</span> <span class="token number">17</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a+=17 --> a = a + 17 = %v"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="赋值运算符的特点"><a href="#赋值运算符的特点" class="headerlink" title="赋值运算符的特点"></a>赋值运算符的特点</h3><ol><li>运算顺序从右往左</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> c <span class="token builtin">int</span>c <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">3</span> <span class="token comment">// 赋值运算的执行顺序是从右向左</span></code></pre><ol start="2"><li>赋值运算符的左边 只能是变量，右边可以是变量，表达式，常量值！</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//赋值运算符的左边 只能是变量，右边可以是变量，表达式，常量值！</span><span class="token comment">//表达式:任何有值的都可以看做是表达式</span><span class="token keyword">var</span> d <span class="token builtin">int</span>d <span class="token operator">=</span> a <span class="token comment">//</span>d <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token comment">// =的右边是表达式</span>d <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">90</span> <span class="token comment">// =的右边是表达式</span>d <span class="token operator">=</span> <span class="token number">890</span> <span class="token comment">//890常量</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span></code></pre><ol start="3"><li>复合赋值运算符等价于下面的效果</li></ol><p>a +&#x3D; 3  &lt;&#x3D;&#x3D;&gt; a &#x3D; a + 3</p><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p>有两个变量，a和b，要求将其进行交换，但是不允许使用中间变量，最终打印结果</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>a <span class="token operator">=</span> a <span class="token operator">+</span> b    b <span class="token operator">=</span> a <span class="token operator">-</span> b   <span class="token comment">//    = a+b-b = a</span>a <span class="token operator">=</span> a <span class="token operator">-</span> b   <span class="token comment">//    = a+b-a = b</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a = %v b = %v "</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span></code></pre><p>牛牛牛！</p><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算符”&amp;”是双目运算符。其功能是参与运算的两数各对应的二进位相与。运算规则是:同时为1，结果为1,否则为0</td></tr><tr><td>|</td><td>按位或运算符川”是双目运算符。其功能是参 与运算的两数各对应的二进位相或.运算规则是:同时为1，结果为1,否则为0</td></tr><tr><td>^</td><td>按位异或运算符”是双目运算符。其功能是参与运算的两数各对应的二进位相异或。运算规则是:当二进位不同时，结果为1,否则为0</td></tr><tr><td>&lt;&lt;</td><td>左移运算符&lt;&lt;”是双目运算符。其功能把&lt;&lt;”左边的运算数的各二进位全部左移若干位，高位丢弃，低位补0。左移n位就是乘以2的n次方。</td></tr><tr><td>&gt;&gt;</td><td>右移运算符&gt;&gt;”是双目运算符。其功能是把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，右移n位就是除以2的n次方</td></tr></tbody></table><h2 id="其他运算符说明"><a href="#其他运算符说明" class="headerlink" title="其他运算符说明"></a>其他运算符说明</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;</td><td>返回变量存储地址</td><td>&amp;a;将给出变量a的实际地址</td></tr><tr><td>*</td><td>指针变量</td><td>*a;是一个指针变量</td></tr></tbody></table><p>举例说明：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//演示一下 &amp; 和 * 的使用</span>    a <span class="token operator">:=</span> <span class="token number">100</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a的地址="</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span>        <span class="token keyword">var</span> ptr <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ptr指向的值是:"</span> ，<span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="课堂案例"><a href="#课堂案例" class="headerlink" title="课堂案例"></a>课堂案例</h3><ul><li>案例1：求两个数的最大值</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//求两个数的最大值</span>    <span class="token keyword">var</span> n1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">var</span> n2 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">40</span>    <span class="token keyword">var</span> max <span class="token builtin">int</span>    <span class="token keyword">if</span> n1 <span class="token operator">></span> n2<span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> n1    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> n2    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"max="</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li>案例2：求三个数的最大值</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//求两个数的最大值</span>    <span class="token keyword">var</span> n1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">var</span> n2 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">40</span>    <span class="token keyword">var</span> max <span class="token builtin">int</span>    <span class="token keyword">if</span> n1 <span class="token operator">></span> n2<span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> n1    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> n2    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"max="</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span>    <span class="token comment">//求三个数的最大值思路：先求两个数的最大值，再用第三个数与最大值相比，取较大的数。</span>    <span class="token keyword">var</span> n3 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">45</span>    <span class="token keyword">if</span> n3 <span class="token operator">></span> max <span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> n3    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"三个书中最大值是="</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h2><p>Go语言明确不支持三元运算符，官方<a href="https://golang.org/doc/faq#Does_Go_have_a_ternary_form">说明</a></p><p><img src="http://cdn.leafii.top/img/20220520154005.png" loading="lazy"></p><p>演示在Go语言中实现三元运算符的效果：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> n <span class="token builtin">int</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">var</span> j <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token comment">//传统的三元运算</span><span class="token comment">//n = i > j ? i : j</span><span class="token keyword">if</span> i <span class="token operator">></span> j <span class="token punctuation">&#123;</span>    n <span class="token operator">=</span> i<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    n <span class="token operator">=</span> j<span class="token punctuation">&#125;</span><span class="token keyword">return</span> n <span class="token comment">//12</span></code></pre><h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><h3 id="运算符的优先级的一览表"><a href="#运算符的优先级的一览表" class="headerlink" title="运算符的优先级的一览表"></a>运算符的优先级的一览表</h3><p><img src="http://cdn.leafii.top/img/20220520154022.png" loading="lazy"></p><h3 id="对上图的说明"><a href="#对上图的说明" class="headerlink" title="对上图的说明"></a>对上图的说明</h3><ol><li>运算符有不同的优先级，所谓优先级就是表达式运算中的运算顺序。如右表，上一行运算符总优先于下一行。</li><li>只有单目运算符、赋值运算符是从右向左运算的。</li><li>梳理一个大概的优先级：<ol><li>括号，++，–</li><li>单目运算</li><li>算术运算符</li><li>移位运算</li><li>关系运算符</li><li>位运算符</li><li>逻辑运算符</li><li>赋值运算符</li><li>逗号</li></ol></li></ol><h2 id="键盘输入语句"><a href="#键盘输入语句" class="headerlink" title="键盘输入语句"></a>键盘输入语句</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在编程中，需要接收用户输入的数据，就可以使用键盘输入语句来获取。InputDemo.go</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>导入fmt包</li><li>调用fmt包的fmt.Scanln()或者fmt.Scanf()</li></ol><p><img src="http://cdn.leafii.top/img/20220520154040.png" loading="lazy"></p><p><img src="http://cdn.leafii.top/img/20220520154058.png" loading="lazy"></p><h3 id="案例演示-3"><a href="#案例演示-3" class="headerlink" title="案例演示"></a>案例演示</h3><ul><li>要求：可以从控制台接收用户信息，【姓名，年龄，薪水，是否通过考试】</li></ul><ol><li>使用fmt.Scanln()获取</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//要求：可以从控制台接收用户信息，</span><span class="token comment">//【姓名，年龄，薪水，是否通过考试】</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//1. 先声明需要的变量</span><span class="token keyword">var</span> name <span class="token builtin">string</span><span class="token keyword">var</span> age <span class="token builtin">byte</span><span class="token keyword">var</span> sal <span class="token builtin">float32</span><span class="token keyword">var</span> isPass <span class="token builtin">bool</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入姓名"</span><span class="token punctuation">)</span><span class="token comment">//当程序执行到 fmt.Scanln(&amp;name),程序会停止在这里，等待用户输入，并回车</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>name<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入年龄"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>age<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入薪水"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sal<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入是否通过考试"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>isPass<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"名字是 %v \n年龄是 %v \n薪水是 %v \n是否通过考试 %v\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> isPass<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果</p><pre class="language-none"><code class="language-none">请输入姓名leafii请输入年龄23请输入薪水60000请输入是否通过考试true名字是 leafii年龄是 23薪水是 60000是否通过考试 true</code></pre><ol start="2"><li>使用fmt.Scanf()获取</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//要求：可以从控制台接收用户信息，</span><span class="token comment">//【姓名，年龄，薪水，是否通过考试】</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//1. 先声明需要的变量</span><span class="token keyword">var</span> name <span class="token builtin">string</span><span class="token keyword">var</span> age <span class="token builtin">byte</span><span class="token keyword">var</span> sal <span class="token builtin">float32</span><span class="token keyword">var</span> isPass <span class="token builtin">bool</span><span class="token comment">//方式2：fmt.Scanf，可以按指定的格式输入</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入你的姓名，年龄，薪水，是否通过考试，使用空格隔开"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%s %d %f %t"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sal<span class="token punctuation">,</span> <span class="token operator">&amp;</span>isPass<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"名字是 %v \n年龄是 %v \n薪水是 %v \n是否通过考试 %v\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> isPass<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">请输入你的姓名，年龄，薪水，是否通过考试，使用空格隔开leafii 23 60000 true名字是 leafii年龄是 23薪水是 60000是否通过考试 true</code></pre><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><p>对于整数，有四种表示方式：</p><ul><li>二进制：0，1，满2进1。在Golang中，不能直接使用二进制来表示一个整数，它沿用了c的特点</li><li>十进制：0-9，满10进1.</li><li>八进制：0-7，满8进1.以数字0开头表示。</li><li>十六进制：0-9及A-F，满16进1。以0x 或0X开头表示。（A到F不区分大小写）</li></ul><h3 id="进制的图示"><a href="#进制的图示" class="headerlink" title="进制的图示"></a>进制的图示</h3><table><thead><tr><th>十进制</th><th>十六进制</th><th>八进制</th><th>二进制</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>2</td><td>2</td><td>10</td></tr><tr><td>3</td><td>3</td><td>3</td><td>11</td></tr><tr><td>4</td><td>4</td><td>4</td><td>100</td></tr><tr><td>5</td><td>5</td><td>5</td><td>101</td></tr><tr><td>6</td><td>6</td><td>6</td><td>110</td></tr><tr><td>7</td><td>7</td><td>7</td><td>111</td></tr><tr><td>8</td><td>8</td><td>10</td><td>1000</td></tr><tr><td>9</td><td>9</td><td>11</td><td>1001</td></tr><tr><td>10</td><td>A</td><td>12</td><td>1010</td></tr><tr><td>11</td><td>B</td><td>13</td><td>1011</td></tr><tr><td>12</td><td>C</td><td>14</td><td>1100</td></tr><tr><td>13</td><td>D</td><td>15</td><td>1101</td></tr><tr><td>14</td><td>E</td><td>16</td><td>1110</td></tr><tr><td>15</td><td>F</td><td>17</td><td>1111</td></tr><tr><td>16</td><td>10</td><td>20</td><td>10000</td></tr><tr><td>17</td><td>11</td><td>21</td><td>10001</td></tr></tbody></table><h3 id="进制转换的介绍"><a href="#进制转换的介绍" class="headerlink" title="进制转换的介绍"></a>进制转换的介绍</h3><p>总览:</p><p><img src="http://cdn.leafii.top/img/20220520154112.png" loading="lazy"></p><h3 id="其他进制转十进制"><a href="#其他进制转十进制" class="headerlink" title="其他进制转十进制"></a>其他进制转十进制</h3><p><img src="http://cdn.leafii.top/img/20220520154125.png" loading="lazy"></p><h3 id="二进制如何转十进制"><a href="#二进制如何转十进制" class="headerlink" title="二进制如何转十进制"></a>二进制如何转十进制</h3><p>134 &#x3D; 4 * 1 + 3 * 10 + 10 * 10 &#x3D; 4 + 30 + 100 &#x3D; 134</p><ul><li><p><strong>规则：</strong>从最低位开始（右边），将每个位上的数提取出来，乘以2的（位数-1）次方然后<strong>求和</strong>。</p></li><li><p>案例： 请将二进制：1011转成十进制的数</p></li></ul><p>1011 &#x3D; 1 * 1 + 1 * 2 + 0 * 2  * 2 + 1 * 2 * 2 * 2 &#x3D; 1 + 2 + 0 + 8 &#x3D; 11</p><h3 id="八进制转换成十进制实例"><a href="#八进制转换成十进制实例" class="headerlink" title="八进制转换成十进制实例"></a>八进制转换成十进制实例</h3><ul><li><p><strong>规则：</strong>从最低位开始（右边），将每个位上的数提取出来，乘以8的（位数-1）次方然后<strong>求和</strong>。</p></li><li><p>案例:请将0123转成十进制的数</p></li></ul><p>0123 &#x3D; 3 * 1 + 2 * 8 + 1 * 8 * 8 + 0 * 8 * 8 * 8 &#x3D; 3 + 16 + 64 &#x3D; 83</p><h3 id="十六进制转成十进制"><a href="#十六进制转成十进制" class="headerlink" title="十六进制转成十进制"></a>十六进制转成十进制</h3><ul><li><p><strong>规则：</strong>从最低位开始（右边），将每个位上的数提取出来，乘以16的（位数-1）次方然后<strong>求和</strong>。</p></li><li><p>案例：请将0x34A转成十进制的数</p></li></ul><p>0x34A &#x3D; 10 * 1 + 4 * 16 + 3 * 16 * 16 &#x3D; 10 + 64 + 768 &#x3D; 842</p><h3 id="其他进制转成10进制的课堂练习"><a href="#其他进制转成10进制的课堂练习" class="headerlink" title="其他进制转成10进制的课堂练习"></a>其他进制转成10进制的课堂练习</h3><ul><li><p>课堂练习: 请将</p><ul><li>二进制： 110001100 转成十进制</li></ul><p>110001100(2) &#x3D;1 * 2 <sup>2</sup>+ 1 * 2 <sup>3</sup> + 1 * 2<sup>7</sup> + 1 * 2<sup>8</sup> &#x3D; 396</p><ul><li>八进制： 02456 转成十进制</li></ul><p>02456(8) &#x3D; 6 * 1 + 5 * 8 + 4 * 8<sup>2</sup> + 2 * 8<sup>3</sup> &#x3D;  1326 </p><ul><li>十六进制： 0xA45 转成十进制</li></ul><p>0xA45 (16) &#x3D;  5 * 1 + 4 * 16 + 10 * 16<sup>2</sup> &#x3D; 2629</p></li></ul><h3 id="十进制如何转成其他进制"><a href="#十进制如何转成其他进制" class="headerlink" title="十进制如何转成其他进制"></a>十进制如何转成其他进制</h3><p><img src="http://cdn.leafii.top/img/20220520154336.png" loading="lazy"></p><h3 id="十进制如何转二进制"><a href="#十进制如何转二进制" class="headerlink" title="十进制如何转二进制"></a>十进制如何转二进制</h3><p><img src="http://cdn.leafii.top/img/20220520154356.png" loading="lazy"></p><h3 id="十进制转成八进制"><a href="#十进制转成八进制" class="headerlink" title="十进制转成八进制"></a>十进制转成八进制</h3><p><img src="http://cdn.leafii.top/img/20220520154409.png" loading="lazy"></p><h3 id="十进制转十六进制"><a href="#十进制转十六进制" class="headerlink" title="十进制转十六进制"></a>十进制转十六进制</h3><p><img src="http://cdn.leafii.top/img/20220520154423.png" loading="lazy"></p><h3 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h3><ul><li><p>请将</p><ul><li>123 转成二进制</li></ul><p>123（10） &#x3D;   1111011 (2)</p><ul><li>678转成八进制</li></ul><p>678(10) &#x3D; 1246(8)</p><ul><li>8912 转成十六进制</li></ul><p>8912(10) &#x3D; 22D0(16)</p></li></ul><h3 id="二进制如何转成八进制、十六进制"><a href="#二进制如何转成八进制、十六进制" class="headerlink" title="二进制如何转成八进制、十六进制"></a>二进制如何转成八进制、十六进制</h3><p><img src="http://cdn.leafii.top/img/20220520154440.png" loading="lazy"></p><h3 id="二进制转换成八进制"><a href="#二进制转换成八进制" class="headerlink" title="二进制转换成八进制"></a>二进制转换成八进制</h3><ul><li><p>**规则:**将二进制数每三位一组(从低位开始组合),转成对应的八进制数即可。</p></li><li><p>案例:请将二进制: 11010101 转成八进制<br>11010101&#x3D; 0325</p></li></ul><h3 id="二进制转成十六进制"><a href="#二进制转成十六进制" class="headerlink" title="二进制转成十六进制"></a>二进制转成十六进制</h3><ul><li><p>**规则:**将二进制数每四位一组(从低位开始组合),转成对应的十六进制数即可。</p></li><li><p>案例:请将二进制: 11010101 转成十六进制</p><p>11010101 &#x3D; 0xD5</p></li><li><p>课堂练习：请将</p><ul><li>二进制：11100101 转成 八进制</li><li>二进制： 1110010110 转成 十六进制</li></ul></li></ul><h3 id="八进制、十六进制转成二进制"><a href="#八进制、十六进制转成二进制" class="headerlink" title="八进制、十六进制转成二进制"></a>八进制、十六进制转成二进制</h3><p><img src="http://cdn.leafii.top/img/20220520154455.png" loading="lazy"></p><h3 id="八进制转成二进制"><a href="#八进制转成二进制" class="headerlink" title="八进制转成二进制"></a>八进制转成二进制</h3><ul><li><p><strong>规则：</strong>将八进制数每一位，转成对应的一个3位的二进制数即可。</p></li><li><p>案例：请将0237转换成二进制</p><p>0237（8） &#x3D; 10011111（2）</p></li></ul><h3 id="十六进制转成二进制"><a href="#十六进制转成二进制" class="headerlink" title="十六进制转成二进制"></a>十六进制转成二进制</h3><ul><li><p><strong>规则：将十六进制数每一位，转成对应的一个4位的二进制数即可。</strong></p></li><li><p>案例：请将0x237转成二进制</p><p>0x237(16) &#x3D; 1000110111(2)</p></li></ul><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="位运算的思考题"><a href="#位运算的思考题" class="headerlink" title="位运算的思考题"></a>位运算的思考题</h3><ol><li>请看下面的代码段，回答a,b,c,d结果是多少？</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">>></span> <span class="token number">2</span>    <span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">>></span> <span class="token number">2</span>    <span class="token keyword">var</span> c <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span>    <span class="token keyword">var</span> d <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span>    <span class="token comment">//a b c d结果是多少？</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b="</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"c="</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"d="</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/*a= 0b= -1c= 4d= -4*/</span></code></pre><ol start="2"><li>请回答在Golang中，下面的表达式运算的结果是：</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token operator">&amp;</span><span class="token number">7</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">^</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/**235-2*/</span></code></pre><h3 id="二进制在运算中的说明"><a href="#二进制在运算中的说明" class="headerlink" title="二进制在运算中的说明"></a>二进制在运算中的说明</h3><p>二进制是逢2进位的进位制，0、1是基本算符。</p><p>现代的电子计算机技术全部采用的是二进制，因为它只使用0、1两个数学符号，非常简单方便，易于用电子方式实现。计算机内部处理的信息，都是采用二进制数来表示的。二进制（Binary）数用0和1两个数字及其组合来表示任何数。进位规则是“逢2进1“，数字1在不同的位上代表不同的值，按从右至左的次序，这个值以二倍递增。</p><p>在计算机的内部，运行各种运算时，都是以二进制的方式来运行。</p><h3 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h3><p><img src="http://cdn.leafii.top/img/20220520154512.png" loading="lazy"></p><h3 id="位运算符和移位运算符"><a href="#位运算符和移位运算符" class="headerlink" title="位运算符和移位运算符"></a>位运算符和移位运算符</h3><ul><li>Golang有3个位运算<ul><li>按位与&amp;    ：    两位全为1，结果为1，否则为0</li><li>按位或|    ：    两位有一个为1，结果为1，否则为0</li><li>按位异或^    ：    两位一个为0，一个为1，结果为1，否则为0</li></ul></li><li>案例练习</li></ul><p>2&amp;3&#x3D;?  2|3&#x3D;?  2^3&#x3D;?</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//2&amp;3=?  2|3=?  2^3=?</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//2</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//3</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//3</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//-4</span><span class="token punctuation">&#125;</span></code></pre><p><img src="http://cdn.leafii.top/img/20220520154525.png" loading="lazy"></p><ul><li><p>Golang中有两个移位运算符：</p><ul><li>右移运算符   &gt;&gt;:    低位溢出，符号位不变，并用符号位补溢出的高位</li><li>左移运算符    &lt;&lt;:    符号位不变，低位补0</li></ul></li><li><p>案例演示</p><p>a :&#x3D; 1 &gt;&gt; 2   &#x2F;&#x2F;  0000 0001 &#x3D;&gt; 0000 0000  &#x3D; 0</p><p>c :&#x3D; 1 &lt;&lt; 2 &#x2F;&#x2F; 0000 0001 &#x3D;&#x3D;&gt; 0000 0100 &#x3D;&gt; 4</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Go语言の运算符&quot;&gt;&lt;a href=&quot;#Go语言の运算符&quot; class=&quot;headerlink&quot; title=&quot;Go语言の运算符&quot;&gt;&lt;/a&gt;Go语言の运算符&lt;/h1&gt;&lt;p&gt;本文介绍了Go语言的运算符&lt;/p&gt;</summary>
    
    
    
    
    <category term="Go" scheme="tags/Go/"/>
    
  </entry>
  
</feed>
