<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LeafiiのBlog</title>
  
  
  <link href="atom.xml" rel="self"/>
  
  <link href="https://leafii.top/"/>
  <updated>2022-11-05T12:05:40.159Z</updated>
  <id>https://leafii.top/</id>
  
  <author>
    <name>Leafii</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A_Bi-Level_Framework_for_Learning_to_Solve_Combinatorial_Optimization_on_Graph</title>
    <link href="2022/11/05/A-Bi-Level-Framework-for-Learning-to-Solve-Combinatorial-Optimization-on-Graph/"/>
    <id>2022/11/05/A-Bi-Level-Framework-for-Learning-to-Solve-Combinatorial-Optimization-on-Graph/</id>
    <published>2022-11-05T10:04:44.000Z</published>
    <updated>2022-11-05T12:05:40.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一种双层优化方法"><a href="#一种双层优化方法" class="headerlink" title="一种双层优化方法"></a>一种双层优化方法</h1><ul><li><p>引言:</p><p>论文题目:A Bi-Level Framework for Learning to Solve Combinatorial Optimization on Graphs</p><p>论文对应代码: <a href="https://github.com/Thinklab-SJTU/PPO-BiHyb">https://github.com/Thinklab-SJTU/PPO-BiHyb</a>.</p></li></ul><span id="more"></span><h2 id="Abstract-x2F-Background"><a href="#Abstract-x2F-Background" class="headerlink" title="Abstract&#x2F;Background"></a>Abstract&#x2F;Background</h2><p>组合优化 (CO) 以其NP-hard性质为特征，一直是一个具有挑战性的研究课题。当前，用于组合优化的机器学习 (MLCO) 已成为热门研究主题，但是大多数现有的MLCO方法都通过直接学习端到端解决方案来将CO视为单层优化，由于CO的高度复杂性，很难扩大规模，并且主要受ML模型容量的限制。在本文中，我们提出了一种混合方法来结合两个世界的优点，其中使用上层学习方法开发了一个双层框架来优化图 (例如添加，删除或修改图中的边)，与优化图上的低级启发式算法进行融合求解。这种双层方法简化了对原始硬CO的学习，并可以有效地减轻对模型容量的需求。对几个流行的CO问题 (例如有向无环图调度，图编辑距离和哈密顿循环问题) 的实验和结果表明，它比手动设计的启发式方法和单层学习方法有效。</p><p>本文解决的问题在实际中的例子:</p><ol><li><p>例如计算任务的调度问题，在调度问题中需合理安排计算资源及数据中的CPU的核数指派到合适的任务，实现最大效率的完成，优化目标是最小化完成所有任务的时间；</p></li><li><p>图学习或机器学习中常用到的，图编辑距离，图学习中常用的图之间的距离度量，它通过衡量从图1到图2之间最短的编辑路径所对应的最小的编辑代价来衡量两张图的相似程度，也是一个NP-hard的优化问题，目标为最小化图上的编辑代价；或汉密尔顿回路问题以及著名的欧拉七桥问题等。</p></li></ol><p><img src="http://cdn.leafii.top/img/v2-19dedc188ceaa2e46cc66af55e8b8cc6_1440w.webp" alt="图1 Combinatorial Optimization Problems on Graphs" loading="lazy"></p><h2 id="当前的研究方法-Single-Level-Optimization"><a href="#当前的研究方法-Single-Level-Optimization" class="headerlink" title="当前的研究方法:Single-Level Optimization"></a>当前的研究方法:Single-Level Optimization</h2><h3 id="当前方法"><a href="#当前方法" class="headerlink" title="当前方法"></a>当前方法</h3><p>当前关于此类问题的研究方法都可被总结为Single-Level optimization的优化形式,如下式:寻找合适的x以最小化函数f.式中的x为决策变量,f(x)为目标函数,s.t.为约束条件.</p><p>$$\min _{\mathbf{x}} f(\mathbf{x} \mid \mathcal{G}) \quad s.t. \quad h_i(\mathbf{x}, \mathcal{G}) \leq 0, for\ i&#x3D;1 \ldots I$$</p><p>当前主流思路是直接使用强化学习对其进行端到端的学习,由于问题本身单独为NP-hard问题,因此大部分问题得不到最优解,无法进行端到端的训练.在RL框架下,决策变量会被一系列的决策替代,目标函数对应RL中的reward,约束条件通过限制RL的agent动作的范围来实现.</p><p>在使用强化学习直接处理规模较大的问题时,由于动作序列变长,导致动作空间增大,最终导致稀疏奖励(sparse reward),使得RL比较难以学到有用的信息,而且在默认的求解过程中,框架暗含的假设为:模型存在直接从G(graph)学习到x(solution)的能力–&gt;学习端到端的映射.这为模型的容量设计带来了挑战,也就意味着需要为特定的问题,特定的数据分布去设计不同的模型结构才能实现如此大的模型容量.为了解决上述问题,传统的解决方法(no-learning)通过修改问题本身的结构来辅助问题的求解.例如在求解整数规划问题时使用割平面法(cutting planes)为求解整数规划问题添加额外的约束,来辅助问题能够得到更好更快的解决.</p><h3 id="对当前研究方法的优化"><a href="#对当前研究方法的优化" class="headerlink" title="对当前研究方法的优化"></a>对当前研究方法的优化</h3><p>本文发现,在计算任务调度的过程中,通过修改原先数据有向无环图的结构,比如加两条边,同样一个算法能够在两种修改条件下获得不一样的结果.原来21s完成的任务现在16s就能完成.通过这个思路,可以实现对问题求解的优化.</p><p><img src="http://cdn.leafii.top/img/v2-7a91e3e2eff95e4b00d451531d46eb20_1440w.jpeg" alt="图2 Modify the graph structure to aid problem solving" loading="lazy"></p><h2 id="Our-Formulation-Bi-Level-Optimization"><a href="#Our-Formulation-Bi-Level-Optimization" class="headerlink" title="Our Formulation: Bi-Level Optimization"></a>Our Formulation: Bi-Level Optimization</h2><p>基于以上观察和思路，本文提出了一个双层优化（Bi-Level）方法，其核心引入一个新的变量称为优化过的图结构G’，基于G’给出双层优化的形式，如图3所示。图中上方红色框内表示上层优化部分（Upper-Level Optimization），蓝色框内表示下层优化部分（Lower-Level Optimization）。其中上层优化目标为G’，下层优化目标为一个决策变量与单层优化形式类似。可以发现目标函数及约束条件都是相对于G’。而对于上层优化，通过优化后的G’来实现对最终目标函数值在原先图中G目标函数值的优化。</p><p><img src="http://cdn.leafii.top/img/v2-e3124cd8a67c7b54d85e2f698e43ff65_1440w.webp" alt="图3 Bi-Level Optimization" loading="lazy"></p><p>基于上述框架，本文提出了一个强化学习-传统算法融合的方法如图4所示。针对输入的图结构，首先调用一个传统算法可以求出一个解，在此基础上，加入ReNet Attention GNN 组成的强化学习模型进行决策，该模型在图上预测图如何修改的概率，图中红色的深浅代表了不同的预测概率。</p><p>基于预测概率，进行决策，对图的结构进行修改。基于新的图结构，再次调用传统算法得到新的解，继续调用RL修改图结构，不断循环。图中蓝色为用来做决策的上层算法，通过PPO进行学习。下层黄色表示传统求解算法。蓝色G’表示上层优化需解决的问题，黄色X’表示下层优化需要处理的内容。由于采用强化学习进行学习，总目标函数会作为回馈函数来指导搜索与学习。</p><p><img src="http://cdn.leafii.top/img/v2-bd9fa312c45a18758b841ae450a4cbb8_1440w.webp" alt="图4 Bi-Level Optimization by Reinforcement Learning" loading="lazy"></p><p>该方法的伪代码如下:</p><p><img src="http://cdn.leafii.top/img/image-20221105194049785.png" alt="图5 伪代码" loading="lazy"></p><p>假设:图G的最优解X*可以通过修改G来获得.通过引入以下的主张去验证该假设的可行性:</p><p>Proposition.我们将从图g修改的所有图的集合定义为$\mathbb G$,并且$\mathbb X$是图g的所有可行解的集合.如果启发式算法是一个从$\mathbb G$到$\mathbb X$的超射(surjection),对图g和他的最优解x*,应该存在g*$\in \mathbb G$,使得x*成为求解g*的启发式算法的输出.</p><p>Proof.由超射的定义可知, 因为x* $\in X$,因此必须至少存在一个图G*$\in G$使得X*是通过求解g*的启发式算法的输出.</p><p>在进行完理论上的分析之后,本文基于假设内容原先图上的最优解x*可以通过不断修改图结构来得到.由于直接证明难度较大,因此添加一定限制条件, 如图6所示,但必须注意的是寻找最优的修改过的图这个问题本身也是一个NP-hard问题,本文通过理论上的分析证明优化图结构本身是可行的,同时可启发通过该方向开发性能更强更有用的算法.</p><p><img src="http://cdn.leafii.top/img/v2-e7bf0965896c544159ba0237e8e4f20d_1440w.jpeg" alt="图6 限制条件" loading="lazy"></p><p>在三个问题上使用该算法实现可以发现该框架的通用性,该方法在三个问题都维持了比较general的特性,如图7所示:</p><p><img src="http://cdn.leafii.top/img/v2-6c461ab6a5dee7ad8f73ea2df50ce713_1440w.webp" alt="图7 Implement on 3 Combinatorial Optimization Problems" loading="lazy"></p><h2 id="实验部分"><a href="#实验部分" class="headerlink" title="实验部分"></a>实验部分</h2><p>To be continued…</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一种双层优化方法&quot;&gt;&lt;a href=&quot;#一种双层优化方法&quot; class=&quot;headerlink&quot; title=&quot;一种双层优化方法&quot;&gt;&lt;/a&gt;一种双层优化方法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;引言:&lt;/p&gt;
&lt;p&gt;论文题目:A Bi-Level Framework for Learning to Solve Combinatorial Optimization on Graphs&lt;/p&gt;
&lt;p&gt;论文对应代码: &lt;a href=&quot;https://github.com/Thinklab-SJTU/PPO-BiHyb&quot;&gt;https://github.com/Thinklab-SJTU/PPO-BiHyb&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="python" scheme="tags/python/"/>
    
    <category term="强化学习" scheme="tags/强化学习/"/>
    
  </entry>
  
  <entry>
    <title>在macOS上为自己的Latex安装LaTeX.sty文件</title>
    <link href="2022/11/04/%E5%9C%A8macOS%E4%B8%8A%E4%B8%BA%E8%87%AA%E5%B7%B1%E7%9A%84Latex%E5%AE%89%E8%A3%85LaTeX-sty%E6%96%87%E4%BB%B6/"/>
    <id>2022/11/04/%E5%9C%A8macOS%E4%B8%8A%E4%B8%BA%E8%87%AA%E5%B7%B1%E7%9A%84Latex%E5%AE%89%E8%A3%85LaTeX-sty%E6%96%87%E4%BB%B6/</id>
    <published>2022-11-04T11:34:22.000Z</published>
    <updated>2022-11-04T12:07:29.883Z</updated>
    
    <content type="html"><![CDATA[<p>当latex编译报错提醒“xxxx.sty文件不存在”时,mac用户可参考此方法</p><span id="more"></span><p>解决方法:下载目标的sty文件,可以在类似与<a href="https://ww2.mathworks.cn/matlabcentral/fileexchange/8015-m-code-latex-package">此链接</a>寻找</p><p>下载成功后,将解压后的sty文件复制到macOS的路径中,我的参考路径为:<code>/usr/local/texlive/2022/texmf-dist/tex/latex/base/</code>(复制时需要sudo)</p><p>复制后在终端中输入命令:<code>sudo -s texhash</code></p><p>此时再打开texmaker等对文件进行编译即可…</p><p>参考链接:<a href="https://qa.1r1g.com/sf/ask/97357991/">https://qa.1r1g.com/sf/ask/97357991/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;当latex编译报错提醒“xxxx.sty文件不存在”时,mac用户可参考此方法&lt;/p&gt;</summary>
    
    
    
    
    <category term="macOS" scheme="tags/macOS/"/>
    
    <category term="LaTeX" scheme="tags/LaTeX/"/>
    
  </entry>
  
  <entry>
    <title>MAPPO源代码分析</title>
    <link href="2022/09/30/MAPPO%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>2022/09/30/MAPPO%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2022-09-30T10:22:03.000Z</published>
    <updated>2022-10-31T06:36:08.403Z</updated>
    
    <content type="html"><![CDATA[<p>代码地址：<a href="https://github.com/marlbenchmark/on-policy">https://github.com/marlbenchmark/on-policy</a></p><p>官方出品轻量化mappo代码：<a href="https://github.com/tinyzqh/light_mappo">https://github.com/tinyzqh/light_mappo</a></p><p>对应论文：The Surprising Effectiveness of MAPPO in Cooperative, Multi-Agent Games</p><span id="more"></span><h2 id="代码运行"><a href="#代码运行" class="headerlink" title="代码运行"></a>代码运行</h2><p>使用conda新建环境，python版本推荐为3.6.7，并且安装readme中的MPE环境，然后将pycharm中train_mpe.py文件的configuration中的参数设置为<code>--env_name &quot;MPE&quot; --algorithm_name &quot;rmappo&quot; --experiment_name &quot;check&quot; --scenario_name &quot;simple_spread&quot; --num_agents 3 --num_landmarks 3 --seed 1 --n_training_threads 1 --n_rollout_threads 4 --num_mini_batch 1 --episode_length 25 --num_env_steps 10000 --ppo_epoch 10 --use_ReLU --gain 0.01 --lr 7e-4 --critic_lr 7e-4 --wandb_name &quot;leafii&quot; --user_name &quot;leafii&quot;</code>，以免因为电脑配置不足无法运行。安装其他包时要参考文件夹中requirement.txt中的版本，以免由于版本兼容问题造成代码无法正常运行，debug。</p><h2 id="MAPPO算法伪代码"><a href="#MAPPO算法伪代码" class="headerlink" title="MAPPO算法伪代码"></a>MAPPO算法伪代码</h2><p><img src="http://cdn.leafii.top/img/mappo.png" alt="img" loading="lazy"></p><p>有两个网络，分别是策略$\pi_{\theta}$和值函数$V_{\phi}$。（作者在文中说如果智能体是同种类的就采用相同的网络参数，对于每个智能体内部也可以采用各自的actor和critic网络，为了符号的便利性，作者直接使用一个网络参数来表示）。值函数$V_{\phi}$需要学习一个映射： $S \rightarrow \mathbb R$。策略函数$\pi_{\theta}$学习一个映射从观测$o_t^{a}$到一个范围的分布或者是映射到一个高斯函数的动作均值和方差用于之后采样动作。</p><ul><li>Actor的优化目标为：</li></ul><p>$$L(\theta) &#x3D; [\frac{1}{B_n}\sum_{i&#x3D;1}^{B}\sum_{k-1}^{n}min(r_{\theta,i}^{(k)}A_{i}^{(k)},clip(r_{\theta,i}^{(k)},1-\epsilon,1+\epsilon)A_i^{(k)})]+\sigma \frac{1}{B_n}\sum_{i&#x3D;1}^{B}\sum_{k-1}^{n}S[\pi_{\theta}(o_i^{(k)})],where r_{\theta,i}^{(k)}&#x3D;\frac{\pi_{\theta}(a_i^{(k)}|o_i^{(k)})}{\pi_{\theta_{old}}(a_i^{(k)}|o_i^{(k)})}$$</p><p>其中优势函数$A_i^{(k)}$是采用GAE方法的，S表示策略的熵，$\sigma$是控制熵系数的一个超参数。</p><ul><li>Critic网络优化目标为：</li></ul><p>$$L(\phi)&#x3D;\frac{1}{B_n}\sum_{i&#x3D;1}^{B}\sum_{k&#x3D;1}^{n}(max[(V_\phi(s_i^{(k)})-\hat R_i)^2,(clip(V_\phi(s_i^{(k)}),V_{\phi_{old}}(s_i^{(k)}-\varepsilon),V_{\phi_{old}}(s_i^{(k)}+\varepsilon)-\hat R_i)^2]$$</p><p>其中$\hat R_i$是折扣奖励。B表示batch_size的大小，n表示智能体的数量。</p><h2 id="代码整体流程"><a href="#代码整体流程" class="headerlink" title="代码整体流程"></a>代码整体流程</h2><p>每个局部智能体接收一个局部的观察obs，输出一个动作概率，所有的actor智能体都采用一个actor网络。critic网络接收所有智能体的观测obs，<code>cent_obs_space = n * obs_space</code>，其中n为智能体的个数，输出一个V值，V值用于actor的更新。actor的loss和PPO的loss类似，有添加一个熵的loss。Critic的loss更多的是对value的值做normalizer，并且在计算episode的折扣奖励的时候不是单纯的算折扣奖励，有采用gae算折扣回报的方式。</p><ul><li><p>网络定义</p><p>代码定义在<code>onpolicy/algorithms/r_mappo/algorithm/rMAPPOPolicy.py</code></p><p>每一个智能体的观测obs_space为一个18维的向量，有3个智能体，cent_obs_space为一个54维的向量，单个智能体的动作空间act_space 为一个离散的5维的向量</p></li></ul><ol><li><p>actor</p><p>在<code>onpolicy/algorithms/utils/act.py</code>中，输入一个观测（18维），输出一个确切的动作actions和这个动作对数概率。</p></li></ol><pre class="language-python" data-language="python"><code class="language-python">action_dim <span class="token operator">=</span> action_space<span class="token punctuation">.</span>nself<span class="token punctuation">.</span>action_out <span class="token operator">=</span> Categorical<span class="token punctuation">(</span>inputs_dim<span class="token punctuation">,</span> action_dim<span class="token punctuation">,</span> use_orthogonal<span class="token punctuation">,</span> gain<span class="token punctuation">)</span>action_logits <span class="token operator">=</span> self<span class="token punctuation">.</span>action_out<span class="token punctuation">(</span>x<span class="token punctuation">,</span> available_actions<span class="token punctuation">)</span>actions <span class="token operator">=</span> action_logits<span class="token punctuation">.</span>mode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> deterministic <span class="token keyword">else</span> action_logits<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token punctuation">)</span> action_log_probs <span class="token operator">=</span> action_logits<span class="token punctuation">.</span>log_probs<span class="token punctuation">(</span>actions<span class="token punctuation">)</span></code></pre><ol start="2"><li><p>critic</p><p>critic输入维度为<code>cent_obs_space = n * obs_space = 54</code>，输出维度为1。</p></li></ol><pre class="language-python" data-language="python"><code class="language-python">critic_features <span class="token operator">=</span> self<span class="token punctuation">.</span>base<span class="token punctuation">(</span>cent_obs<span class="token punctuation">)</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>_use_naive_recurrent_policy <span class="token keyword">or</span> self<span class="token punctuation">.</span>_use_recurrent_policy<span class="token punctuation">:</span>        critic_features<span class="token punctuation">,</span> rnn_states <span class="token operator">=</span> self<span class="token punctuation">.</span>rnn<span class="token punctuation">(</span>critic_features<span class="token punctuation">,</span> rnn_states<span class="token punctuation">,</span> masks<span class="token punctuation">)</span>values <span class="token operator">=</span> self<span class="token punctuation">.</span>v_out<span class="token punctuation">(</span>critic_features<span class="token punctuation">)</span></code></pre><h2 id="采样流程"><a href="#采样流程" class="headerlink" title="采样流程"></a>采样流程</h2><ul><li>初始化obs</li></ul><p>在on policy&#x2F;scripts&#x2F;train&#x2F;train_mpe.py的make_train_env(all_args)函数中实例化4个环境：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">return</span> SubprocVecEnv<span class="token punctuation">(</span><span class="token punctuation">[</span>get_env_fn<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>all_args<span class="token punctuation">.</span>n_rollout_threads<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>在onpolicy&#x2F;runner&#x2F;shared&#x2F;mpe_runner.py中的的warmup函数中，如果采用centralized_V值函数的训练方式（？？？），那么需要初始化的时候构造出多个智能体的share_obs：</p><pre class="language-python" data-language="python"><code class="language-python">obs <span class="token operator">=</span> self<span class="token punctuation">.</span>envs<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># shape = (4, 3, 18)</span>share_obs <span class="token operator">=</span> obs<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_rollout_threads<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># shape = (4, 54)</span><span class="token comment"># 指定3个智能体</span>share_obs <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>share_obs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>repeat<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_agents<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># shape = (4, 3, 54)</span></code></pre><p>在share_obs中会将n&#x3D;3个智能体的obs叠加在一起作为share_obs。</p><ul><li><code>collect()</code>采用<code>rollout</code>方式采样数据</li></ul><p>在onpolicy&#x2F;runner&#x2F;shared&#x2F;mpe_runner.py中的的collect函数中，调用<code>self.trainer.prep_rollout()</code>函数将actor和critic都设置为<code>eval()</code>格式,然后用<code>np.concatenate()</code>函数将并行的环境的数据拼接在一起，这一步是将并行采样的那个纬度降掉:</p><pre class="language-python" data-language="python"><code class="language-python">value<span class="token punctuation">,</span> action<span class="token punctuation">,</span> action_log_prob<span class="token punctuation">,</span> rnn_states<span class="token punctuation">,</span> rnn_states_critic \    <span class="token operator">=</span> self<span class="token punctuation">.</span>trainer<span class="token punctuation">.</span>policy<span class="token punctuation">.</span>get_actions<span class="token punctuation">(</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">.</span>share_obs<span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">.</span>obs<span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">.</span>rnn_states<span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment"># ?</span>                            np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">.</span>rnn_states_critic<span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">.</span>masks<span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>将数据传入总的MAPPO策略网络R_MAPPOPolicy(onpolicy&#x2F;algorithms&#x2F;r_mappo&#x2F;algorithm&#x2F;rMAPPOPolicy.py)中去获取一个时间步的数据。在get_actions()里面调用actor去获取动作以及动作的对数概率，critic网络去获取对于cent_obs的状态值函数的输出：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 调用actor去获取动作和动作的对数概率                                      </span>actions<span class="token punctuation">,</span> action_log_probs<span class="token punctuation">,</span> rnn_states_actor <span class="token operator">=</span> self<span class="token punctuation">.</span>actor<span class="token punctuation">(</span>obs<span class="token punctuation">,</span>rnn_states_actor<span class="token punctuation">,</span> masks<span class="token punctuation">,</span> available_actions<span class="token punctuation">,</span> deterministic<span class="token punctuation">)</span></code></pre><p>在这里obs的shape是(4*3, 18),输出actions和action_log_probs的shape都为(12,1).</p><pre class="language-python" data-language="python"><code class="language-python">values<span class="token punctuation">,</span> rnn_states_critic <span class="token operator">=</span> self<span class="token punctuation">.</span>critic<span class="token punctuation">(</span>cent_obs<span class="token punctuation">,</span> rnn_states_critic<span class="token punctuation">,</span> masks<span class="token punctuation">)</span>   <span class="token comment"># 调用critic去对动作打分，得到values</span></code></pre><p>cent_obs’s shape is (5*2, 14),values’s shape is (12,1),and rnn_states’s shape is (12, 1, 64).</p><pre class="language-python" data-language="python"><code class="language-python">values <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>_t2n<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>n_rollout_threads<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 将value转化成4层3行1列的数据</span>actions <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>_t2n<span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>n_rollout_threads<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 这action转化成4层3行1列的数据</span>action_log_probs <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>_t2n<span class="token punctuation">(</span>action_log_prob<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>n_rollout_threads<span class="token punctuation">)</span><span class="token punctuation">)</span>rnn_states <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>_t2n<span class="token punctuation">(</span>rnn_states<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>n_rollout_threads<span class="token punctuation">)</span><span class="token punctuation">)</span>rnn_states_critic <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>_t2n<span class="token punctuation">(</span>rnn_states_critic<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>n_rollout_threads<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>actions_env <span class="token operator">=</span> np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span>self<span class="token punctuation">.</span>envs<span class="token punctuation">.</span>action_space<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">[</span>actions<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 5维 (4, 3, 5)</span></code></pre><p>最后将(<code>12 , 1</code>)的<code>actions</code>转换成(<code>4, 3, 1</code>)的形式，方便之后并行送到并行的环境中去，作者这里还将动作进行了<code>one-hot</code>编码，最后变成了(<code>4, 3, 5</code>)的形式送入到环境中去。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Obser reward and next obs</span>obs<span class="token punctuation">,</span> rewards<span class="token punctuation">,</span> dones<span class="token punctuation">,</span> infos <span class="token operator">=</span> self<span class="token punctuation">.</span>envs<span class="token punctuation">.</span>step<span class="token punctuation">(</span>actions_env<span class="token punctuation">)</span>data <span class="token operator">=</span> obs<span class="token punctuation">,</span> rewards<span class="token punctuation">,</span> dones<span class="token punctuation">,</span> infos<span class="token punctuation">,</span> values<span class="token punctuation">,</span> actions<span class="token punctuation">,</span> action_log_probs<span class="token punctuation">,</span> rnn_states<span class="token punctuation">,</span> rnn_states_critic<span class="token comment"># insert data into buffer</span>self<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><p>环境下一次输出的<code>obs</code>还是(<code>4, 3, 18</code>)的形式，之后调<code>insert</code>方法将数据添加到<code>buffer</code>里面，在<code>insert</code>方法里面会将局部观测构造一个全局观测<code>share_obs</code>其shape&#x3D;(<code>4, 3, 54</code>)出来：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    obs<span class="token punctuation">,</span> rewards<span class="token punctuation">,</span> dones<span class="token punctuation">,</span> infos<span class="token punctuation">,</span> values<span class="token punctuation">,</span> actions<span class="token punctuation">,</span> action_log_probs<span class="token punctuation">,</span> rnn_states<span class="token punctuation">,</span> rnn_states_critic <span class="token operator">=</span> data    rnn_states<span class="token punctuation">[</span>dones <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dones <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>recurrent_N<span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>    rnn_states_critic<span class="token punctuation">[</span>dones <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dones <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>self<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">.</span>rnn_states_critic<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>    masks <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_rollout_threads<span class="token punctuation">,</span> self<span class="token punctuation">.</span>num_agents<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>    masks<span class="token punctuation">[</span>dones <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dones <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>use_centralized_V<span class="token punctuation">:</span>        share_obs <span class="token operator">=</span> obs<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_rollout_threads<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        share_obs <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>share_obs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>repeat<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_agents<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        share_obs <span class="token operator">=</span> obs    self<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">.</span>insert<span class="token punctuation">(</span>share_obs<span class="token punctuation">,</span> obs<span class="token punctuation">,</span> rnn_states<span class="token punctuation">,</span> rnn_states_critic<span class="token punctuation">,</span> actions<span class="token punctuation">,</span> action_log_probs<span class="token punctuation">,</span> values<span class="token punctuation">,</span> rewards<span class="token punctuation">,</span> masks<span class="token punctuation">)</span></code></pre><p>上述过程循环迭代<code>self.episode_length=100</code>次。</p><h2 id="训练流程"><a href="#训练流程" class="headerlink" title="训练流程"></a>训练流程</h2><ul><li>计算优势函数</li></ul><p>在训练之前，首先调用<code>self.compute()</code>函数计算<code>episode</code>的折扣回报，在计算折扣回报之前，先算这个<code>episode</code>最后一个状态的状态值函数<code>next_values</code>，其<code>shape=(12, 1)</code>然后调用<code>compute_returns</code>函数计算折扣回报:</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">compute</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 计算这个episode的折扣回报，先用rMAPPOPolicy.py里面的get_values计算一下next_values</span>    <span class="token triple-quoted-string string">"""Calculate returns for the collected data."""</span>    self<span class="token punctuation">.</span>trainer<span class="token punctuation">.</span>prep_rollout<span class="token punctuation">(</span><span class="token punctuation">)</span>    next_values <span class="token operator">=</span> self<span class="token punctuation">.</span>trainer<span class="token punctuation">.</span>policy<span class="token punctuation">.</span>get_values<span class="token punctuation">(</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">.</span>share_obs<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                             np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">.</span>rnn_states_critic<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                             np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">.</span>masks<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    next_values <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>_t2n<span class="token punctuation">(</span>next_values<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>n_rollout_threads<span class="token punctuation">)</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">.</span>compute_returns<span class="token punctuation">(</span>next_values<span class="token punctuation">,</span> self<span class="token punctuation">.</span>trainer<span class="token punctuation">.</span>value_normalizer<span class="token punctuation">)</span>  <span class="token comment"># 折扣回报的的计算方式</span></code></pre><p>有了数据之后就可以开始计算<strong>折扣回报</strong>了（在这里有采用<code>gae</code>算折扣回报的方式，并且有将<code>value</code>做<code>normalizer</code>）。<code>compute_returns</code>函数在<code>onpolicy/utils/shared_buffer.py</code> 中，核心代码如下：</p><pre class="language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>value_preds<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> next_valuegae <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> step <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>rewards<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">if</span> self<span class="token punctuation">.</span>_use_popart <span class="token keyword">or</span> self<span class="token punctuation">.</span>_use_valuenorm<span class="token punctuation">:</span>    delta <span class="token operator">=</span> self<span class="token punctuation">.</span>rewards<span class="token punctuation">[</span>step<span class="token punctuation">]</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>gamma <span class="token operator">*</span> value_normalizer<span class="token punctuation">.</span>denormalize<span class="token punctuation">(</span>      self<span class="token punctuation">.</span>value_preds<span class="token punctuation">[</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>masks<span class="token punctuation">[</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> \     <span class="token operator">-</span> value_normalizer<span class="token punctuation">.</span>denormalize<span class="token punctuation">(</span>self<span class="token punctuation">.</span>value_preds<span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token punctuation">)</span>    gae <span class="token operator">=</span> delta <span class="token operator">+</span> self<span class="token punctuation">.</span>gamma <span class="token operator">*</span> self<span class="token punctuation">.</span>gae_lambda <span class="token operator">*</span> self<span class="token punctuation">.</span>masks<span class="token punctuation">[</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> gae    self<span class="token punctuation">.</span>returns<span class="token punctuation">[</span>step<span class="token punctuation">]</span> <span class="token operator">=</span> gae <span class="token operator">+</span> value_normalizer<span class="token punctuation">.</span>denormalize<span class="token punctuation">(</span>self<span class="token punctuation">.</span>value_preds<span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>算完折扣回报后调用<code>self.train()</code>函数进行训练:</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 算完折扣回报之后调用self.train()函数进行训练</span>  <span class="token triple-quoted-string string">"""Train policies with data in buffer. """</span>  self<span class="token punctuation">.</span>trainer<span class="token punctuation">.</span>prep_training<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 将网络设置为train（）的格式</span>  train_infos <span class="token operator">=</span> self<span class="token punctuation">.</span>trainer<span class="token punctuation">.</span>train<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">.</span>after_update<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 将buffer的第一个元素设置为其episode最后的一个元素</span>  <span class="token keyword">return</span> train_infos</code></pre><p>在<code>self.trainer.train(self.buffer)</code>函数中先基于数据，计算优势函数(优势函数是针对全局的观测信息所得到的)：</p><pre class="language-python" data-language="python"><code class="language-python">advantages <span class="token operator">=</span> <span class="token builtin">buffer</span><span class="token punctuation">.</span>returns<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>value_normalizer<span class="token punctuation">.</span>denormalize<span class="token punctuation">(</span><span class="token builtin">buffer</span><span class="token punctuation">.</span>value_preds<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>advantages_copy <span class="token operator">=</span> advantages<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>advantages_copy<span class="token punctuation">[</span><span class="token builtin">buffer</span><span class="token punctuation">.</span>active_masks<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0.0</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>nanmean_advantages <span class="token operator">=</span> np<span class="token punctuation">.</span>nanmean<span class="token punctuation">(</span>advantages_copy<span class="token punctuation">)</span> <span class="token comment"># float, shape = (1)</span>std_advantages <span class="token operator">=</span> np<span class="token punctuation">.</span>nanstd<span class="token punctuation">(</span>advantages_copy<span class="token punctuation">)</span>  <span class="token comment"># float, shape = (1)</span>advantages <span class="token operator">=</span> <span class="token punctuation">(</span>advantages <span class="token operator">-</span> mean_advantages<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>std_advantages <span class="token operator">+</span> <span class="token number">1e-5</span><span class="token punctuation">)</span></code></pre><p>然后从<code>buffer</code>中采样数据，把线程、智能体的纬度全部降掉</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 从 data_generator 中采样</span><span class="token keyword">for</span> sample <span class="token keyword">in</span> data_generator<span class="token punctuation">:</span>  <span class="token comment"># 进行一次 PPO 更新</span>  value_loss<span class="token punctuation">,</span> critic_grad_norm<span class="token punctuation">,</span> policy_loss<span class="token punctuation">,</span> dist_entropy<span class="token punctuation">,</span> actor_grad_norm<span class="token punctuation">,</span> imp_weights \                        <span class="token operator">=</span> self<span class="token punctuation">.</span>ppo_update<span class="token punctuation">(</span>sample<span class="token punctuation">,</span> update_actor<span class="token punctuation">)</span></code></pre><p><code>ppo_update</code>函数大体流程是:</p><ol><li>从buffer中抽样建立sample</li><li>将抽样的数据传递给rMAPPOPolicy.py中的evaluate_actions函数，得到 values, action_log_probs, dist_entropy</li><li>计算actor的loss</li><li>计算critic的loss</li></ol><p>然后在<code>onpolicy/algorithms/r_mappo/r_mappo.py</code>中</p><pre class="language-python" data-language="python"><code class="language-python">share_obs_batch<span class="token punctuation">,</span> obs_batch<span class="token punctuation">,</span> rnn_states_batch<span class="token punctuation">,</span> rnn_states_critic_batch<span class="token punctuation">,</span> actions_batch<span class="token punctuation">,</span>\         value_preds_batch<span class="token punctuation">,</span> return_batch<span class="token punctuation">,</span>masks_batch<span class="token punctuation">,</span>active_masks_batch<span class="token punctuation">,</span>old_action_log_probs_batch<span class="token punctuation">,</span> \        adv_targ<span class="token punctuation">,</span> available_actions_batch <span class="token operator">=</span> sample</code></pre><p>拿到采样之后的数据，把<code>obs</code>送给<code>actor</code>网络，得到<code>action_log_probs</code>, <code>dist_entropy</code>。把<code>cent_obs</code>送到<code>critic</code>得到新的<code>values</code>。</p><ul><li>计算actor的loss</li></ul><p>在<code>ppo_update()</code>中，利用新老动作的概率分布和优势函数之后就可以更新<code>actor</code>网络了：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># actor update</span>imp_weights <span class="token operator">=</span> torch<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>action_log_probs <span class="token operator">-</span> old_action_log_probs_batch<span class="token punctuation">)</span>surr1 <span class="token operator">=</span> imp_weights <span class="token operator">*</span> adv_targsurr2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>clamp<span class="token punctuation">(</span>imp_weights<span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>clip_param<span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>clip_param<span class="token punctuation">)</span> <span class="token operator">*</span> adv_targpolicy_action_loss <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>torch<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>surr1<span class="token punctuation">,</span> surr2<span class="token punctuation">)</span><span class="token punctuation">,</span>                                             dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>                                             keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token operator">*</span> active_masks_batch<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> active_masks_batch<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>policy_loss <span class="token operator">-</span> dist_entropy <span class="token operator">*</span> self<span class="token punctuation">.</span>entropy_coef<span class="token punctuation">)</span><span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>计算critic的loss</li></ul><p>新的<code>value</code>和老的<code>value_preds_batch</code>和计算的<code>return_batch</code>送到<code>onpolicy/algorithms/r_mappo/r_mappo.py</code>文件的<code>cal_value_loss</code>函数中去计算<code>critic</code>的<code>loss</code>：</p><pre class="language-python" data-language="python"><code class="language-python">value_loss <span class="token operator">=</span> self<span class="token punctuation">.</span>cal_value_loss<span class="token punctuation">(</span>values<span class="token punctuation">,</span> value_preds_batch<span class="token punctuation">,</span> return_batch<span class="token punctuation">,</span> active_masks_batch<span class="token punctuation">)</span></code></pre><p>and then</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 对value做一个clipped</span>value_pred_clipped <span class="token operator">=</span> value_preds_batch <span class="token operator">+</span> <span class="token punctuation">(</span>values <span class="token operator">-</span> value_preds_batch<span class="token punctuation">)</span><span class="token punctuation">.</span>clamp<span class="token punctuation">(</span><span class="token operator">-</span>self<span class="token punctuation">.</span>clip_param<span class="token punctuation">,</span> self<span class="token punctuation">.</span>clip_param<span class="token punctuation">)</span><span class="token comment"># 然后计算误差的clip</span>error_clipped <span class="token operator">=</span> return_batch <span class="token operator">-</span> value_pred_clippederror_original <span class="token operator">=</span> return_batch <span class="token operator">-</span> values<span class="token comment"># 然后直接计算loss</span>value_loss_clipped <span class="token operator">=</span> mse_loss<span class="token punctuation">(</span>error_clipped<span class="token punctuation">)</span>value_loss_original <span class="token operator">=</span> mse_loss<span class="token punctuation">(</span>error_original<span class="token punctuation">)</span><span class="token comment"># 算出loss之后反向传播即可</span><span class="token punctuation">(</span>value_loss <span class="token operator">*</span> self<span class="token punctuation">.</span>value_loss_coef<span class="token punctuation">)</span><span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="实验设计"><a href="#实验设计" class="headerlink" title="实验设计"></a>实验设计</h2><p>以下实验来源于Policy Regularization via Noisy Advantage Values for<br>Cooperative Multi-agent Actor-Critic methods(arXiv:2106.14334v13 )</p><h3 id="算法表现对比"><a href="#算法表现对比" class="headerlink" title="算法表现对比"></a>算法表现对比</h3><p>首先展示了论文介绍的算法以及其对比算法在SMAC各种场景下的胜率,将自己算法效果好于或者等于其他算法的效果的场景下的胜率进行加粗展示:</p><p><img src="http://cdn.leafii.top/img/image-20221031140635091.png" alt="image-20221031140635091" loading="lazy"></p><p>论文对该表的解释:</p><blockquote><p>表 2 中的实验结果表明 (1) NV-MAPPO 在大多数困难场景 2 上的性能显着超过 MAPPO，例如 5m_vs_6m (+65%)、走廊 (+97%)、6h_vs_8z (+87%) 和 3s5z_vs_3s6z (+31%)。 （2）NV-IPPO在Super Hard场景3s5z_vs_3s6z（96%）和6h_vs_8z（94%）中取得了超高的胜率；我们推测这是因为噪声还可以防止 IPPO 由于非平稳性而过拟合。 (3) NV-MAPPO 在硬场景上的平均性能优于 Fine-tuned QMIX 和 MAPPO-FP。 (4) 我们在附录 B.1 中比较了 MAPG 和 NV-MAPG，发现 NV-MAPG 的性能也明显优于 MAPG。</p><p>所有这些结果表明，噪声值函数在实际任务中效果很好。由于我们使用 Fine-tuned QMIX [5] 作为基线，QMIX 的中位测试获胜率明显优于过去文献中的实验结果 [14, 19, 20, 26]。至此，NV-MAPPO 和 NV-IPPO 在 SMAC 中共同实现了 SOTA。具体来说，NV-IPPO（适用于 3s5z_vs_3s6z 和 6h_vs_8z）和 NVMAPPO（适用于其他硬场景）在所有硬场景中的平均胜率为 97%。</p></blockquote><h3 id="NA-MAPPO和NV-MAPPO的对比"><a href="#NA-MAPPO和NV-MAPPO的对比" class="headerlink" title="NA-MAPPO和NV-MAPPO的对比"></a>NA-MAPPO和NV-MAPPO的对比</h3><p>接着又对NA-MAPPO和NV-MAPPO进行了对比,并对NA-MAPPO算法胜率的较大方差进行了解释,算法胜率的方差可以显示出算法的稳定性.</p><p><img src="http://cdn.leafii.top/img/image-20221031141622734.png" alt="image-20221031141622734" loading="lazy"></p><blockquote><p>如图4所示，我们发现噪声优势方法在某些情况下可能会损害算法的稳定性，即噪声优势方法的胜率有很大的方差。我们推测，可能是显性噪声破坏了政策梯度的原有方向。 但是，在smac的某些困难情况下，NA-MAPPO的性能仍可与NV-MAPPO媲美; 我们注意到NA-MAPPO非常容易实现。所有这些结果表明，噪声优势值确实改善了vanilla MAPPO的性能。</p></blockquote><p>然后对NV-MAPPO的噪声值函数如何影响性能进行进一步的实验分析:</p><p><img src="http://cdn.leafii.top/img/image-20221031141816194.png" alt="image-20221031141816194" loading="lazy"></p><blockquote><p>接下来，我们对NV-MAPPO的噪声值函数如何影响性能进行进一步的实验分析。我们在图 5 中展示了一些 Hard 场景下代理维度中值函数𝑣𝑖的标准差。我们发现，<strong>在某些场景中，𝑣𝑖 的大方差意味着 NV-MAPPO 在这些场景中相对于 vanilla MAPPO 的性能提升也很大</strong>，如3s5z_vs_3s6z和6h_vs_8z（见图5和图4）。该定律表明，NV-MAPPO 的性能提升确实来自价值函数的噪声扰动。</p></blockquote><p>最后分析了噪声值函数在3𝑠5𝑧_𝑣𝑠_3𝑠6𝑧场景下对策略熵的影响</p><p><img src="http://cdn.leafii.top/img/image-20221031142025436.png" alt="image-20221031142025436" loading="lazy"></p><blockquote><p>最后分析了噪声值函数对方案3 𝑠 5 𝑧 _ 𝑣𝑠 _ 3 𝑠 6 𝑧 策略熵的影响。如图6所示，vanilla MAPPO策略的熵迅速下降，并落入局部最优解，因此胜率始终为零。对于NV-MAPPO，我们平滑了采样的优势值，并且噪声可以防止策略过拟合，因此策略的熵会更加谨慎地降低。</p></blockquote><h3 id="策略熵和好奇心探索的异同"><a href="#策略熵和好奇心探索的异同" class="headerlink" title="策略熵和好奇心探索的异同"></a>策略熵和好奇心探索的异同</h3><p>policy entropy，从动作空间的角度出发，尽可能探索各种不同的动作，使得策略熵最大化，隐含着各种状态空间也会被探索到。policy entropy依据action的Q值来分配探索的概率，而不是$\epsilon-greedy$中固定概率$\epsilon&#x2F;|A|$探索较低Q值的action.另外policy entropy不简单是一个正则项,有另一个完整的RL框架来描述它,参见<a href="https://zhuanlan.zhihu.com/p/57210858">此链接</a></p><p>curiosity，从状态空间的角度出发，尽可能探索环境的状态转移方式，并把未知的状态转移方式作为内部rewards，以期改变agent的行为。参考<a href="https://zhuanlan.zhihu.com/p/58923482">此链接</a></p><p>应用上，policy entropy适合连续动作空间，如操作机械臂等，得到的策略更鲁棒；curiosity适合sparse rewards的问题，如走迷宫，它能为训练提供更丰富的学习信号。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>多智能体强化学习(二) MAPPO算法详解 <a href="https://blog.csdn.net/weixin_39059031/article/details/117283800">https://blog.csdn.net/weixin_39059031/article/details/117283800</a></li><li>多智能体强化学习MAPPO源代码解读 <a href="https://blog.csdn.net/onlyyyyyyee/article/details/118888711">https://blog.csdn.net/onlyyyyyyee/article/details/118888711</a></li><li>如何理解强化学习中的”好奇心探索”和”策略熵”的异同？ - bigiceberg M的回答 - 知乎 <a href="https://www.zhihu.com/question/311267842/answer/631757642">https://www.zhihu.com/question/311267842/answer/631757642</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;代码地址：&lt;a href=&quot;https://github.com/marlbenchmark/on-policy&quot;&gt;https://github.com/marlbenchmark/on-policy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方出品轻量化mappo代码：&lt;a href=&quot;https://github.com/tinyzqh/light_mappo&quot;&gt;https://github.com/tinyzqh/light_mappo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对应论文：The Surprising Effectiveness of MAPPO in Cooperative, Multi-Agent Games&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="tags/python/"/>
    
    <category term="强化学习" scheme="tags/强化学习/"/>
    
  </entry>
  
  <entry>
    <title>强化学习_PPO算法(Proximal Policy Optimization)</title>
    <link href="2022/09/20/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0_PPO%E7%AE%97%E6%B3%95(Proximal%20Policy%20Optimization)/"/>
    <id>2022/09/20/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0_PPO%E7%AE%97%E6%B3%95(Proximal%20Policy%20Optimization)/</id>
    <published>2022-09-20T13:15:18.000Z</published>
    <updated>2022-10-30T07:38:33.058Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍强化学习中的PPO(Proximal Policy Optimization)算法。</p><span id="more"></span><p>PPO(Proximal Policy Optimization)是OpenAI使用的默认RL方法，PPO方法可以被理解为</p><p><code>Policy Gradient -&gt; (On Policy -&gt; Off Policy) -&gt; (Add Constraint) -&gt; PPO(Proximal Policy Optimization)</code></p><h2 id="RL相关要素"><a href="#RL相关要素" class="headerlink" title="RL相关要素"></a>RL相关要素</h2><p>强化学习是指智能体在给定环境中进行动作的选择，在动作选择并执行之后同环境交互获得新的状态，每一对State（状态）和Action（动作）可以得到相应的Reward（奖励），强化学习的目标就是最大化Reward。</p><p>状态，动作更替可以用Trajectory（迹）来表示：</p><p>$$Trajectory\ \tau &#x3D; {s_1,a_1,s_2,a_2,…,s_T,a_T}\tag{1}$$</p><p>每一条Trajectory的概率为:</p><p>$$p_\theta(\tau) &#x3D;p(s_1)p_\theta(a_1|s_1)p(s_2|s_1,a_1)p_\theta(a_2|s_2)p(s_3|s_2,a_2)…&#x3D;p(s_1)\prod_{t&#x3D;1}^{T}p_\theta(a_t|s_t)p(s_{t+1}|s_t,a_t)\tag{2}$$</p><p>在这个式子中我们可以看到，$p_\theta(a_t|s_t)$是Actor得出的，这个是我们可以控制的，但是$p(s_{t+1}|s_t,a_t)$是动作$a_t$在状态$s_t$下与环境交互转移到状态$s_{t+1}$的概率，这是由环境本身决定的，我们自己无法控制它。</p><p>在强化学习中一条Trajectory的Expected Reward为：</p><p>$$\overline R_\theta &#x3D; \sum_{\tau}R(\tau)p_\theta(\tau)&#x3D;E_{\tau\sim p_\theta(\tau)}[R(\tau)]\tag{3})$$</p><p>其中的$R(\tau)$为：</p><p>$$R(\tau) &#x3D; \sum_{t&#x3D;1}^{T} r_t\tag{4}$$</p><h2 id="Policy-Gradient"><a href="#Policy-Gradient" class="headerlink" title="Policy Gradient"></a>Policy Gradient</h2><p>想要最大化Reward，在上一节我们又获得了$\overline R_\theta$的公式，此时我们对$\overline R_\theta$求梯度:</p><p>$$\nabla \overline R_\theta &#x3D; \sum_{\tau}R(\tau)\nabla p_\theta(\tau)&#x3D;\sum_{\tau}R(\tau)p_\theta(\tau)\frac{\nabla p_\theta(\tau)}{p_\theta(\tau)}\tag{5}$$</p><p>在上式中，$R(\tau)$不一定是需要可微的，它甚至可以是一个黑盒。</p><p>$$\nabla f(x) &#x3D; f(x)\nabla logf(x)\tag{6}$$</p><p>接着将梯度公式(6)代入(5)中，得：</p><p>$$\nabla \overline R_\theta &#x3D; \sum_{\tau}R(\tau)p_\theta(\tau)\nabla logp_\theta(\tau)&#x3D; E_{\tau \sim p_\theta(\tau)}[R(\tau)\nabla logp_\theta(\tau)] \approx \frac{1}{N}\sum_{n&#x3D;1}^{N}R(\tau^n)\nabla logp_\theta(\tau^n)$$</p><p>$$&#x3D; \frac{1}{N}\sum_{n&#x3D;1}^{N}\sum_{t&#x3D;1}^{T_n}R(\tau^n)\nabla logp_\theta(a_t^n|s_t^n)\tag{7}$$</p><p>在式子(7)中，由于$\sum_{\tau}$和$p_{\theta}(\tau)$的存在，因此将它们写成期望$E_{\tau \sim p_\theta(\tau)}$的形式。$p_{\theta}(\tau)$相当于$\nabla logp_\theta(\tau)$的一个weight（权重）。并且在$p_\theta(\tau)$中，$\tau$相当于有两项，一项是来自环境本身（无法求梯度），另一项来自智能体Agent，因此将$\nabla logp_\theta(\tau)$更进一步写作$logp_\theta(a_t^n|s_t^n)$</p><p>因此的Policy Gradient的基本过程可以这样描述：在环境中取得数据，在给定的策略$\pi_\theta$下，获得不同的Trajectory，每个Trajectory拥有不同的状态，动作以及对应的奖励值，收集状态动作对之后，将其带入式(7)中，进行参数$\theta$的更新：$\theta \leftarrow \theta + \eta\nabla \overline R_\theta$,在更新之后对新的环境重新获取数据，循环往复，我们可以看到在这个流程中，在环境中取得的数据仅被使用了一次，因此Policy Gradient是一个严格的On-Policy算法。</p><h3 id="Tip-1-Add-a-Baseline"><a href="#Tip-1-Add-a-Baseline" class="headerlink" title="Tip 1: Add a Baseline"></a>Tip 1: Add a Baseline</h3><p>在某些情况下，$\theta \leftarrow \theta + \eta\nabla \overline R_\theta$中的$R(\tau^n)$始终为正，如果采样数量足够多，即使是奖励都为正的动作，我们也可以按照奖励值的大小决定每个动作的优劣，并以此修改下个动作被选中的概率（好的动作增加被选中的概率，差的动作降低被选中的概率），但是在训练的环境下，总会有一些奖励为正的动作无法被采样，但是其他动作的奖励都为正，它们被选中的概率增加好，这就导致未被采样的动作的概率降低，哪怕未被采样的动作实质上优于一部分甚至全部被采样的动作。因此可以将式(7)进行如下修改：</p><p>$$\nabla \overline R_\theta &#x3D; \frac{1}{N}\sum_{n&#x3D;1}^{N}\sum_{t&#x3D;1}^{T_n}(R(\tau^n)-b)\nabla logp_\theta(a_t^n|s_t^n)\tag{8}$$</p><p>在这里的b就是新增的baseline，通常$b \approx E[R(\tau)]$，这样就可以有效的降低未被采样的动作被“误杀”。</p><h3 id="Tip-2-Assign-Suitable-Credit"><a href="#Tip-2-Assign-Suitable-Credit" class="headerlink" title="Tip 2: Assign Suitable Credit"></a>Tip 2: Assign Suitable Credit</h3><p>在一条Trajectory中，每个动作如果只由总的R来反映权重是不合适的，比如在$(s_a,a_1),(s_b,a_2),(s_c,a_3)$中的单步奖励值分别为+5，+0，-2，R&#x3D;5-2&#x3D;+3 但是对于a2，a3这种并未对Reward结果最大化做出正向贡献的action反而也被赋予了值为+3的Reward作为权重，这是不合理的。我们应该让每一个action前的R值都正确的反映它在当前Trajectory中的作用，到底是好还是坏。我们可以把式(8)中的$R(\tau^n)$改写为$\sum_{t’&#x3D;t}^{T_n}r_{t’}^{n}$:</p><p>$$\nabla \overline R_\theta \approx \frac{1}{N}\sum_{n&#x3D;1}^{N}\sum_{t&#x3D;1}^{T_n}(\sum_{t’&#x3D;t}^{T_n}r_{t’}^{n}-b)\nabla p_\theta(a_t^n|s_t^n)\tag{9}$$</p><p>$\sum_{t’&#x3D;t}^{T_n}r_{t’}^{n}$又可以进一步写为$\sum_{t’&#x3D;t}^{T_n}\gamma^{t’-t} r_{t’}^{n}$，其中$\gamma$作为discount factor(折扣因子)并且$\gamma &lt; 1$，因此可以得到：</p><p>$$\nabla \overline R_\theta \approx \frac{1}{N}\sum_{n&#x3D;1}^{N}\sum_{t&#x3D;1}^{T_n}(\sum_{t’&#x3D;t}^{T_n}\gamma^{t’-t} r_{t’}^{n}-b)\nabla p_\theta(a_t^n|s_t^n)\tag{10}$$</p><h2 id="On-policy-v-s-Off-policy"><a href="#On-policy-v-s-Off-policy" class="headerlink" title="On-policy v.s. Off-policy"></a>On-policy v.s. Off-policy</h2><ul><li>On-policy：agent学习与交互的环境是相同的。<strong>On-Policy可以翻译为”同策略”</strong></li><li>Off-policy：agent学习的环境和交互的环境并不相同。<strong>Off-Policy可以翻译为”异策略”</strong></li></ul><h3 id="从On-policy转向Off-policy的分析"><a href="#从On-policy转向Off-policy的分析" class="headerlink" title="从On- policy转向Off-policy的分析"></a>从On- policy转向Off-policy的分析</h3><p>On-policy的情况下，Policy Gradient的公式为:</p><p>$$\nabla \overline R_\theta &#x3D; E_{\tau \sim p_\theta(\tau)}[R(\tau)\nabla logp_\theta(\tau)]\tag{11}$$</p><p>在On-policy中，我们使用$\pi_{\theta}$去收集数据，当$\theta$被更新的时候，我们必须去重新采样训练数据。</p><p>我们现在的目标是：使用$\pi_{\theta’}$采样获得数据去训练$\theta$。$\theta’$是一个固定的值，因此我们可以重复利用采样的数据。</p><h3 id="重要性采样"><a href="#重要性采样" class="headerlink" title="重要性采样"></a>重要性采样</h3><p>如果正常从p中进行采样获得x的期望值：</p><p>$$E_{x\sim p}[f(x)] \approx \frac{1}{N}\sum_{i&#x3D;1}^{N}f(x^i)\tag{12}$$</p><p>但是现在我们不从p中采样，只能从q中采样呢？</p><p>$$E_{x\sim p}[f(x)] \approx \frac{1}{N}\sum_{i&#x3D;1}^{N}f(x^i)&#x3D;\int f(x)p(x)dx&#x3D; \int f(x) \frac{p(x)}{q(x)}q(x)dx&#x3D; E_{x\sim q}[f(x)\frac{p(x)}{q(x)}]\tag{13}$$</p><p>通过这样的变换，我们就达到了从q中采样获取x期望值的效果。</p><p>重要性采样公式为：</p><p>$$E_{x\sim p}[f(x)]&#x3D; E_{x\sim q}[f(x)\frac{p(x)}{q(x)}]\tag{14}$$</p><h3 id="On-policy-gt-Off-policy"><a href="#On-policy-gt-Off-policy" class="headerlink" title="On-policy-&gt;Off-policy"></a>On-policy-&gt;Off-policy</h3><p>$$\nabla \overline R_\theta &#x3D; E_{(s_t,a_t)\sim \pi_\theta}[A^\theta(s_t,a_t)\nabla logp_\theta(a_t^n|s_t^n)]&#x3D;E_{(s_t,a_t)\sim \pi_\theta’}[\frac{P_\theta(s_t,a_t)}{P_\theta’(s_t,a_t)}A^{\theta’}(s_t,a_t)\nabla logp_\theta(a_t^n|s_t^n)]$$</p><p>$$&#x3D;E_{(s_t,a_t)\sim \pi_\theta’}[\frac{p_\theta(a_t|s_t)}{p_\theta’(a_t|s_t)}\frac{p_\theta(s_t)}{p_\theta’(s_t)}A^{\theta’}(s_t,a_t)\nabla logp_\theta(a_t^n|s_t^n)]\tag{15}$$</p><p>由于我们假设$\theta$与$\theta’$是一样的，因此${p_\theta(s_t)}$和 $ p_\theta’(s_t)$这两个同环境相关的参数可以约掉，而${p_\theta(a_t|s_t)}$和${p_\theta’(a_t|s_t)}$是同动作选择相关，并没有假设它们的动作选择一致，因此不能约掉。因此我们得到：</p><p>$$J^{\theta’}(\theta) &#x3D; E_{(s_t,a_t)\sim \pi_{\theta’}}[\frac{p_\theta(a_t|s_t)}{p_{\theta’}(a_t|s_t)}A^{\theta’}(s_t,a_t)]\tag{16}$$</p><h3 id="Add-Constraint"><a href="#Add-Constraint" class="headerlink" title="Add Constraint"></a>Add Constraint</h3><p>$\theta$和$\theta’$的区别是一个值得讨论的问题。在这里我们所说的区别并不是$\theta$和$\theta’$参数上的不同，而是说它们在表现上的不同的程度需要被限制，而想要这个区别被限制，就必须要使它可以被量化。因此，在PPO中，使用$KL(\theta,\theta’)$对$\theta$和$\theta’$在表现上的不同的程度进行量化。由此可以得到两个算法，即Proximal Policy Optimization(PPO)和TRPO(Trust Region Policy Optimization)：</p><ul><li>Proximal Policy Optimization(PPO)</li></ul><p>$$J_{PPO}^{\theta’}(\theta) &#x3D; J^{\theta’}(\theta) - \beta KL(\theta,\theta’)\tag{17}$$</p><ul><li>TRPO(Trust Region Policy Optimization)</li></ul><p>$$J_{TRPO}^{\theta’}(\theta) &#x3D; E_{(s_t,a_t)\sim \pi_{\theta’}}[\frac{p_\theta(a_t|s_t)}{p_{\theta’}(a_t|s_t)}A^{\theta’}(s_t,a_t)]\tag{18}$$</p><p>在TRPO中，$KL(\theta,\theta’)$以单独的限制存在，一般为$KL(\theta,\theta’)&lt;\delta$.</p><p>因此，PPO算法的伪代码如下：</p><ul><li><p>Initial policy parameters $\theta^0$</p></li><li><p>In each iteration:</p><ul><li>Using $\theta^k$ to interact with the environment to collect ${s_t,a_t}$ and compute advatage $A_{\theta^k}(st,at)$</li><li>Find $\theta$ optimizing $J_{PPO}(\theta)$</li><li>$J_{PPO}^{\theta^k} &#x3D; J^{\theta^k}(\theta) - \beta \times KL(\theta,\theta^k)$ # Update parameters several times</li></ul></li><li><p>与此同时，动态调整$\beta$:</p><ul><li>If $KL(\theta,\theta^k) &gt; KL_{max}$,increase $\beta$</li><li>If $KL(\theta,\theta^k) &lt; KL_{min}$,decrease $\beta$</li></ul></li></ul><p>这就完成了 KL Penalty的建立。</p><h2 id="第二种PPO算法"><a href="#第二种PPO算法" class="headerlink" title="第二种PPO算法"></a>第二种PPO算法</h2><p>在这个PPO算法中，并不是使用KL函数，而是使用clip函数，所谓的clip函数是指$clip(\frac{p_\theta(a_t|s_t)}{p_\theta^k(a_t,s_t)},1-\epsilon,1+\epsilon)$，当$\frac{p_\theta(a_t|s_t)}{p_\theta^k(a_t,s_t)}$的值小于$1-\epsilon$时，它的值取$1-\epsilon$,当$\frac{p_\theta(a_t|s_t)}{p_\theta^k(a_t,s_t)}$的值大于$1+\epsilon$时，它的值取$1+\epsilon$.因此可得：</p><p>$$J_{PPO2}^{\theta^k}(\theta) \approx \sum_{(s_t,a_t)}min(\frac{p_\theta(a_t|s_t)}{p_\theta^k(a_t|s_t)}A^{\theta^k}(s_t,a_t),clip(\frac{p_\theta(a_t|s_t)}{p_\theta^k(a_t,s_t)},1-\epsilon,1+\epsilon)A^{\theta^k}(s_t,a_t))\tag{19}$$</p><p>$\frac{p_\theta(a_t|s_t)}{p_\theta^k(a_t|s_t)}$和$clip(\frac{p_\theta(a_t|s_t)}{p_\theta^k(a_t,s_t)},1-\epsilon,1+\epsilon)$的图像如图所示：</p><p><img src="http://cdn.leafii.top/img/secondppo.png" alt="secondppo" loading="lazy"></p><h2 id="PPO的网络结构"><a href="#PPO的网络结构" class="headerlink" title="PPO的网络结构"></a>PPO的网络结构</h2><h3 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h3><p>一个actor网络，一个critic网络</p><p><img src="http://cdn.leafii.top/img/v2-1c0bdce5fe4df17df7c4a987c4f7c9b1_1440w.jpeg" alt="img" loading="lazy"></p><ul><li>actor网络的输入为状态，输出为动作概率$\pi(a_t|s_t)$(对于离散动作空间而言)或者动作概率分布参数（对于连续动作空间而言）</li><li>critic网络的输入为状态，输出为状态的价值。</li></ul><p>显然，如果actor网络输出的动作能够使优势（$A^\theta(s_t,a_t)$）变大，那么就越好。如果critic网络输出的状态价值越准确，那么就越好。</p><h3 id="产生experience的过程"><a href="#产生experience的过程" class="headerlink" title="产生experience的过程"></a>产生experience的过程</h3><p>已知一个状态$s_0$，通过actor网络得到所有动作的概率（图中以三个动作：$a,b,c$为例），然后依概率采样得到动作$a_0$，然后将$a_0$输入到环境中，得到$s_1$和$r_1$。状态价值$v(s_0)$是通过critic网络输出得到的，这样就得到一个experience：$(s_0,a_0,r_1,v(s_0),logP(a_0|s_0))$，然后将experience放入经验池中(当然之后还会计算$A(s_0,a_0))$以及$G_0$，经验池中也存放了这两个信息)。</p><p><img src="http://cdn.leafii.top/img/v2-053ff8d2e893a3ce59c67dac0406eeb6_1440w.jpeg" alt="img" loading="lazy"></p><blockquote><p>注：虽然$v(s_0)$可以用一条轨迹的折扣回报得到，即：$v(s_0)&#x3D;r_1+\gamma r_2+…+\gamma^{T}r_{T+1}+\gamma^{T+1}v(s_{T+1})$,但是轨迹末状态的下一状态$s_{T+1}$的$v(s_{T+1})$还是需要critic网络来估计，当然如果$s_{T+1}$是正常游戏结束，而不是达到了最大步长，那么令$v(s_{T+1}&#x3D;0$)。与其这样，还不如直接用critic网络直接估计$v(s_0)$，而且值得注意的是，$v(s_0)&#x3D;r_1+\gamma r_2+…+\gamma^{T}r_{T+1}+\gamma^{T+1}v(s_{T+1})$正是我们critic网络作为监督学习的真值</p></blockquote><p>以上是离散动作的情况，如果是连续动作，就输出概率分布的参数（比如高斯分布的均值和方差），然后按照概率分布去采样得到动作$a_0$。</p><p><strong>经验池</strong>存在的意义是更加方便的计算一条轨迹上状态的累积折扣回报$v(s_t)$以及优势$A(s_t,a_t)$而不是消除experience的相关性。</p><h3 id="Actor网络的更新流程"><a href="#Actor网络的更新流程" class="headerlink" title="Actor网络的更新流程"></a>Actor网络的更新流程</h3><p>对优势函数进行定义：</p><p>$$\hat A_t &#x3D; \delta_t+(\gamma \lambda)\delta_{t+1}+…+…+(\gamma \lambda)^{T-t+1}\delta_{T-1},\tag{20}$$</p><p>$$where \delta_t &#x3D; r_t + \gamma V(s_{t+1}) - V(s_t)\tag{21}$$</p><p>因为Actor网络需要输出的动作优势尽可能的大，所以它的训练需要用以下表达式作为Loss函数:</p><p>$$L^{CLIP}(\theta) &#x3D; \hat {\mathbb E}_t[min(r_t(\theta)\hat A_t,clip(r_t(\theta),1-\epsilon,1+\epsilon)\hat A_t\tag{22}$$</p><p>其中$$r_t(\theta) &#x3D; \frac{\pi_\theta(a_t|s_t)}{\pi_{\theta_{old}}(a_t|s_t)}$$</p><p><strong>值得注意的是：</strong> 和TD3算法的单步TD不同，PPO算法使用多步TD，因此它需要跑完一条轨迹后，才开始计算各个<strong>状态的累积回报</strong>和<strong>动作的优势</strong>。具体而言，状态价值 ，$v(s_0)$，$v(s_1)$ 是通过critic网络输出得到的，动作优势 $A(s_0,a_0)$ 是通过首先计算$ \delta_0&#x3D;r_1+v(s_1)−v(s_0) $，然后用 $\gamma \lambda$作为折扣因子去计算动作优势 $A(s_0,a_0)$ ，具体可以看公式（20）。</p><p>因此训练actor网络的时候需要将经验池中的所有数据都拿出来，计算loss，然后用梯度上升法，多更新几步梯度。更新完成后即将经验池清空，等待下一个新的actor网络与环境互动去收集数据。</p><p>PyTorch 代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># train actor net</span>        all_pi_tensor <span class="token operator">=</span> self<span class="token punctuation">.</span>actor_net<span class="token punctuation">(</span>state_tensor<span class="token punctuation">)</span>        pi_tensor <span class="token operator">=</span> all_pi_tensor<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> action_tensor<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        surrogate_advantage_tensor <span class="token operator">=</span> <span class="token punctuation">(</span>pi_tensor <span class="token operator">/</span> old_pi_tensor<span class="token punctuation">)</span> <span class="token operator">*</span>                 advantage_tensor        clip_times_advantage_tensor <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">*</span> surrogate_advantage_tensor        max_surrogate_advantage_tensor <span class="token operator">=</span> advantage_tensor <span class="token operator">+</span>                 torch<span class="token punctuation">.</span>where<span class="token punctuation">(</span>advantage_tensor <span class="token operator">></span> <span class="token number">0.</span><span class="token punctuation">,</span>                clip_times_advantage_tensor<span class="token punctuation">,</span> <span class="token operator">-</span>clip_times_advantage_tensor<span class="token punctuation">)</span>        clipped_surrogate_advantage_tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>                surrogate_advantage_tensor<span class="token punctuation">,</span> max_surrogate_advantage_tensor<span class="token punctuation">)</span>        actor_loss_tensor <span class="token operator">=</span> <span class="token operator">-</span>clipped_surrogate_advantage_tensor<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>actor_optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        actor_loss_tensor<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>actor_optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="Critic网络的更新流程"><a href="#Critic网络的更新流程" class="headerlink" title="Critic网络的更新流程"></a>Critic网络的更新流程</h3><p>Actor网络更新后，接着拿从经验池buffer中采出的数据进行Critic网络的更新（数据已经计算了状态价值，折扣回报$G_t$的计算是基于多步TD的方法，从那个状态开始，用每一步环境返回的奖励 R 与折扣因子相乘后累加，即：$G_t &#x3D; r_{t+1} + \gamma r_{t+2} + … + \gamma^{T-t}r_{T+1} + \gamma^{T+1-t}v(s_{T+1})$，其中$v(s_{T+1})$为网络的估计值，更新方式即为：计算好的折扣回报 $G_T$与Critic网络预测当前状态价值 $v(s_t)$ 做差，用MSEloss作为Loss函数，对神经网络进行训练。</p><p>pytorch代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># train critic net</span>        pred_tensor <span class="token operator">=</span> self<span class="token punctuation">.</span>critic_net<span class="token punctuation">(</span>state_tensor<span class="token punctuation">)</span>        critic_loss_tensor <span class="token operator">=</span> self<span class="token punctuation">.</span>critic_loss<span class="token punctuation">(</span>pred_tensor<span class="token punctuation">,</span> return_tensor<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>critic_optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        critic_loss_tensor<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>critic_optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="为什么说TRPO和PPO是On-policy的？"><a href="#为什么说TRPO和PPO是On-policy的？" class="headerlink" title="为什么说TRPO和PPO是On-policy的？"></a>为什么说TRPO和PPO是On-policy的？</h2><p><strong>首先我们明确什么是on-policy，什么是off-policy？</strong></p><ul><li>on-policy：就是要训练的agent跟环境互动的agent是同一个agent,也就是我们采样的网络和要优化的网络是否是同一个网络。</li><li>off-policy：那肯定就是跟上面相反的。</li></ul><p>那么进入正题，我们一般认为PPO是off-policy的原因就是因为PPO使用actor网络去sampler然后填充经验池，然后使用这个经验池中的数据去更新这个actor多个epoch，当更新到第二个epoch的时候那么actor就变成了actor1,然而经验池中的数据仍然是actor网络采样得到的，那么就造成了从更新第二个epoch开始采样的actor和要优化的actor不是同一个网络，那么可能就会认为它是off-pocliy的。</p><p>其实可以很简单的解释这个问题，根据off-policy的定义，采样的网络和要优化的网络不是一个网络，那么对于PPO来说，<strong>使用一批数据从更新actor的第二个epoch开始，数据虽然都是旧的actor采样得到的，但是我们并没有直接使用这批数据去更新我们的新的actor，而是使用imporance sampling先将数据分布不同导致的误差进行了修正</strong>。那么这个importance sampling的目的就是让这两者数据分布之间的差异尽可能的缩小，<strong>那么就可以近似理解成做了importance sampling之后的数据就是我们的更新（这里的更新指的是多个epoch更新的中间过程）后的actor采样得来的，这样就可以理解成我们要优化得actor和采样得actor是同一个actor，那么他就是on-policy的。</strong></p><h2 id="Conclusion-3"><a href="#Conclusion-3" class="headerlink" title="Conclusion[3]"></a>Conclusion[3]</h2><p>We have introduced proximal policy optimization, a family of policy optimization methods that <strong>use multiple epochs of stochastic gradient ascent to perform each policy update</strong>.These methods <strong>have the stability and reliability of trust-region methods but are much simpler to implement</strong>**, requiring only few lines of code change to a vanilla policy gradient implementation, applicable in more general settings (for example, when <strong>using a joint architecture for the policy and value function</strong>), and have better overall performance.</p><p>我们介绍了近程策略优化，这是一系列策略优化方法，使用随机梯度上升的多个周期来执行每个策略更新。 这些方法具有信任域方法的稳定性和可靠性，但实现起来要简单得多，只需要很少的代码行就可以改变成一个普通的策略梯度实现，适用于更一般的设置（例如，当使用策略和值函数的联合体系结构时），并且具有更好的整体性能。 </p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><p>【DRL-16】Proximal Policy Optimization : <a href="https://zhuanlan.zhihu.com/p/142312072">https://zhuanlan.zhihu.com/p/142312072</a></p></li><li><p>为什么说TRPO和PPO是on-policy的？:<a href="https://zhuanlan.zhihu.com/p/387193698">https://zhuanlan.zhihu.com/p/387193698</a></p></li><li><p>Proximal Policy Optimization Algorithms:arXiv:1707.06347v2 [cs.LG] 28 Aug 2017</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍强化学习中的PPO(Proximal Policy Optimization)算法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="tags/python/"/>
    
    <category term="强化学习" scheme="tags/强化学习/"/>
    
  </entry>
  
  <entry>
    <title>用SHAP解释机器学习</title>
    <link href="2022/08/09/%E7%94%A8SHAP%E8%A7%A3%E9%87%8A%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>2022/08/09/%E7%94%A8SHAP%E8%A7%A3%E9%87%8A%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-08-09T09:41:28.000Z</published>
    <updated>2022-09-23T12:20:38.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用SHAP解释机器学习"><a href="#用SHAP解释机器学习" class="headerlink" title="用SHAP解释机器学习"></a>用SHAP解释机器学习</h1><h2 id="什么是Explainable-AI？"><a href="#什么是Explainable-AI？" class="headerlink" title="什么是Explainable AI？"></a>什么是Explainable AI？</h2><p>关于要如何解释自己模型预测出来的结果，我们都需要了解为何我们训练出的模型会做出如此判断，是基于什么原因作出这种判断，会不会model完全用了非常诡异的特征去下决策（但说不定是对的？）以下归纳出几个我们为什么想知道我们训练出来的模型到底在说什么？</p><ul><li>确认模型的合理性：在我们需要做出决策，倚重模型做判断时，我们需要知道，这个模型所参考的数据特征是否正如我们想象的一样。若我们不知道演算法建议的理由，那下决策肯定会觉得害怕，如同依赖了一个名为AI的黑盒子一般。</li><li>改良模型：这点其实和第一点略为相同，如果我们能知道我们的模型所预测的依据，我们就可以去试着改善它。特别是当模型和资料中，存在了一些恰恰好的bias，若我们没试着看背后的原因的话，通常很难发现一些问题。以过去的专案经验当作例子，我们使用影像检验在找瑕疵物件时，预测的效果不错，但取细看背后的原因，却发现模型依赖背景而做出决断。详细的情况是物件的缺陷在拍摄当天时有个固定的光影，模型判断defect的依据竟然是用那个光影，而非物件上的瑕疵。</li><li>从模型上学习：当模型真正的从品质良好的训练资料集中得到了有用的判断依据，人类就可以从模型中学到一些东西。例如为期，人类目前很显然已经被AI击败，但在无关输赢的时候，职业棋手目前早已寻求AI的帮助，让自己的技术更上一层楼。</li></ul><h2 id="SHAP-Value"><a href="#SHAP-Value" class="headerlink" title="SHAP Value"></a>SHAP Value</h2><p>以上几点让我们了解Explainable AI的必要性，那我们该如何下手去理解每个预测我们的模型是如何理解的呢？</p><p>SHAP values（SHapley Additive exPlanations）是一个Python的视觉化分析套件，让我们能轻易地了解我们的模型做出决策的依据。</p><p>那对我们来说，什么时候该用SHAP value呢？</p><p>举例：</p><ul><li>制造业的入料控制以达到最佳化结果，你如何正确地减少不必要的入料，也可以达到一样的产能。</li><li>利用Users的使用行为，找到诈骗账号。并对模型做出解释，借此在各种features中找到诈骗账号一般性具有的行为。</li></ul><h2 id="SHAP估计"><a href="#SHAP估计" class="headerlink" title="SHAP估计"></a>SHAP估计</h2><p>除了这个方法，还可以使用SHAP（SHapley Additive exPlanations）来估计Shapley values，SHAP将模型的预测值解释为每个输入特征的归因值之和。换句话说，就是计算每一个特征的Shapley value，依此来衡量特征对最终预测值的影响。用公式表示：</p><p>$$g(z’)&#x3D;\phi_0+\sum_{j&#x3D;1}^{M}\phi_jz’_j$$</p><ul><li>g(z’)为被简化的可解释的模型</li><li>z’表示相应的特征是否存在（1或0），M是输入特征的个数，因此可以表示成$z’\in{0,1}^M$</li><li>$\phi_i$代表我们要求的Shapley value</li><li>$\phi_0$代表平均值</li></ul><h2 id="Kernel-SHAP"><a href="#Kernel-SHAP" class="headerlink" title="Kernel SHAP"></a>Kernel SHAP</h2><p>$$g(z’)&#x3D;\phi_0+\sum_{k&#x3D;1}^{M}\phi_kz’_k$$</p><p>Kernel SHAP 的计算流程：</p><ul><li>Sample coalitions $z’_k\in{0,1}^M,k\in{1,…,K}$(1&#x3D;feature present in coalition,0 &#x3D; feature absent).</li><li>Get prediction for each $z’_k$ by first converting z’k to the original feature space and then applying model f:$f(h_x(z’_k))$</li><li>Compute the weight for each $z’_k$ with the SHAP kernel.</li><li>Fit weighted linear model.</li><li>Return Shapley values $\phi_k$, the coefficients from the linear model.</li></ul><p>Kernel SHAP 计算流程的详细说明：</p><p>Step 1:</p><ul><li>Sample coalitions $z’_k\in{0,1}^M,k\in{1,…,K}$(1&#x3D;feature present in coalition,0 &#x3D; feature absent).</li></ul><p>我们只想要求Age的Shapley value，而Weight和Color都嫌不要求，因此将Age，Weight，Color的z设为（1，0，0）</p><p><img src="http://cdn.leafii.top/img/1*tBYED5khakp0zlEV-mWdfQ.png" alt="Step 1" loading="lazy"></p><p>Step 2:</p><ul><li>Get prediction for each $z’_k$ by first converting z’k to the original feature space and then applying model f:$f(h_x(z’_k))$</li></ul><p>我们取得DATA里的值，假设有一笔资料的Age，Weight，Color为0.5,20,Blue,由于我们Age，Weight，Color的z设为（1，0，0），因此只需保留Age的正确性（0.5），其他两个都随机替代其他资料存在的值，例如Weight从20换成17，Color从Blue换成Pink，注意，17和Pink必须要是DATA里有存在的值，不能随机填。</p><p><img src="http://cdn.leafii.top/img/1*l8aco7sQ4LcjLWFUggBSmg.png" alt="Step 2" loading="lazy"></p><p>Step 3:</p><ul><li>Compute the weight for each $z’_k$ with the SHAP kernel.</li></ul><p>Kernel SHAP中权重的计算根据Simplified Features中0或1的数量，若有很多0或是很多1，我们取较高的权重，若0和1的数量相近则取较低的权重。</p><p><img src="http://cdn.leafii.top/img/1*RxUaGj_RH6FfCSwklWQVzA.png" alt="Step 3" loading="lazy"></p><p>Step 4:</p><ul><li>Fit weighted linear model.</li></ul><p>最后再根据资料来fit一个weighted linear model，而获得的weight其实就是特征对应的Shapley values</p><p><img src="http://cdn.leafii.top/img/1*Q8KsY0ehupv_VxMzYcHWTg.png" alt="Step 4" loading="lazy"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="https://medium.com/ai-academy-taiwan/%E5%8F%AF%E8%A7%A3%E9%87%8B-ai-xai-%E7%B3%BB%E5%88%97-shap-2c600b4bdc9e">可解釋 AI (XAI) 系列 — SHAP</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;用SHAP解释机器学习&quot;&gt;&lt;a href=&quot;#用SHAP解释机器学习&quot; class=&quot;headerlink&quot; title=&quot;用SHAP解释机器学习&quot;&gt;&lt;/a&gt;用SHAP解释机器学习&lt;/h1&gt;&lt;h2 id=&quot;什么是Explainable-AI？&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="python" scheme="tags/python/"/>
    
    <category term="机器学习基础" scheme="tags/机器学习基础/"/>
    
    <category term="博弈论基础" scheme="tags/博弈论基础/"/>
    
  </entry>
  
  <entry>
    <title>Shapley_Values</title>
    <link href="2022/08/09/Shapley-Values/"/>
    <id>2022/08/09/Shapley-Values/</id>
    <published>2022-08-09T05:57:57.000Z</published>
    <updated>2022-08-10T10:27:15.584Z</updated>
    
    <content type="html"><![CDATA[<p>Shapley Values是博弈论大师Lloyd Stowell Shapley基于合作博弈理论(cooperative game theory)提出来的解决方案，通常被翻译为夏普利值、沙普利值，是一种基于贡献的分配方式。<span id="more"></span></p><h1 id="Shapley-Values"><a href="#Shapley-Values" class="headerlink" title="Shapley Values"></a>Shapley Values</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Shapley Values是博弈论大师Lloyd Stowell Shapley基于合作博弈理论(cooperative game theory)提出来的解决方案，通常被翻译为夏普利值、沙普利值，是一种基于贡献的分配方式。这种方法根据玩家们在Game中得到的总支出公平的分配总支出给玩家们</p><ul><li>玩家们 -&gt; features value of the instance</li><li>Game -&gt; model</li><li>总支出 -&gt; prediction</li></ul><blockquote><p>博弈根据是否可以达成具有约束力的协议，分为合作博弈和非合作博弈。合作博弈是指一些参与者以同盟、合作的方式进行的博弈，博弈活动就是不同集团之间的对抗。<br>合作博弈研究人们达成合作时如何分配合作得到的收益，即收益分配问题。合作博弈采取的是一种合作的方式，或者说是一种妥协。<br>合作博弈亦称为正和博弈，是指博弈双方的利益都有所增加，或者至少是一方的利益增加，而另一方的利益不受损害，因而整个社会的利益有所增加的。</p></blockquote><p>合作博弈存在的两个基本条件是：</p><ol><li>对联盟来说，整体收益大于其每个成员单独经营时的收益之和。</li><li>对联盟内部而言，应存在具有帕累托改进性质的分配规则，即每个成员都能获得不少于不加入联盟时所获的收益。</li></ol><p>Shapley Value的四个公理：</p><ol><li>对称性：如果player i和player j满足$v(S\cup i)&#x3D;v(S \cup j)$，对于任意不包含i和j的联盟S都成立，那么$\phi_i(v)&#x3D;\phi_j(v)$.</li><li>有效性：合作各方获利总和等于合作获利($\sum_{i\in P}\phi_{i}(v)&#x3D;v(P)$)</li><li>冗员性：如果i是一个player，满足$v(S)&#x3D;v(S\cup j)$对任意一个联盟S成立，那么$\phi_i(v)&#x3D;0$;也就是说如果一个人加入任何一个联盟对联盟的收益都没有影响，也就是说，他对任何一个联盟都没有贡献，那这个人就不应该分得任何payoff，所以它的夏普利值为0.</li><li>任意两个game无关，它的夏普利值可以相加。($\phi[u+v]&#x3D;\phi[u]+\phi[v]$对任何games u和v都成立)</li></ol><h2 id="公式1"><a href="#公式1" class="headerlink" title="公式1"></a>公式1</h2><p>记$I&#x3D;{1,2,…,n}$为n个合作人的集合</p><p>$$\phi_i(v)&#x3D;\sum_{s\in S_i}\omega(|s|)[v(s)-v(s\setminus{i})]$$ </p><p>其中，$S_i$是$I$中包含成员$i$的所有子集形成的集合，$|s|$是集合s元素的个数，$\omega(|s|)$是加权因子</p><p>$s\setminus {i}$，表示集合s中去掉元素i后的集合</p><p>$v(s)-v(s\setminus{i})$，成员i在联盟中的贡献，即成员i的边际贡献；</p><p>$\omega(|s|)$，即权重$\omega(|s|)&#x3D;\frac{(|s|-1)!(n-|s|)!}{n!}$</p><p>Shapley Value由两权重系数和边际贡献两部分构成</p><p>公式的理解：</p><p>成员i的联盟会有很多个，我们列出包含成员i所有的联盟，然后依次计算每个联盟中，成员i的边际贡献，并将该边际贡献乘以该联盟出现的概率（权重），把结果值加起来就是成员i的夏普利值。</p><p>这里的边际贡献还好理解，联盟的收益-剔除成员i后联盟的收益，即成员i对联盟带来的增益贡献（边际贡献）；</p><p>权重公式的理解：</p><p>从公式来看，它只和联盟s的成员个数有关，分母n!表示n个成员的全排列，分子$(|s|-1)!(n-|s|)!$表示联盟s中除了成员i的排列数乘以联盟剩下的成员$(n-|s|)$要加入联盟s的排列数</p><p><img src="http://cdn.leafii.top/img/v2-6506bfe5e6131535f7616b2d9d705f21_1440w.jpg" alt="img" loading="lazy"></p><p><img src="http://cdn.leafii.top/img/v2-9e6d676f7a66893cae2f49a13b31a4bb_1440w.jpg" alt="img" loading="lazy"></p><h2 id="公式2"><a href="#公式2" class="headerlink" title="公式2"></a>公式2</h2><p>初始方程：</p><p>$$\phi_i(v)&#x3D;\sum_{S\subseteq N\setminus{i}}\frac{|S|!(|N|-|S|-1)!}{|N|!}(v(S\cup{i})-v(S))$$</p><p>让我们把它分解一下。在一个联盟game（前面描述的场景）中，我们有一组 p 个玩家。我们还有一个函数 val，它给出了这些参与者的任何子集的值，也就是说，S 是${x_1,…,x_p}$的子集，然后 val（S）给出了该子集的值。因此，对于一个联合博弈（p，v），我们可以使用这个方程来计算玩家 i 的贡献，即 Shapley 值。</p><p>我们重写一下初始方程：</p><p><img src="http://cdn.leafii.top/img/change.png" alt="change" loading="lazy"></p><p>接下来通过分解方程的不同部分，以便加深理解，在这里我们定义一个具体的场景，使其所有部分都不再那么抽象。</p><p>假设我们经营一家生产砖块的工厂。我们的一个生产团队由四个人组成：Amanda、Ben、Claire和Don（从现在开始我将以他们名字的首字母来称呼他们）。每周他们一起设法生产出X块砖。由于我们工厂运转良好，有一笔奖金要发给队员们，但是为了让我们以公平的方式做到这一点，我们需要弄清楚每个人对每周生产X数量的砖块贡献了多少。</p><p>最困难的是，我们有好几个因素都会影响团队可以生产的砖块数量。其中之一是团队规模，因为团队规模越大，生产的砖块就越多。另一个可能是团队成员之间的合作程度。问题是，我们无法以有意义的方式量化这些影响，但幸运的事，我们可以使用Shapley值来回避这个问题。</p><p>我们现在已经定义了玩家（A、B、C和D）以及他们参与的game（生产砖块）。让我们从计算生产的X砖中有多少可以归于Don开始，即计算D的Shapley值。如果我们把它与Shapley值公式的参数联系起来，我们就得到：</p><p>$$N&#x3D;{A,B,C,D}\\ i&#x3D;D$$ </p><p>所以D是我们的球员i，整个N组由所有四个队员A，B，C和D组成，我们先看一下Shapley值公式的这一部分：</p><p>$$S\subseteq N\setminus{i}$$</p><p>也就是说，我们需要把我们的团队成员排除在我们现在关注的人之外。然后，我们需要考虑所有可能形成的子集。所以如果我们从组中排除D，我们就只剩下{A,B,C}。从这个剩余的组中，我们可以形成以下子集：</p><p><img src="http://cdn.leafii.top/img/ziji.png" alt="ziji" loading="lazy"></p><p>我们总共可以构造出其余团队成员的8个不同子集。其中一个子集是空集，即它没有任何成员。</p><p>现在让我们把注意力转移到这个部分：</p><p>$$(v(S\cup{i})-v(S))$$</p><p>这是我们Shapley值的一个基本概念的应用：在game中增加玩家i的边际价值。所以对于任何给定的子集，我们要比较它的值和当包括玩家i的时候它的值。通过这样做，我们得到了将玩家i添加到该子集的边际值。</p><p>我们把它和我们的例子联系起来，想看看如果我们把D加到8个子集中的每一个子集上，每周生产的砖块数量有什么不同。我们可以将这8个边缘值直观地表示为：</p><p>$$\nabla v_{A,D}\space \nabla v_{AB,D} \ \nabla v_{\emptyset,D} \space \space \nabla v_{B,D} \space \space \nabla v_{BC,D} \space \space \nabla v_{ABC,D} \ \nabla v_{C,D} \space \space \nabla v_{CA,D}$$</p><p>你可以将每种情况都视为我们需要观察的不同场景，以便公平地评估D对整个生产的贡献程度。这意味着，我们需要观察如果没有人工作（即空集合）会产生多少砖块，并将其与只有D工作时的情况进行比较。我们还需要观察AB产生的砖块数量，并将其与AB产生的砖块数量以及所有8个集合中D可以产生的砖块数量进行比较。</p><p>好吧，我们现在已经知道我们需要计算8个不同的边缘值。Shapley值方程告诉我们，我们需要它们加在一起。然而，在我们做这些之前，我们还需要调整每一个边际值，从等式的这一部分可以看出：</p><p><img src="http://cdn.leafii.top/img/%E7%9C%8B%E5%87%BA.png" alt="看出" loading="lazy"></p><p>它计算出除玩家i以外的所有剩余团队成员的子集的排列可以有多少个。或者换句话说：如果你有｜N｜-1个玩家，你能用它们组成多少个｜S｜大小的组？然后我们用这个数字除以玩家i对所有大小为｜S｜的群体的边际贡献。</p><p>在我们的场景中，｜N｜-1&#x3D;3，也就是说，当我们计算D的Shapely值时，这些是剩下的团队成员数量。在我们的例子中，我们将使用等式的那一部分来计算我们可以形成多少个0、1、2和3大小的组，因为这些只是我们可以用剩下的成员构造的组大小。因此，例如，如果有｜S｜&#x3D;2，那么我们可以构造3个不同的大小为2的组：AB、BC和CA。这意味着我们应该对8个边缘值中的每一个应用以下比例因子：</p><p>$$\frac{1}{3}\nabla v_{A,D}\space\space \frac{1}{3}\nabla v_{BC,D} \ 1\nabla v_{\emptyset,D} \space \space \frac{1}{3}\nabla v_{B,D} \space \space \frac{1}{3}\nabla v_{BC,D} \space \space 1\nabla v_{ABC,D} \ \frac{1}{3}\nabla v_{C,D} \space \space \frac{1}{3}\nabla v_{CA,D}$$</p><p>让我们思考一下为什么要这样做。我们想知道D对团队总产出的贡献有多大。为了做到这一点，我们计算了他对我们所能形成的团队中每个集合的贡献。通过添加这个比例因子，我们平均了其他团队成员对每个子集大小的影响。这意味着，当我们将D加入到一个0，1，2和3大小的团队中时，我们能够捕获这些团队的平均边际贡献。</p><p>接下来，分解最后一部分：</p><p>$$\frac{1}{|N|}$$</p><p>我们需要应用到所有的边际值，然后才能求和。我们必须把它们和总队员数分开。</p><p>我们为什么要这么做？好吧，如果我们看看砖厂的例子，我们已经平均出了其他团队成员对每个子集大小的影响，这样我们就可以算出D对0、1、2和3大小的组的贡献。最后一块拼图是平均小组规模的影响，也就是说，D贡献了多少与小组规模无关。</p><p>我们现在终于可以计算出D的Shapley值了，我们观察到他对团队中所有不同的子集的贡献是多少。我们还对团队成员组成和团队规模的影响进行了平均，这最终允许我们计算：</p><p><img src="http://cdn.leafii.top/img/finalcalculate.png" alt="finalcalculate" loading="lazy"></p><p>数学符号更多的是一个图形化的说明，而不是一个数学的说明（这是我在脑海中想象它的方式）</p><p>在这里，我们得到了D的Shapely值。在我们为团队的其他成员完成这项工作之后，我们将知道每个人对每周生产的X块砖的贡献，这样我们就可以在所有团队成员中公平的分配奖金。</p><p>$$X&#x3D;v({A,B,C,D})&#x3D;\phi_A(v)+\phi_B(v)+\phi_C(v)+\phi_D(v)$$</p><p>我们可以发现，我们不需要知道任何关于值函数v的内部工作原理，只需要观察它为不同子集提供的值，我们可以从参与game的玩家中得到这些值。</p><p>这才是Shapley值背后真正的力量和吸引力，但是对于一组参与game的n个玩家，你将需要分析$2^n$个子集才能计算Shapley值。</p><h2 id="公式3"><a href="#公式3" class="headerlink" title="公式3"></a>公式3</h2><p>Shapley Values通过S中玩家的值函数val定义的：</p><p>$$\phi_j(val) &#x3D; \sum_{S \subseteq {x_1,…,x_p}\setminus{x_j}}{\frac{|S|!(p-|S|-1)!}{p!}} (val(S\cup{x_j})-val(S))$$</p><ul><li>$x_1,…,x_p$为建立模型所使用的所有特征，p为所有的特征数量。</li><li>S为除了$x_j$的子集合。</li><li>Val(S)是对于集合S的预测值减去期望值（平均预测值）。</li></ul><p>$$val_x(S)&#x3D;\int \hat f (x_1,…,x_p)d\mathbb{P}_{x\notin S}-E_X(\hat f(X))$$</p><p>下面通过一个例子了解公式。</p><h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h2><p>假设工程师们需要合作写一个project，共计100行code，图一显示了工程师期望产出code的行数，也就是对应的val(S)</p><p><img src="http://cdn.leafii.top/img/1*cB0F5OI9ChFjUY1ohmoneg.png" alt="图一. 工程师期望产出code的行数" loading="lazy"></p><p>而我们想要计算出x1这位工程师的Shapley value，也就是他的贡献值该如何计算呢？可以参考一下图二的计算流程，三位工程师，会有六种排列组合，需要针对每种情形来计算出x1的Shapley value，因为先后顺序是会影响他的贡献值的，接着再把六个值加总平均就可以得到x1的Shapley value了。</p><p><img src="http://cdn.leafii.top/img/1*S7sGEbWojrrR-VW3NC9yxg.png" alt="图二.x1的Shapley value计算流程" loading="lazy"></p><p>在下图代入公式看看结果：</p><p><img src="http://cdn.leafii.top/img/1*KGgy9XwcDAdXRhWG0TaKTg.png" alt="计算结果" loading="lazy"></p><p>最后我们可以分别计算出x2和x3的Shapley values，如图三所示，最后得到的x1 是 34.17, x2 是 41.7, x3 是 24.17，而这三个值相加就等于100行code，简单来说，这个Shapley values其实就是想要衡量个别的特征对模型的贡献程度是多少，而不收到其他特征的影响。</p><p><img src="http://cdn.leafii.top/img/1*9ccuwFjqTof7bPb_UIsHlA.png" alt="图三.x1，x2，x3的Shapley values计算过程" loading="lazy"></p><h2 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h2><p>某互联网公司今天需要加班，需要编写一个500行的程序代码，产品经理找了三个程序员来完成。按照完成量发奖金：1号普通程序员独立能写100行，2号大神程序员独立能写125行，3号美女程序员能写50行。但如果程序员两两合作，会产生不同的编码效率：1号和2号合作能写270行，2号与3号合作能写350行，1号与3号合作能写375行。当然，三名程序员共同合作能完成500行。若共有1000元项目奖金，该如何给这三名程序员分配呢？</p><p>下面，我们尝试用Shapley值经行计算。首先，计算可能的联盟数量。显然，三个人的联盟形成方法一共有6种：</p><p> （1）1号邀请2号加入组成S联盟，3号加入S联盟；</p><p> （2）1号邀请3号加入组成S联盟，2号加入S联盟；</p><p> （3）2号邀请1号加入组成S联盟，3号加入S联盟；</p><p> （4）2号邀请3号加入组成S联盟，1号加入S联盟；</p><p> （5）3号邀请1号加入组成S联盟，2号加入S联盟；</p><p> （6）3号邀请2号加入组成S联盟，1号加入S联盟；</p><p>按照Shapley值的计算过程，下一步需要计算每位程序员的边际贡献，</p><p><img src="http://cdn.leafii.top/img/1382625-20190219170542329-2104584582.png" alt="img" loading="lazy"></p><p> 1号普通程序员的Shapley值为：$\frac{100 + 100 + 145 + 150 + 325 + 150}{6}&#x3D; \frac{970}{6}$</p><p> 2号大神程序员的Shapley值为：$\frac{170 + 125 + 125 + 125 + 125 + 300}{6} &#x3D;  \frac{970}{6}$</p><p> 3号美女程序员的Shapley值为：$\frac{230 + 275 + 230 + 225 + 50  +  50}{6} &#x3D; \frac{1060}{6}$</p><p> 三人的Shapley值的总和正好等于500。  所以根据Shapley值，1号普通程序员应该获得奖金为：1000 x 0.3233 &#x3D; 323.3元，2号大神程序员应该获得奖金同样为323.3元，3号美女程序员获得奖金为353.3元。</p><h2 id="蒙特卡洛采样近似"><a href="#蒙特卡洛采样近似" class="headerlink" title="蒙特卡洛采样近似"></a>蒙特卡洛采样近似</h2><p>其实这样直接计算Shapley value是非常耗费计算资源的，而当feature values比较多时，可能的联盟数量呈指数性增加，因此对于计算精确的Shapley值是一个大问题，对于这个问题， Štrumbelj et al. 提出了蒙特卡洛采样的近似值：</p><p>$$\hat \phi_j&#x3D;\frac{1}{M}\sum_{m&#x3D;1}^{M}(\hat f(x_{+j}^{m})-\hat f(x_{-j}^{m}))$$</p><ul><li>$x_{+j}&#x3D;(x_1,…,x_{j-1},x_{j},z_{j+1},…,z_p)$，意思是除了特征值$x_j$以外，其他不在联盟内的特征值被来自随机数据点z的特征值替换。</li><li>$x_{-j}&#x3D;(x_1,…,x_{j-1},z_{j},z_{j+1},…,z_p)$，表示连特征值$x_j$都要替换</li></ul><h2 id="Shapley-Value的线性扩展形式-Multilinear-extension-form"><a href="#Shapley-Value的线性扩展形式-Multilinear-extension-form" class="headerlink" title="Shapley Value的线性扩展形式(Multilinear extension form)"></a>Shapley Value的线性扩展形式(Multilinear extension form)</h2><p>用v表示一个p个人的合作博弈，P是这个game中的carrier，那么multilinear extesion(MLE) of v 就是一个函数$f:[0,1]^p \rightarrow \R$</p><p>$$f(x_1,…,x_p)&#x3D;\sum_{S\subseteq P}[\prod_{i\in S}x_i\prod_{j\notin S}(1-x_j)]v(S)$$</p><p>这个函数有两个解释方法：</p><ol><li>对于这个game中的联盟S，我们把联盟中的人（即$i\in S$）看成统一体，这个统一体和不是联盟中的人进行一个inessential game;</li><li>把公式中的$x_i$看作player i加入联盟S的概率，因此联盟S形成的概率就是S中的每个人都加入S的概率和S外的每个人都不加入S的概率乘起来，再乘上这个概率对应的colition S的value，那么函数f就可以看作所有coalition的expected value，也就是一个期望的形式。</li></ol><p><strong>定理：</strong>game v是inessential当且仅当它的multilinear function $f$是变量的线性组合。</p><p>也就是说$f(x_1,…,x_n)&#x3D;\sum_{i&#x3D;1}^{n}v(i)x_i$，其中$v(S)&#x3D;\sum_{i\in S}v(i),∀S\in P$</p><p>只要理解了MLE的解释，就不难理解这个定理了，证明比较简单。</p><p>用MLE求夏普利值，公式如下：<br>$$\phi_i[v]&#x3D;\int_{0}^{1}\frac{\partial f(t,…,t)}{\partial x_i}dt$$</p><p>其中$\frac{\partial f(t,…,t)}{\partial x_i}$可以理解为player i对这个game的边际贡献（marginal contribution），对这个贡献求积分，就是衡量player i对所有包含它的联盟的总贡献(reflecting individual conributions)，跟shapely值的思想一致。从偏导的定义出发，求$f$对$x_i$ 的偏导相当于衡量$x_i$每变化一单位，$f$ 会变化多少，也就是$x_i$的变化对$f$的影响，其中$x_i$表示player i 加入联盟S的概率，$f$是所有coalition的expected value，而$x_i$对$f$的影响则可以理解为player i对整个game的影响力，也就是贡献。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="https://medium.com/ai-academy-taiwan/%E5%8F%AF%E8%A7%A3%E9%87%8B-ai-xai-%E7%B3%BB%E5%88%97-shap-2c600b4bdc9e">可解釋 AI (XAI) 系列 — SHAP</a></p><p>[2] <a href="https://www.cnblogs.com/tianqianlan/p/10402628.html">SHAPLEY值的一个应用</a></p><p>[3] <a href="https://zhuanlan.zhihu.com/p/461394890">Shapley Value（夏普利值）</a></p><p>[4] <a href="https://zhuanlan.zhihu.com/p/483891565">关于Shapley Value（夏普利值）的公式</a></p><p>[5] <a href="https://www.leiphone.com/category/ai/6mCCOMPuEXDym6nj.html">机器学习中的 Shapley 值怎么理解？</a></p><p>[6] <a href="https://zhuanlan.zhihu.com/p/383269529">合作博弈中夏普利值（Shapley Value）的主要思想、公理及求解公式的理解</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Shapley Values是博弈论大师Lloyd Stowell Shapley基于合作博弈理论(cooperative game theory)提出来的解决方案，通常被翻译为夏普利值、沙普利值，是一种基于贡献的分配方式。</summary>
    
    
    
    
    <category term="python" scheme="tags/python/"/>
    
    <category term="机器学习基础" scheme="tags/机器学习基础/"/>
    
    <category term="博弈论基础" scheme="tags/博弈论基础/"/>
    
  </entry>
  
  <entry>
    <title>Pandas数据处理</title>
    <link href="2022/06/08/Pandas%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <id>2022/06/08/Pandas%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</id>
    <published>2022-06-08T14:14:08.000Z</published>
    <updated>2022-06-12T15:17:57.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pandas数据处理"><a href="#Pandas数据处理" class="headerlink" title="Pandas数据处理"></a>Pandas数据处理</h1><p>​本文主要写Pandas在数据处理时需要掌握的方法。</p><span id="more"></span><h2 id="运算方法"><a href="#运算方法" class="headerlink" title="运算方法"></a>运算方法</h2><p>​我们已经提过如何用Pandas有效地筛选数据，也知道一些基本的统计学运算方法，而在这一节中，我们想要关注的是在Pandas中如何运算。</p><h3 id="筛选赋值运算"><a href="#筛选赋值运算" class="headerlink" title="筛选赋值运算"></a>筛选赋值运算</h3><p>​在之前筛选数据的教学中，我们能成功找出数据中的某个部分，那么针对这个找出的部分，我们对它进行操作也是没问题的。比如下面我们先生成一组数据，然后再对这组数据进行筛选运算。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>  data<span class="token punctuation">,</span>  index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  columns<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">"ABCD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df</code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">    A   B   C   Da -12 -11 -10  -9b  -8  -7  -6  -5c  -4  -3  -2  -1d   0   1   2   3e   4   5   6   7f   8   9  10  11</code></pre><p>​筛选出<code>A</code>的column出来，对<code>A</code>的内容进行乘0的运算。</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">]</span> <span class="token operator">*=</span> <span class="token number">0</span>df</code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">   A   B   C   Da  0 -11 -10  -9b  0  -7  -6  -5c  0  -3  -2  -1d  0   1   2   3e  0   5   6   7f  0   9  10  11</code></pre><p>​同样，在筛选数据教学中我们提到的<code>iloc</code>,<code>loc</code>功能也是可以用来对某数据进行运算的。<code>iloc</code>找的是index，<code>loc</code>找的是标签。</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>df</code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">     A   B   C   Da  100 -11 -10  -9b  200  -7  -6  -5c    0  -3  -2  -1d    0   1   2   3e    0   5   6   7f    0   9  10  11</code></pre><p>​这只是赋值，现在你拿这些赋值的方法进行运算试试：</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span>df</code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">     A   B   C   Da  200 -22 -20 -18b  200  -7  -6  -5c    0  -3  -2  -1d    0   1   2   3e    0   5   6   7f    0   9  10  11</code></pre><p>​试一试条件运算，下面做的就是对于<code>df[&quot;A&quot;]</code>，我要找出<code>df[&quot;A&quot;]</code>中等于0的数，把这些数赋值成-1.</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>df</code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">     A   B   C   Da  200 -22 -20 -18b  200  -7  -6  -5c   -1  -3  -2  -1d   -1   1   2   3e   -1   5   6   7f   -1   9  10  11</code></pre><p>​基本上，pandas 中可以用于筛选数据的方法都可以用来进一步把筛选出来的数据赋予新的值。</p><h3 id="Apply方法"><a href="#Apply方法" class="headerlink" title="Apply方法"></a>Apply方法</h3><p>​另一种比较方便的批处理数据的方法，我比较喜欢用的是 <code>apply</code>。这是一种可以针对数据做自定义功能的运算。意味着可以简化数据做复杂的功能运算。 上面我们提到的筛选运算，其实是一种简单的运算方式，如果当运算变得复杂，甚至还需要很多局部变量来缓存运算结果，我们就可以尝试把运算过程放置在一个 <code>func</code> 中， 模块化。</p><p>​比如我定义下面这批数据：</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df</code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">   A  B0  4  91  4  92  4  9</code></pre><p>​如果对<code>df</code>做全量的平方根计算，一般的方法是这样：</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>df<span class="token punctuation">)</span></code></pre><p>​但是如果用<code>apply</code>，就会变成</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">     A    B0  2.0  3.01  2.0  3.02  2.0  3.0</code></pre><p>​我们把<code>np.sqrt</code>这个函数当成一个参数传入了<code>apply</code>，看起来好像没什么用，还不如直接使用<code>np.sqrt(df)</code>来的方便。的确这个case写成<code>np.sqrt(df)</code>是要简单点。但是下面这种case呢？</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1</span>df<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> result_type<span class="token operator">=</span><span class="token string">'expand'</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">   0  10  8 -91  8 -92  8 -9</code></pre><p>​在这个自定义的函数中，对 <code>df</code> 中的每一行，每行第 0 位乘以 2，第 1 位乘以 -1，我们原本的 col0，就都乘了 2，而 col1 就都乘了-1。提示一下，<code>apply</code> 里面还有不同的参数项可以选，我使用了一个 <code>result_type=&quot;expand&quot;</code> 的配置，让输出的结果可以生成多 column，要不然， 会只生成一个 column，所有的结果都写在这一个 column 里。要不你试试删除刚才写的 <code>result_type</code>，观察一下生成结果的变化。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#df.apply(func, axis=1)</span><span class="token number">0</span>    <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token number">1</span>    <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token number">2</span>    <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span>dtype<span class="token punctuation">:</span> <span class="token builtin">object</span></code></pre><p>​顺带提一下，如果 <code>reult_type=&quot;broadcast&quot;</code>，那么原 column 和 index 名会继承到新生成的数据中。仔细对比上下两次的运行，你就能发现不同的表现了。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1</span>df<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> result_type<span class="token operator">=</span><span class="token string">'broadcast'</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">   A  B0  8 -91  8 -92  8 -9</code></pre><p>​如果只想改一个column：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">4</span>  df<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">0    161    162    16</code></pre><p>​想要返回原df，但只修改一个column：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">4</span>df<span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>df</code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">    A  B0  16  91  16  92  16  9</code></pre><p>​想对row进行操作时，修改axis的值为0，并且修改func中对应的运算规则:</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">4</span>last_row <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"last_row:\n"</span><span class="token punctuation">,</span> last_row<span class="token punctuation">)</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> last_row<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ndf:\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">last_row: A    64B    36dtype: int64df:     A   B0  16   91  16   92  64  36</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​想对数据做特殊的运算，甚至想自定义功能，对数据做批量处理，我们今天就介绍了两大类方法，一种是直接索引-运算，一种是利用 pandas 的 apply 来做更为丰富的运算模式。</p><h2 id="文字处理"><a href="#文字处理" class="headerlink" title="文字处理"></a>文字处理</h2><p>​相比 Python 的科学运算神器 Numpy，Pandas 还有一个特别优势的地方，那就是处理数据库当中的文字信息。 对比 Numpy，Numpy 是一个纯数据处理的库，在数据处理的速度上， 是要优于 Pandas 的。但是在处理数据的丰富度上，比如要处理文字，日期型数据的时候，Pandas 还是有很大优势的。 今天我们就来看看处理文本数据时，Pandas 可以怎么用。</p><h3 id="格式化字符"><a href="#格式化字符" class="headerlink" title="格式化字符"></a>格式化字符</h3><ul><li><code>str.upper(); str.lower(); str.len()</code></li></ul><p>​需要对标一下Python中自带的文字处理功能：Python本身就有很多自带的文字函数，如<code>strip()</code>，<code>upper()</code>等：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdpy_s <span class="token operator">=</span> <span class="token string">"A,B,C,Aaba,Baca,CABA,dog,cat"</span>pd_s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>  <span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"Aaba"</span><span class="token punctuation">,</span><span class="token string">"Baca"</span><span class="token punctuation">,</span><span class="token string">"CABA"</span><span class="token punctuation">,</span><span class="token string">"dog"</span><span class="token punctuation">,</span><span class="token string">"cat"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  dtype<span class="token operator">=</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"python:\n"</span><span class="token punctuation">,</span> py_s<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\npandas:\n"</span><span class="token punctuation">,</span> pd_s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">python: A,B,C,AABA,BACA,CABA,DOG,CATpandas: 0       A1       B2       C3    AABA4    BACA5    CABA6     DOG7     CATdtype: string</code></pre><p>​**注意如果要用到 Pandas 丰富的文字处理功能，你要确保 Series 或者 DataFrame 的 <code>dtype=&quot;string&quot;</code>**，如果不是 string， 比如我们刚从一个 excel 中读取出来一个数据，自动读的，没有解析到 string 格式， 我们怎么调整呢？ 其实也简单。</p><pre class="language-python" data-language="python"><code class="language-python">pd_not_s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>  <span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"Aaba"</span><span class="token punctuation">,</span> <span class="token string">"Baca"</span><span class="token punctuation">,</span> <span class="token string">"CABA"</span><span class="token punctuation">,</span> <span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"cat"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"pd_not_s type:"</span><span class="token punctuation">,</span> pd_not_s<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token comment">#pd_not_s type: object</span>pd_s <span class="token operator">=</span> pd_not_s<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"pd_s type:"</span><span class="token punctuation">,</span> pd_s<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token comment">#pd_s type: string</span></code></pre><p>​好，牢记这点，我们接着来对比原生Python的功能。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"python lower:\n"</span><span class="token punctuation">,</span> py_s<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\npandas lower:\n"</span><span class="token punctuation">,</span> pd_s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"python len:\n"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> py_s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\npandas len:\n"</span><span class="token punctuation">,</span> pd_s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">python lower: a,b,c,aaba,baca,caba,dog,catpandas lower: 0       a1       b2       c3    aaba4    baca5    caba6     dog7     catdtype: stringpython len: [1, 1, 1, 4, 4, 4, 3, 3]pandas len: 0    11    12    13    44    45    46    37    3dtype: Int64</code></pre><ul><li><code>str.strip(); str.lstrip(); str.rstrip()</code></li></ul><p>​再来对比一下对文字的裁剪：</p><pre class="language-python" data-language="python"><code class="language-python">py_s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"   jack"</span><span class="token punctuation">,</span> <span class="token string">"jill "</span><span class="token punctuation">,</span> <span class="token string">"    jesse    "</span><span class="token punctuation">,</span> <span class="token string">"frank"</span><span class="token punctuation">]</span>pd_s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>py_s<span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"python strip:\n"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> py_s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\npandas strip:\n"</span><span class="token punctuation">,</span> pd_s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n\npython lstrip:\n"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>s<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> py_s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\npandas lstrip:\n"</span><span class="token punctuation">,</span> pd_s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n\npython rstrip:\n"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>s<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> py_s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\npandas rstrip:\n"</span><span class="token punctuation">,</span> pd_s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">python strip: [&#39;jack&#39;, &#39;jill&#39;, &#39;jesse&#39;, &#39;frank&#39;]pandas strip: 0     jack1     jill2    jesse3    frankdtype: stringpython lstrip: [&#39;jack&#39;, &#39;jill &#39;, &#39;jesse    &#39;, &#39;frank&#39;]pandas lstrip: 0         jack1        jill 2    jesse    3        frankdtype: stringpython rstrip: [&#39;   jack&#39;, &#39;jill&#39;, &#39;    jesse&#39;, &#39;frank&#39;]pandas rstrip: 0         jack1         jill2        jesse3        frankdtype: string</code></pre><ul><li><code>str.split()</code></li></ul><p>​从结果可能看不清空白符有多少，但是实际上是把空白符都移除掉了。下面再对比一下<code>split</code>拆分方法。</p><pre class="language-python" data-language="python"><code class="language-python">pt_s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a_b_c"</span><span class="token punctuation">,</span> <span class="token string">"jill_jesse"</span><span class="token punctuation">,</span> <span class="token string">"frank"</span><span class="token punctuation">]</span>pd_s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>py_s<span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"python split:\n"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> py_s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\npandas split:\n"</span><span class="token punctuation">,</span> pd_s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">python split: [[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], [&#39;jill&#39;, &#39;jesse&#39;], [&#39;frank&#39;]]pandas split: 0        [a, b, c]1    [jill, jesse]2          [frank]dtype: object</code></pre><p>​咦，pandas 这样拆分起来怪怪的，把结果都放到了一个 column 里面，我还记得上一节用 <code>apply()</code> 的时候，我可以加一个 <code>result_type=&quot;expand&quot;</code>，同样，在 <code>split</code> 中也有类似的功能，可以将拆分出来的结果放到不同的 column 中去。</p><pre class="language-python" data-language="python"><code class="language-python">pd_s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">,</span> expand<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">       0      1     20      a      b     c1   jill  jesse  &lt;NA&gt;2  frank   &lt;NA&gt;  &lt;NA&gt;</code></pre><p>​你看，一共拆出了三个 column，但是有些 column 因为没有 split 出那么多值，所以显示的也是 <code>pd.nan</code></p><p>​这里还有一点我想说，我们上面都是在 <code>Series</code> 里面做实验，其实 <code>DataFrame</code> 也是一样的。 <strong>你要做的，只是先选一个 column 或者 row，拿到一个 Series 再开始做 str 的处理</strong></p><pre class="language-python" data-language="python"><code class="language-python">pd_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pd_df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">0    A1    BName: 0, dtype: object</code></pre><h3 id="正则方案"><a href="#正则方案" class="headerlink" title="正则方案"></a>正则方案</h3><ul><li><code>str.contains(); str.match(); </code></li></ul><p>​正则是一个很有用的东西，我们在Python 基础中也花了大功夫来学习正则表达式， 用特殊规则获取到特殊的文本。在演示的第一件事情就是它是否真的可以找到一些东西。我们用 <code>str.contains()</code> 或 <code>str.match()</code> 来确认它真的找到了匹配文字。</p><p>​注意，如果你还不了解正则表达式，我强烈建议你先看一下我的正则教学。 要不然你也看不懂我写的匹配规则，比如这里 <code>[0-9][a-z]</code> 表示要匹配 0<del>9 的任何数字，之后再接着匹配 a</del>z 的任何字母。</p><pre class="language-python" data-language="python"><code class="language-python">pattern <span class="token operator">=</span> <span class="token string">r"[0-9][a-z]"</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"1a"</span><span class="token punctuation">,</span> <span class="token string">"11c"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"string"</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>contains<span class="token punctuation">(</span>pattern<span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">0    False1     True2     True3    Falsedtype: boolean</code></pre><p>​现在请你把 <code>str.contains()</code> 换成 <code>str.match()</code> 看看结果有无变化。仔细的你肯定发现了，<code>11c</code> 这个字符，用 <code>contains()</code> 可以匹配， 但是 <code>match()</code> 却不能。那是因为 <strong>只要包含正则规则，<code>contains</code> 就为 True， 但是 <code>match()</code> 的意思是你的正则规则要完全匹配才会返回 True。</strong></p><p>那么为了要让 <code>match</code> 匹配 <code>11c</code> 我们就需要把规则改成 <code>r&quot;[0-9]+?[a-z]</code>。至于为什么， 那请看到我的正则教学。</p><pre class="language-python" data-language="python"><code class="language-python">pattern <span class="token operator">=</span> <span class="token string">r"[0-9]+?[a-z]"</span>s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">0    False1     True2     True3    Falsedtype: boolean</code></pre><ul><li><code>str.startswith(); str.endswith()</code></li></ul><p>​下面我们在对比下原生 Python 中我比较常用的 <code>startswith</code>, <code>endswith</code> 这两个前后匹配。</p><pre class="language-python" data-language="python"><code class="language-python">py_s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"1a"</span><span class="token punctuation">,</span> <span class="token string">"21c"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">]</span>pd_s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>py_s<span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"py_s startswith '1':\n"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>s<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> py_s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\npy_s endswith 'c':\n"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>s<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> py_s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n\npd_s startswith '1':\n"</span><span class="token punctuation">,</span> pd_s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\npd_s endswith 'c':\n"</span><span class="token punctuation">,</span> pd_s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">py_s startswith &#39;1&#39;: [True, True, False, False]py_s endswith &#39;c&#39;: [False, False, True, True]pd_s startswith &#39;1&#39;: 0     True1     True2    False3    Falsedtype: booleanpd_s endswith &#39;c&#39;: 0    False1    False2     True3     Truedtype: boolean</code></pre><p>​当然，pandas 的 <code>str.startswith()</code> 和 <code>str.endswith()</code> 都是可以支持正则的。使用方式和上面的 <code>str.match()</code> 等一样。</p><ul><li><code>str.replace()</code></li></ul><p>​还有一个十分有用，而且我觉得是最重要的，就是 <code>replace</code> 了，因为这真的减轻了我们很多复制粘贴的工作，比如 Excel 中人工按照一个规则修改老板给的新任务。 下面同样，我们对比 Python 原生的 replace，来验证一下。</p><pre class="language-python" data-language="python"><code class="language-python">py_s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"1a"</span><span class="token punctuation">,</span> <span class="token string">"21c"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">]</span>pd_s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>py_s<span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"py_s replace '1' -> '9':\n"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> py_s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n\npd_s replace '1' -> '9':\n"</span><span class="token punctuation">,</span> pd_s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">py_s replace &#39;1&#39; -&gt; &#39;9&#39;: [&#39;9&#39;, &#39;9a&#39;, &#39;29c&#39;, &#39;abc&#39;]pd_s replace &#39;1&#39; -&gt; &#39;9&#39;: 0      91     9a2    29c3    abcdtype: string</code></pre><p>​但是比原生 Python 强大的是，这个 replace 是支持正则的。我们把所有数字都替换成这个 <code>NUM</code> 吧。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"pd_s replace -> 'NUM':"</span><span class="token punctuation">)</span>pd_s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">r"[0-9]"</span><span class="token punctuation">,</span> <span class="token string">"NUM"</span><span class="token punctuation">,</span> regex<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">pd_s replace -&gt; &#39;NUM&#39;:0        NUM1       NUMa2    NUMNUMc3        abcdtype: string</code></pre><ul><li><code>str.extract(); str.extractall()</code></li></ul><p>​除了替换原本文字里的东西，我们还可以去从原本文字里找到特定的文字。有点像正则中的 <code>findall</code> 函数。</p><pre class="language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a1'</span><span class="token punctuation">,</span> <span class="token string">'b2'</span><span class="token punctuation">,</span> <span class="token string">'c3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token string">r"([ab])(\d)"</span><span class="token punctuation">)</span></code></pre><p>​<code>r&quot;([ab])(\d)&quot;</code> 这一个正则匹配我简单介绍一下，其中有两个括号，第一个括号是想提取的第一种规则，第二个是第二种想提取的规则。 那么运行出来，你会看到有两个 column，分别对应着这两个提取规则出来的值。最后一行出来的结果是两个 NaN，也就意味着第三个数据没有提取出来任何东西。</p><p>​运行结果：</p><pre class="language-none"><code class="language-none">     0    10    a    11    b    22  NaN  NaN</code></pre><p>​对应 <code>str.extract()</code> 还有一个 <code>str.extractall()</code> 函数，用来返回所有匹配，而不是第一次发现的匹配。</p><h3 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h3><ul><li><code>str.cat()</code></li></ul><p>​将两个文本 Series 拼接到一起的方法多种多样。大多情况我们是想结合两个 Series 而形成一个新的 Series。比如下面这样。</p><pre class="language-python" data-language="python"><code class="language-python">s1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"string"</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"string"</span><span class="token punctuation">)</span>s1<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>cat<span class="token punctuation">(</span>s2<span class="token punctuation">)</span></code></pre><p>​上面这是将两个文字拼接成新的文字，如果你想了解如何在 pandas 中做 df 的数据上的拼接，比如 2 columns 和 3 columns 的 df 做横向拼接等， 我们会在这节 Pandas 的拼接专门讲到，因为里面涉及的拼接方法实在是太多了， 在这里讲不完。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>​可以看到，文字处理包罗万象，有很多方法。我们挑重点的，调有用的。如果觉得这些对于你还不够， 你可以参考到<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/text.html">官方文档</a>，获取到更多信息。</p><h2 id="异常数据处理"><a href="#异常数据处理" class="headerlink" title="异常数据处理"></a>异常数据处理</h2><p>​异常数据，我常代指的是机器学习或者是统计分析中的脏数据。为什么他们异常或者脏呢？ 是因为这些数据不符合你期望当中的规律，给你或你的模型带来困扰。而且很可能是收集数据时，</p><p>​因为人工差错、机器传感器差错而导致的数据异常。再或者某一个 sample 的数据没有被采集，这也会引发数据批量处理中的异常。</p><p>​既然数据异常经常发生，又无可避免，我们就来看看如何能找到合适的解决方案。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Pandas数据处理&quot;&gt;&lt;a href=&quot;#Pandas数据处理&quot; class=&quot;headerlink&quot; title=&quot;Pandas数据处理&quot;&gt;&lt;/a&gt;Pandas数据处理&lt;/h1&gt;&lt;p&gt;​		本文主要写Pandas在数据处理时需要掌握的方法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="tags/python/"/>
    
    <category term="机器学习基础" scheme="tags/机器学习基础/"/>
    
  </entry>
  
  <entry>
    <title>Pandas统计展示</title>
    <link href="2022/06/08/Pandas%E7%BB%9F%E8%AE%A1%E5%B1%95%E7%A4%BA/"/>
    <id>2022/06/08/Pandas%E7%BB%9F%E8%AE%A1%E5%B1%95%E7%A4%BA/</id>
    <published>2022-06-08T06:16:49.000Z</published>
    <updated>2022-06-08T14:13:25.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pandas统计展示"><a href="#Pandas统计展示" class="headerlink" title="Pandas统计展示"></a>Pandas统计展示</h1><p>​本文主要写Pandas在统计展示方面的知识。</p><span id="more"></span><h2 id="基础统计方法"><a href="#基础统计方法" class="headerlink" title="基础统计方法"></a>基础统计方法</h2><p>​在Pandas上做数据统计，要比在Numpy上做舒服很多，因为在数据展示上，有很多额外的信息辅助你来消化这些信息。而且你还能比较方便地绘制成图。</p><p>​在本节内容中我们会对比Numpy中的方法和Pandas的不同，来解释为什么人们在做数据分析的时候喜欢用Pandas。</p><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>​在分析数据或者统计数据的时候，首先得有数据，我简单创建了一份数据，后续的工作将会依赖于这份数据，所以请你帮我点击一下下面的 Run 键，初始化一下这份数据。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1.39</span><span class="token punctuation">,</span> <span class="token number">1.77</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0.34</span><span class="token punctuation">,</span> <span class="token number">1.91</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.05</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0.34</span><span class="token punctuation">,</span> <span class="token number">1.47</span><span class="token punctuation">,</span> <span class="token number">1.22</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">0.27</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.61</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"r0"</span><span class="token punctuation">,</span> <span class="token string">"r1"</span><span class="token punctuation">,</span> <span class="token string">"r2"</span><span class="token punctuation">,</span> <span class="token string">"r3"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"c0"</span><span class="token punctuation">,</span> <span class="token string">"c1"</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df</code></pre><p>​ 运行结果：</p><pre class="language-none"><code class="language-none">      c0    c1    c2r0  1.39  1.77  Noner1  0.34  1.91 -0.05r2  0.34  1.47  1.22r3  None  0.27 -0.61</code></pre><p>​你在日常生活中，也经常是以这种 2 维表格型数据为主，而且因为各种不可知原因，你的数据可能存在缺失状况。比如有人没交作业，有数据还没被采集到等等。 如果你使用 Excel 收集的数据（用 Pandas 读 Excel），那这种情况可能更加多。</p><h3 id="快速总结"><a href="#快速总结" class="headerlink" title="快速总结"></a>快速总结</h3><p>​通常，如果我们不知道这份数据包含了什么，想快速了解一下这份数据的基础信息，我们可以直接先上一个 <code>describe()</code>，让 Pandas 自动帮我们描述一下这份数据的基础信息。</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">          c0    c1    c2count   3.00  4.00  3.00unique  2.00  4.00  3.00top     0.34  1.77 -0.05freq    2.00  1.00  1.00</code></pre><p>​这里，会显示出来 <code>count</code> 计数（剔除掉 None 或者 NAN 这种无效数据），所以你在结果中能看到 <code>c0</code>，<code>c2</code> 两个的有效数是 3 个，而 <code>c1</code> 有效数有 4 个。</p><p>​<code>unique</code> 表示的是每个 column 中有多少独特的数据。这个在初步感知数据丰富度上会有一定的作用。</p><p>​<code>top</code> 表示出现最多的数据是哪一个，这组数据在 <code>c0</code> column 处，我们能观察到 <code>0.34</code> 出现了两次，所以它选的 top 是 <code>0.34</code>。</p><p>​<code>freq</code> 是继续了 <code>top</code>，表述的是这个出现频率最多的数据，出现的次数有多少次。</p><p>​上面这份数据还不是纯数据，如果是存数值型的数据，我们跑 <code>describe()</code> 还能看到统计学的信息。</p><pre class="language-python" data-language="python"><code class="language-python">df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"c0"</span><span class="token punctuation">,</span> <span class="token string">"c1"</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ndescribe:\n"</span><span class="token punctuation">,</span> df1<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">         c0        c1        c2a  0.053206  0.686505  0.439459b  0.083406  0.096903  0.212163c  0.369903  0.877894  0.918427d  0.169573  0.563210  0.900700describe:              c0        c1        c2count  4.000000  4.000000  4.000000mean   0.169022  0.556128  0.617687std    0.142708  0.332400  0.349645min    0.053206  0.096903  0.21216325%    0.075856  0.446634  0.38263550%    0.126490  0.624858  0.67008075%    0.219656  0.734352  0.905132max    0.369903  0.877894  0.918427</code></pre><p>​平均数（mean），均方差（std），最小值（min），统计学的 25 分位，50 分位，75 分位各是多少，最大值（max）是多少。</p><h3 id="日常一般用法"><a href="#日常一般用法" class="headerlink" title="日常一般用法"></a>日常一般用法</h3><ul><li>均值中位数<code>df.mean()；df.median()</code></li></ul><p>​像上面，我们已经可以从 <code>describe()</code> 功能中略知一二了，但是你肯定也不满足于这些简单的描述信息。那么我们看看还有哪些简单实用的统计学功能。 比较常用的，我们通常会想知道一组数据的均值，用 <code>mean()</code> 就好了。</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​这样可以直接输出每一个 columns 的均值，因为这是在对 df 的第0个维度在做求均值。也可以这么写。</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>​ 运行结果：</p><pre class="language-none"><code class="language-none">c0    0.690000c1    1.355000c2    0.186667dtype: float64</code></pre><p>​当然，如果你不想对第 0 个维度，而是想对第 1 个维度求均值呢（后面的功能中 axis 的用法都基本相似）。我们只需要把 <code>axis=0</code> 换成 <code>axis=1</code></p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">r0    1.580000r1    0.733333r2    1.010000r3   -0.170000dtype: float64</code></pre><p>​还有一个比较有用的参数 <code>skipna</code>，这个是用来处理数据中有 <code>None</code> 或者是 <code>NaN</code> 时用的。我们需不需要排除掉有 None 或者 NaN 的数据。 如果需要 skip 掉这些，我们就还是会计算所有行列的数值，只是在计数的时候，扣掉这些 None 和 NaN。<strong>而当 <code>skipna=False</code> 的时候， Pandas 只要遇到了 None 或者 NaN，就不计算这列、行的数据了。所以下面你会看到，它只返回了一个 column 的结果。</strong></p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>skipna<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment">#c1    1.355</span><span class="token comment">#dtype: float64</span></code></pre><p>​你看，对比 <a href="https://mofanpy.com/tutorials/data-manipulation/numpy/operations/">Numpy 的用法</a>，你会发现， Pandas 在展示信息上还是挺对用户考虑的，它把行名等都展示出来，让人不犯迷糊。</p><p>​有了上面的 <code>mean()</code> 的用法做铺垫，理解后面的用法也方便很多。比如在计算人民收入的时候， 我们常用中值来代替均值，原因很简单，<strong>极高收入群体总是拉高了我们的平均收入， 用中位数反倒能反映出群众的真实收入。</strong> 查中值的方式也很简单，就是 <code>median()</code>。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 最后一个为高收入人</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"mean():"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 拉高平均收入，拉高仇恨</span><span class="token comment">#mean(): 26750.0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"median():"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 比较合理</span><span class="token comment">#median(): 3000.0</span></code></pre><ul><li>累加累乘<code>df.sum()；df.prod()</code></li></ul><p>​有了上面的<code>mean()</code>和<code>median()</code>的用法做铺垫，理解后面的用法也方便很多。比如要对数据做累加和累乘的运算，我们使用方式和<code>mean()</code>就没啥差别。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"c0"</span><span class="token punctuation">,</span><span class="token string">"c1"</span><span class="token punctuation">,</span><span class="token string">"c2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df</code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">   c0  c1  c20   0   1   21   3   4   52   6   7   83   9  10  11</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sum():\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nsum(axis=0):\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nsum(axis=1):\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">sum(): c0    18c1    22c2    26dtype: int64sum(axis&#x3D;0): c0    18c1    22c2    26dtype: int64sum(axis&#x3D;1): 0     31    122    213    30dtype: int64</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"prod():\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>prod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nprod(axis=0):\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>prod<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nprod(axis=1):\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>prod<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">prod(): c0      0c1    280c2    880dtype: int32prod(axis&#x3D;0): c0      0c1    280c2    880dtype: int32prod(axis&#x3D;1): 0      01     602    3363    990dtype: int32</code></pre><ul><li>最大最小<code>df.max(); df.min()</code></li></ul><p>​同理，理解了上面的用法，查找最大最小也不是问题。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"max():\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nmin():\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">max(): c0     9c1    10c2    11dtype: int32min(): c0    0c1    1c2    2dtype: int32</code></pre><p>​不过你注意到没，这种 <code>max()</code> 和 <code>min()</code> 都是对某一维度进行操作的，肯定有时候，你想要找到那个全局最大最小的数，这怎么找？ 哈哈，那你就做两次操作吧。或者你可以先把它转成 numpy，然后展平了求全局最大最小。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>values<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 用 Numpy 的方式运算</span><span class="token comment">#11</span><span class="token comment">#11</span></code></pre><p>​如果想计算 mean 或者 median 这种，你想想然后再试试，用哪种方式比较合适呢？</p><ul><li>处理空值 <code>df.isnull(); df.notnull(); df.dropna(); df.fillna()</code></li></ul><p>​总有 None 或者 NaN 值有时候挺烦人的，因为在做机器学习或者是统计数据的时候，你也不能放它在那不管。比如在机器学习中，如果有空值，你要么就选择放弃这条数据， 要么就要对它进行科学的填充，有人用均值有人用中值等。所以上面学到的技巧都能在这里用上。</p><p>​第一，你可能想要先看看你的数据中有没有空值。用下面的 <code>isnull()</code> 或者 <code>notnull()</code> 就能找到。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  columns<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">"ABCD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nisnull():\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True 就是空</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nnotnull()\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>notnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># False 为空</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">     A    B    C    D0  1.0  2.0  3.0  0.01  3.0  4.0  NaN  1.02  NaN  NaN  NaN  NaN3  NaN  3.0  NaN  4.0isnull():        A      B      C      D0  False  False  False  False1  False  False   True  False2   True   True   True   True3   True  False   True  Falsenotnull()        A      B      C      D0   True   True   True   True1   True   True  False   True2  False  False  False  False3  False   True  False   True</code></pre><p>​发现这里有空值，下面你就可以对这些 None, Null, NaN 做处理了。要么你就放弃这些有空值的数据，用 <code>dropna()</code>。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"默认：\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 默认按 axis=0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\naxis=1:\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 可以换一个 axis drop</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">默认：      A    B    C    D0  1.0  2.0  3.0  0.0axis&#x3D;1: Empty DataFrameColumns: []Index: [0, 1, 2, 3]</code></pre><p>​当然，你觉得数据只要有值你就想留下来，只去除掉那些全为空的数据，那么你还能在筛选的时候加一个 <code>how=&quot;all&quot;</code> 参数。</p><pre class="language-python" data-language="python"><code class="language-python">df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>how<span class="token operator">=</span><span class="token string">"all"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># how 默认为 "any" </span><span class="token comment">#     0     1    2</span><span class="token comment">#1  1.0  None  3.0</span></code></pre><p>​刚也说了，除了 drop 掉有 None 的，还可以对这些空值进行填充，填充的值也可以自行选定。</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>  <span class="token comment"># 填充 111</span></code></pre><p>​对不同特征<strong>列</strong>做差异化的填充数值。</p><pre class="language-python" data-language="python"><code class="language-python">values <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"A"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>value<span class="token operator">=</span>values<span class="token punctuation">)</span></code></pre><p>​甚至，如果你有一个每一位上的默认值，你都可以用一个全新的 df 来做空位的填充。</p><pre class="language-python" data-language="python"><code class="language-python">df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">"ABCD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"df2:\n"</span><span class="token punctuation">,</span> df2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nfillna(df2):\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>df2<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">df2:     A   B   C   D0   0   1   2   31   4   5   6   72   8   9  10  113  12  13  14  15fillna(df2):       A    B     C     D0   1.0  2.0   3.0   0.01   3.0  4.0   6.0   1.02   8.0  9.0  10.0  11.03  12.0  3.0  14.0   4.0</code></pre><ul><li>获取索引 <code>df.idxmin(); df.idxmax()</code></li></ul><p>​一般来说，当你想用 <code>np.argmax()</code> 或者 <code>np.argmin()</code> 的时候，你可以在 pandas 用 <code>idxmax()</code> 和 <code>idxmin()</code> 来替换。原理都一样， 就是找到那个最大最小值的索引。这个的好处是，你只关注索引而不用关注值，你可以对这个索引的值做你想要的后续处理。</p><p>同上面一样，你还能用上面学到的 <code>skipna</code> 来对空值做控制。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  columns<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">"ABCD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nidxmax():\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>idxmax<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nidxmax(skipna=False):\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>idxmax<span class="token punctuation">(</span>skipna<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nidxmin():\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>idxmin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">   A  B    C  D0  1  2  3.0  01  3  4  NaN  12  3  5  2.0  13  3  2  2.0  3idxmax(): A    1B    2C    0D    3dtype: int64idxmax(skipna&#x3D;False): A    1.0B    2.0C    NaND    3.0dtype: float64idxmin(): A    0B    0C    2D    0dtype: int64</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​在机器学习或者统计学中，只要你是和数据打交道，就少不了先观察和了解数据。用 Pandas 的这些功能，可以帮你快速了解数据的全貌， 也可以对其中的数据缺失做一些处理。</p><h2 id="绘制图表"><a href="#绘制图表" class="headerlink" title="绘制图表"></a>绘制图表</h2><p>​数据是服务于人的决策的，我们有一大堆数据，如果人没有真正意义上理解这些数据背后的含义，那即使数据量再大，它也是无意义的。所以我们今天来探讨一种让人与数据之间构建信息传递桥梁的方法-数据可视化技术。</p><p>​在 Pandas 中， 就已经可以实现多种多样的数据可视化方案了。</p><p>​我们来看看你拥有的数据可以被 Pandas 表达成什么样。</p><h3 id="散点图Scatter"><a href="#散点图Scatter" class="headerlink" title="散点图Scatter"></a>散点图Scatter</h3><p>​散点图实际在很多生活场景上都有运用的。比如你要描绘数据 sample 之间与拟合曲线之间呈现的关系：</p><p><img src="http://cdn.leafii.top/img/20220608204129.png" loading="lazy"></p><p>​又或者在演示算法是如何进化 ，如何运动的。</p><p><img src="http://cdn.leafii.top/img/20220608204205.png" loading="lazy"></p><p>​这些都是我之前做过的散点图案例，所以适用场景还是非常多的。在 Pandas 中，我们有非常方便的办法来直接对 DataFrame 做散点图。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt <span class="token comment">#一定要加上</span>n <span class="token operator">=</span> <span class="token number">1024</span> <span class="token comment"># data size</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token string">"x"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">"y"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>color <span class="token operator">=</span> np<span class="token punctuation">.</span>arctan2<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">"y"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">"x"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">"y"</span><span class="token punctuation">,</span> c<span class="token operator">=</span>color<span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">.5</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">"rainbow"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​点击运行之后，你会发现可以做出来一幅非常好看的图。当然这里的参数你可以随意搭配，比如试试不写 <code>c=color</code> 或者去掉 <code>cmap=&quot;rainbow&quot;</code>， 看看会有何影响。</p><p>​我稍微解释一下几个你可能在乎的参数：</p><ul><li>c: 对于这组数据中每个（x,y）数据点的颜色值</li><li>s: 画点的大小（size）</li><li>alpha：不透明度</li><li>cmap：colormap，你可以在<a href="https://matplotlib.org/stable/tutorials/colors/colormaps.html">这里</a>找到非常丰富的案例</li></ul><h3 id="折线图-plot"><a href="#折线图-plot" class="headerlink" title="折线图 plot"></a>折线图 plot</h3><p>​同样在这个拟合关系的图中， 我们其实还绘制了一张折线图。可见，折线图也是非常有用的。</p><p><img src="http://cdn.leafii.top/img/20220608210450.png" loading="lazy"></p><p>​同样，还有很多机器学习的loss变化曲线案例都是用折线图绘制出来的。而在Pandas中，折线图的绘制方法很简单。</p><pre class="language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">20</span>    <span class="token comment"># data size</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>y <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">0.4</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">"x"</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span>    <span class="token string">"y"</span><span class="token punctuation">:</span> y<span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">"x"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">"y"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">.5</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span></code></pre><p>![](<a href="http://cdn.leafii.top/img/Screen">http://cdn.leafii.top/img/Screen</a> Shot 2022-06-08 at 21.07.19.png)</p><p>​我用最朴素的方法，绘制了一条歪歪扭扭的折线图，来体现它真的很折。你可能很感兴趣，为什么这里的 <code>c</code> 参数传入的数值和上面散点图的不一样？ 原来在折线图中，线的颜色最好是一样的，不然当线多了以后，你会发现不同颜色就看不出到底是那条线了。</p><p>​碰到多条线的时候，怎么处理:</p><pre class="language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">20</span> <span class="token comment"># data size</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>y1 <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>y2 <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">0.4</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token string">"x"</span><span class="token punctuation">:</span>x<span class="token punctuation">,</span>  <span class="token string">"y1"</span><span class="token punctuation">:</span> y1<span class="token punctuation">,</span>  <span class="token string">"y2"</span><span class="token punctuation">:</span> y2<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">"x"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"y1"</span><span class="token punctuation">,</span> <span class="token string">"y2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">.5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="http://cdn.leafii.top/img/Figure_1.png" loading="lazy"></p><p>​只要我给多个 <code>y</code>，它就能给出多条线的位置，当然还帮你注明哪个颜色是哪条线。</p><h3 id="条形图-bar"><a href="#条形图-bar" class="headerlink" title="条形图 bar"></a>条形图 bar</h3><p>​做两家公司收入对比，或者是年度值变化的时候，我们也很喜欢用条形图。直接点，我们看看 Pandas 的条形图怎么画。 假设有 abd 四家公司，这 5 年的营收对比可以这么画。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>bar<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="http://cdn.leafii.top/img/Figure_2.png" loading="lazy"></p><p>​如果把他们放在一起来看占比多少时，我们还能这么干：</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>stacked<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="http://cdn.leafii.top/img/Figure_3.png" loading="lazy"></p><p>​横着不好看，想画一个竖着的图，Pandas 也能轻松做到。你只需要把 <code>bar()</code> 换成 <code>barh()</code> 就好。多出来的这个 h 就是 horizontal 的意思。</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>barh<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="http://cdn.leafii.top/img/Figure_4.png" loading="lazy"></p><h3 id="分布图-histograms"><a href="#分布图-histograms" class="headerlink" title="分布图 histograms"></a>分布图 histograms</h3><p>​分布图在机器学习和统计学中非常重要，我经常画分布图，比如要画神经网络的参数分布可视化。又或者是GAN生成对抗网络中的数据分布。</p><p><img src="http://cdn.leafii.top/img/20220608215327.png" loading="lazy"></p><p>​我们用<code>plot.hist()</code>就能画出来了，这里的hist是histogram，也就是分布的意思。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>hist<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​当然还会有多个分布重合在一起，你想对比这看看这些分布有无差别的时候，重合度怎么样的时候。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token string">"a"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token string">"b"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">"c"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​为了使你能轻松辨析出 abc 这几个分布的不同，我把 <code>alpha</code> 不透明度调整了一下，让你能看清楚重叠部分。而且 <code>bins</code> 柱状体的数量也调多了。</p><h3 id="饼图-Pie"><a href="#饼图-Pie" class="headerlink" title="饼图 Pie"></a>饼图 Pie</h3><p>​当你想给 Excel 批量话饼图的时候， 你就能结合读取 Excel 的教学，和这一节一起用。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"boss"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"meeting"</span><span class="token punctuation">,</span> <span class="token string">"supervise"</span><span class="token punctuation">,</span> <span class="token string">"teaching"</span><span class="token punctuation">,</span> <span class="token string">"team building"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>pie<span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token string">"boss"</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="http://cdn.leafii.top/img/Figure_5.png" loading="lazy"></p><p>​如果你有多张大饼，想要对比？当然也没问题。可以多加一个 <code>subpots</code> 来分开画饼。<code>legend</code> 是用来确定要不要输出图例的，我这里嫌弃图例占地方， 就设置 <code>legend=False</code>。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span>        <span class="token string">"bigBoss"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"smallBoss"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"meeting"</span><span class="token punctuation">,</span> <span class="token string">"supervise"</span><span class="token punctuation">,</span> <span class="token string">"teaching"</span><span class="token punctuation">,</span> <span class="token string">"team building"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>pie<span class="token punctuation">(</span>subplots<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> legend<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="http://cdn.leafii.top/img/Figure_6.png" loading="lazy"></p><h3 id="面积图-area"><a href="#面积图-area" class="headerlink" title="面积图 area"></a>面积图 area</h3><p>​面积图偶尔你还是会看见的，比如在我的 <a href="https://mofanpy.com/tutorials/machine-learning/evolutionary-algorithm/neat-supervised-learning/">进化算法教学中</a>， 就使用了面积图来观看各个种群的占比随时间的变化情况。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>area<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​如果你不想上下堆砌在一起观看，而是有统一的一个起点，那可以用这个参数 <code>stacked=False</code>。</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>area<span class="token punctuation">(</span>stacked<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>​好了，这节内容也还挺多的，我就先讲到这里。用 Pandas 画图还可以有很多其他花样， 你可以在这里看到更加细节的<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html">官方文档</a>。 每种画图功能里面，也还有更多参数可以调整。记得不懂就要多在网上搜搜，多看官方文档。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Pandas统计展示&quot;&gt;&lt;a href=&quot;#Pandas统计展示&quot; class=&quot;headerlink&quot; title=&quot;Pandas统计展示&quot;&gt;&lt;/a&gt;Pandas统计展示&lt;/h1&gt;&lt;p&gt;​		本文主要写Pandas在统计展示方面的知识。&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="tags/python/"/>
    
    <category term="机器学习基础" scheme="tags/机器学习基础/"/>
    
  </entry>
  
  <entry>
    <title>Pandas基本操作</title>
    <link href="2022/06/05/Pandas%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>2022/06/05/Pandas%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2022-06-05T15:23:07.000Z</published>
    <updated>2022-06-08T06:05:57.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pandas基本操作"><a href="#Pandas基本操作" class="headerlink" title="Pandas基本操作"></a>Pandas基本操作</h1><p>​本文对Pandas中的一些基本操作进行描述。</p><span id="more"></span><h2 id="从文件读取数据"><a href="#从文件读取数据" class="headerlink" title="从文件读取数据"></a>从文件读取数据</h2><p>​有很多 Pandas 的教学，一开始一般都是开始教 Pandas 的数据结构或者运算方法。 但是我觉得，当你想要使用 Pandas 的时候，<strong>更多是因为你手头有 Excel 数据或者比较格式化的数据， 需要处理分析和表达这些数据。为了解决你这种当务之急，我觉得先解决读取数据这回事。</strong></p><p>​以下操作需要用到的文件为<code>[&#39;体检数据.xlsx&#39;, &#39;体检数据.csv&#39;, &#39;体检数据_sep.csv&#39;, &#39;体检数据_sep.txt&#39;]</code></p><h3 id="Excel文件"><a href="#Excel文件" class="headerlink" title="Excel文件"></a>Excel文件</h3><p>​<a href="https://mofanpy.com/static/files/%E4%BD%93%E6%A3%80%E6%95%B0%E6%8D%AE.xlsx">点击下载</a>所需文件，下载后用Excel打开文件后是这样：</p><p>![](<a href="http://cdn.leafii.top/img/Screen">http://cdn.leafii.top/img/Screen</a> Shot 2022-06-05 at 23.31.25.png)</p><ul><li><code>pd.read_excel()</code></li></ul><p>​将文件放在适宜的目录，我们就可以使用<code>read_excel()</code>方法读出文件了。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddf <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">"data/体检数据.xlsx"</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>df</code></pre><p>​运行结果</p><pre class="language-none"><code class="language-none">    姓名   身高  体重   肺活量学号1   小明  168  60  32002   小黄  187  80  38003   小花  170  70  3400</code></pre><p>​在函数中的<code>index_col=0</code>就是告诉Pandas，让它使用第一个column（学号）的数据当作row索引。后面还有很多读取的功能里也有一样的参数。</p><ul><li><code>df.to_excel()</code></li></ul><p>​好，我们既然可以读取Excel文件，那么稍稍修改，再保存起来应该也不成问题。</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"体重"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">"data/体检数据_修改.xlsx"</span><span class="token punctuation">)</span></code></pre><p>​其实在读取和保存 Excel 文件的时候，还有很多额外的参数可供选择，因为太多了，我们这里就先讲最常用的，如果你要深入研究， 可以到他们的官网来看<a href="https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html#pandas.read_excel">官方文档</a>。</p><h3 id="csv或txt等纯文本文件"><a href="#csv或txt等纯文本文件" class="headerlink" title="csv或txt等纯文本文件"></a>csv或txt等纯文本文件</h3><p>​下载需要的文件：<a href="https://mofanpy.com/static/files/%E4%BD%93%E6%A3%80%E6%95%B0%E6%8D%AE.csv">链接</a>，使用纯文本编辑器打开，就能看到它最原始的样貌了。</p><p>![](<a href="http://cdn.leafii.top/img/Screen">http://cdn.leafii.top/img/Screen</a> Shot 2022-06-05 at 23.44.57.png)</p><ul><li><code>pd.read_csv()</code></li></ul><p>​使用Python的open打开纯文本文件：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"data/体检数据.csv"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class="language-none"><code class="language-none">学号,姓名,身高,体重,肺活量1,小明,168,60,32002,小黄,187,80,38003,小花,170,70,3400</code></pre><p>​使用pandas的<code>read_csv()</code>方法：</p><pre class="language-python" data-language="python"><code class="language-python">df_csv <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"data/体检数据.csv"</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>df_csv</code></pre><pre class="language-none"><code class="language-none">学号,姓名,身高,体重,肺活量1,小明,168,60,32002,小黄,187,80,38003,小花,170,70,3400</code></pre><p>​有的时候，你不能保证别人给你的数据，是不是一份标准格式的数据，比如别人不喜欢用 <code>,</code> 来分隔数据点， 而是喜欢用什么乱七八糟的 <code>=</code> 来分隔。这时，Pandas 帮你考虑到了这种问题， 你可以挑选要用哪个字符来识别这些分隔。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"data/体检数据_sep.csv"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df_csv <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"data/体检数据_sep.csv"</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">"="</span><span class="token punctuation">)</span>df_csv</code></pre><p>​提到 csv，你可能还会想用 Excel 打开看看，但是提到 txt，一般你也不会想用 Excel 打开了吧。用 Pandas 打开一个 txt 文件和打开一个 csv 文件，、 其实本质上是一样的，都是打开一个纯文本文件。所以下面我再打开一下 txt。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"data/体检数据_sep.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df_txt <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"data/体检数据_sep.txt"</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">"="</span><span class="token punctuation">)</span>df_txt</code></pre><ul><li><code>df.to_csv()</code></li></ul><p>​能打开，我们就能保存，保存方法同样很简单，只需要 <code>df.to_csv()</code> 就好了，甚至，你还能保存到 Excel 文件，在 Pandas 中它们是可以互相转换的。 同理用 <code>read_excel()</code> 打开的，也能存成 <code>to_csv()</code>。</p><pre class="language-python" data-language="python"><code class="language-python">df_txt<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">"data/体检数据_sep_修改.csv"</span><span class="token punctuation">)</span>df_txt<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">"data/体检数据_sep_修改.xlsx"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"读保存后的 csv"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"data/体检数据_sep_修改.csv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"读保存后的 xlsx"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">"data/体检数据_sep_修改.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​做数据分析和机器学习，会用上面的方法来读 Excel 或者是纯文本，我们就已经解决了大部分的需求了。下面我来介绍几个我觉得 Pandas 的额外几个有趣的读取方式。</p><h3 id="其它有趣的"><a href="#其它有趣的" class="headerlink" title="其它有趣的"></a>其它有趣的</h3><ul><li><code>pd.read_clipboard()</code></li></ul><p>​从剪切板里面读取数据，这个很有意思，使用场景并不多，但是指不定哪天你要用 Python 写 APP 的时候，就能用到这个，不是有很多 APP 会识别你的剪切板， 方便你直接复制数据吗。这个功能说不定就能派上用场。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_clipboard<span class="token punctuation">(</span><span class="token punctuation">)</span>df</code></pre><ul><li><code>pd.read_html()</code></li></ul><p>​另外一个是从网页中获取表格型数据，就像下面这个表格。我们也能用 Pandas 调取解析网页当中的表格数据。</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_html<span class="token punctuation">(</span><span class="token string">"https://mofanpy.com/tutorials/data-manipulation/pandas/read-save/"</span><span class="token punctuation">)</span>df</code></pre><p>​还有一些功能，比如让 Pandas 读数据库，读 Json 等，你都可能在后期自己开发的时候偶尔用到。只要用到的时候，查查 <a href="https://pandas.pydata.org/docs/reference/io.html">Pandas 官方文档</a> 还是很有帮助的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​大千世界，数据也是多样的，Pandas 量身为你定制了很多读取数据的方法。从做数据分析和机器学习最常用的 Excel、csv、txt 数据等，到 html，剪切板等有趣的数据类型， 一个 Pandas 都可以帮你搞定。了解完读存数据，接下来，我们就来认真了解，数据在 Pandas 中到底是一个什么样的东西。</p><h2 id="Pandas中的数据是什么"><a href="#Pandas中的数据是什么" class="headerlink" title="Pandas中的数据是什么"></a>Pandas中的数据是什么</h2><p>​上面我们已经提到了在分析数据时最基础的操作就是“用Pandas打开数据文件”，不过我们并没有详细说这份打开的数据它的格式是什么样。但是要了解我们如何更改加工数据，我们必然还是需要了解在Pandas中的数据格式是什么。</p><p>​简单来说，Pandas支持最好的是一维和二维数组，一维数组就是一个序列，一条数据，而二维数据是我们生活中更加常见的种类，基本上所有Excel数据都是二维数据，有横纵交替，用两个维度来定位这个数据。</p><p>​下面来说说Pandas中的一维二维数据特性。</p><h3 id="数据序列Series"><a href="#数据序列Series" class="headerlink" title="数据序列Series"></a>数据序列Series</h3><ul><li>创建</li></ul><p>​一串Python List你肯定不陌生，Pandas中的Series的核心其实就是一串类似于Python List的序列。只是它要比Python List丰富很多，有更多的功能属性。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"list:"</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"series:"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">list: [11, 22, 33]series: 0    111    222    33dtype: int64</code></pre><p>​可见Pandas Series和Python List有很大的区别：Pandas Series帮我们额外维护了一份索引。有这个索引的意义是你可以使用自己喜欢的索引来检索数据：</p><pre class="language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>l<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s</code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">a    11b    22c    33dtype: int64</code></pre><p>​所以，只要是有索引形式的结构，都可以搞成 Series，比如下面这样：</p><pre class="language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">:</span> <span class="token number">33</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>s</code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">a    11b    22c    33dtype: int64</code></pre><p>​后文中的DataFrame也可以使用字典来创建噢。</p><ul><li>转换Numpy</li></ul><p>​既然Python中的List可以用来创建Series，那么使用Numpy也可以创建：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> nps <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s</code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">a    0.689052b    0.284041c    0.616957dtype: float64</code></pre><p>​将Series回退到Numpy array或者List：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"array:"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"list:"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>values<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># array: [11 22 33]</span><span class="token comment"># list: [11, 22, 33]</span></code></pre><h3 id="数据表DataFrame"><a href="#数据表DataFrame" class="headerlink" title="数据表DataFrame"></a>数据表DataFrame</h3><p>​Pandas首先支持的就是序列数据和表格数据，因为这两种是日常生活中最常用的数据保存和编辑格式了，我们看看如何用Pandas的DataFrame维护一张数据表吧。</p><ul><li>创建</li></ul><p>​在上一节数据文件读取的教学中，你load到的数据实际上就是一个DataFrame，举个简单的例子，将一个二维数组变成Pandas的DataFrame：</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df</code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">   0  10  1  21  3  4</code></pre><p>​显然，它创建出来的df在真实数据外围，还包上了一层其他的数据（0，1），在DataFrame中，这是用来索引行&#x2F;列的序号，如果要按位置来选去其中的值，也可以这么干。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#第0行，第1列</span><span class="token comment"># 或 第一个维度中的第0号，第二个维度中的第1号</span>df<span class="token punctuation">.</span>at<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#2</span></code></pre><p>​Pandas 中还有很多方式来选取和改变数据值，请按捺一下激动的小心情， 我们将在下节内容中具体介绍。</p><p>​自动创建的索引序号并不是很可读。我们还能将这些序号换成人类更好理解的文字标签信息:</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"col1"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"col2"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df</code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">   col1  col20     1     21     3     4</code></pre><p>​可以从结果看出，其实字典中的 key 会被当成是数据中的 column，而 value 会被当做是 row，这个非常符合你在 Excel 中的使用习惯。 因为往往随着数据量变大，你用鼠标滚轮滚动查看不同数据的时候，天然的比较喜欢上下查看不同的数据样本，而不是左右查看，所以一般都是左右记的是数据标签（特征）， 上下排列的是不同数据样本。</p><p>​见识了字典变 DataFrame，其实 Series 也是可以组合变成 DataFrame 的，而且这也非常符合常理， 如果我从 DataFrame 中取出一个 Column， 这不就变成了一条 Series 了吗？</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">"col1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"取出来之后的 type:"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">"col1"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">0    11    3Name: col1, dtype: int64取出来之后的 type: &lt;class &#39;pandas.core.series.Series&#39;&gt;</code></pre><p>​将两个Series拼接起来：</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"col1"</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"col2"</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df</code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">   col1  col20     1     21     3     4</code></pre><p>​来看看 Series 和 DataFrame 构建索引的方式：</p><pre class="language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"col1"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"col2"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">a    1.0b    2.0c    3.0dtype: float64   col1  col2a     1     2b     3     4</code></pre><p>​既然 DataFrame 的 Column 和 Index 这么有意思，十有八九，你会想取出来用一用这些 Column 和 Index，比如你数据比较大的时候，想初步看看这份数据涉及了多少特征， 数据的 index 有多少种的时候，你可以直接获取到这些信息。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>index<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">Index([&#39;a&#39;, &#39;b&#39;], dtype&#x3D;&#39;object&#39;)Index([&#39;col1&#39;, &#39;col2&#39;], dtype&#x3D;&#39;object&#39;)</code></pre><p>​如果写前端的朋友，你们时常会遇到 json 形式的数据，比如可以像下面这样处理。</p><pre class="language-python" data-language="python"><code class="language-python">my_json_data <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span><span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"height"</span><span class="token punctuation">:</span> <span class="token number">111</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span><span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">"height"</span><span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>my_json_data<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"rose"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​Pandas 真的用心良苦，为我们广大数据同胞提供了这么多这么丰富的接口。学会这样观看数据，我们在分析和处理数据的时候就更有把握了。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>​Pandas 中，为了我们提供了日常最常用的数据存储方式，分别是 Series 的一维数据，和 DataFrame 的二维数据，在机器学习中，我们常会接触到 3 维甚至是更高维度， 但是在分析数据的时候，特别是，要结合 Excel 来分析数据的时候，二维数据才是最常用的。</p><h2 id="选取数据"><a href="#选取数据" class="headerlink" title="选取数据"></a>选取数据</h2><p>​Pandas的数据结构和你管理Excel很像，特别是DataFrame就约等于Excel当中的sheet。我们非常适应用Excel来选择和修改数据，但是如果把它程序化，用代码来修改和选取的时候，我们该如何操作呢？</p><p>​Pandas的数据选取和List，Numpy Array还是有挺大差别的，因为它想要维护了很多的人类可读的索引信息，所以它在索引的时候，也有不一样的处理方式，今天我们就来看看Pandas是如何处理数据选取和修改的吧。</p><h3 id="多种选取方式"><a href="#多种选取方式" class="headerlink" title="多种选取方式"></a>多种选取方式</h3><p>​在Pandas中，有丰富的选取数据方式，这可比List，Dictionary，甚至是Numpy还要多样化。我们既能通过文字标签来定位数据，也能通过数值序号来定位。所以为了实现这种多样性，Pandas对于数据的选取采用了不同类型的处理方法，比如<code>.loc</code>,<code>.iloc</code>等，我们来一一介绍吧。</p><p>​面对应用比较多的工作学习场景，我先以 Excel 型的表格数据举例，请你帮我构建一下下面这份 DataFrame：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>  data<span class="token punctuation">,</span>  index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  columns<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">"ABCD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dfdata</code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">    A   B   C   Da -12 -11 -10  -9b  -8  -7  -6  -5c  -4  -3  -2  -1d   0   1   2   3e   4   5   6   7f   8   9  10  11array([[-12, -11, -10,  -9],       [ -8,  -7,  -6,  -5],       [ -4,  -3,  -2,  -1],       [  0,   1,   2,   3],       [  4,   5,   6,   7],       [  8,   9,  10,  11]])</code></pre><h3 id="选Column"><a href="#选Column" class="headerlink" title="选Column"></a>选Column</h3><p>​看到上面的这份数据之后，我们发现DataFrame会分Column和Row（index）。在机器学习中，通常Column是特征，Row是数据样本，要对某个特征进行分析的时候，比如要做特征数值分布的分析，我们得把特征取出来吧，那么可以进行如下操作：</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">"B"</span><span class="token punctuation">]</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">a   -11b    -7c    -3d     1e     5f     9Name: B, dtype: int64</code></pre><p>​选一个就这么简单，但偶尔还想多选几个特征，怎么搞呢？回忆一下之前Numpy中的Array是怎么选的？</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"numpy:\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ndf:\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">numpy: [[-10 -11] [ -6  -7] [ -2  -3] [  2   1] [  6   5] [ 10   9]]df:     C   Ba -10 -11b  -6  -7c  -2  -3d   2   1e   6   5f  10   9</code></pre><p>​现在可以选column了，那意味着肯定能将Index（Row）的信息也一起考虑到数据筛选的工作当中了。</p><h3 id="loc"><a href="#loc" class="headerlink" title="loc"></a>loc</h3><p>​在Numpy中选取数据一般是按照在维度上的排序来定位的。比如对于你刚刚创建的Numpy数据<code>data</code>：</p><pre class="language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">array([[-3, -2]])</code></pre><p>​而在DataFrame中，同样是上述功能，你也可以这么干：</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">:</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">:</span><span class="token string">"D"</span><span class="token punctuation">]</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">   B  C  Dc -3 -2 -1d  1  2  3</code></pre><p>​不知道你有没有发现，这个 <code>&quot;c&quot;:&quot;d&quot;</code> 和 <code>&quot;B&quot;:&quot;D&quot;</code> 明明对应的是上面 <code>data</code> 的 <code>[2:3]</code> 和 <code>[1:3]</code>，但为什么它还包含了最后一位的 <code>&quot;d&quot;</code> 和 <code>&quot;D&quot;</code> 呢？这的确是 Pandas 的一个用心良苦，我猜他是为了更贴切 Excel 中的使用原则吧，想一想，如果你像下面这样， 在选择 Excel 要被筛选的数据时，从 b 选到 d，其实你是有包含 d 的。所以我说，Pandas 这么设计，原因之一也应该是为了照顾我们吧。</p><p>​除了筛选一个片段，还可以像 Numpy 那样单个单个的选取。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"numpy:\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ndf:\n"</span><span class="token punctuation">,</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">numpy: [[ 0  1  2  3] [-8 -7 -6 -5]]df:    A  B  C  Dd  0  1  2  3b -8 -7 -6 -5</code></pre><p>​上面这两个例子，不难看出，Pandas 选取数据的底层逻辑，和 Python Numpy 的类似，都是按维度的先后（先选第一维，再第二，以此类推）， 开始选取。按数据的索引找到维度上的对应索引区域。</p><p>​下面我再来整个有趣的，如果我不按字母顺序去组织 index，比如从原本的 <code>index=abcdef</code> 换成 <code>index=beacdf</code>， 猜猜下面的这份数据索引会找到哪一份子数据？</p><pre class="language-python" data-language="python"><code class="language-python">df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>  data<span class="token punctuation">,</span>  index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">"beacdf"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  columns<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">"ABCD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">"e"</span><span class="token punctuation">:</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">    A   B   C   Db -12 -11 -10  -9e  -8  -7  -6  -5a  -4  -3  -2  -1c   0   1   2   3d   4   5   6   7f   8   9  10  11   A  B  C  De -8 -7 -6 -5a -4 -3 -2 -1c  0  1  2  3</code></pre><h3 id="iloc"><a href="#iloc" class="headerlink" title="iloc"></a>iloc</h3><p>​看完面向 Excel 编程，我们再来回到编程本身，用程序的思维去选取数据。这意味着什么？用最朴素的方法，也是意味着能更快找到数据位置，比如直接用位置信息来筛选。 Numpy 不就是这么干的吗？这时 <code>.iloc</code> 功能就派上用场了。</p><p>​看看<code>iloc</code>的功能是什么：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"numpy:\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ndf:\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">numpy: [[-3 -2]]df:    B  Cc -3 -2</code></pre><p>​简直和 Numpy 的模式一模一样，就是结果中多了一个 DataFrame 的标签信息。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"numpy:\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ndf:\n"</span><span class="token punctuation">,</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">numpy: [[ 0  1  2  3] [-8 -7 -6 -5]]df:    A  B  C  Dd  0  1  2  3b -8 -7 -6 -5</code></pre><h3 id="loc和iloc混搭"><a href="#loc和iloc混搭" class="headerlink" title="loc和iloc混搭"></a>loc和iloc混搭</h3><p>​难免有时候，我们需要混搭 loc 和 iloc 的方式，比如我想要选取第 2 到第 4 位数据的 A C 两个特征，这时咋办？ 想想 Pandas 这么牛逼，肯定有办法解决。的确，它解决的方法是采用索引转换的方式，比如我在 <code>.loc</code> 模式下，将序号索引转换成 <code>.loc</code> 的标签索引。</p><pre class="language-python" data-language="python"><code class="language-python">row_labels <span class="token operator">=</span> df<span class="token punctuation">.</span>index<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"row_labels:\n"</span><span class="token punctuation">,</span> row_labels<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ndf:\n"</span><span class="token punctuation">,</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>row_labels<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">row_labels: Index([&#39;c&#39;, &#39;d&#39;], dtype&#x3D;&#39;object&#39;)df:    A  Cc -4 -2d  0  2</code></pre><p>​再看看 Column 的 labels 怎么取:</p><pre class="language-python" data-language="python"><code class="language-python">col_labels <span class="token operator">=</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"col_labels:\n"</span><span class="token punctuation">,</span> col_labels<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ndf:\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>row_labels<span class="token punctuation">,</span> col_labels<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">col_labels: Index([&#39;A&#39;, &#39;D&#39;], dtype&#x3D;&#39;object&#39;)df:    A  Dc -4 -1d  0  3</code></pre><p>​清楚了吧，用 <code>df.index</code> 和 <code>df.columns</code> 来调取到全部的标签，然后在用像 Numpy index 索引的方式把这些标签给筛选出来，放到 <code>.loc</code> 里面用。 那反过来，我想要找 A C 两个特征的 前两个数据，这时咋办？</p><pre class="language-python" data-language="python"><code class="language-python">col_index <span class="token operator">=</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>get_indexer<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"col_index:\n"</span><span class="token punctuation">,</span> col_index<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ndf:\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> col_index<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">col_index: [0 1]df:     A   Ba -12 -11b  -8  -7</code></pre><p>​同理，<code>df.index.get_indexer([&quot;a&quot;, &quot;b&quot;])</code> 也可以这样获取到 label 对应的 index 信息。</p><h3 id="条件过滤筛选"><a href="#条件过滤筛选" class="headerlink" title="条件过滤筛选"></a>条件过滤筛选</h3><p>​按条件过滤其实是一件很有趣的事，因为很多情况我们事先也不知道具体的 index 是什么，我们更想要从某些条件中筛选数据。 下面我举几个例子，大家应该很容易 get 到其中的奥秘。</p><ul><li><strong>选在 A Column 中小于 0 的那些数据</strong></li></ul><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">]</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">    A   B   C  Da -12 -11 -10 -9b  -8  -7  -6 -5c  -4  -3  -2 -1</code></pre><ul><li><strong>选在第一行数据不小于 -10 的数据</strong></li></ul><p>​这里注意了你可以用两种方式，一种是 <code>~</code> 来表示 <code>非</code> 什么什么，第二种是直接用 <code>&gt;=-10</code> 来筛选。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"~:\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">~</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n>=:\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">~:     C   Da -10  -9b  -6  -5c  -2  -1d   2   3e   6   7f  10  11&gt;&#x3D;:     C   Da -10  -9b  -6  -5c  -2  -1d   2   3e   6   7f  10  11</code></pre><ul><li><strong>选在第一行数据不小于 -10 或小于 -11 的数据</strong></li></ul><p>​同上面类似的，我还能用或 <code>|</code> 来表示 or 的意思, <code>&amp;</code> 表述 and。比如选在第一行数据不小于 -10 或小于 -11 的数据:</p><pre class="language-python" data-language="python"><code class="language-python">i0 <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">~</span><span class="token punctuation">(</span>i0 <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>i0 <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">    A   C   Da -12 -10  -9b  -8  -6  -5c  -4  -2  -1d   0   2   3e   4   6   7f   8  10  11</code></pre><p>​所以你看，你可以用 <code>.loc</code> 或者 <code>.iloc</code> 来做过滤处理。然后用 <code>.loc</code> 来做筛选。为什么用 <code>.iloc</code> 来筛选呢，比如下面这样：</p><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">~</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#报错</span></code></pre><p>​这样写居然会导致报错，为什么呢？你分析分析，把 <code>~(df.iloc[0] &lt; -10)</code> 这个筛选条件打印出来看看它是什么值。然后想一想 <code>.iloc</code> 能够接受的值是啥？ 想清楚了，这个问题就迎刃而解了。</p><pre class="language-none"><code class="language-none">A    FalseB    FalseC     TrueD     TrueName: a, dtype: bool</code></pre><h3 id="Series和DataFrame类似"><a href="#Series和DataFrame类似" class="headerlink" title="Series和DataFrame类似"></a>Series和DataFrame类似</h3><p>​既然二维的 DataFrame 你都已经玩过了，Series 的操作就不在话下了。</p><pre class="language-python" data-language="python"><code class="language-python">list_data <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>  list_data<span class="token punctuation">,</span>   index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">"abcdefgh"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s</code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">a   -4b   -3c   -2d   -1e    0f    1g    2h    3dtype: int64</code></pre><ul><li>按标签筛选数据 <code>.loc</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">:</span> <span class="token string">"f"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">a   -4g    2c   -2dtype: int64 c   -2d   -1e    0f    1dtype: int64</code></pre><ul><li>按 index 筛选数据 <code>.iloc</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">d   -1b   -3f    1dtype: int64 c   -2d   -1dtype: int64</code></pre><ul><li><code>iloc</code> 和 <code>loc</code> 互相混用</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>s<span class="token punctuation">.</span>index<span class="token punctuation">.</span>get_indexer<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>s<span class="token punctuation">.</span>index<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">c   -2d   -1dtype: int64 d   -1c   -2dtype: int64</code></pre><ul><li>按条件过滤筛选</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>s <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>s <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>s <span class="token operator">></span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>s <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>s <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span></code></pre><p>​运行结果：</p><pre class="language-none"><code class="language-none">a   -4b   -3c   -2d   -1e    0f    1g    2dtype: int64 d   -1dtype: int64 a   -4b   -3c   -2d   -1h    3dtype: int64</code></pre><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>​Pandas 的数据筛选方法比 Numpy 丰富多了，介绍的篇幅也有点多，我日常用的最多的还是用条件来筛选，比如在处理机器学习的脏数据的时候，要用很多筛选逻辑。 有时甚至我会觉得 Numpy 的筛选方式不够多，专门把 Numpy 数据转换成 Pandas 数据，然后再用 Pandas 提供的丰富工具处理数据，再转回 Numpy。 相信你用熟了之后，数据处理将要简单很多。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Pandas基本操作&quot;&gt;&lt;a href=&quot;#Pandas基本操作&quot; class=&quot;headerlink&quot; title=&quot;Pandas基本操作&quot;&gt;&lt;/a&gt;Pandas基本操作&lt;/h1&gt;&lt;p&gt;​		本文对Pandas中的一些基本操作进行描述。&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="tags/python/"/>
    
    <category term="机器学习基础" scheme="tags/机器学习基础/"/>
    
  </entry>
  
  <entry>
    <title>Numpy关于数据</title>
    <link href="2022/05/29/Numpy%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE/"/>
    <id>2022/05/29/Numpy%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE/</id>
    <published>2022-05-29T11:41:37.000Z</published>
    <updated>2022-06-05T09:31:05.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Numpy关于数据"><a href="#Numpy关于数据" class="headerlink" title="Numpy关于数据"></a>Numpy关于数据</h1><h2 id="Numpy读取保存数据"><a href="#Numpy读取保存数据" class="headerlink" title="Numpy读取保存数据"></a>Numpy读取保存数据</h2><p>​        数据一般都被记录在存储当中，我们常见的小规模数据大多是 Excel 的 xlsx，csv, json, 或 txt，log 等等格式。 当我们要处理数据，特别是运算数据的时候，我们都能拿 Python 读取出来。而在大数据这种情况下，数据是存储在 MySQL，Mongodb 等这种数据库中的， 同样，Python 也提供了很多接口来读取这些数据。</p><p>​        今天我们想聊聊其中的一部分，用 Numpy 来直接读取数据（通常是纯数值形式的数据），并加以运算的流程。而且看看我们可以如何保存 Numpy 里的数据。</p><span id="more"></span><h3 id="加载常用数据格式"><a href="#加载常用数据格式" class="headerlink" title="加载常用数据格式"></a>加载常用数据格式</h3><ul><li><code>np.loadtxt(), np.fromstring()</code></li></ul><p>​        一般我们都把数据存放在文件中，数据一般长这样：</p><p>![](<a href="http://cdn.leafii.top/img/Screen">http://cdn.leafii.top/img/Screen</a> Shot 2022-06-02 at 22.36.26.png)</p><p>​        如果用Excel打开数据，也有可能像下面这样：</p><p><img src="http://cdn.leafii.top/img/20220603170252.png" loading="lazy"></p><p>​        下面，请使用已经为你准备好了的数据，从上篇文章的里面拷贝了一份，作为csv格式存起来了，使用以下的代码查看文件中的数据：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"data file in directory:"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"data/data.csv"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;] # StudentID, Age, Score20131,10,6720132,11,8820133,12,9820134,8,10020135,9,7520136,12,78</code></pre><p>​        如果现在要模拟经常要加载的情况，从文件中加载出来。如果使用纯python，可以一行一行读出来，然后保存在list中；但是也可以直接用numpy的方式读取出来：使用<code>np.loadtxt()</code>功能，我们就可以自定义地读取出来数据了。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span><span class="token string">"data/data.csv"</span><span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">,</span> skiprows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[[20131    10    67] [20132    11    88] [20133    12    98] [20134     8   100] [20135     9    75] [20136    12    78]]</code></pre><p>​        在<code>loadtxt</code>的参数中，我们传入<code>，</code>让numpy在做数据分隔的时候，以逗号作为分隔符。同时<code>skiprow</code>可以skip掉第一行的描述型文字（默认也会自动skip掉第一行），还有读取出来的数据要放到定义好了的&#96;dtype&#x3D;np.int类型的array中，这一行的功能就可以轻松读取这个csv文件的数据了。</p><p>​        请注意：<code>np.loadtxt()</code>为什么不叫<code>np.loadcsv()</code>呢？因为csv数据也属于纯文本数据，如果想要加载后缀名为<code>txt</code>的文件，也是没问题的。以上就是最普通的一种加载数据方式。下面我们来看一种更加有趣的加载过程。能不能直接从字符中加载数据呢？</p><p>​        有时候，我需要对字符串加工处理后，直接读这个加工之后的字符串。</p><pre class="language-python" data-language="python"><code class="language-python">row_string <span class="token operator">=</span> <span class="token string">"20131, 10, 67, 20132, 11, 88, 20133, 12, 98, 20134, 8, 100, 20135, 9, 75, 20136, 12, 78"</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>fromstring<span class="token punctuation">(</span>row_string<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[[20131    10    67] [20132    11    88] [20133    12    98] [20134     8   100] [20135     9    75] [20136    12    78]]</code></pre><p>​        请注意，这种方法目前只能读取一个数值序列，读完这个序列之后，可以再使用numpy的<code>reshape</code>方法把数据定义成你想要的样子。另外要注意的一点是对比<code>np.loadtxt(delimiter=&quot;,&quot;)</code>和<code>np.fromstring(sep=&quot;,&quot;)</code>这两个用来判断分隔符的参数，它们的参数命名是不一样的。</p><p>​        numpy可以读取<code>csv</code>和<code>txt</code>格式的数据，但是无法读取Excel中的xlsx数据格式，未来可以使用Pandas库进行xlsx数据格式的读取。</p><h3 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h3><p>​        在日常生活中经常会碰到的数据格式，都能用Numpy读，在读取完之后或者处理完数据之后，如果想把数据保存起来，怎么办呢？好在Numpy还是挺人性化的，也有丰富的方法来处理保存数据这件事。</p><ul><li><code>np.savetxt()</code></li></ul><p>​        Numpy存数据，存哪种数据格式，取决于你想不想这份数据被人查看，或者被其他语言编辑，如果想的话，你就会保存成一些通用的数据格式，比如<code>csv</code>或<code>txt</code>。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"numpy data:\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>np<span class="token punctuation">.</span>savetxt<span class="token punctuation">(</span><span class="token string">"data/save_data.csv"</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">,</span> fmt<span class="token operator">=</span><span class="token string">'%s'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"data file in directory:"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"data/save_data.csv"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">numpy data: [[20131    10    67] [20132    11    88] [20133    12    98] [20134     8   100] [20135     9    75] [20136    12    78]]data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;] 20131,10,6720132,11,8820133,12,9820134,8,10020135,9,7520136,12,78</code></pre><ul><li><code>np.save(), np.savez(), np.savez_compressed()</code></li></ul><p>​        还有一些Numpy独有的模式，那就是用二进制的格式保存。如果你没有想让别人看你的数据，你只想自己使用Numpy时加载的话，那你完全就可以用这种方式存储下来。请注意，使用<code>np.save()</code>来保存，保存的是一个以<code>.npy</code>结尾的二进制文件。加载的时候，我们能用<code>np.load()</code>直接加载这个二进制数据文件。</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"data/save_data.npy"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"data file in directory:"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>npy_data <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"data/save_data.npy"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>npy_data<span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;, &#39;save_data.npy&#39;][[20131    10    67] [20132    11    88] [20133    12    98] [20134     8   100] [20135     9    75] [20136    12    78]]</code></pre><p>​        还有一种神奇的保存方式，在一个numpy文件中保存多个numpy array。有时候，你是分开多个array来存放不同类型的数据，比如机器学习中的traindata和testdata。这时我们能用<code>np.savez()</code>保存一个<code>.npz</code>文件将这两个array同时存储好。</p><pre class="language-python" data-language="python"><code class="language-python">train_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>savez<span class="token punctuation">(</span><span class="token string">"data/save_data.npz"</span><span class="token punctuation">,</span> train<span class="token operator">=</span>train_data<span class="token punctuation">,</span> test<span class="token operator">=</span>test_data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"data file in directory:"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;, &#39;save_data.npy&#39;, &#39;save_data.npz&#39;]</code></pre><p>​        <code>np.savez()</code> 第二、三个参数名 <code>train=xx</code>, <code>test=xx</code> 其实是可以自定义的，这些参数名会作为之后我们加载回来的索引标签。</p><pre class="language-python" data-language="python"><code class="language-python">npz_data <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"data/save_data.npz"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"train:"</span><span class="token punctuation">,</span> npz_data<span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test:"</span><span class="token punctuation">,</span> npz_data<span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">train: [1 2 3]test: [11 22 33]</code></pre><p>用 <code>np.savez()</code> 的时候，还有一个方法可以让你更节省空间，那就是用 <code>np.savez_compressed()</code> 来做一次数据压缩。</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>savez_compressed<span class="token punctuation">(</span><span class="token string">"data/save_data_compressed.npz"</span><span class="token punctuation">,</span> train<span class="token operator">=</span>train_data<span class="token punctuation">,</span> test<span class="token operator">=</span>test_data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"data file in directory:"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>npz_data_compressed <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"data/sace_data_compressed.npz"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"train:"</span><span class="token punctuation">,</span> npz_compressed<span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test:"</span><span class="token punctuation">,</span> npz_data_compressed<span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"compressed file size:"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span><span class="token string">"data/save_data_compressed.npz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"original file size:"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span><span class="token string">"data/save_data.npz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">data file in directory: [&#39;data.csv&#39;, &#39;data.txt&#39;, &#39;save_data.csv&#39;, &#39;save_data.npy&#39;, &#39;save_data.npz&#39;, &#39;save_data_compressed.npz&#39;]train: [1 2 3]test: [11 22 33]compressed file size: 402original file size: 528</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​        说了这么多用 numpy 的方式读取与保存的方法，可见 numpy 还是很用心在做数据这件事的。如果你喜欢纯文本，我们看上去比较有意义的存储格式，那你就用 txt 或者 csv 这种方式，如果你追求存储空间和速度，我建议还是用二进制来存储吧~</p><h2 id="标准数据生成"><a href="#标准数据生成" class="headerlink" title="标准数据生成"></a>标准数据生成</h2><p>​        数据是多变的，不光是数据的形态多变，里面的数值也是多变的。通常，我们在创建一个Numpy Array的时候，是想带着一些数值来初始化的，比如我想先要一个全是0的Array</p><p>​所以这节内容我们来说一说怎么带着数值初始化，可以带着怎样的数值初始化。</p><h3 id="创建统一数据"><a href="#创建统一数据" class="headerlink" title="创建统一数据"></a>创建统一数据</h3><ul><li><code>np.zeros(),np.ones(),np.full()</code></li></ul><p>​        首先来点简单的，初始化Array的时候，让他们全部为某数。最简单的就是全0或者全1的数据。</p><p><img src="http://cdn.leafii.top/img/20220604123440.png" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npzeros <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"zeros:\n"</span><span class="token punctuation">,</span> zeros<span class="token punctuation">)</span>ones <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nones:\n"</span><span class="token punctuation">,</span> ones<span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">zeros: [[0. 0. 0.] [0. 0. 0.]]ones: [[1. 1.] [1. 1.] [1. 1.]]</code></pre><p>​        当我们创建这些数据时，我们不仅仅是可以给定创建的具体数值是0还是1，而且还能指定这个数据的shape是什么。创建出来之后，就可以把它当作普通的Array数据使用就好了，要<code>reshape，transpose，sum</code>等操作，都是可以进行的。</p><p>​        我们可以创建0或1的数据，那我们能不能创建其他数值的数据？答案是肯定的，使用<code>np.full()</code>功能就好了。同样，我们先输入这份数据的shape，然后指定这份数据全部元素的数值。</p><pre class="language-python" data-language="python"><code class="language-python">nines <span class="token operator">=</span> np<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>nines<span class="token punctuation">)</span><span class="token comment">#[[9 9 9]</span><span class="token comment"># [9 9 9]]</span></code></pre><p>​        在处理shape的时候，有一件有趣的事：如果我们手头已经有一份数据，我们想创建一个和它类型一样，大小一样的另一份数据，我们可以调用<code>np.xxx_like()</code>这种形式的功能。看下面的例子：</p><pre class="language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">)</span>ones <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>data<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> dtype<span class="token operator">=</span>data<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>ones_like <span class="token operator">=</span> np<span class="token punctuation">.</span>ones_like<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ones:"</span><span class="token punctuation">,</span> ones<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> ones<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ones_like:"</span><span class="token punctuation">,</span> ones_like<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> ones_like<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ones_like value:\n"</span><span class="token punctuation">,</span> ones_like<span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">ones: (2, 3) int32ones_like: (2, 3) int32ones_like value: [[1 1 1] [1 1 1]]</code></pre><ul><li><code>np.zeros_like(),np.ones_like(),np.full_like()</code></li></ul><p>​因为dtype和shape都和源数据一样，那么它们之间做加减乘除运算就很契合了。其实<code>ones_like()</code>算是一种偷懒功能；同理，我们还有<code>np.zeros_like()</code>和<code>np.full_like()</code>这两种。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>full_like<span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[[0 0 0] [0 0 0]][[6 6 6] [6 6 6]]</code></pre><h3 id="创建规则数据"><a href="#创建规则数据" class="headerlink" title="创建规则数据"></a>创建规则数据</h3><ul><li><code>np.arange(), np.linspace()</code></li></ul><p>​而创建有些规律的数据也是Numpy的拿手好戏。首先说一个最常见的<code>arange</code>功能，用来得到一个序列，如：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"python range:"</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># python range: [0, 1, 2, 3, 4]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"numpy arange:"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># numpy arange: [0 1 2 3 4]</span></code></pre><p>​同样，<code>np.arange()</code>也可以像<code>range()</code>一样，对范围做自定义变更或者跳跃取值。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># (start, end, step)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"python range:"</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># python range: [3, 5, 7, 9]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"numpy arange:"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># numpy arange: [3 5 7 9]</span></code></pre><p>​还有一个也是用来取一段数字中的值，这个也比较常用，特别是在画折线图的时候，我想要连续在一个区间内取间隔一致的数据点。里面的参数分别代表从start的值到end的值，一共返回这中间num个数据点。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># (start, end, num)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"linspace:"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># linspace: [-1.  -0.5  0.   0.5  1. ]</span></code></pre><p>​        更厉害的是，有时候我们会很纠结，上面是在-1 至 1 之间分了 4 个区域。 而我们想在-1 至 1 之间分 5 个区域，怎么搞？加一个 <code>endpoint=False</code> 就可以返回这 5 个区域的结节点了。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"5 segments:"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 5 segments: [-1.  -0.6 -0.2  0.2  0.6]</span></code></pre><p>​还有很多做特殊规则的数据的方式，比如 <code>np.identity()</code>, <code>np.eye()</code>, <code>np.logspace()</code> 等等， 这个教学我先介绍一些常用的，当你有需要的时候，你再单个搜索就行了。</p><h3 id="快速创建再添加值"><a href="#快速创建再添加值" class="headerlink" title="快速创建再添加值"></a>快速创建再添加值</h3><ul><li><code>np.empty(), np.empty_like()</code></li></ul><p>​和 <code>np.ones()</code> 这种很相似的，有一个叫 <code>np.empty()</code> 功能，我想单独拎出来介绍一下。 如果你对运算速度有要求，你就得仔细听一下。</p><p>​<code>np.empty()</code> 功能，不会初始化新建 array 里面的数值，所以你会看到这里面的数值都是乱乱的。 <strong>注意，虽然乱乱的，但是它不是随机数哦，你不能把它当随机数使用。</strong> 想用随机数的话，我后面有单独一个教学讲随机数。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​运行结果</p><pre class="language-none"><code class="language-none">[[9.03433771e-308 5.09847862e-304 3.53009707e-305] [7.52473700e-302 8.90332017e-305 8.01478727e-302] [2.34157518e-301 6.86145138e-302 3.06135986e-301] [1.17801178e-300 8.83208360e-302 1.14834727e-302]]</code></pre><p>​不能作随机数，又没有具体数值，那么empty为什么存在呢？</p><ol><li>可以把它当成一个placeholder，作为一个容器先放着，之后满满的放数据进去</li><li>创建起来比<code>ones,zeros,full</code>都快一点</li></ol><p>​所以在这种情况下，我们才想使用<code>np.empty()</code>，编写代码查看用两种方法创建的速度：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timet0 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    _ <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    _ <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ones time:"</span><span class="token punctuation">,</span> t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"empty time:"</span><span class="token punctuation">,</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token comment">#ones time: 0.015000104904174805</span><span class="token comment">#empty time: 0.002000093460083008</span></code></pre><p>​        因此我们能知道empty比ones快了很多很多，给你看一下它的日常使用场景：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> randomempty <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"empty before:\n"</span><span class="token punctuation">,</span> empty<span class="token punctuation">)</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        empty<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">*</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"empty after:\n"</span><span class="token punctuation">,</span> empty<span class="token punctuation">)</span></code></pre><p>​        所以一般当我有一个数据要根据另一份数据生成的时候，无论我初始化是什么值，到最终都要全部被替换的时候，我就喜欢用 <code>np.empty()</code>。 ok，最后说一句，有 <code>np.empty()</code>，我们也有 <code>np.empty_like()</code> 用法和 <code>np.zeros_like()</code> 这种类似，很方便用的。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>​现在你能够按自己的想法初始化最符合你需要的数据啦。</p><h2 id="随机数和随机操作"><a href="#随机数和随机操作" class="headerlink" title="随机数和随机操作"></a>随机数和随机操作</h2><p>​计算机能模拟随机，是一件十分重要的事。因为计算机本来是一种执行确定步骤，返回确定结果的机器。但是你想要它模拟随机，就得有一些特殊处理。 好在 Python 自己有专门处理随机的功能。而 Numpy 作为 Python 的网红库，当然也自带了很丰富的随机功能。比如各式随机数的生成方式， 随机化当前数列等。甚至你还能加随机，复现一些随机后的结果。</p><h3 id="多种随机数生成"><a href="#多种随机数生成" class="headerlink" title="多种随机数生成"></a>多种随机数生成</h3><p>​提到随机，首先我们想到的当然是生成一批随机数，对这批随机数做计算啦。在深度学习中，这是一件非常重要的事，比如你常会随机生成神经网络的权重，生成遗传算法中的基因序列等等。</p><ul><li><code>np.random.rand(), np.random.random()</code></li></ul><p>​假设现在没有 Numpy，我们当然也能用 Python 自带的 <code>random</code> 来解决，但是效率会低不少。 用 Python 自带的 <code>random</code>，大概是怎么用的呢？</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 0.5015630814097707</span><span class="token comment"># 10</span></code></pre><p>​但是Python的<code>random</code>没有考虑数组类型的高效数据结构，所以我们在array类型的数据结构时，更喜欢直接使用Numpy来生成。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdim1<span class="token punctuation">,</span> dim2 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>dim1<span class="token punctuation">,</span> dim2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 你还可以继续添加dim3等更多</span></code></pre><p>​运行结果</p><pre class="language-none"><code class="language-none">[[0.83325372 0.6412798 ] [0.32903089 0.41498545] [0.18548333 0.27637162]]</code></pre><p>​<code>np.random.rand()</code>是一种最方便去生成带shape的<code>[0,1)</code>之间取值的Array。还有一种写法可以实现同样目的：<code>np.random.random()</code>，在其中传入一个shape进去。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">[</span>dim1<span class="token punctuation">,</span> dim2<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​运行结果</p><pre class="language-none"><code class="language-none">[[0.51226037 0.13982879] [0.75661115 0.49357135] [0.01439348 0.00078817]]</code></pre><ul><li><code>np.random.randn(), np.random.randint()</code></li></ul><p>​除了生成<code>[0,1)</code>之间的随机数，Numpy还可以生成其他数值，或使用其他生成规则。比如按照<strong>标准正态分布</strong>去生成。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>dim1<span class="token punctuation">,</span> dim2<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​运行结果</p><pre class="language-none"><code class="language-none">[[-1.74779413 -1.81986096] [-0.97003389 -0.19717489] [ 1.29311087  1.51706469]]</code></pre><p>​使用<code>np.random.randint()</code>生成随机整数：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>low<span class="token operator">=</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> high<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#[ 5 -2  5  4 -2 -1  1 -2 -1  5]</span></code></pre><h3 id="给你施加随机"><a href="#给你施加随机" class="headerlink" title="给你施加随机"></a>给你施加随机</h3><ul><li><code>np.random.choice()</code></li></ul><p>​我们已经可以自动生成一批随机数啦，但是 Numpy 的好用功能可不止有这么一些简单的生成功能哦。它还可以对已有的数据做随机化处理。 比如我想随机从一组数据中选择，我就可以用 <code>np.random.choice()</code>。在做遗传算法的时候, 做基因重组配对，就需要经常使用到这个函数。</p><pre class="language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>aray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"选一个："</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 选一个： 3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"选多个："</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>data<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 选多个： [2 6 1]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不重复地选多个（不放回）："</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>data<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> replace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 不重复地选多个(不放回)： [6 4 2]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"带权重地选择："</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>data<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 带权重地选择： [4 6 6 6 6 6 4 6 6 4]</span></code></pre><ul><li><code>np.random.shuffle(), np.random.permutation()</code></li></ul><p>​choice这个功能真的经常会用到。而在机器学习中，你也许会经常在epoch迭代训练数据的时候，碰到shuffle的概念。如果你在机器学习中没弄懂也没关系，给你补充一下。Numpy里也有<code>np.random.shuffle()</code>的功能，就是用来<strong>洗牌</strong>的。请注意：<strong>它会将源数据重新排列，如果你想保留原数据的话，记得使用<code>np.copy(data)</code>备份一下</strong></p><pre class="language-python" data-language="python"><code class="language-python">data_copy <span class="token operator">=</span> np<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>data<span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"源数据："</span><span class="token punctuation">,</span> data_copy<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"after shuffled:"</span>， data<span class="token punctuation">)</span><span class="token comment"># 源数据： [2 1 3 4 6]</span><span class="token comment"># shuffled: [6 2 1 3 4]</span></code></pre><p>​还有一个功能，<code>np.random.permutation()</code>, 它实现的是 <code>np.random.shuffle()</code> 的一种特殊形式。可以说是一种简单处理特殊情况的功能。 它有两个方便之处，1. 直接生成乱序的序列号，2. 对数据乱序。</p><p>而且相比 <code>np.random.shuffle()</code>，<strong>permutation 有一个好处，就是可以返回一个新数据，对原本的数据没有影响。而且还可以处理多维数据。</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"直接出乱序序列："</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"多维数据在第一维度上乱序："</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​运行结果</p><pre class="language-none"><code class="language-none">直接出乱序序列： [2 0 8 5 7 6 1 9 3 4]多维数据在第一维度上乱序： [[ 6  7] [ 2  3] [10 11] [ 4  5] [ 0  1] [ 8  9]]</code></pre><h3 id="随机分布"><a href="#随机分布" class="headerlink" title="随机分布"></a>随机分布</h3><ul><li><code>np.random.normal(), np.random.uniform()</code></li></ul><p>​对于统计学或者机器学习，我们在生成数据的时候，有时需要按照特定的统计学分布来生成，比如需要一个正态分布的抽样数据，或者均匀分布的数据抽样结果。 又或者是其他更高级的，比如泊松分布等等，都可以用 Numpy 来实现。这里我们只介绍一下在机器学习中比较常用的 正态分布 和 均匀分布。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># （均值，方差，size）</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正态分布："</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># (最低，最高，size)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"均匀分布:"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​运行结果</p><pre class="language-none"><code class="language-none">正态分布： [0.94567776 1.12786411 1.31172487 1.20797385 0.65761211 1.35564439 1.02341514 0.89390523 1.34336123 1.13994983]均匀分布： [-0.15584577  0.49379278 -0.51443373  0.47639447  0.85539253 -0.12520956  0.38551024  0.92961516  0.43014289  0.54910227]</code></pre><h3 id="随机种子的重要性"><a href="#随机种子的重要性" class="headerlink" title="随机种子的重要性"></a>随机种子的重要性</h3><p>​在机器学习中，我们要对比两种随机初始化模型的优劣，或者在强化学习中要固定随机环境的随机序列，用于复现当前配置的情况，我们通常要做的事情就是<strong>伪随机</strong>。 简单说，就是每次都是一组随机，但是我可以后续再完整运行一遍一模一样的随机效果。比如生成两遍一模一样的随机序列。</p><ul><li><code>np.random.seed()</code></li></ul><p>​为了达到这个目的，我们要了解Numpy中的random seed概念，随机种子。当我们把种子固定的时候（用一个数字），同一个种子（数字）产生的随机序列就会一样。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#seed(1) 代表的就是1号随机序列</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​运行结果</p><pre class="language-none"><code class="language-none">[[4.17022005e-01 7.20324493e-01 1.14374817e-04] [3.02332573e-01 1.46755891e-01 9.23385948e-02]]2</code></pre><p>​此时无论你运行多少次上面的代码，你看到的随机结果，都是同一种结果。当你想改变随机种子的时候，可以在<code>seed()</code>中传入不同的数字。</p><p>​有时候还可以这么用：在同一次执行代码时，重新设定种子，让随机在同一次执行中复现。</p><pre class="language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#[0.4359949  0.02592623]</span><span class="token comment"># [0.4359949  0.02592623]</span></code></pre><p>​对于同一份代码，两次运行都是一样的结果。</p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>​你不光可以利用 Numpy 来创建很多种不同的随机数，还能对数据做随机化处理，甚至还能当上帝，控制计算机的随机过程（seed），让电脑可以复现你的随机过程。</p><h2 id="对速度有洁癖？快来了解Numpy的View与Copy"><a href="#对速度有洁癖？快来了解Numpy的View与Copy" class="headerlink" title="对速度有洁癖？快来了解Numpy的View与Copy"></a>对速度有洁癖？快来了解Numpy的View与Copy</h2><p>​通过这节内容理解Numpy的底层逻辑，在这其中有一个非常重要的概念：那就是<strong>View和Copy</strong>，你会发现，有可能前几天要花10天处理完的数据，学完这个之后，一优化，只需要1小时就搞定了。</p><p>​<strong>如果你对 Numpy 运算速度有追求，我十分建议你了解接下来的内容。如果你是萌新， 目前阶段不用 Numpy 处理大数据（上百MB 的文件），那下面的内容你可以以后再作了解。</strong></p><h3 id="Numpy-Array和Python-List内部结构差别"><a href="#Numpy-Array和Python-List内部结构差别" class="headerlink" title="Numpy Array和Python List内部结构差别"></a>Numpy Array和Python List内部结构差别</h3><p>以后再学！该开始Pandas了噢！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Numpy关于数据&quot;&gt;&lt;a href=&quot;#Numpy关于数据&quot; class=&quot;headerlink&quot; title=&quot;Numpy关于数据&quot;&gt;&lt;/a&gt;Numpy关于数据&lt;/h1&gt;&lt;h2 id=&quot;Numpy读取保存数据&quot;&gt;&lt;a href=&quot;#Numpy读取保存数据&quot; class=&quot;headerlink&quot; title=&quot;Numpy读取保存数据&quot;&gt;&lt;/a&gt;Numpy读取保存数据&lt;/h2&gt;&lt;p&gt;​        数据一般都被记录在存储当中，我们常见的小规模数据大多是 Excel 的 xlsx，csv, json, 或 txt，log 等等格式。 当我们要处理数据，特别是运算数据的时候，我们都能拿 Python 读取出来。而在大数据这种情况下，数据是存储在 MySQL，Mongodb 等这种数据库中的， 同样，Python 也提供了很多接口来读取这些数据。&lt;/p&gt;
&lt;p&gt;​        今天我们想聊聊其中的一部分，用 Numpy 来直接读取数据（通常是纯数值形式的数据），并加以运算的流程。而且看看我们可以如何保存 Numpy 里的数据。&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="tags/python/"/>
    
    <category term="机器学习基础" scheme="tags/机器学习基础/"/>
    
  </entry>
  
  <entry>
    <title>Numpy练习_数据清洗</title>
    <link href="2022/05/25/Numpy%E7%BB%83%E4%B9%A0-%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/"/>
    <id>2022/05/25/Numpy%E7%BB%83%E4%B9%A0-%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/</id>
    <published>2022-05-24T16:24:09.000Z</published>
    <updated>2022-05-29T11:32:23.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Numpy练习-数据清洗"><a href="#Numpy练习-数据清洗" class="headerlink" title="Numpy练习_数据清洗"></a>Numpy练习_数据清洗</h1><p>​        Numpy 的一切都是和数据打交道，那么在大数据时代，数据其实是不完整，不完美的。比如下面这张图里面， 你会发现，这份数据显然有些不完整的地方，city有数据缺失，duration 虽然是时间上的数据，但是时间单位不统一，时间格式不统一， 这都给后面我们让机器使用这份数据增加难度。</p><span id="more"></span><p><img src="http://cdn.leafii.top/img/20220529123648.png" loading="lazy"></p><p>​        这次课程我会展示如何用 Numpy 处理 Numpy 比较擅长的数据清理。但是在数据清理上，还有一个更好用的 Pandas 库，我们会在后期的教学当中，一步步深入到。</p><h2 id="脏数据"><a href="#脏数据" class="headerlink" title="脏数据"></a>脏数据</h2><p>​        如果你真有做过数据分析，当你拿到一份数据的时候，是十分期望这份数据没什么问题的，但是事与愿违，通常这份数据都多多少少有些问题。 常见的脏数据种类有：</p><ol><li>数据值缺失</li><li>数据值异常大或小</li><li>格式错误</li><li>非独立数据错误</li></ol><p>​        一般来说，你遇到的数都是需要从外部存储读取出来的，但是为了简化这节的内容，我们直接用Python的List来做一份数据。想要学习使用Numpy读取保存数据的话，可以看下一篇文章。</p><p>​        自造数据</p><pre class="language-python" data-language="python"><code class="language-python">raw_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"Name"</span><span class="token punctuation">,</span> <span class="token string">"StudentID"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">,</span> <span class="token string">"AttendClass"</span><span class="token punctuation">,</span> <span class="token string">"Score"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"小明"</span><span class="token punctuation">,</span> <span class="token number">20131</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"小花"</span><span class="token punctuation">,</span> <span class="token number">20132</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"小菜"</span><span class="token punctuation">,</span> <span class="token number">20133</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"98"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"小七"</span><span class="token punctuation">,</span> <span class="token number">20134</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"花菜"</span><span class="token punctuation">,</span> <span class="token number">20134</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"刘欣"</span><span class="token punctuation">,</span> <span class="token number">20136</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>raw_data<span class="token punctuation">)</span></code></pre><p>​        这是一份学生上课的考试的数据，里面记录了学生姓名，ID，年龄，是否上过课（1-上过，0-没上），课程成绩信息。 比这复杂的数据还有很多，但是这份数据中的脏数据类型基本上都涵盖了我上面讲的那些。</p><p>​        首先，我们要做的就是把这份 Python list 数据转化成 Numpy 数据。其实用 Python 列表也能做数据清洗工作， 但为什么要用 Numpy 来做呢？这不得不提到 Numpy 面对大数据时，它得天独厚的计算速度优势了。同样一份 1GB 的数据，Python List 处理起来可能要 1 小时， Numpy 优化后，速度可以成倍增长。</p><p>​        首先，我们尝试直接转一下 Python list 到 Numpy Array，看看会不会有问题。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>raw_data<span class="token punctuation">)</span>data</code></pre><p>​         运行结果</p><pre class="language-none"><code class="language-none">array([[&#39;Name&#39;, &#39;StudentID&#39;, &#39;Age&#39;, &#39;AttendClass&#39;, &#39;Score&#39;],       [&#39;小明&#39;, 20131, 10, 1, 67],       [&#39;小花&#39;, 20132, 11, 1, 88],       [&#39;小菜&#39;, 20133, None, 1, &#39;98&#39;],       [&#39;小七&#39;, 20134, 8, 1, 110],       [&#39;花菜&#39;, 20134, 98, 0, None],       [&#39;刘欣&#39;, 20136, 12, 0, 12]], dtype&#x3D;object)</code></pre><p>​        你会发现，这时的 array 输出的结果，结尾处有一个标识。<code>dtype=object</code>，这是什么意思呢？（剧透一下：这种 dtype 会对后续数据处理带来很多麻烦） 我们对比一下如果是纯数据的格式，numpy 的 dtype 是什么样。</p><pre class="language-python" data-language="python"><code class="language-python">test1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span><span class="token number">2.3</span><span class="token punctuation">,</span><span class="token number">3.4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test1.dtype"</span><span class="token punctuation">,</span> test1<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test2.dtype"</span><span class="token punctuation">,</span> test2<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test3.dtype"</span><span class="token punctuation">,</span> test3<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test2 > 2 "</span><span class="token punctuation">,</span> test2 <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"data > 2"</span><span class="token punctuation">,</span> data <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 这里会报错</span><span class="token comment">#TypeError: '>' not supported between instances of 'str' and 'int'</span></code></pre><p>​        我们可以看到不同的array创建方式，可能有不同的dtype，而之前的<code>data.dtype=object</code>，说明Python list直接转换的 <code>data</code>是无法参与诸多Numpy计算的。而只有<code>dtype</code>为<code>int</code>,<code>float</code>这样的数值格式，才能参与运算。</p><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>​        那怎么办呢？我们怎么才能把那个又有 string，又有 None，还有数值的数据转换为 Numpy 能运算的数据呢？ 方法很简单，我们筛选过滤一下。</p><pre class="language-python" data-language="python"><code class="language-python">data_process <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>raw_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token comment"># 不要首行字符串</span>    <span class="token comment"># 去掉首列名字</span>    data_process<span class="token punctuation">.</span>append<span class="token punctuation">(</span>raw_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data_process<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"data.dtype"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> </code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[[2.0131e+04 1.0000e+01 1.0000e+00 6.7000e+01] [2.0132e+04 1.1000e+01 1.0000e+00 8.8000e+01] [2.0133e+04        nan 1.0000e+00 9.8000e+01] [2.0134e+04 8.0000e+00 1.0000e+00 1.1000e+02] [2.0134e+04 9.8000e+01 0.0000e+00        nan] [2.0136e+04 1.2000e+01 0.0000e+00 1.2000e+01]]</code></pre><p>​        有同学可能注意到了，这份数据没有 <code>float</code>，应该是全部是整数 <code>int</code>，为什么我在创建 array 的时候，选的 <code>dtype=np.float</code> 呢？ 那是因为 <code>dtype=np.int</code> 会报错呀，不信你试试。因为这份数据中存在 <code>None</code>，而只有 <code>np.float</code> 能转换 <code>None</code>，所以不是我不想，而是人家不让。</p><p>另外有趣的一个点是，我们在原始数据中有一个字符串的 98，这个字符串也被转换成数字了，可见 numpy 还自动帮我们处理了一部份能被转换的数字。</p><p>好了，现在总算是把这个数据的预处理做好了，接下来就要来清洗数据啦。</p><h2 id="清洗数据"><a href="#清洗数据" class="headerlink" title="清洗数据"></a>清洗数据</h2><p>​        怎么清洗脏数据，取决于你要拿这个数据做什么，很明显，我们想要看看有没有什么数据是不合逻辑的。比如我发现学号有重复，可能是在输入学生信息的时候手误输错了。</p><pre class="language-python" data-language="python"><code class="language-python">sid <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>unique<span class="token punctuation">,</span> counts <span class="token operator">=</span> np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>sid<span class="token punctuation">,</span> return_counts<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token comment">#[1 1 1 2 1]</span></code></pre><p>​        <code>np.unique()</code> 功能为用来查找数据中独一无二的数据的，<code>return_counts</code> 让我能清楚看到是数据的重复数量。 比如有一个数据重复出现了 2 次。我们来看看是哪个数据出现了多次。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>unique<span class="token punctuation">[</span>counts <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#[20134.]</span></code></pre><p>​        然后综合判断，我们的数据中少了一个 <code>20135</code>，可能就是把某个同学的学号输错了，我们将错误的同学修改过来。</p><pre class="language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20135</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><p>​        学号应该就没有大问题了。我们来看看第二列 <code>Age</code> 年龄。一眼可以发现，存在两个问题，有一个同学没有年龄。我们看看能不能用平均年龄补全这个缺失的信息。</p><pre class="language-python" data-language="python"><code class="language-python">is_nan <span class="token operator">=</span> np<span class="token punctuation">.</span>isnan<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"is_nan:"</span><span class="token punctuation">,</span> is_nan<span class="token punctuation">)</span>nan_idx <span class="token operator">=</span> np<span class="token punctuation">.</span>argwhere<span class="token punctuation">(</span>is_nan<span class="token punctuation">)</span><span class="token comment"># 计算有数据的平均年龄，用 ~ 符号可以 True/False 对调</span>mean_age <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token operator">~</span>np<span class="token punctuation">.</span>isnan<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"有数据的平均年龄："</span><span class="token punctuation">,</span> mean_age<span class="token punctuation">)</span></code></pre><p>​        <strong>呀！为啥平均年龄有 27.8 岁，不正常啊！是的，在你处理自己的数据的时候，也会遇到不太正常的情况。</strong> 是哪里出问题了呢？原来仔细看，我们居然有一个 98 岁的学生。 这不太正常啊，所以我觉得我也得把这个 98 岁的当异常数据看待。（在你的项目中，你也要综合判断哪些是异常数据）。我也没什么好办法，就用除开 98 和 nan 的数据， 计算其它数的平均值代替他们吧。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># ~ 表示 True/False 对调，&amp; 就是逐个做 Python and 的运算</span>normal_age_mask <span class="token operator">=</span> <span class="token operator">~</span>np<span class="token punctuation">.</span>isnan<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"normal_age_mask:"</span><span class="token punctuation">,</span> normal_age_mask<span class="token punctuation">)</span>normal_age_mean <span class="token operator">=</span> data<span class="token punctuation">[</span>normal_age_mask<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"normal_age_mean:"</span><span class="token punctuation">,</span> normal_age_mean<span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token operator">~</span>normal_age_mask<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> normal_age_mean<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ages:"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        到这一步之后，我们要看看上课和成绩的数据需不需要清洗。按理来说，如果没有上课（0），课程的成绩应该是不存在的（nan）；上课了（1）才会有成绩。 所以我们观察下面两组数据：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        你会发现，倒数第二行的数据还算是 ok 的，因为没上课，就没成绩，但是倒数第一行，没上课，怎么还有成绩？还有倒数第三行，成绩居然超出了满分 100 分。这些情况都是我们要处理的情况。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 没上课的转成 nan</span>data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>nan<span class="token comment"># 超过 100 分和低于 0 分的都处理一下</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>clip<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好了，数据清洗的工作已经告一段落啦。你会发现，即使是这么小规模的数据，我们也能体验到多种不同情况的数据清洗工作:</p><ol><li>数据值缺失</li><li>数据值异常大或小</li><li>格式错误</li><li>非独立数据错误</li></ol><p>有了这次体验，我相信你在自己的数据上也能更清楚如何操作了。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Numpy练习-数据清洗&quot;&gt;&lt;a href=&quot;#Numpy练习-数据清洗&quot; class=&quot;headerlink&quot; title=&quot;Numpy练习_数据清洗&quot;&gt;&lt;/a&gt;Numpy练习_数据清洗&lt;/h1&gt;&lt;p&gt;​        Numpy 的一切都是和数据打交道，那么在大数据时代，数据其实是不完整，不完美的。比如下面这张图里面， 你会发现，这份数据显然有些不完整的地方，city有数据缺失，duration 虽然是时间上的数据，但是时间单位不统一，时间格式不统一， 这都给后面我们让机器使用这份数据增加难度。&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="tags/python/"/>
    
    <category term="机器学习基础" scheme="tags/机器学习基础/"/>
    
  </entry>
  
  <entry>
    <title>Numpy练习_疫情数据分析</title>
    <link href="2022/05/23/Numpy%E7%BB%83%E4%B9%A0-%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <id>2022/05/23/Numpy%E7%BB%83%E4%B9%A0-%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</id>
    <published>2022-05-22T17:36:03.000Z</published>
    <updated>2022-05-24T16:23:43.672Z</updated>
    
    <content type="html"><![CDATA[<p>​        20年开始的新冠肺炎席卷全球，我们能从肺炎数据中发现什么规律呢？我提前给你准备了从 2020 年 1 月 22 日到 2020 年 7 月 27 日的数据。</p><span id="more"></span><h1 id="疫情数据分析"><a href="#疫情数据分析" class="headerlink" title="疫情数据分析"></a>疫情数据分析</h1><h2 id="数据下载"><a href="#数据下载" class="headerlink" title="数据下载"></a>数据下载</h2><p>​        2020年1月22日到2020年7月27日的数据<a href="https://pan.baidu.com/s/1HX83ebLmbcGJmf5ErXZiVg">下载链接</a>：提取码：5mrb</p><h2 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h2><p>​        用下面的代码在你本地加载数据。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"你下载的 day_wise.csv 数据"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    data <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>covid <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"date"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"header"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>h <span class="token keyword">for</span> h <span class="token keyword">in</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> row <span class="token keyword">in</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    split_row <span class="token operator">=</span> row<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>    covid<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>split_row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    covid<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> split_row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        确保你的文件引入正确</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>covid<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 数据太多了，我先打 5 行</span><span class="token comment"># print(covid["data"]) # 如果你实在想看全部，就执行这一行</span><span class="token comment"># 日期数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>covid<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 数据太多了，我先打 5 行</span><span class="token comment"># print(covid["date"]) # 如果你实在想看全部，就执行这一行</span></code></pre><p>​        了解了数据的大概样子，那么来使用你所学到的 Numpy 技能，我们来分析下面这几个问题。</p><ol><li>获取 2020 年 2 月 3 日的所有数据</li><li>2020 年 1 月 24 日之前的累积确诊病例有多少个？</li><li>2020 年 7 月 23 日的新增死亡数是多少？</li><li>从 1 月 25 日到 7 月 22 日，一共增长了多少确诊病例？</li><li>每天新增确诊数和新恢复数的比例？平均比例，标准差各是多少？</li><li>画图展示新增确诊的变化曲线</li><li>画图展示死亡率的变化曲线</li></ol><h2 id="某日所有数据"><a href="#某日所有数据" class="headerlink" title="某日所有数据"></a>某日所有数据</h2><ul><li>获取 2020 年 2 月 3 日的所有数据</li></ul><p>​        解决这个问题之前，我们需要搞懂使用Numpy获取到特定数据的时候，数据的索引是什么。在Numpy中，我们用来索引的大概率是数字，所以我们得搞清楚对应的数字标号是什么。因为我在为你准备的covid数据中，把日期和标题都用Python列表装起来了，所以你可以通过<code>.index(&quot;xxx&quot;)</code>功能来获取到它的索引。</p><p>​        我们需要思考的是：找到这一天所对应的索引。还好我已经把日期都用列表给存储起来了。看看日期的存储方式。将日期转换成<code>date_idx</code>之后，我们就能用这个index来获取到那一天的全部数据了。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"日期列表摘取："</span><span class="token punctuation">,</span> covid<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>date_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"2020-02-03"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"日期->索引转换："</span><span class="token punctuation">,</span> date_idx<span class="token punctuation">)</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>covid<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> header<span class="token punctuation">,</span> number <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>covid<span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>date_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>header<span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span></code></pre><p>​        至于，这些人数为什么会是一个小数呢？因为 Numpy 在存储一批数据的时候，它会把数据都存成一个模式，在这套数据中，我们都是以小数（float64）的形式存储的， 所以你才会看到有小数点。</p><h2 id="累计确诊"><a href="#累计确诊" class="headerlink" title="累计确诊"></a>累计确诊</h2><ul><li>2020 年 1 月 24 日之前的累积确诊病例有多少个？</li></ul><p>​        有了上一个任务的基础，这个任务我们就更加细致地去获取某个具体的数值，我们确定完日期（row）的 index 之后，再确定标题 （column）的 index。 在这个案例中，我们要确定累积确诊数（Conformed）的索引。</p><pre class="language-python" data-language="python"><code class="language-python">row_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"2020-01-24"</span><span class="token punctuation">)</span>     <span class="token comment"># 获取日期索引</span>column_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"Confirmed"</span><span class="token punctuation">)</span> <span class="token comment"># 获取标题的索引</span>confirmed0124 <span class="token operator">=</span> data<span class="token punctuation">[</span>row_idx<span class="token punctuation">,</span> column_idx<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"截止 1 月 24 日的累积确诊数："</span><span class="token punctuation">,</span> confirmed0124<span class="token punctuation">)</span></code></pre><h2 id="新增死亡"><a href="#新增死亡" class="headerlink" title="新增死亡"></a>新增死亡</h2><ul><li>2020年7月23日的新增死亡数是多少？</li></ul><p>​        这还是一个在Numpy Array中选取数据的过程，我们要搞清楚具体的索引是什么。”New deaths”对应的就是新增死亡数，按照之前的流程把数据拿出来：</p><pre class="language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>covid<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>row_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"2020-07-23"</span><span class="token punctuation">)</span>column_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"New deaths"</span><span class="token punctuation">)</span>result <span class="token operator">=</span> data<span class="token punctuation">[</span>row_idx<span class="token punctuation">,</span>column_idx<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2020 年 7 月 23 日的新增死亡数是:"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span></code></pre><h2 id="总增长数"><a href="#总增长数" class="headerlink" title="总增长数"></a>总增长数</h2><ul><li>从 1 月 25 日到 7 月 22 日，一共增长了多少确诊病例？</li></ul><p>​        获取数据都是小儿科，我们来点真正的数据分析。要基于原有的数据，进行多次加工，来获取新的结论和结果。在这个任务中，我们要进行一次累和的计算。</p><pre class="language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>covid<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>row1_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"2020-01-25"</span><span class="token punctuation">)</span>row2_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"2020-07-22"</span><span class="token punctuation">)</span>column_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"New cases"</span><span class="token punctuation">)</span><span class="token comment"># 注意要 row1_idx+1 得到从 01-25 这一天的新增</span><span class="token comment"># row2_idx+1 来包含 7 月 22 的结果</span>new_cases <span class="token operator">=</span> data<span class="token punctuation">[</span>row1_idx<span class="token punctuation">:</span>row2_idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>column_idx<span class="token punctuation">]</span>overall <span class="token operator">=</span> new_cases<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"共新增："</span><span class="token punctuation">,</span>overall<span class="token punctuation">)</span></code></pre><p>​        但这是通过将每日的新增进行求和，数据是不准确的，我们接下来按照累计确诊的个数计算</p><pre class="language-python" data-language="python"><code class="language-python">confirm_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"Confirmed"</span><span class="token punctuation">)</span>confirmed <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>confirm_idx<span class="token punctuation">]</span>overall2 <span class="token operator">=</span> confirmed<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"另一版本的新增："</span><span class="token punctuation">,</span>overall2<span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">共新增： 15247802.0另一版本的新增： 15226291.0</code></pre><p>​        可以看到，两个数据不一致，这是因为有人感染了不止一次，因此导致新增的数据里重复计算了，所以用新增数据计算的结果比累计确诊的方式来计算的要多。</p><p>​        具体分析看看，具体是哪天的数据对不上，详细输出一下。</p><pre class="language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>covid<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>row1_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"2020-01-25"</span><span class="token punctuation">)</span>row2_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"2020-07-22"</span><span class="token punctuation">)</span>column_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"New cases"</span><span class="token punctuation">)</span>confirm_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"Confirmed"</span><span class="token punctuation">)</span>confirmed <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>confirm_idx<span class="token punctuation">]</span>new_cases <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>column_idx<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>row1_idx<span class="token punctuation">,</span>row2_idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    diff <span class="token operator">=</span> new_cases<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>confirmed<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> confirmed<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> diff <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"data index:"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token string">"差异："</span><span class="token punctuation">,</span>diff<span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">data index: 62 差异： 15.0data index: 81 差异： 21.0...data index: 176 差异： 3.0data index: 181 差异： 110.0</code></pre><h2 id="确诊恢复比例"><a href="#确诊恢复比例" class="headerlink" title="确诊恢复比例"></a>确诊恢复比例</h2><ul><li>每天新增确诊数和新恢复数的比例？平均比例，标准差各是多少？</li></ul><p>​        这一个任务，我们需要再计算计算，会要使用到 Numpy 的批量计算功能，首先确定要拿取到的数据是什么，然后再对这些数据进行计算。 按要求，我们要拿到新增确诊数（New cases），和新的恢复数（New recovered）,然后再相除，最后再计算平均值和标准差。</p><pre class="language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>covid<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>new_cases_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"New cases"</span><span class="token punctuation">)</span>new_recovered_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"New recovered"</span><span class="token punctuation">)</span><span class="token comment">#ratio</span>ratio <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>new_cases_idx<span class="token punctuation">]</span> <span class="token operator">/</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>new_recovered_idx<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"比例样本："</span><span class="token punctuation">,</span>ratio<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#比例样本： [         nan  49.5         47.83333333 164.33333333  52.61538462]</span></code></pre><p>​        我靠，为什么有一个nan啊，nan在Numpy中表示的是 Not a Number， 说明计算有问题。我们单独打印一下，看看为什么出现 <code>nan</code>。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>new_cases_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>new_recovered_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 0.0</span><span class="token comment"># 0.0</span></code></pre><p>​        原来是因为 <code>new_recovered_idx</code> 的第一个位置数据为 0，任何数除以 0 是不成立的，所以才会把这个计算给出一个 <code>nan</code> 的结果。 你看做数据分析还是挺有意思吧，会出现各种意想不到的状况。然后我们把 new_recovered 为零的数都剔除掉。</p><pre class="language-python" data-language="python"><code class="language-python">not_zero_mask <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> new_recovered_idx<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span>ratio <span class="token operator">=</span> data<span class="token punctuation">[</span>not_zero_mask<span class="token punctuation">,</span> new_cases_idx<span class="token punctuation">]</span> <span class="token operator">/</span> data<span class="token punctuation">[</span>not_zero_mask<span class="token punctuation">,</span> new_recovered_idx<span class="token punctuation">]</span><span class="token comment"># 平均比例, 标准差</span>ratio_mean <span class="token operator">=</span> ratio<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>ratio_std <span class="token operator">=</span> ratio<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"比例样本："</span><span class="token punctuation">,</span>ratio<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"平均比例："</span><span class="token punctuation">,</span> ratio_mean<span class="token punctuation">,</span> <span class="token string">"；标准差："</span><span class="token punctuation">,</span> ratio_std<span class="token punctuation">)</span><span class="token comment">#比例样本： [ 49.5         47.83333333 164.33333333  52.61538462  89.88888889]</span><span class="token comment">#平均比例： 7.049556348053241 ；标准差： 19.094025710450307</span></code></pre><p>​        得到计算结果后，我们还是能明显发现，被治好的人的确比新增的要多，这就说明，我们自己的存活率还是挺高的。</p><h2 id="可视化数据"><a href="#可视化数据" class="headerlink" title="可视化数据"></a>可视化数据</h2><ul><li>画图展示新增确诊的变化曲线</li></ul><p>​        有时候，光秃秃的数字并不能生动表现这些数字背后的规律。我们还可以把它画出来。至于如何画，我给你做了一个 <code>draw_line()</code> 的函数，这个函数的背后是 Python 的画图工具 <code>Matplotlib</code>. 不过在这个教程中，并不是重点，我会在<a href="https://mofanpy.com/learning-steps/">之后的画图教程</a>中详细介绍。</p><p>​        现在，我们就来做新增确诊的可视化数据吧。</p><pre class="language-python" data-language="python"><code class="language-python">new_cases_idx <span class="token operator">=</span> covid<span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"New cases"</span><span class="token punctuation">)</span>draw_line<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> new_cases_idx<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        画图部分省略</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        数据分析是一件非常有趣的事情。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​        20年开始的新冠肺炎席卷全球，我们能从肺炎数据中发现什么规律呢？我提前给你准备了从 2020 年 1 月 22 日到 2020 年 7 月 27 日的数据。&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="tags/python/"/>
    
    <category term="机器学习基础" scheme="tags/机器学习基础/"/>
    
  </entry>
  
  <entry>
    <title>numpy和pandas学习笔记</title>
    <link href="2022/05/17/numpy%E5%92%8Cpandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>2022/05/17/numpy%E5%92%8Cpandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-05-17T13:36:13.000Z</published>
    <updated>2022-06-05T15:20:54.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Numpy和Pandas学习笔记"><a href="#Numpy和Pandas学习笔记" class="headerlink" title="Numpy和Pandas学习笔记"></a>Numpy和Pandas学习笔记</h1><p>记录学习的内容，方便今后查阅</p><span id="more"></span><h2 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h2><h3 id="Numpy的安装"><a href="#Numpy的安装" class="headerlink" title="Numpy的安装"></a>Numpy的安装</h3><p>​        直接使用<code>pip3 install numpy</code>即可，可以在终端使用<code>python3 -c &quot;import numpy&quot;</code>判断是否安装成功，如果在终端里直接输入这个语句没有任何反应，那么说明numpy是安装成功可以使用了的</p><h3 id="Numpy-array-和-Python的List的差别"><a href="#Numpy-array-和-Python的List的差别" class="headerlink" title="Numpy array 和 Python的List的差别"></a>Numpy array 和 Python的List的差别</h3><h4 id="Numpy-array的定义"><a href="#Numpy-array的定义" class="headerlink" title="Numpy array的定义"></a>Numpy array的定义</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment">#定义numpy array</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="List-和-Numpy-array-共同点"><a href="#List-和-Numpy-array-共同点" class="headerlink" title="List 和 Numpy array 共同点"></a>List 和 Numpy array 共同点</h4><ul><li>它们都可以用来存储、提取以及修改</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npmy_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>my_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#都可以正常打印噢</span>my_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>my_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_array<span class="token punctuation">)</span></code></pre><h4 id="Numpy-array的优势何在？"><a href="#Numpy-array的优势何在？" class="headerlink" title="Numpy array的优势何在？"></a>Numpy array的优势何在？</h4><p>​        Numpy的运算速度快，numpy array在内存中使用连续地址，并不像List使用不连续的地址块，因此速度上就有差异，而且Numpy对于批量数据的存储的数据格式也更有效率</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​        Numpy Array 和 Python List 在很多使用场景上是可以互换的，不过在大数据处理的场景下，而且你的数据类型又高度统一， 那么 Numpy 绝对是你不二的人选，能提升的运算速度也是杠杠的~</p><h3 id="Numpy的基本操作"><a href="#Numpy的基本操作" class="headerlink" title="Numpy的基本操作"></a>Numpy的基本操作</h3><h4 id="Numpy中的维度"><a href="#Numpy中的维度" class="headerlink" title="Numpy中的维度"></a>Numpy中的维度</h4><p>​        Numpy在多维数据的计算上速度很快！！！我们来学一下怎么用numpy创建并处理多维数据</p><h5 id="创建多维数据"><a href="#创建多维数据" class="headerlink" title="创建多维数据"></a>创建多维数据</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment">#创建一维</span>cars <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据："</span><span class="token punctuation">,</span>cars<span class="token punctuation">,</span><span class="token string">"维度："</span><span class="token punctuation">,</span>cars<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span><span class="token comment">#创建二维</span>cars <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">5.1</span><span class="token punctuation">,</span><span class="token number">8.2</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">6.3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">4.4</span><span class="token punctuation">,</span><span class="token number">9.1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6.6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据："</span><span class="token punctuation">,</span>cars<span class="token punctuation">,</span><span class="token string">"维度："</span><span class="token punctuation">,</span>cars<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span><span class="token comment">#创建三维</span>cars <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">5.1</span><span class="token punctuation">,</span><span class="token number">8.2</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">6.3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">4.4</span><span class="token punctuation">,</span><span class="token number">9.1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6.6</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">6.1</span><span class="token punctuation">,</span><span class="token number">9.2</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">7.3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">5.4</span><span class="token punctuation">,</span><span class="token number">10.1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">7.6</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据："</span><span class="token punctuation">,</span>cars<span class="token punctuation">,</span><span class="token string">"维度："</span><span class="token punctuation">,</span>cars<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"场地1 数据：\n"</span><span class="token punctuation">,</span>cars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"\n场地1 维度:"</span>，cars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ndim<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"场地2 数据：\n"</span><span class="token punctuation">,</span>cars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"\n场地2 维度:"</span>，cars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ndim<span class="token punctuation">)</span></code></pre><h5 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h5><ul><li>把两个一维数组变成一个二维数组</li></ul><pre class="language-python" data-language="python"><code class="language-python">cars1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cars2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5.2</span><span class="token punctuation">,</span><span class="token number">4.2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cars <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>cars1<span class="token punctuation">,</span>cars2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#concatenate的意思是连接</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span></code></pre><ul><li>数据换成二维数组之后想要添加数据</li></ul><pre class="language-python" data-language="python"><code class="language-python">test1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5.1</span><span class="token punctuation">,</span> <span class="token number">8.2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">6.3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 首先需要把它们都变成二维，下面这两种方法都可以加维度</span>test1 <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>test1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>test2 <span class="token operator">=</span> test2<span class="token punctuation">[</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test1加维度后 "</span><span class="token punctuation">,</span> test1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test2加维度后 "</span><span class="token punctuation">,</span> test2<span class="token punctuation">)</span><span class="token comment"># 然后再在第一个维度上叠加</span>all_tests <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>test1<span class="token punctuation">,</span> test2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"括展后\n"</span><span class="token punctuation">,</span> all_tests<span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">test1加维度后  [[ 5 10 12  6]]test2加维度后  [[ 5.1  8.2 11.   6.3]]括展后 [[ 5.  10.  12.   6. ] [ 5.1  8.2 11.   6.3]]</code></pre><h5 id="合并数据"><a href="#合并数据" class="headerlink" title="合并数据"></a>合并数据</h5><ul><li>只要维度能够对齐，你可以在任意维度上进行合并操作</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第一维度叠加：\n"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>all_tests<span class="token punctuation">,</span> all_tests<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第二维度叠加：\n"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>all_tests<span class="token punctuation">,</span> all_tests<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">第一维度叠加： [[ 5.  10.  12.   6. ] [ 5.1  8.2 11.   6.3] [ 5.  10.  12.   6. ] [ 5.1  8.2 11.   6.3]]第二维度叠加： [[ 5.  10.  12.   6.   5.  10.  12.   6. ] [ 5.1  8.2 11.   6.3  5.1  8.2 11.   6.3]]</code></pre><p>​        看来axis为0的时候，就是把二维数组和二维数组直接合并，而axis为1的时候就是把相对应的数据合并成一个数组，两个数组的原有位置关系不变</p><ul><li>转载一个好的理解axis方法：axis这个参数实际上就是表示的你要修改哪一维度的数据。举个栗子：<br>   有两组数据，它们的维度都是（2，3），即都是两行三列的数据。有小伙伴可能会发愁，当这两组数据合并时，axis参数设为0到底是横向操作还是竖向操作，肯定有小伙伴要在这里思考一下，实际上不用这么麻烦哒~<br>    当axis设为0时，表示我们要修改第一个维度的数据，两组数据的第一个维度都是2，当它们合并时就变成了4，所以合并后的数据的维度就是（4，3），即变成了四行三列。通过这样子思考，就再也不用努力回想到底是横向合并还是竖向合并啦hh<br>    同理，axis设为1，合并后的数据维度就变成了（2，6），即两行六列~<br>    同理，axis参数在其他方法里也可以用同样的方法思考，比如求均值的mean方法，当axis设为0时，对第一个维度的数据进行求均值，维度为（2，3）的数据计算完后就变成了维度为（1，3）的数据，是不是很好理解~</li></ul><p>​        而且除了<code>np.concatenate()</code>之外，还有&#96;&#96;np.vstack()<code>, </code>np.hstack()<code>.</code>这两个方法在二维数组上可以将数据进行横向合并和纵向合并：</p><p><img src="http://cdn.leafii.top/img/Screen%20Shot%202022-05-19%20at%2020.05.47.png" alt="横向合并" loading="lazy"></p><p><img src="http://cdn.leafii.top/img/Screen%20Shot%202022-05-19%20at%2020.29.07.png" alt="纵向合并" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"竖直合并\n"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"水平合并\n"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">竖直合并 [[1 2] [3 4] [5 6] [7 8]]水平合并 [[1 2 5 6] [3 4 7 8]]</code></pre><h5 id="观察形态"><a href="#观察形态" class="headerlink" title="观察形态"></a>观察形态</h5><p>​        除了 <code>np.ndim</code> 来查看数据的形态，其实我们有时候还想更加了解数据的细节问题，比如这个数据的大小，规格。方便我们管理这些数据。</p><ul><li>当我想知道到底有多少车辆测试数据时，你可能会通过遍历的方法来计数。</li></ul><pre class="language-python" data-language="python"><code class="language-python">cars <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5.1</span><span class="token punctuation">,</span> <span class="token number">8.2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">6.3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4.4</span><span class="token punctuation">,</span> <span class="token number">9.1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6.6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        count <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"总共多少测试数据："</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>        </code></pre><p>​        但以下代码与上面代码等价：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"总共多少测试数据："</span><span class="token punctuation">,</span> cars<span class="token punctuation">.</span>size<span class="token punctuation">)</span></code></pre><ul><li>想知道数组有几行（第一维度）几列（第二维度）</li></ul><pre class="language-python" data-language="python"><code class="language-python">cars <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5.1</span><span class="token punctuation">,</span> <span class="token number">8.2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">6.3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4.4</span><span class="token punctuation">,</span> <span class="token number">9.1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6.6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第一个维度："</span><span class="token punctuation">,</span> cars<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第二个维度："</span><span class="token punctuation">,</span> cars<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"所有维度："</span><span class="token punctuation">,</span> cars<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><p>​        运行结果：</p><pre class="language-none"><code class="language-none">第一个维度： 3第二个维度： 4所有维度： (3, 4)</code></pre><p>​        <strong>要好好理解维度噢，这很重要</strong></p><h4 id="用numpy进行数据选择"><a href="#用numpy进行数据选择" class="headerlink" title="用numpy进行数据选择"></a>用numpy进行数据选择</h4><p>​        可以使用numpy进行对数据的选择，不管是批量划分，还是按条件筛选，都可以哦qwq</p><h5 id="单个选取"><a href="#单个选取" class="headerlink" title="单个选取"></a>单个选取</h5><ul><li><code>array[1]</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#一个一个选qwq！</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a[0]:"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a[1]:"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><img src="http://cdn.leafii.top/img/20220519202955.png" alt="array[1]" loading="lazy"></p><ul><li><code>array[1,2,3]</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#一次选择多个</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a[[0,1]]:\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a[[1,1,0]]:\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ul><li><code>array[1][1]</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#对二维数组进行选择</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 选第 2 行所有数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b[1]:\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 选第 2 行，第 1 列的数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b[1,0]:\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 这个看着有点纠结，如果对应到数据，</span><span class="token comment"># 第一个拿的是数据位是 [1,2]</span><span class="token comment"># 第二个拿的是 [0,3]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b[[1,0],[2,3]]:\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​        总之，不管是几维数据，我们都可以在其不同维度上挑选那个维度上对应序号上的数值。而且还能一次从原数据上选取多个数据点。</p><h5 id="切片划分"><a href="#切片划分" class="headerlink" title="切片划分"></a>切片划分</h5><ul><li><code>array[:3]</code></li></ul><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a[0:2]：\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a[1:]：\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a[-2:]：\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#使用 : 就能让你跨着取数字，而且一次取一批。注意，在 Numpy 中：一次取一批和一个个拎起来，拎了一批，是不同的概念哦 一次取一批来的更快， 因为它不用去一个个查看，一个个数了。</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">a[0:2]： [1 2]a[1:]： [2 3]a[-2:]： [2 3]</code></pre><p><img src="http://cdn.leafii.top/img/20220520104622.png" alt="切片划分" loading="lazy"></p><ul><li><code>array[2:4, 1:3]</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#在多维上，也可以进行切片划分</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b[:2]:\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b[:2, :3]:\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b[1:3, -2:]:\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">b[:2]: [[1 2 3 4] [5 6 7 8]]b[:2, :3]: [[1 2 3] [5 6 7]]b[1:3, -2:]: [[ 7  8] [11 12]]</code></pre><h5 id="条件筛选"><a href="#条件筛选" class="headerlink" title="条件筛选"></a>条件筛选</h5><ul><li><code>array[array&lt;0]</code></li></ul><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>a<span class="token operator">></span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#运行结果如下</span><span class="token comment">#[ 8  9 10 11 12]</span><span class="token comment">#a>7 的返回结果是布尔类型</span>condition <span class="token operator">=</span> a <span class="token operator">></span> <span class="token number">7</span><span class="token keyword">print</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>condition<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#运行结果如下</span><span class="token comment">#[[False False False False]</span><span class="token comment">#[False False False  True]</span><span class="token comment">#[ True  True  True  True]]</span><span class="token comment">#[ 8  9 10 11 12]</span></code></pre><p>​        这种筛选的底层逻辑就是只要我们得到一种True和False数据，那么就可以进行筛选。</p><pre class="language-python" data-language="python"><code class="language-python">condition <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>condition<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#[ 8  9 11 12]</span></code></pre><ul><li><code>np.where(array, array &lt; 0)</code></li></ul><p>​        除了这种直接用<code>[]</code>的形式，在 Numpy 中，还有一个专用的函数来做数据筛选。这种筛选更强大，它还能做筛选结果的替换工作。 它可已将满足条件的位置变成你设定的数字。下面满足条件的，都改成 <code>-1</code>，不满足的，都还是 <code>a</code> 里面的数字。</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>condition <span class="token operator">=</span> a <span class="token operator">></span> <span class="token number">7</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>condition<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#[[ 1  2  3  4]</span><span class="token comment">#[ 5  6  7 -1]</span><span class="token comment">#[-1 -1 -1 -1]]</span></code></pre><p>​        或者将不满足条件的也变成你期望的数字或者另一组数据</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>condition <span class="token operator">=</span> a <span class="token operator">></span> <span class="token number">7</span><span class="token comment">#满足的变成-1，不满足的变成2</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>condition<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#[[ 2  2  2  2]</span><span class="token comment">#[ 2  2  2 -1]</span><span class="token comment">#[-1 -1 -1 -1]]</span><span class="token comment">#定义b</span>b <span class="token operator">=</span> <span class="token operator">-</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>condition<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#[[-2 -3 -4 -5]</span><span class="token comment">#[-6 -7 -8  8]</span><span class="token comment">#[ 9 10 11 12]]</span></code></pre><p>​        所以 <code>np.where()</code> 函数真的十分强大，每每当我想要按条件选择、替换数据的时候，我脑海中，都是 <code>np.where()</code> 的身影。</p><h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><p>​        数据虽然有格式，但是如果要把数据用起来，还是得学会挑选和筛选。而今天介绍的单个、分段、条件筛选，都是数据工程师必备的一项技能。也是后续数据分析和机器学习的基石。</p><h4 id="基础运算"><a href="#基础运算" class="headerlink" title="基础运算"></a>基础运算</h4><h5 id="加减乘除"><a href="#加减乘除" class="headerlink" title="加减乘除"></a>加减乘除</h5><ul><li>在Python的List中进行计算的常规步骤</li></ul><pre class="language-python" data-language="python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">166</span><span class="token punctuation">,</span><span class="token number">183</span><span class="token punctuation">,</span><span class="token number">170</span><span class="token punctuation">]</span><span class="token comment">#* 使用循环</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>    l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token comment">#[153, 169, 186, 173]</span><span class="token comment">#* 使用map函数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">166</span><span class="token punctuation">,</span><span class="token number">183</span><span class="token punctuation">,</span><span class="token number">170</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#[153, 169, 186, 173]</span></code></pre><ul><li>使用numpy的方式进行计算 <code>+-*/</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">166</span><span class="token punctuation">,</span><span class="token number">183</span><span class="token punctuation">,</span><span class="token number">170</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">#[153 169 186 173]</span></code></pre><p>​        Numpy 是可以批量进行计算的，只需要简单的 <code>+-*/</code>，就能进行全元素的运算，也就是向量化运算。同理，我们也可以进行其他符号的批量运算。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a + 3:"</span><span class="token punctuation">,</span> a <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a - 3:"</span><span class="token punctuation">,</span> a <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a * 3:"</span><span class="token punctuation">,</span> a <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a / 3:"</span><span class="token punctuation">,</span> a <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">#a + 3: [153 169 186 173]</span><span class="token comment">#a - 3: [147 163 180 167]</span><span class="token comment">#a * 3: [450 498 549 510]</span><span class="token comment">#a / 3: [50.         55.33333333 61.         56.66666667]</span></code></pre><ul><li>矩阵点积运算 <code>np.dot()</code></li></ul><p><img src="http://cdn.leafii.top/img/20220520232800.png" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#[[19 22]</span><span class="token comment">#[43 50]]</span><span class="token comment">#[[19 22]</span><span class="token comment">#[43 50]]</span></code></pre><p>​        因此，我们可以得知，dot函数有两种写法，一种是<code>a.dot(b)</code>，另一种是<code>np.dot(a,b)</code>，矩阵还有很多其他的计算，比如 <code>np.outer()</code> 矩阵外积，<code>np.inner()</code> 矩阵内积 （和 <code>np.dot()</code> 的用法稍稍有些不同，你可以理解成 <code>np.dot(a, b）= np.inner(a, b.T)</code>, 把 b 做一次转置）。</p><h5 id="数据统计分析"><a href="#数据统计分析" class="headerlink" title="数据统计分析"></a>数据统计分析</h5><p>​        在数据分析时，大部分时间还是以pandas的使用为主，但是数据量比较大的时候，可以使用numpy，毕竟numpy的速度比Pandas要快上不少。</p><p>​        数据分析的定义：在数据中找到你想要的一些变量，总结数据的规律。</p><ul><li><code>np.max() np.min() np.sum() np.prod() np.count()</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#对给定的身高数据，找最高的和最矮的</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">166</span><span class="token punctuation">,</span><span class="token number">183</span><span class="token punctuation">,</span><span class="token number">170</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"max:"</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"min:"</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#或者</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"max:"</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"min:"</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#计算累加和</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#计算累乘</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>prod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#计算总共有几个值</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token comment">#计算一共有多少个非零值</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>arrat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"非零总数："</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>count_nonzero<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><code>np.std() np.mean() np.median()</code></li></ul><pre class="language-python" data-language="python"><code class="language-python">month_salary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">2.1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"标准差："</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>month_salary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"平均工资："</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>month_salary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"工资中位数："</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>median<span class="token punctuation">(</span>month_salary<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="特殊运算符号"><a href="#特殊运算符号" class="headerlink" title="特殊运算符号"></a>特殊运算符号</h5><ul><li><code>np.argmax() np.argmin()</code></li></ul><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">166</span><span class="token punctuation">,</span> <span class="token number">183</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">]</span><span class="token punctuation">)</span>name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"小米"</span><span class="token punctuation">,</span> <span class="token string">"OPPO"</span><span class="token punctuation">,</span> <span class="token string">"Huawei"</span><span class="token punctuation">,</span> <span class="token string">"诺基亚"</span><span class="token punctuation">]</span><span class="token comment">#关心最大/最小数值的序号 使用argmax()/argmin()</span>high_idx <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>a<span class="token punctuation">)</span>low_idx <span class="token operator">=</span> np<span class="token punctuation">.</span>argmin<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; 最高"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span>high_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; 最矮"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span>low_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><code>np.ceil() np.floor() np.clip()</code></li></ul><p>​        另外一个时不时会用到的功能是，取天花板的值还是地板的值，这个在 AI 算法中也比较常见， 比如我要对其做<strong>取整处理</strong>，抹除小数部分。</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">150.1</span><span class="token punctuation">,</span> <span class="token number">166.4</span><span class="token punctuation">,</span> <span class="token number">183.7</span><span class="token punctuation">,</span> <span class="token number">170.8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ceil:"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"floor:"</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        可以用 <code>np.clip()</code> 来做上下界限的值截取</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">150.1</span><span class="token punctuation">,</span> <span class="token number">166.4</span><span class="token punctuation">,</span> <span class="token number">183.7</span><span class="token punctuation">,</span> <span class="token number">170.8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"clip:"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>clip<span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h5><p>​        其实 Numpy 中做数据运算的功能，比我这里列举的要多很多，我只是列举了一些我在数据分析和人工智能算法中，经常会使用到的一些功能。 还有更多的功能，可以在他的<a href="https://numpy.org/devdocs/user/quickstart.html#basic-operations">官方网站</a>查找哦。</p><h4 id="改变数据形态"><a href="#改变数据形态" class="headerlink" title="改变数据形态"></a>改变数据形态</h4><p>​        如何做数据的变换？</p><h5 id="改变形态"><a href="#改变形态" class="headerlink" title="改变形态"></a>改变形态</h5><ul><li><code>array[np.newaxis, :]</code></li></ul><p>​        改变形态，其实是针对与多维度空间上的数据，要改变它的维度信息，和每个维度中的数据格式。所以第一点你就要清楚，如何添加维度。 其实在 <a href="https://mofanpy.com/tutorials/data-manipulation/numpy/ndarray/">多维数据教程中</a> 中我们就提到过添加维度的方法，我这里在总结括展一下。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a_2d <span class="token operator">=</span> a<span class="token punctuation">[</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> a_2d<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment">#(6,) (1, 6)</span></code></pre><p>​        除了这种方式的其它几种，能达到同样效果的方式。比如用 <code>None</code> 或者 <code>np.expand_dims()</code></p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a_none <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>a_expand <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a_none<span class="token punctuation">.</span>shape<span class="token punctuation">,</span>a_expand<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment">#(6, 1) (6, 1)</span></code></pre><p>​         除了添加维度，我们还能减少维度，但是下面介绍的减少维度，只能减少那些维度 shape 上为 1 的维度。因为减掉这个维度，数据结构上是没有变化的。</p><pre class="language-python" data-language="python"><code class="language-python">a_squeeze <span class="token operator">=</span> np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>a_expand<span class="token punctuation">)</span>a_squeeze_axis <span class="token operator">=</span> a_expand<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a_squeeze<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a_squeeze_axis<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment">#(6,)</span><span class="token comment">#(6,)</span></code></pre><ul><li><code>array.reshape()</code></li></ul><p>​        上述方法都是添加维度的方式，但是，在机器学习中，我们还有一个更常见的操作，是要改变 shape。维度的添加减少，只能添加减少一个维度，数据结构是不变的。 但是 <code>np.reshape()</code> 可以改变数据结构。 举个例子，<code>a[None, :]</code> 之后，<code>a.shape</code> 会在第一个维度上多一个 1，而 <code>a.reshape([2,3])</code> 则可以更加自定义的将维度内的个数进行修改。 从而达到改变维度及尺寸。</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a1 <span class="token operator">=</span> a<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a2 <span class="token operator">=</span> a<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a1 shape:"</span><span class="token punctuation">,</span> a1<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a2 shape:"</span><span class="token punctuation">,</span> a2<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">a1 shape: (2, 3)[[1 2 3] [4 5 6]]a2 shape: (3, 1, 2)[[[1 2]] [[3 4]] [[5 6]]]</code></pre><ul><li><code>array.ravel(), array.flatten()</code></li></ul><p>​        其实还有更过的改变形态的方法，比如让数据变直、展平 的 <code>np.ravel()</code>, <code>np.flatten()</code>，这两个比较特殊， 我会在对速度有洁癖这节的时候详细说明。</p><ul><li><code>array.transpose()</code></li></ul><p>​        在矩阵运算的时候，也有一种形态的转化，叫做矩阵转置，<code>np.transpose()</code>, 在机器学习中也用得很多。这里提一下， 给一个小案例，你们玩玩试试。</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>aT1 <span class="token operator">=</span> a<span class="token punctuation">.</span>TaT2 <span class="token operator">=</span> np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>aT1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>aT2<span class="token punctuation">)</span></code></pre><p>​         运行结果</p><pre class="language-none"><code class="language-none">[[1 4] [2 5] [3 6]][[1 4] [2 5] [3 6]]</code></pre><h5 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h5><ul><li><code>np.column_stack(), np.row_stack()</code></li></ul><p>​        在介绍多维数组的时候， 我们也稍微介绍了一下如何添加和并数组。现在我们再详细把数组的合并拆解都细说一下。</p><p>​        一般来说，在数据分析统计，机器学习中的数据，都是以二维来存储的。行是数据样本（第一维度），列是特征（第二维度）。 所以我们可以组合特征和组合样本。 比如将列<code>column</code>合并，特征 a 的数据和特征 b 的数据合并。</p><pre class="language-python" data-language="python"><code class="language-python">feature_a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>feature_b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">)</span>c_stack <span class="token operator">=</span> np<span class="token punctuation">.</span>column_stack<span class="token punctuation">(</span><span class="token punctuation">[</span>feature_a<span class="token punctuation">,</span> feature_b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c_stack<span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[[ 1 11] [ 2 22] [ 3 33] [ 4 44] [ 5 55] [ 6 66]]</code></pre><p>​        一条条的数据 sample 和并。</p><pre class="language-python" data-language="python"><code class="language-python">sample_a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>sample_b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>c_stack <span class="token operator">=</span> np<span class="token punctuation">.</span>row_stack<span class="token punctuation">(</span><span class="token punctuation">[</span>sample_a<span class="token punctuation">,</span> sample_b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c_stack<span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[[0.  1.1] [1.  2.2]]</code></pre><ul><li><code>np.vstack(), np.hstack(), np.stack()</code></li></ul><p>​        上面的两种方法 <code>np.column_stack()</code> 和 <code>np.row_stack()</code> 和后面的 <code>np.vstack()</code>、<code>np.hstack()</code> 相比， 有些特殊之处，我们先看看使用 <code>vstack</code> 和 <code>hstack</code> 的案例，再说说不同处吧。</p><pre class="language-python" data-language="python"><code class="language-python">feature_a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>feature_b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>c_stack <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">[</span>feature_a<span class="token punctuation">,</span>feature_b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c_stack<span class="token punctuation">)</span>sample_a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1.1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>sample_b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2.2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>c_stack <span class="token operator">=</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">[</span>sample_a<span class="token punctuation">,</span>sample_b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c_stack<span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[[ 1 11] [ 2 22] [ 3 33] [ 4 44] [ 5 55] [ 6 66]][[0.  1.1] [1.  2.2]]</code></pre><p>​        看到了吗？用 <code>column_stack</code> 和 <code>row_stack()</code> 的时候，Numpy 自动帮你处理的维度信息，而用 <code>vstack</code> 和 <code>hstack</code> 的时候，你需要先确保维度信息是正确的，然后再合并。</p><ul><li><code>np.concatenate()</code></li></ul><p>​        有时候，你想要用统一的方法来处理各种不同情况的合并，<code>np.concatenate()</code> 是我最喜欢的方法，管它什么 <code>vstack</code> <code>hstack</code> 甚至是在更高维度上要合并， 我们都可以用 <code>concatenate()</code> 一个功能实现。</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[[1 2] [3 4] [5 6] [7 8]][[1 2 5 6] [3 4 7 8]]</code></pre><h5 id="拆解"><a href="#拆解" class="headerlink" title="拆解"></a>拆解</h5><ul><li><code>np.vsplit(), np.hsplit(), np.split()</code></li></ul><p>​        同样，能横着，竖着合并，那也能横着竖着拆解。<code>np.vsplit()</code> 和 <code>np.hsplit()</code> 就是干这事的。 如果直接在 <code>indices_or_sections</code> 后填入数字，就是要整分的段数， 而如果接着的是一个列表，那就按照列表中的 index 来取区间。可以看看下面代码注解中的意思。</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>vsplit<span class="token punctuation">(</span>a<span class="token punctuation">,</span> indices_or_sections<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 分成两段</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>vsplit<span class="token punctuation">(</span>a<span class="token punctuation">,</span> indices_or_sections<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 分片成 [:2]，[2:3], [3:]</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[array([[ 1, 11,  2, 22],       [ 3, 33,  4, 44]]), array([[ 5, 55,  6, 66],       [ 7, 77,  8, 88]])][array([[ 1, 11,  2, 22],       [ 3, 33,  4, 44]]), array([[ 5, 55,  6, 66]]), array([[ 7, 77,  8, 88]])]</code></pre><p>​        <code>np.vsplit</code> 是拿着刀沿着横向切分，那么 <code>np.hsplit</code> 就是沿纵向切分，我就不再举例了。那么有没有既能横切也能纵切的函数呢？ 当然有呀，和 <code>stack</code> 一样，如果直接用 <code>np.split()</code> 你就能选择要切分的维度来自定义切分了。</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>a<span class="token punctuation">,</span> indices_or_sections<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 分成两段</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>a<span class="token punctuation">,</span> indices_or_sections<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 在第二维度，分片成 [:2]，[2:3]，[3:]</span></code></pre><p>​        运行结果</p><pre class="language-none"><code class="language-none">[array([[ 1, 11,  2, 22],       [ 3, 33,  4, 44]]), array([[ 5, 55,  6, 66],       [ 7, 77,  8, 88]])][array([[ 1, 11],       [ 3, 33],       [ 5, 55],       [ 7, 77]]), array([[2],       [4],       [6],       [8]]), array([[22],       [44],       [66],       [88]])]</code></pre><h5 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h5><p>​         形态变化和合并拆解都是十分有用的功能，我们介绍了很多种实用的方法来完成这些事， 而懂了这些之后，你的数据分析和机器学习才算是真正迈入入圈的第一步。</p><h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><h3 id="Pandas简介-amp-安装"><a href="#Pandas简介-amp-安装" class="headerlink" title="Pandas简介&amp;安装"></a>Pandas简介&amp;安装</h3><h4 id="为什么用Pandas"><a href="#为什么用Pandas" class="headerlink" title="为什么用Pandas"></a>为什么用Pandas</h4><p>​进入大数据时代，感觉我们如果不会一些分析数据的能力，就将要被时代淘汰（明目张胆拉焦虑）。 不过好在现在的技术越来越好，越来越易用，而且网络上也有越来越多的教学内容。 只要你有一些耐心，入门其实并不难。</p><p>​现在我们将要步入新的阶段，对大数据做出新的定义，直面大数据带来的挑战，学会使用 Pandas 来处理你日常的表格&#x2F;画图&#x2F;数据分析等问题。</p><h5 id="你正在面临的问题"><a href="#你正在面临的问题" class="headerlink" title="你正在面临的问题"></a>你正在面临的问题</h5><p>​大数据虽然描述的是海量的数据，但是大数据离你却并不远，特别是大数据所涵盖的技术，在你生活当中，是时刻都能使用这些大数据涉及到的技术， 来解决你生活中的具体问题。</p><p>​是什么时候才会让我想要使用 Pandas 来处理问题呢？我下面列一条，说不定就有你正面临的问题：</p><ul><li>办公自动化<ul><li>上学上班，有 Excel 或者格式化的文本文件，需要进行数据加工处理</li><li>对大量的这些文本文件作图，想要自动化处理</li></ul></li><li>人工智能<ul><li>数据分析，可视化数据规律</li><li>数据前处理，为 AI 模型展平道路</li></ul></li></ul><h4 id="Pandas是什么"><a href="#Pandas是什么" class="headerlink" title="Pandas是什么"></a>Pandas是什么</h4><p>​简单来说，Pandas 是 Python 中一个比较常用的第三方库，里面集成了很多和数据相关的功能组件。上面提到的那些场景中， 无非就是要：</p><ol><li>处理数据</li><li>分析数据</li><li>画图</li></ol><p>​所以 Pandas 就围绕着这些环节施展能力。而且它承接了 Numpy 的能力，使用的底层也是 Numpy。按理来说，我们也能用 Numpy 来实现上述功能， 但为什么 Pandas 还是这么广为流传呢？关于这个话题，我想在后文中详细论述。</p><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p>​Pandas 是数据的伙伴，帮你处理和分析海量数据，学会用 Python，会很常需要处理数据，只要需要处理数据，希望你都能回想起来有这么一位数据伙伴的存在。</p><h3 id="安装Pandas"><a href="#安装Pandas" class="headerlink" title="安装Pandas"></a>安装Pandas</h3><h5 id="安装Python（略）"><a href="#安装Python（略）" class="headerlink" title="安装Python（略）"></a>安装Python（略）</h5><h5 id="安装Pandas-1"><a href="#安装Pandas-1" class="headerlink" title="安装Pandas"></a>安装Pandas</h5><p>​打开cmd或者terminal，输入指令：</p><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> pandas<span class="token comment">#或者</span>pip3 <span class="token function">install</span> pandas</code></pre><p>​安装完成后，打开python编辑器，输入下列代码</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">print</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#0    1</span><span class="token comment">#1    2</span><span class="token comment">#2    3</span><span class="token comment">#dtype: int64</span></code></pre><h5 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h5><p>​在本地安装起来很简单，使用 Python 自带的 pip 就好了。记得安装好了之后检查一下是否能正常运行， 和是否安装到其他 Python 版本里去了（如果你电脑里有多个 Python 版本的话）。</p><h3 id="Pandas和Numpy的差别"><a href="#Pandas和Numpy的差别" class="headerlink" title="Pandas和Numpy的差别"></a>Pandas和Numpy的差别</h3><p>​我们已经讲过，Pandas 是在 Numpy 上的封装。 继承了 Numpy 的所有优点，但是这种封装有好有坏，我们在这节内容中就先来阐述一下 Pandas 和 Numpy 的对比。</p><h4 id="类比Python"><a href="#类比Python" class="headerlink" title="类比Python"></a>类比Python</h4><p>​用过 Python，你肯定熟悉里面的 List 和 Dictionary, 我比较常拿这两种形态来对比 Numpy 和 Pandas 的关系。</p><pre class="language-python" data-language="python"><code class="language-python">a_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>a_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"list:"</span><span class="token punctuation">,</span> a_list<span class="token punctuation">)</span><span class="token comment">#list: [1, 2, 3]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"dict:"</span><span class="token punctuation">,</span> a_dict<span class="token punctuation">)</span><span class="token comment">#dict: &#123;'a': 1, 'b': 2, 'c': 3&#125;</span></code></pre><p>​上面就是一种最常见的 Python 列表和字典表达方式。而下面，我们展示的就是 Numpy 和 Pandas 的一种构建方式。 试着执行下面的代码。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"numpy array:\n"</span><span class="token punctuation">,</span> a_array<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\npandas df:\n"</span><span class="token punctuation">,</span> a_df<span class="token punctuation">)</span></code></pre><p>​运行结果</p><pre class="language-none"><code class="language-none">numpy array: [[1 2] [3 4]]pandas df:    a  b0  1  21  3  4</code></pre><p>​你会发现，我们看到的结果中，Numpy的是没有任何数据标签信息的，你可以认为它是纯数据；而Pandas就像字典一样，还记录着数据的外围信息，比如标签名(Column)和索引(Row index)。所以我总说Numpy是Python里的列表，而Pandas是Python里的字典。</p><h4 id="对比Numpy"><a href="#对比Numpy" class="headerlink" title="对比Numpy"></a>对比Numpy</h4><p>​对于数据运算，既然我们有了 Numpy，为什么还要用 Pandas？对比列表和字典，我们很容易感受到其中的一种原因：Pandas帮我们记录的信息量变多了。</p><p>​在Numpy中，如果你不特别在其他地方标注，你是不清楚记录的这里边记录的是什么信息的，而Pandas记录的信息可以特别丰富，你给别人使用传播数据的时候，这些信息也会一起传递过去。或者你自己处理数据时对照着信息来加工数据，也会更加友善。这就是在我看来Pandas对比Numpy的一个最直观的好处。</p><p>​<strong>另外 Pandas 用于处理数据的功能也比较多，信息种类也更丰富，特别是你有一些包含字符的表格，Pandas 可以帮你处理分析这些字符型的数据表。 当然还有很多其它功能，比如处理丢失信息，多种合并数据方式，读取和保存为更可读的形式等等。</strong></p><p>​但是Pandas也有不足的地方：<strong>运算速度稍微比Numpy慢一些。</strong></p><p>​你想想，因为Pandas是在Numpy之上的一层封装，所以肯定在处理数据的时候要多几层处理，小数据量的处理不要紧，慢一点就慢一点，你也感受不到处理速度的变化；但是当数据量变大时，Numpy处理需要1小时的数据，你用Pandas处理可能得2小时。所以在使用时需要注意自己的实际需求。比如：如果在做少量数据的分析时，因为不涉及到机器学习的模型运算等，我都可以用 Pandas，但如果要模型训练， 训练过程中还一直要调用数据处理的功能， 我肯定毫不犹豫都用 Numpy 来做。</p><h4 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h4><p>​Pandas 是 Numpy 的封装库，继承了 Numpy 的很多优良传统，也具备丰富的功能组件，但是你还是得分情况来酌情选择要使用的工具。</p><hr><p>注：该笔记非原创，主要是对<a href="https://mofanpy.com/">该网站</a>中教程内容的记录</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Numpy和Pandas学习笔记&quot;&gt;&lt;a href=&quot;#Numpy和Pandas学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Numpy和Pandas学习笔记&quot;&gt;&lt;/a&gt;Numpy和Pandas学习笔记&lt;/h1&gt;&lt;p&gt;记录学习的内容，方便今后查阅&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="tags/python/"/>
    
    <category term="机器学习基础" scheme="tags/机器学习基础/"/>
    
  </entry>
  
  <entry>
    <title>python入门笔记</title>
    <link href="2022/04/24/python%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <id>2022/04/24/python%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</id>
    <published>2022-04-24T06:15:16.000Z</published>
    <updated>2022-07-09T12:00:35.851Z</updated>
    
    <content type="html"><![CDATA[<p>本文章旨在记录本人python基础语法学习的回顾总结。知识点来自B站莫烦python的<a href="https://www.bilibili.com/video/BV1wW411Y7ai">python基础教程</a><span id="more"></span></p><h2 id="python入门笔记"><a href="#python入门笔记" class="headerlink" title="python入门笔记"></a>python入门笔记</h2><h3 id="python的安装"><a href="#python的安装" class="headerlink" title="python的安装"></a>python的安装</h3><p><a href="https://www.python.org/downloads/">下载链接</a> 按需下载噢，建议直接下载3.5以上的版本，不推荐2.X版本</p><ul><li>macOS下的安装：直接一直点下一步即可</li><li>windows下的安装：点下一步即可，记得勾选“添加到command line…..”的那个选项噢（否则无法正常使用pip3）</li><li>linux下的安装：<a href="https://www.jianshu.com/p/fd75a5cfe4dd">转载一篇博客</a></li></ul><p>安装完成后进入命令行输入python3 显示如下界面：</p><p><img src="http://cdn.leafii.top/img/20220520104806.png" alt="python3成功安装后iterm界面" loading="lazy"></p><hr><h3 id="print函数"><a href="#print函数" class="headerlink" title="print函数"></a>print函数</h3><p>直接上代码吧 比较浅显易懂</p><pre class="language-python" data-language="python"><code class="language-python">say_hi <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你的第一行代码："</span><span class="token punctuation">,</span> say_hi<span class="token punctuation">)</span></code></pre><p>输出结果：</p><pre class="language-none"><code class="language-none">你的第一行代码： Hello World</code></pre><hr><h3 id="有关数学符号"><a href="#有关数学符号" class="headerlink" title="有关数学符号"></a>有关数学符号</h3><p>在数学里，“&#x3D;”就是等于的意思 但是在编程环境中“&#x3D;”就是赋值的意思，比如<code>sa y_hi = &quot;Hello World&quot;</code>就是把“Hello World”这个值赋值给名为say_hi的变量。在编程环境中的“&#x3D;&#x3D;”符号，才是用来判断是否相等的，比如<code>123==321</code>就会返回一个False值 QWQ！</p><p>还要记得在python里&#x2F;&#x2F;相当于整除，%相当于取余数噢</p><hr><h3 id="自变量variable"><a href="#自变量variable" class="headerlink" title="自变量variable"></a>自变量variable</h3><p>python不用定义类型，可以直接定义变量</p><pre class="language-python" data-language="python"><code class="language-python">apple <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span>APPLE_EGG <span class="token operator">=</span> <span class="token number">11</span>appleEgg <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>appleEgg<span class="token punctuation">)</span></code></pre><p>如同第二节里的say_hi 一样，apple和say_hi都是变量的名称，定义变量的方式就是如此</p><p><img src="http://cdn.leafii.top/img/20220520104910.png" alt="运行结果" loading="lazy"></p><hr><h3 id="关于循环与判断"><a href="#关于循环与判断" class="headerlink" title="关于循环与判断"></a>关于循环与判断</h3><ul><li>while循环</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#while循环</span>num1 <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">while</span><span class="token punctuation">(</span>num1 <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"现在num的值为："</span><span class="token punctuation">,</span>num1<span class="token punctuation">,</span><span class="token string">"num自增1！"</span><span class="token punctuation">)</span>    num1 <span class="token operator">=</span> num1 <span class="token operator">+</span> <span class="token number">1</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">现在num的值为： 3 num自增1！现在num的值为： 4 num自增1！现在num的值为： 5 num自增1！现在num的值为： 6 num自增1！现在num的值为： 7 num自增1！现在num的值为： 8 num自增1！</code></pre><ul><li>for循环</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#迭代遍历</span>a_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> a_list<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">#使用下标遍历</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>a_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 关于range：range(1,3) --> 1 2 (左闭右开) len(a_list)就是返回a_list这个list的长度</span></code></pre><p>运行结果：</p><p><img src="http://cdn.leafii.top/img/20220520104947.png" alt="for循环代码运行结果" loading="lazy"></p><ul><li>enumerate()函数</li></ul><p>Python 的 enumerate() 函数就像是一个神秘的黑箱，你无法简单地用一句话来概括这个函数的作用与用法。</p><p>enumerate() 函数属于非常有用的高级用法，而对于这一点，很多初学者甚至中级学者都没有意识到。这个函数的基本应用就是用来遍历一个<a href="https://so.csdn.net/so/search?q=%E9%9B%86%E5%90%88&spm=1001.2101.3001.7020">集合</a>对象，它在遍历的同时还可以得到当前元素的索引位置。</p><pre class="language-python" data-language="python"><code class="language-python">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Alice"</span><span class="token punctuation">,</span><span class="token string">"Bob"</span><span class="token punctuation">,</span><span class="token string">"Carl"</span><span class="token punctuation">]</span><span class="token keyword">for</span> index<span class="token punctuation">,</span>value <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''0: Alice1: Bob2: Carl'''</span></code></pre><p>有很多从C或Java背景转过来的新的Python开发人员有时使用下面这种range(len(…))方法来保存运行中每个元素的索引，同时再用for循环遍历列表：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 警告: 不建议这么写</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>my_items<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> my_items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>通过巧妙地使用enumerate()函数，就像我在上面的“names”例子中写的那样，你可以使你的循环结构看起来更Pythonic和地道。</p><p>你不再需要在Python代码中专门去生成元素索引，而是将所有这些工作都交给enumerate()函数处理即可。这样，你的代码将更容易被阅读，而且减少写错代码的影响。（译者注：写的代码越多，出错几率越高，尽量将自己的代码看起来简洁，易读，Pythonic，才是我们的追求)</p><p>另一个有用的特性是，enumerate()函数允许我们为循环自定义起始索引值。enumerate()函数中接受一个可选参数，该参数允许你为本次循环中的计数器变量设置初始值：</p><pre class="language-python" data-language="python"><code class="language-python">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Alice"</span><span class="token punctuation">,</span><span class="token string">"Bob"</span><span class="token punctuation">,</span><span class="token string">"Carl"</span><span class="token punctuation">]</span><span class="token keyword">for</span> index<span class="token punctuation">,</span>value <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''1: Alice2: Bob3: Carl'''</span><span class="token comment">##这段代码演示的就是如何将Python的enumerate()函数默认0起始索引值修改为1</span></code></pre><ul><li>if，if else，if elif else</li></ul><pre class="language-python" data-language="python"><code class="language-python">inin <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个数字"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> inin <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这个数字小于0"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> inin <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这个数字等于3"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment">#else是相对于if来说的</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这个数字大于等于0且不等于3"</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><p><img src="http://cdn.leafii.top/img/20220520105046.png" alt="if判断代码运行结果" loading="lazy"></p><hr><h3 id="使用def定义函数"><a href="#使用def定义函数" class="headerlink" title="使用def定义函数"></a>使用def定义函数</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># a,b为参数 函数可以有返回值也可以没有噢</span>    c <span class="token operator">=</span> a<span class="token operator">+</span>b    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment">#可以通过运行结果看到调用的顺序</span>    <span class="token keyword">return</span> c<span class="token keyword">print</span><span class="token punctuation">(</span>fun<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">35</code></pre><ul><li>函数默认参数</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#可以设置函数的参数为默认值，未写明的调用就直接用定义好的调用值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token comment">#请注意未定义好初始值的变量不能在已经定义好初始值的变量后面</span>fun1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>fun1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">1 30 201 2 3</code></pre><hr><h3 id="全局变量-amp-局部变量"><a href="#全局变量-amp-局部变量" class="headerlink" title="全局变量&amp;局部变量"></a>全局变量&amp;局部变量</h3><pre class="language-python" data-language="python"><code class="language-python">APPLE <span class="token operator">=</span> <span class="token number">100</span>a <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a    <span class="token comment">#不加global a就会None</span>    a <span class="token operator">=</span> <span class="token number">20</span>    <span class="token keyword">global</span> b    b <span class="token operator">=</span> <span class="token number">120</span>    <span class="token string">'print(a)'</span>    <span class="token keyword">return</span> a<span class="token operator">+</span><span class="token number">103</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'past a:'</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"later a:"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token comment">#通过添加global，使原来是局部变量作用域的变量变为全局变量</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">past a: None123120later a: 20</code></pre><hr><h3 id="模块安装"><a href="#模块安装" class="headerlink" title="模块安装"></a>模块安装</h3><ul><li>macOS&#x2F;Linux下的模块安装：使用终端里的iterm即可：</li></ul><p><img src="http://cdn.leafii.top/img/20220520105116.png" alt="模块安装" loading="lazy"></p><ul><li>Windows下的安装：去官网下载</li></ul><hr><h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><ul><li>创建一个文件并向其写入一些文字</li></ul><pre class="language-python" data-language="python"><code class="language-python">text <span class="token operator">=</span> <span class="token string">"This is my first test.\nThis is next line.\nThis is last line"</span><span class="token comment">#\n代表回车，在文件中就相当于输入一个句子换行</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>my_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'my file.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>my_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span>my_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#open函数第一个参数是要打开的文件的文件名，第二个参数是打开方式，w代表写，r代表只读，如果以w方式打开不存在的文件则会直接创建新文件，编辑完文件记得使用close方法保存文件</span></code></pre><ul><li>使用append打开方式（a）向文件末尾添加文字</li></ul><pre class="language-python" data-language="python"><code class="language-python">append_text <span class="token operator">=</span> <span class="token string">"\nThis is appended file."</span><span class="token comment">#a的意思是append</span>my_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"my file.txt"</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>my_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>append_text<span class="token punctuation">)</span>my_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>读取文件并print</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"my file.txt"</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token comment">#content = file.read()</span><span class="token comment">#readline是一行一行读</span>content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> content<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>second_read_time <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span>second_read_time<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">This is my first test.This is next line.This is last lineThis is appended file.This is appended file.[&#39;This is my first test.\n&#39;, &#39;This is next line.\n&#39;, &#39;This is last line\n&#39;, &#39;This is appended file.\n&#39;, &#39;This is appended file.&#39;] [&#39;This is my first test.\n&#39;, &#39;This is next line.\n&#39;, &#39;This is last line\n&#39;, &#39;This is appended file.\n&#39;, &#39;This is appended file.&#39;]</code></pre><hr><h3 id="类-class"><a href="#类-class" class="headerlink" title="类 class"></a>类 class</h3><ul><li><p>类的定义：</p><p>一般类名首字母大写 再跟上冒号，比如这样：</p></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Calculator</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"Casio Calculator"</span>    price <span class="token operator">=</span> <span class="token string">"199"</span>    <span class="token comment">#self是类内函数默认参数 self就是类本身 类似与java中的this</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        result <span class="token operator">=</span> x <span class="token operator">+</span> y        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">minus</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> x <span class="token operator">-</span> y        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">times</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> x <span class="token operator">*</span> y        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">divide</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> x <span class="token operator">/</span> y        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p>在类里可以定义属性，也可以定义类中的函数，但注意<strong>类中的函数参数列表的第一个参数必须是self，self类似于java对象中的this指针</strong></p><ul><li>类的实例化及调用：</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#类的实例化</span>cal <span class="token operator">=</span> Calculator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#类中的元素</span>cal<span class="token punctuation">.</span>name<span class="token comment">#类中的方法</span>cal<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><ul><li>类的__init__方法</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Calculator</span><span class="token punctuation">:</span>    <span class="token comment">#name = "Casio Calculator"</span>    <span class="token comment">#price = "199"</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>price<span class="token punctuation">,</span>height<span class="token punctuation">,</span>width<span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#init这个函数类似java中类的构造函数,但是类中的元素不像java需要提前定义好 类在初始化时会自动执行__init__()函数QWQ！</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'!!!initinit!!!'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>price <span class="token operator">=</span> price        self<span class="token punctuation">.</span>h <span class="token operator">=</span> height        self<span class="token punctuation">.</span>wi <span class="token operator">=</span> width        self<span class="token punctuation">.</span>we <span class="token operator">=</span> weight    <span class="token comment">#self是类内函数默认参数 self就是类本身 类似与java中的this</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        result <span class="token operator">=</span> x <span class="token operator">+</span> y        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">minus</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> x <span class="token operator">-</span> y        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">times</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> x <span class="token operator">*</span> y        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">divide</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> x <span class="token operator">/</span> y        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> </code></pre><hr><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><pre class="language-python" data-language="python"><code class="language-python">a_input <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'Please give me a number:'</span><span class="token punctuation">)</span> <span class="token comment">#return a string so it equals '1' not equals 1</span><span class="token keyword">if</span> a_input<span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"this is a good one"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> a_input<span class="token operator">==</span><span class="token string">'2'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"see you next time"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"FKU!"</span><span class="token punctuation">)</span>b_input <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'Please give me a b number:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#return a string so it equals '1' not equals 1</span><span class="token keyword">if</span> b_input<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"this is a good one"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> b_input<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"see you next time"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"FKU!"</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">Please give me a number:1this is a good onePlease give me a b number:3FKU!</code></pre><p><strong>请注意，python3中的input，默认输入的是字符串，记得转格式再使用</strong></p><hr><h3 id="元组-amp-列表-amp-字典"><a href="#元组-amp-列表-amp-字典" class="headerlink" title="元组&amp;列表&amp;字典"></a>元组&amp;列表&amp;字典</h3><ul><li>元组(tuple)</li></ul><p>元组tuple最大的特征是内容不可变，因此使用频率低，一般常用List</p><ul><li>列表(List)</li></ul><p>列表是我们最常用的一种存储数据机制。它就像一个抽屉一样，存放着各种信息，每一格都是一个存储单元，每一格都可以单独获取。</p><pre class="language-python" data-language="python"><code class="language-python">files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"f1.txt"</span><span class="token punctuation">,</span> <span class="token string">"f2.txt"</span><span class="token punctuation">,</span> <span class="token string">"f3.txt"</span><span class="token punctuation">,</span> <span class="token string">"f4.txt"</span><span class="token punctuation">,</span> <span class="token string">"f5.txt"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"files[0] "</span><span class="token punctuation">,</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"files[3] "</span><span class="token punctuation">,</span> files<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"files[-1] "</span><span class="token punctuation">,</span> files<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"files[-3] "</span><span class="token punctuation">,</span> files<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>运行结果</p><pre class="language-none"><code class="language-none">files[0]  f1.txtfiles[3]  f4.txtfiles[-1]  f5.txtfiles[-3]  f3.txt</code></pre><p>在列表中，既然你已经把东西按顺序存放到抽屉中了，那你就可以按照顺序拿到你存放的东西。 在Python中，我们将上面的数字号叫做 index 索引。现实中第1个位置的东西，在Python中，是第0位。 <strong>所以Python的第一个索引永远都是 0。</strong> 除了正着来取东西，我们完全也可以反着来取东西，第一个反着取的序号是 <strong>-1</strong>。以此类推，-3 这个索引就是倒着数第三个。</p><p>而且在Python中，还很方便的可以一次性拿到多个抽屉的结果。比如下面我们就来演示一下取从多少位到多少位的东西。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"files[:3] "</span><span class="token punctuation">,</span> files<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"files[2:4] "</span><span class="token punctuation">,</span> files<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"files[-3:] "</span><span class="token punctuation">,</span> files<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">files[:3]  [&#39;f1.txt&#39;, &#39;f2.txt&#39;, &#39;f3.txt&#39;]files[2:4]  [&#39;f3.txt&#39;, &#39;f4.txt&#39;]files[-3:]  [&#39;f3.txt&#39;, &#39;f4.txt&#39;, &#39;f5.txt&#39;]</code></pre><p><strong>在列表中，你可以存放不同类型的元素，字符，数字，甚至列表里还能有列表。</strong></p><ul><li>多维List</li></ul><pre class="language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>multi_dim_a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>multi_dim_a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">13</code></pre><ul><li>字典(dictionary)</li></ul><p>key-&gt;value  一一对应 这里的key对应的就是list中的index哦！这个字典中的 key 都是唯一的，如果你的抽屉出现了重名，我相信你应该也不知道到底是哪个抽屉放着想要找的东西吧。 而 value 是多样的，你可以放一个字符，一个数字，甚至一个列表，甚至是另一个字典。当你想要索引的时候，用 key 就能找到里面的内容。同列表，字典也是可以修改的。</p><pre class="language-python" data-language="python"><code class="language-python">a_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'apple'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'pear'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span>d2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">'abandon'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token string">'bear'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token string">'ciliba'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>d2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#删除字典元素 del</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">del</span> d<span class="token punctuation">[</span><span class="token string">'orange'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment">#添加元素的话直接定义就行</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>d<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment">#字典里也可以加字典 function</span>dd <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'apple'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'pear'</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string">'a'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dd<span class="token punctuation">[</span><span class="token string">'pear'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p> 运行结果：</p><pre class="language-none"><code class="language-none">abandon1&#123;&#39;apple&#39;: 1, &#39;pear&#39;: 2, &#39;orange&#39;: 3&#125;&#123;&#39;apple&#39;: 1, &#39;pear&#39;: 2&#125;&#123;&#39;apple&#39;: 1, &#39;pear&#39;: 2&#125;&#123;&#39;apple&#39;: 1, &#39;pear&#39;: 2, &#39;b&#39;: 20&#125;a</code></pre><hr><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul><li>载入模块</li></ul><p>可以使用<code>import 模块名</code> 来载入模块，也可以用<code>import time as t</code>使t成为被引入模块time的别名，方便调用。如果只想使用一个模块中的部分功能：<code>from time import time,localtime</code>,其中time，localtime就是time模块中的两个方法名。也可以使用from引入模块中的所有方法，引入后调用方法无需输入方法前的模块名，如<code>from time import *</code></p><ul><li>自定义模块</li></ul><p>自己编写的.py文件和当前在编码的文件同路径时，直接使用import引入即可，或者把自己编写的.py文件复制&#x2F;移动到python系统下载其他模块的默认目录中也可以。</p><hr><h3 id="continue-amp-break"><a href="#continue-amp-break" class="headerlink" title="continue&amp;break"></a>continue&amp;break</h3><ul><li>在没有continue，break时：</li></ul><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">while</span> a<span class="token punctuation">:</span>    b <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'type sth:'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> b<span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"finish running"</span><span class="token punctuation">)</span></code></pre><ul><li>有break时</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'type sth:'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> b<span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"still in while"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"finish running"</span><span class="token punctuation">)</span></code></pre><ul><li>有continue时 continue跳过循环范围内的的后续代码:else … print… 从而不输出still in while</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'type sth:'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> b<span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">:</span>d        <span class="token keyword">continue</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"still in while"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"finish running"</span><span class="token punctuation">)</span></code></pre><hr><h3 id="错误处理try"><a href="#错误处理try" class="headerlink" title="错误处理try"></a>错误处理try</h3><ul><li>没有try时</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'eee.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token comment">#如果文件名输入错误，或者文件不存在时会直接报错，影响程序后续执行</span></code></pre><ul><li>使用try</li></ul><pre class="language-python" data-language="python"><code class="language-python">filename <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'input file name:'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'r+'</span><span class="token punctuation">)</span><span class="token comment"># 捕获错误</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'there is no file QWQ'</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'do you want to create a new file?(y/n)'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> response <span class="token operator">==</span> <span class="token string">'y'</span><span class="token punctuation">:</span>        <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token comment">#如果try成功了</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h3 id="使用lambda，zip，map"><a href="#使用lambda，zip，map" class="headerlink" title="使用lambda，zip，map"></a>使用lambda，zip，map</h3><p>map 分两部分 功能和参数合起来，lambda相当于简化的功能&#x2F;函数，zip是迭代器所需要的东西，直接上代码：</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token comment">#zip是把a和b竖向合并</span><span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token comment">#zip返回值是一个功能</span>ll <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token comment">##[(1, 4), (2, 5), (3, 6)] 此为print(ll)的结果</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>j<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">## 0.5 8</span><span class="token comment">## 1.0 10</span><span class="token comment">## 1.5 12</span><span class="token comment">#能否zip更多元素？</span>lll <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lll<span class="token punctuation">)</span><span class="token comment">##[(1, 1, 4), (2, 2, 5), (3, 3, 6)]  此为print(lll)的结果</span><span class="token comment">#lambda:</span><span class="token comment"># 未使用lambda</span><span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fun1<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">## 5</span>  <span class="token comment"># 使用lambda 可提高代码可读性</span>fun2 <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>x<span class="token operator">+</span>y<span class="token keyword">print</span><span class="token punctuation">(</span>fun2<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">## 5</span><span class="token comment">#map</span><span class="token comment">#把已知的功能加上所要给的参数一起输入运算 是一个object</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span>fun1<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">## [10]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span>fun1<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">## [5, 7, 9]</span></code></pre><hr><h3 id="深复制-amp-浅复制"><a href="#深复制-amp-浅复制" class="headerlink" title="深复制&amp;浅复制"></a>深复制&amp;浅复制</h3><ul><li><p>浅复制与深复制的区别：浅拷贝，拷贝父对象不会拷贝子对象，深拷贝的话完全拷贝父及子对象</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> copya <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> a<span class="token comment">#id是在硬盘中的索引</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">11</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">12</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment">#改变a的值，b也跟着变</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">==</span><span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#浅复制 只复制值 不复制地址</span>c <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">==</span><span class="token builtin">id</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">22222</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>d<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>e <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">==</span><span class="token builtin">id</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token builtin">id</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#True</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">333</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token comment">#所以浅复制的list中的list是无法幸免的 还是会被同步</span>e <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token builtin">id</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#False</span><span class="token comment">#list表有单独索引，这个不一样。但是表内元素索引一样的，说明都指向那个元素，感觉空间节省了。</span></code></pre></li></ul><hr><h3 id="pickle存放数据"><a href="#pickle存放数据" class="headerlink" title="pickle存放数据"></a>pickle存放数据</h3><p>可以使用pickle保存一些你之后想再次利用的数据，以二进制形式保存噢，后缀名一般为.pickle。</p><ul><li>保存数据</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token comment">#可以在你想保存运算结果时做到保存和提取的功能</span>a_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'da'</span><span class="token punctuation">:</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'23'</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">:</span><span class="token string">'sad'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'pickle_example.pickle'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token comment">#dump()函数！！file的后缀名记得是.pickle哦</span>pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>a_dict<span class="token punctuation">,</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>从.pickle文件中读取数据</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'pickle_example.pickle'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span><span class="token comment">#使用with开头的这个句子不用file.close()诶 好神奇qwq！</span><span class="token comment">#file = open('pickle_example.pickle','rb')</span>    a_dict1 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a_dict1<span class="token punctuation">)</span><span class="token comment">#file.close()</span></code></pre><hr><h3 id="使用set来找不同"><a href="#使用set来找不同" class="headerlink" title="使用set来找不同"></a>使用set来找不同</h3><pre class="language-python" data-language="python"><code class="language-python">char_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>char_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#&#123;'a', 'c', 'b', 'd'&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>char_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#&lt;class 'set'></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#&lt;class 'dict'></span>sentence <span class="token operator">=</span> <span class="token string">'Welcome Back to This Tutorial'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#&#123;'T', 'W', 'h', 'i', 'r', 'o', 'm', 'a', ' ', 'u', 'e', 'c', 'B', 't', 'l', 's', 'k'&#125;</span><span class="token comment">#print(set([sentence,char_list])) 会报错 不能传列表+列表的形式</span>unique_char <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>char_list<span class="token punctuation">)</span>unique_char<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>unique_char<span class="token punctuation">)</span><span class="token comment">#&#123;'b', 'a', 'x', 'd', 'c'&#125;</span><span class="token comment">#unique_char.add(['a','x']) 也错了捏</span><span class="token comment">#可以减东西吗？qwq</span>unique_char<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>unique_char<span class="token punctuation">)</span><span class="token comment">#单独去除东西呢？</span>unique_char<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token comment">#返回值为None哦 打印出的结果就是None</span><span class="token keyword">print</span><span class="token punctuation">(</span>unique_char<span class="token punctuation">)</span><span class="token comment">#&#123;'a', 'c', 'd', 'b'&#125;</span><span class="token comment">#如果remove一个不存在的元素，就会报错 所以使用discard()</span><span class="token keyword">print</span><span class="token punctuation">(</span>unique_char<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>unique_char<span class="token punctuation">)</span><span class="token comment">#比较两个set set1=&#123;'b', 'a', 'x', 'd', 'c'&#125; set2 = &#123;'a','e','i'&#125;</span>set1 <span class="token operator">=</span> unique_charset2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>set2<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#&#123;'e', 'i'&#125; differece是做差 不具备可交换性</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#&#123;'x', 'b', 'd', 'c'&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#&#123;'a'&#125; intersection为取交集</span><span class="token keyword">print</span><span class="token punctuation">(</span>set2<span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#&#123;'a'&#125;</span></code></pre><hr><h3 id="RegEx-正则表达"><a href="#RegEx-正则表达" class="headerlink" title="RegEx 正则表达"></a>RegEx 正则表达</h3><p>请参考<a href="https://mofanpy.com/tutorials/python-basic/interactive-python/regex/">这个链接</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文章旨在记录本人python基础语法学习的回顾总结。知识点来自B站莫烦python的&lt;a href=&quot;https://www.bilibili.com/video/BV1wW411Y7ai&quot;&gt;python基础教程&lt;/a&gt;</summary>
    
    
    
    
    <category term="python" scheme="tags/python/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树的操作（pta题目）</title>
    <link href="2022/03/29/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%93%8D%E4%BD%9C%EF%BC%88pta%E9%A2%98%E7%9B%AE%EF%BC%89/"/>
    <id>2022/03/29/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%93%8D%E4%BD%9C%EF%BC%88pta%E9%A2%98%E7%9B%AE%EF%BC%89/</id>
    <published>2022-03-29T05:29:16.000Z</published>
    <updated>2022-05-20T06:57:29.013Z</updated>
    
    <content type="html"><![CDATA[<p>本题要求实现给定二叉搜索树的5种常用操作。</p><span id="more"></span>函数接口定义：<pre class="language-C" data-language="C"><code class="language-C">BinTree Insert( BinTree BST, ElementType X );BinTree Delete( BinTree BST, ElementType X );Position Find( BinTree BST, ElementType X );Position FindMin( BinTree BST );Position FindMax( BinTree BST );</code></pre><p>其中BinTree结构定义如下：</p><pre class="language-C" data-language="C"><code class="language-C">typedef struct TNode *Position;typedef Position BinTree;struct TNode&#123;    ElementType Data;    BinTree Left;    BinTree Right;&#125;;</code></pre><ul><li>函数<code>Insert</code>将<code>X</code>插入二叉搜索树<code>BST</code>并返回结果树的根结点指针；</li><li>函数<code>Delete</code>将<code>X</code>从二叉搜索树<code>BST</code>中删除，并返回结果树的根结点指针；如果<code>X</code>不在树中，则打印一行<code>Not Found</code>并返回原树的根结点指针；</li><li>函数<code>Find</code>在二叉搜索树<code>BST</code>中找到<code>X</code>，返回该结点的指针；如果找不到则返回空指针；</li><li>函数<code>FindMin</code>返回二叉搜索树<code>BST</code>中最小元结点的指针；</li><li>函数<code>FindMax</code>返回二叉搜索树<code>BST</code>中最大元结点的指针。</li></ul><h2 id="裁判测试程序样例："><a href="#裁判测试程序样例：" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h2><pre class="language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef int ElementType;typedef struct TNode *Position;typedef Position BinTree;struct TNode&#123;    ElementType Data;    BinTree Left;    BinTree Right;&#125;;void PreorderTraversal( BinTree BT ); &#x2F;* 先序遍历，由裁判实现，细节不表 *&#x2F;void InorderTraversal( BinTree BT );  &#x2F;* 中序遍历，由裁判实现，细节不表 *&#x2F;BinTree Insert( BinTree BST, ElementType X );BinTree Delete( BinTree BST, ElementType X );Position Find( BinTree BST, ElementType X );Position FindMin( BinTree BST );Position FindMax( BinTree BST );int main()&#123;    BinTree BST, MinP, MaxP, Tmp;    ElementType X;    int N, i;    BST &#x3D; NULL;    scanf(&quot;%d&quot;, &amp;N);    for ( i&#x3D;0; i&lt;N; i++ ) &#123;        scanf(&quot;%d&quot;, &amp;X);        BST &#x3D; Insert(BST, X);    &#125;    printf(&quot;Preorder:&quot;); PreorderTraversal(BST); printf(&quot;\n&quot;);    MinP &#x3D; FindMin(BST);    MaxP &#x3D; FindMax(BST);    scanf(&quot;%d&quot;, &amp;N);    for( i&#x3D;0; i&lt;N; i++ ) &#123;        scanf(&quot;%d&quot;, &amp;X);        Tmp &#x3D; Find(BST, X);        if (Tmp &#x3D;&#x3D; NULL) printf(&quot;%d is not found\n&quot;, X);        else &#123;            printf(&quot;%d is found\n&quot;, Tmp-&gt;Data);            if (Tmp&#x3D;&#x3D;MinP) printf(&quot;%d is the smallest key\n&quot;, Tmp-&gt;Data);            if (Tmp&#x3D;&#x3D;MaxP) printf(&quot;%d is the largest key\n&quot;, Tmp-&gt;Data);        &#125;    &#125;    scanf(&quot;%d&quot;, &amp;N);    for( i&#x3D;0; i&lt;N; i++ ) &#123;        scanf(&quot;%d&quot;, &amp;X);        BST &#x3D; Delete(BST, X);    &#125;    printf(&quot;Inorder:&quot;); InorderTraversal(BST); printf(&quot;\n&quot;);    return 0;&#125;&#x2F;* 你的代码将被嵌在这里 *&#x2F;</code></pre><h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><pre class="language-none"><code class="language-none">105 8 6 2 4 1 0 10 9 756 3 10 0 555 7 0 10 3</code></pre><h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><pre class="language-none"><code class="language-none">Preorder: 5 2 1 0 4 8 6 7 10 96 is found3 is not found10 is found10 is the largest key0 is found0 is the smallest key5 is foundNot FoundInorder: 1 2 4 6 8 9</code></pre><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><pre class="language-C" data-language="C"><code class="language-C">BinTree Insert( BinTree BST, ElementType X )&#123;    &#x2F;&#x2F;如果是一个空节点    if(!BST)&#123;        BST &#x3D; (BinTree)malloc(sizeof(struct TNode));&#x2F;&#x2F;既然为空所以要生成一个        BST-&gt;Data &#x3D; X;        BST-&gt;Left &#x3D; NULL;        BST-&gt;Right &#x3D; NULL;    &#125;    else&#123;&#x2F;&#x2F;一般情况        if(X &lt; BST-&gt;Data)&#123;&#x2F;&#x2F;插入值小于节点，应该往左子树中找位置            BST-&gt;Left &#x3D; Insert(BST-&gt;Left,X);&#x2F;&#x2F;递归插入左子树        &#125;        else if(X &gt; BST-&gt;Data)&#123;&#x2F;&#x2F;插入值大于节点，应该往右子树中找            BST-&gt;Right &#x3D; Insert(BST-&gt;Right,X);&#x2F;&#x2F;递归插入右子树        &#125;        &#x2F;&#x2F;如果相等说明X已经存在，什么也不做    &#125;    return BST;&#125;Position Find( BinTree BST, ElementType X )&#123;    while(BST)&#123;&#x2F;&#x2F;直接循环查找，类似链表        if(X &lt; BST-&gt;Data)&#123;            BST &#x3D; BST-&gt;Left;&#x2F;&#x2F;小于节点，找左子树        &#125;        else if(X &gt; BST-&gt;Data)&#123;&#x2F;&#x2F;大于节点，找右子树            BST &#x3D; BST-&gt;Right;        &#125;        else&#123;&#x2F;&#x2F;相等则找到            return BST;        &#125;    &#125;    return NULL;&#125;Position FindMin( BinTree BST )&#123;    if(!BST)&#123;        return NULL;    &#125;    else if(!BST-&gt;Left)        return BST;    else return FindMin(BST-&gt;Left);&#125;Position FindMax( BinTree BST )&#123;    if(!BST)return NULL;    else if(!BST-&gt;Right)return BST;    else return FindMax(BST-&gt;Right);&#125;BinTree Delete( BinTree BST, ElementType X )&#123;    Position temp;    if(!BST)&#123;        printf(&quot;Not Found\n&quot;);&#x2F;&#x2F;如果最终树为空，说明没有    &#125;    else&#123;&#x2F;&#x2F;这里类似于插入重点在于找到后怎么办        if(X &lt; BST-&gt;Data)&#123;            BST-&gt;Left &#x3D; Delete(BST-&gt;Left,X);&#x2F;&#x2F;从左子树递归删除        &#125;        else if(X &gt; BST-&gt;Data)&#123;            BST-&gt;Right &#x3D; Delete(BST-&gt;Right,X);&#x2F;&#x2F;从右子树递归删除        &#125;        else&#123;&#x2F;&#x2F;当前BST就是要删除的节点              if(BST-&gt;Left &amp;&amp; BST-&gt;Right)&#123;&#x2F;&#x2F;要被删除的节点有左右两个孩子，就从右子树中找最小的数填充删除的节点                temp &#x3D; FindMin(BST-&gt;Right);&#x2F;&#x2F;找最小                BST-&gt;Data &#x3D; temp-&gt;Data;&#x2F;&#x2F;填充删除的节点                BST-&gt;Right &#x3D; Delete(BST-&gt;Right,temp-&gt;Data);&#x2F;&#x2F;删除拿来填充的那个节点              &#125;              else&#123;&#x2F;&#x2F;只有一个子节点                temp &#x3D; BST;                if(!BST-&gt;Left)&#123;&#x2F;&#x2F;只有右节点                    BST &#x3D; BST-&gt;Right;&#x2F;&#x2F;直接赋值就可以                &#125;                else if(!BST-&gt;Right)&#123;&#x2F;&#x2F;只有左节点                    BST &#x3D; BST-&gt;Left;&#x2F;&#x2F;直接赋值就可以                &#125;                free(temp);&#x2F;&#x2F;如果啥也没有直接删除就可以，当然上面两种情况赋值后也要删除              &#125;        &#125;    &#125;    return BST;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;本题要求实现给定二叉搜索树的5种常用操作。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="tags/数据结构/"/>
    
  </entry>
  
  <entry>
    <title>macOs汇编入门(HelloWorld)</title>
    <link href="2021/05/13/macOs%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8-HelloWorld/"/>
    <id>2021/05/13/macOs%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8-HelloWorld/</id>
    <published>2021-05-13T08:11:30.000Z</published>
    <updated>2022-05-20T03:05:33.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="汇编入门"><a href="#汇编入门" class="headerlink" title="汇编入门"></a>汇编入门</h1><p>本文介绍在macOs下如何安装nasm以及在nasm下进行HelloWorld的编写</p><span id="more"></span><hr><h2 id="安装nasm"><a href="#安装nasm" class="headerlink" title="安装nasm"></a>安装nasm</h2><p>在终端中输入<code>brew install nasm</code>即可。默认的nasm版本太低无法写64位程序 呜呜！</p><ul><li>注：安装完成后输入命令nasm -v查看是否可以显示版本！可以显示版本就说明安装好了哦!</li></ul><p><img src="http://cdn.leafii.top/img/20220520110215.png" alt="安装成功" loading="lazy"></p><hr><h2 id="nasm的helloworld的编写"><a href="#nasm的helloworld的编写" class="headerlink" title="nasm的helloworld的编写"></a>nasm的helloworld的编写</h2><ol><li>编写以下代码(文件命名为helloworld.asm):</li></ol><pre class="language-nasm" data-language="nasm"><code class="language-nasm"><span class="token keyword">SECTION .data</span>   <span class="token label function">msg:</span> db <span class="token string">"hello world!"</span>, <span class="token number">0x0a</span><span class="token label function">len:</span> equ <span class="token operator">$</span><span class="token operator">-</span>msg  <span class="token keyword">SECTION .text</span><span class="token keyword">global _main</span>  <span class="token label function">kernel:</span>     syscall     ret <span class="token label function">_main:</span>     mov <span class="token register variable">rax</span>,<span class="token number">0x2000004</span>     mov <span class="token register variable">rdi</span>,<span class="token number">1</span>     mov <span class="token register variable">rsi</span>,msg     mov <span class="token register variable">rdx</span>,len     call kernel       mov <span class="token register variable">rax</span>,<span class="token number">0x2000001</span>     mov <span class="token register variable">rdi</span>,<span class="token number">0</span>     call kernel</code></pre><ol start="2"><li>保存后退出，进入iterm中该文件所在的目录，按ls确认当前文件是否在目录中</li></ol><p><img src="http://cdn.leafii.top/img/20220520110255.png" alt="确定文件" loading="lazy"></p><ol start="3"><li><p>输入以下命令生成helloworld.o文件：<code>nasm -f macho64 -o helloworld.o helloworld.asm</code></p><p><img src="http://cdn.leafii.top/img/20220520110333.png" alt="生成" loading="lazy"></p></li><li><p>输入以下命令生成helloworld可执行文件:<code>ld -o helloworld -e _main helloworld.o -lSystem</code></p></li></ol><p><img src="http://cdn.leafii.top/img/20220520110408.png" alt="生成可执行文件" loading="lazy"></p><ol start="5"><li>输入命令<code>./helloworld</code>运行可执行文件</li></ol><p><img src="http://cdn.leafii.top/img/20220520110441.png" alt="运行可执行文件" loading="lazy"></p><hr><p>参考链接：<a href="https://blog.csdn.net/u011987514/article/details/72615406">https://blog.csdn.net/u011987514/article/details/72615406</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;汇编入门&quot;&gt;&lt;a href=&quot;#汇编入门&quot; class=&quot;headerlink&quot; title=&quot;汇编入门&quot;&gt;&lt;/a&gt;汇编入门&lt;/h1&gt;&lt;p&gt;本文介绍在macOs下如何安装nasm以及在nasm下进行HelloWorld的编写&lt;/p&gt;</summary>
    
    
    
    
    <category term="nasm" scheme="tags/nasm/"/>
    
  </entry>
  
  <entry>
    <title>vim的配置及其使用</title>
    <link href="2021/04/27/vim%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/"/>
    <id>2021/04/27/vim%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/</id>
    <published>2021-04-27T07:35:24.000Z</published>
    <updated>2022-05-20T06:57:45.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vim的配置及其使用"><a href="#vim的配置及其使用" class="headerlink" title="vim的配置及其使用"></a>vim的配置及其使用</h1><p>本文将记录本人学习vim的一些笔记以及对自己mac上面的vim的一些配置。</p><span id="more"></span><hr><h2 id="vim教程"><a href="#vim教程" class="headerlink" title="vim教程"></a>vim教程</h2><p><code>vim 文件名</code> 进入vim (默认进入命令模式)</p><ul><li>输入<code>i</code> (it means insert)进入编辑模式(在当前字符前)</li><li>输入<code>a</code>(it means append)进入编辑模式（在当前字符后添加字符）</li><li>输入<code>shift+i </code>在行前插入</li><li>输入<code>shift+a</code> 在行尾插入</li><li>输入<code>o</code>在下一行进行插入</li><li>输入<code>shift + o</code> 在当前一行的上一行插入</li><li>按<code>esc</code>退出编辑模式</li></ul><p>退出编辑模式后，回到命令模式下</p><ul><li>按<code>w</code>(word)跳动到下一个单词</li><li>按<code>b</code>(back)跳动到上一个单词</li><li><code>control+f</code>(forward) 代表下一页（等同于pagedown）</li><li><code>control+b</code>(backward)代表上一页（等同于pageup）</li><li><code>数字+gg</code>跳转到指定行</li><li><code>xx+j/k</code>跳转到这一行的下&#x2F;上xx行 比如向上10行 就是10j，向下10行就是10k</li><li>命令输入错误可以按esc进行命令的清除</li><li><code>/word+回车</code>查找指定单词，按<code>n</code>查找符合条件的下一个 <code>shift+n</code>查找符合条件的上一个</li><li><code>?word+回车</code>查找指定单词，按<code>n</code>查找符合条件的上一个 <code>shift+n</code>查找符合条件的下一个</li><li><code>cc</code>剪切光标所在的一行 删除后自动进入编辑模式</li><li><code>c2c</code>连续剪切两行</li><li><code>p</code>粘贴命令 </li><li><code>u</code>（undo）恢复上一步操作</li></ul><p>按：就可以开始输入指令</p><ul><li><code>：w</code> 保存</li><li><code>：q</code> 退出</li><li></li></ul><hr><p>vim中的方向键</p><p>hjkl means 左下上右</p><hr><p>Visual模式： <code>v</code> 这时可以通过hjkl移动光标选择文本，再使用c（剪切）yy（复制）p（粘贴）</p><p>808</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;vim的配置及其使用&quot;&gt;&lt;a href=&quot;#vim的配置及其使用&quot; class=&quot;headerlink&quot; title=&quot;vim的配置及其使用&quot;&gt;&lt;/a&gt;vim的配置及其使用&lt;/h1&gt;&lt;p&gt;本文将记录本人学习vim的一些笔记以及对自己mac上面的vim的一些配置。&lt;/p&gt;</summary>
    
    
    
    
    <category term="vim" scheme="tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-1021-删除最外层的括号</title>
    <link href="2021/03/14/leetcode-1021-%E5%88%A0%E9%99%A4%E6%9C%80%E5%A4%96%E5%B1%82%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <id>2021/03/14/leetcode-1021-%E5%88%A0%E9%99%A4%E6%9C%80%E5%A4%96%E5%B1%82%E7%9A%84%E6%8B%AC%E5%8F%B7/</id>
    <published>2021-03-13T18:07:25.000Z</published>
    <updated>2022-05-20T08:01:43.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-1021-删除最外层的括号"><a href="#leetcode-1021-删除最外层的括号" class="headerlink" title="leetcode:1021.删除最外层的括号"></a>leetcode:1021.删除最外层的括号</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>有效括号字符串为空 <code>(&quot;&quot;)</code>、<code>&quot;(&quot; + A + &quot;)&quot; </code>或 <code>A + B</code>，其中 <code>A </code>和<code>B</code>都是有效的括号字符串，<code>+</code> 代表字符串的连接。例如，<code>&quot;&quot;</code>，<code>&quot;()&quot;</code>，<code>&quot;(())()&quot;</code> 和 <code>&quot;(()(()))&quot;</code> 都是有效的括号字符串。</p><p>如果有效字符串<code> S</code> 非空，且不存在将其拆分为 <code>S = A+B </code>的方法，我们称其为<strong>原语（primitive）</strong>，其中 <code>A </code>和 <code>B</code> 都是非空有效括号字符串。</p><p>给出一个非空有效字符串 <code>S</code>，考虑将其进行原语化分解，使得：<code>S = P_1 + P_2 + ... + P_k</code>，其中 <code>P_i </code>是有效括号字符串原语。</p><p>对<code> S</code> 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回<code>S</code>。</p><span id="more"></span><ul><li>示例1：</li></ul><pre class="language-none"><code class="language-none">输入：&quot;(()())(())&quot;输出：&quot;()()()&quot;解释：输入字符串为 &quot;(()())(())&quot;，原语化分解得到 &quot;(()())&quot; + &quot;(())&quot;，删除每个部分中的最外层括号后得到 &quot;()()&quot; + &quot;()&quot; &#x3D; &quot;()()()&quot;。</code></pre><ul><li>示例2:</li></ul><pre class="language-none"><code class="language-none">输入：&quot;(()())(())(()(()))&quot;输出：&quot;()()()()(())&quot;解释：输入字符串为 &quot;(()())(())(()(()))&quot;，原语化分解得到 &quot;(()())&quot; + &quot;(())&quot; + &quot;(()(()))&quot;，删除每个部分中的最外层括号后得到 &quot;()()&quot; + &quot;()&quot; + &quot;()(())&quot; &#x3D; &quot;()()()()(())&quot;。</code></pre><ul><li>示例3:</li></ul><pre class="language-none"><code class="language-none">输入：&quot;()()&quot;输出：&quot;&quot;解释：输入字符串为 &quot;()()&quot;，原语化分解得到 &quot;()&quot; + &quot;()&quot;，删除每个部分中的最外层括号后得到 &quot;&quot; + &quot;&quot; &#x3D; &quot;&quot;。</code></pre><p><small>提示：</small></p><ol><li><code>S.length &lt;= 10000</code></li><li><code>S[i]</code>为<code>(</code>或<code>)</code></li><li><code>S</code>是一个有效括号字符串</li></ol><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><ol><li>简洁的Java实现</li></ol><p>主要思路：定义level作为层数，初始化level为0，遍历输入的String对象的每个字符，如果遇到’(‘，就level++，如果遇到’)’就level–，如果level&gt;&#x3D;1，则在要输出的字符串末尾加上被遍历的字符，代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">removeOuterParentheses</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">S</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> outputStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> <span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                level<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>level <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                outputStr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">'('</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                level<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> outputStr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>作者：huaouo</p><ol start="2"><li>借助栈原语化分解后删除最外层括号——Java</li></ol><p>主要思路：遍历字符串，遇到左括号就入栈，遇到右括号就出栈，每次栈空的时候，都说明找到了一个原语，记录下每个原语的起始位置和结束位置，取原字符串在原语的起始位置+1到原语的结束位置的子串便得到原语删除了最外层括号的字符串，拼接，即可解出答案。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">removeOuterParentheses</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">S</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 初始化原语的起始位置</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 初始化原语的结束位置</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// 标志每个原语</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">'('</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 遇到左括号，入栈</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 遇到的第一个左括号，是原语的开始位置，记录下原语开始位置</span>                    start <span class="token operator">=</span> i<span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">')'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 遇到右括号，出栈</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 当栈空的时候，找到了一个完整的原语</span>                    end <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">// 记录下结束位置</span>                    ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 去掉原语的最外层括号，并追加到答案中</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// 置标志为false，往后接着找下一个原语</span>                    start <span class="token operator">=</span> end<span class="token punctuation">;</span><span class="token comment">// 往后找，再次初始化原语开始位置</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>作者：zi-mo-10</p><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-outermost-parentheses">https://leetcode-cn.com/problems/remove-outermost-parentheses</a></p><p>链接：<a href="https://leetcode-cn.com/problems/remove-outermost-parentheses/solution/jian-ji-de-java-shi-xian-by-huaouo/">https://leetcode-cn.com/problems/remove-outermost-parentheses/solution/jian-ji-de-java-shi-xian-by-huaouo/</a></p><p>链接：<a href="https://leetcode-cn.com/problems/remove-outermost-parentheses/solution/chao-xiang-xi-ti-jie-si-lu-jie-zhu-zhan-yuan-yu-hu/">https://leetcode-cn.com/problems/remove-outermost-parentheses/solution/chao-xiang-xi-ti-jie-si-lu-jie-zhu-zhan-yuan-yu-hu/</a></p><p>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;leetcode-1021-删除最外层的括号&quot;&gt;&lt;a href=&quot;#leetcode-1021-删除最外层的括号&quot; class=&quot;headerlink&quot; title=&quot;leetcode:1021.删除最外层的括号&quot;&gt;&lt;/a&gt;leetcode:1021.删除最外层的括号&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;有效括号字符串为空 &lt;code&gt;(&amp;quot;&amp;quot;)&lt;/code&gt;、&lt;code&gt;&amp;quot;(&amp;quot; + A + &amp;quot;)&amp;quot; &lt;/code&gt;或 &lt;code&gt;A + B&lt;/code&gt;，其中 &lt;code&gt;A &lt;/code&gt;和&lt;code&gt;B&lt;/code&gt;都是有效的括号字符串，&lt;code&gt;+&lt;/code&gt; 代表字符串的连接。例如，&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;，&lt;code&gt;&amp;quot;()&amp;quot;&lt;/code&gt;，&lt;code&gt;&amp;quot;(())()&amp;quot;&lt;/code&gt; 和 &lt;code&gt;&amp;quot;(()(()))&amp;quot;&lt;/code&gt; 都是有效的括号字符串。&lt;/p&gt;
&lt;p&gt;如果有效字符串&lt;code&gt; S&lt;/code&gt; 非空，且不存在将其拆分为 &lt;code&gt;S = A+B &lt;/code&gt;的方法，我们称其为&lt;strong&gt;原语（primitive）&lt;/strong&gt;，其中 &lt;code&gt;A &lt;/code&gt;和 &lt;code&gt;B&lt;/code&gt; 都是非空有效括号字符串。&lt;/p&gt;
&lt;p&gt;给出一个非空有效字符串 &lt;code&gt;S&lt;/code&gt;，考虑将其进行原语化分解，使得：&lt;code&gt;S = P_1 + P_2 + ... + P_k&lt;/code&gt;，其中 &lt;code&gt;P_i &lt;/code&gt;是有效括号字符串原语。&lt;/p&gt;
&lt;p&gt;对&lt;code&gt; S&lt;/code&gt; 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回&lt;code&gt;S&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="leetcode" scheme="tags/leetcode/"/>
    
    <category term="算法" scheme="tags/算法/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:1.两数之和</title>
    <link href="2021/03/13/leetcode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>2021/03/13/leetcode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2021-03-12T16:45:23.000Z</published>
    <updated>2022-05-20T10:46:24.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-1-两数之和"><a href="#leetcode-1-两数之和" class="headerlink" title="leetcode:1.两数之和"></a>leetcode:1.两数之和</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><span id="more"></span><p>你可以按任意顺序返回答案。</p><ul><li>示例1:</li></ul><pre class="language-none"><code class="language-none">输入：nums &#x3D; [2,7,11,15], target &#x3D; 9输出：[0,1]解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。</code></pre><ul><li>示例2</li></ul><pre class="language-none"><code class="language-none">输入：nums &#x3D; [3,2,4], target &#x3D; 6输出：[1,2]</code></pre><ul><li>示例3</li></ul><pre class="language-none"><code class="language-none">输入：nums &#x3D; [3,3], target &#x3D; 6输出：[0,1]</code></pre><p><small>提示：</small></p><ul><li><code>2 &lt;= nums.length &lt;= 10^3</code></li><li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li><li><code>-10^9 &lt;= target &lt;= 10^9</code></li></ul><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><ol><li>暴力解法</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                    <span class="token keyword">return</span> a<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>哈希表解法：</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> hashtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hashtable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>hashtable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*作者：LeetCode-Solution链接：https://leetcode-cn.com/problems/two-sum/solution/liang-shu-zhi-he-by-leetcode-solution/来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。*/</span></code></pre><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum">https://leetcode-cn.com/problems/two-sum</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;leetcode-1-两数之和&quot;&gt;&lt;a href=&quot;#leetcode-1-两数之和&quot; class=&quot;headerlink&quot; title=&quot;leetcode:1.两数之和&quot;&gt;&lt;/a&gt;leetcode:1.两数之和&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。&lt;/p&gt;
&lt;p&gt;你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。&lt;/p&gt;</summary>
    
    
    
    
    <category term="leetcode" scheme="tags/leetcode/"/>
    
    <category term="算法" scheme="tags/算法/"/>
    
  </entry>
  
  <entry>
    <title>IDEA2020版如何创建Servlet的javaWeb项目</title>
    <link href="2021/03/05/IDEA2020%E7%89%88%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BAServlet%E7%9A%84javaWeb%E9%A1%B9%E7%9B%AE/"/>
    <id>2021/03/05/IDEA2020%E7%89%88%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BAServlet%E7%9A%84javaWeb%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-03-05T05:01:33.000Z</published>
    <updated>2022-05-20T06:19:47.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA2020版如何创建Servlet的javaWeb项目"><a href="#IDEA2020版如何创建Servlet的javaWeb项目" class="headerlink" title="IDEA2020版如何创建Servlet的javaWeb项目"></a>IDEA2020版如何创建Servlet的javaWeb项目</h1><p>2020款idea很多地方都变了，昨天在创建javaweb项目中发现已经不会创建了，所以我写这篇笔记记录一下QAQ</p><span id="more"></span><h2 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h2><p>主要思路：先创建空白项目，然后添加框架支持。</p><ol><li>在idea中点击file-&gt;new-&gt;Project&#x2F;Module；</li></ol><p><img src="http://cdn.leafii.top/img/20220520110725.png" loading="lazy"></p><ol start="2"><li>在选中Java的情况下，直接点击Next；</li></ol><p><img src="http://cdn.leafii.top/img/20220520110904.png" loading="lazy"></p><ol start="3"><li>然后再点击下一步；</li></ol><p><img src="http://cdn.leafii.top/img/20220520110921.png" loading="lazy"></p><ol start="4"><li>填写你的项目名称和位置，点击finish;</li></ol><p><img src="http://cdn.leafii.top/img/20220520110957.png" loading="lazy"></p><ol start="5"><li><p>此时的工程目录结构如下：，我们在工程的文件夹上鼠标右键-&gt;add FrameWork Support ；<img src="http://cdn.leafii.top/img/20220520111035.png" loading="lazy"><img src="http://cdn.leafii.top/img/20220520111157.png" loading="lazy"></p></li><li><p>在新的页面勾选Web Application，并点击OK；<img src="http://cdn.leafii.top/img/20220520114704.png" loading="lazy"></p></li><li><p>在WEB-INF中增加 classes 和 lib<img src="http://cdn.leafii.top/img/20220520141823.png" loading="lazy"></p></li><li><p>进入Project Structure配置classes和lib两个目录<img src="http://cdn.leafii.top/img/20220520141844.png" loading="lazy"></p></li><li><p>添加TomCat到Idea中，点击AddConfiguration，点击新窗口左上角的+号，选择Tomcat下的local，配置好tomcat的路径，然后在deployment标签下添加你的项目的exploded包，点击OK;<img src="http://cdn.leafii.top/img/20220520141902.png" loading="lazy"></p></li><li><p>配置ServletApi到工程的运行库里：点击File-&gt;Project Structure,点击Modules标签，点击下方的+号，选择Library…，然后选择你的相应的Tomcat，点击ok，就可以添加ServletApi到你的项目中。<img src="http://cdn.leafii.top/img/20220520141920.png" loading="lazy"></p></li><li><p>新建一个Servlet类，这个就不截图了奥直接上代码</p></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了Servlet哦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="12"><li>对应的web.xml文件</li></ol><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>top.leafii.servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><ol start="13"><li>调用了HelloServlet后<img src="http://cdn.leafii.top/img/20220520141942.png" loading="lazy"></li></ol><p>可以看到 已经完成了 可以开始你的javaWeb之旅了</p><hr><p>参考链接：<a href="https://blog.csdn.net/gaoqingliang521/article/details/108677301">IntelliJ IDEA创建Servlet最新方法 Idea版本2020.2.2以及IntelliJ IDEA创建Servlet 404问题（超详细）_gaoqingliang521的专栏-CSDN博客</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;IDEA2020版如何创建Servlet的javaWeb项目&quot;&gt;&lt;a href=&quot;#IDEA2020版如何创建Servlet的javaWeb项目&quot; class=&quot;headerlink&quot; title=&quot;IDEA2020版如何创建Servlet的javaWeb项目&quot;&gt;&lt;/a&gt;IDEA2020版如何创建Servlet的javaWeb项目&lt;/h1&gt;&lt;p&gt;2020款idea很多地方都变了，昨天在创建javaweb项目中发现已经不会创建了，所以我写这篇笔记记录一下QAQ&lt;/p&gt;</summary>
    
    
    
    
    <category term="javaWeb" scheme="tags/javaWeb/"/>
    
  </entry>
  
</feed>
