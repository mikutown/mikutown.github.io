<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LeafiiのBlog</title>
  
  
  <link href="https://mikutown.gitee.io/blog/atom.xml" rel="self"/>
  
  <link href="https://mikutown.gitee.io/blog/"/>
  <updated>2021-01-19T11:23:29.757Z</updated>
  <id>https://mikutown.gitee.io/blog/</id>
  
  <author>
    <name>Leafii</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go语言の函数、包和错误处理</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/19/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E5%87%BD%E6%95%B0%E3%80%81%E5%8C%85%E5%92%8C%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/19/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E5%87%BD%E6%95%B0%E3%80%81%E5%8C%85%E5%92%8C%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</id>
    <published>2021-01-19T07:49:52.000Z</published>
    <updated>2021-01-19T11:23:29.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go语言の函数、包和错误处理"><a href="#Go语言の函数、包和错误处理" class="headerlink" title="Go语言の函数、包和错误处理"></a>Go语言の函数、包和错误处理</h1><p>本文章主要讲解了Go语言的函数，包和错误处理等知识。</p><a id="more"></a><h2 id="为什么需要函数"><a href="#为什么需要函数" class="headerlink" title="为什么需要函数"></a>为什么需要函数</h2><h3 id="完成需求"><a href="#完成需求" class="headerlink" title="完成需求"></a>完成需求</h3><p>输入两个数，再输入一个运算符（+-*/），得到结果。</p><h3 id="使用传统的方法解决"><a href="#使用传统的方法解决" class="headerlink" title="使用传统的方法解决"></a>使用传统的方法解决</h3><ul><li>代码</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> n1 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">1.2</span><span class="token keyword">var</span> n2 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">2.3</span><span class="token keyword">var</span> operator <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token string">'-'</span><span class="token keyword">switch</span> operator <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token string">'+'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v + %v = %v\n"</span><span class="token punctuation">,</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">'-'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v - %v = %v\n"</span><span class="token punctuation">,</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n1 <span class="token operator">-</span> n2<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">'*'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v * %v = %v\n"</span><span class="token punctuation">,</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n1 <span class="token operator">*</span> n2<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">'/'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v / %v = %v\n"</span><span class="token punctuation">,</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n1 <span class="token operator">/</span> n2<span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go1.2 - 2.3 &#x3D; -1.0999999999999999</code></pre><ul><li>分析上面的代码问题<ol><li>可以完成功能需求，但代码冗余</li><li>与此同时不利于代码的维护</li><li>函数可以解决这个问题奥</li></ol></li></ul><h2 id="函数的基本概念"><a href="#函数的基本概念" class="headerlink" title="函数的基本概念"></a>函数的基本概念</h2><p>​    为完成某一功能的程序指令（语句）的集合，称为函数。</p><p>在Go中，函数分为：自定义函数、系统函数（查看Go编程手册）</p><h2 id="函数的基本语法"><a href="#函数的基本语法" class="headerlink" title="函数的基本语法"></a>函数的基本语法</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> 函数名 <span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span> <span class="token punctuation">(</span>返回值列表<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  执行语句<span class="token operator">...</span>  <span class="token keyword">return</span> 返回值列表<span class="token punctuation">&#125;</span></code></pre><ol><li>形参列表：表示函数的输入</li><li>函数的语句：表示为了实现某一功能代码块</li><li>函数可以有返回值，也可以没有</li></ol><h2 id="快速入门案例"><a href="#快速入门案例" class="headerlink" title="快速入门案例"></a>快速入门案例</h2><p>使用函数解决前面的计算问题。</p><p>走代码：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">cal</span><span class="token punctuation">(</span>n1 <span class="token builtin">float64</span><span class="token punctuation">,</span>n2 <span class="token builtin">float64</span><span class="token punctuation">,</span> operator <span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> res <span class="token builtin">float64</span><span class="token keyword">switch</span> operator <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token string">'+'</span><span class="token punctuation">:</span>res <span class="token operator">=</span> n1 <span class="token operator">+</span> n2<span class="token keyword">case</span> <span class="token string">'-'</span><span class="token punctuation">:</span>res <span class="token operator">=</span> n1 <span class="token operator">-</span> n2<span class="token keyword">case</span> <span class="token string">'*'</span><span class="token punctuation">:</span>res <span class="token operator">=</span> n1 <span class="token operator">*</span> n2<span class="token keyword">case</span> <span class="token string">'/'</span><span class="token punctuation">:</span>res <span class="token operator">=</span> n1 <span class="token operator">/</span> n2<span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"操作符号错误哦！"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> n1 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">1.2</span><span class="token keyword">var</span> n2 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">2.3</span><span class="token keyword">var</span> operator <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token string">'+'</span>result <span class="token operator">:=</span> <span class="token function">cal</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> operator<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="包的引出"><a href="#包的引出" class="headerlink" title="包的引出"></a>包的引出</h2><ol><li>在实际的开发中，我们往往需要在不同的文件中，去调用其他文件的定义的函数，比如main.go中，去使用utils.go文件中的函数，如何实现？-&gt;包</li><li>现在有两个程序员共同开发一个Go项目，程序员xiaoming希望定义函数Cal，程序员xiaoqiang也想定义函数也叫Cal。两个程序员为此还吵了起来，怎么办？-&gt;包</li></ol><h2 id="包的原理图"><a href="#包的原理图" class="headerlink" title="包的原理图"></a>包的原理图</h2><p>包的本质实际上就是创建不同的文件夹，来存放程序文件。</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210119163512224.png" alt="image-20210119163512224" loading="lazy"></p><h2 id="包的基本概念"><a href="#包的基本概念" class="headerlink" title="包的基本概念"></a>包的基本概念</h2><p>​    说明：go的每一个文件都是属于一个包的，也就是说go是以包的形式来管理文件和项目目录结构的</p><h2 id="包的三大作用"><a href="#包的三大作用" class="headerlink" title="包的三大作用"></a>包的三大作用</h2><ul><li><p>区分相同名字的函数、变量等标识符</p></li><li><p>当程序文件很多时，可以很好的管理项目</p></li><li><p>控制函数、变量等访问范围，即作用域</p></li></ul><h2 id="包的相关说明"><a href="#包的相关说明" class="headerlink" title="包的相关说明"></a>包的相关说明</h2><ul><li><p>打包基本语法</p><p><code>package 包名</code></p></li><li><p>引入包的基本语法</p><p><code>import &quot;包的路径&quot;</code></p></li></ul><h2 id="包使用的快速入门"><a href="#包使用的快速入门" class="headerlink" title="包使用的快速入门"></a>包使用的快速入门</h2><p>包快速入门-Go相互调用函数，我们将func Cal定义到文件utils.go，将utils.go放到一个包中，当其它文件需要使用到utils.go的方法时，可以import该包，就可以使用了。【演示：新建项目的目录结构】</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210119182340923.png" alt="image-20210119182340923" loading="lazy"></p><ul><li>utils.go:</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> utils<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//将计算的功能，放到一个函数中，然后在需要使用，调用即可</span><span class="token comment">//为了让其它包的文件使用Cal函数，需要将C大写类似其它语言的public</span><span class="token keyword">func</span> <span class="token function">Cal</span><span class="token punctuation">(</span>n1 <span class="token builtin">float64</span><span class="token punctuation">,</span>n2 <span class="token builtin">float64</span><span class="token punctuation">,</span> operator <span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> res <span class="token builtin">float64</span><span class="token keyword">switch</span> operator <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token string">'+'</span><span class="token punctuation">:</span>res <span class="token operator">=</span> n1 <span class="token operator">+</span> n2<span class="token keyword">case</span> <span class="token string">'-'</span><span class="token punctuation">:</span>res <span class="token operator">=</span> n1 <span class="token operator">-</span> n2<span class="token keyword">case</span> <span class="token string">'*'</span><span class="token punctuation">:</span>res <span class="token operator">=</span> n1 <span class="token operator">*</span> n2<span class="token keyword">case</span> <span class="token string">'/'</span><span class="token punctuation">:</span>res <span class="token operator">=</span> n1 <span class="token operator">/</span> n2<span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"操作符号错误哦！"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> res<span class="token punctuation">&#125;</span></code></pre><ul><li>Main.go</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"go_code/chapter06/demo02/utils"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//请大家完成这样一个需求：</span><span class="token comment">//输入两个数，再输入一个运算符（+,-,*,/)，得到结果。。</span><span class="token comment">//分析思路...</span><span class="token keyword">var</span> n1 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">1.2</span><span class="token keyword">var</span> n2 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">2.3</span><span class="token keyword">var</span> operator <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token string">'+'</span>result <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">Cal</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">,</span>operator<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"result="</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="包使用的注意事项和细节讨论"><a href="#包使用的注意事项和细节讨论" class="headerlink" title="包使用的注意事项和细节讨论"></a>包使用的注意事项和细节讨论</h2><ol><li>在给一个文件打包时，该包对应一个文件夹，比如这里的utils文件夹对应的包名就是utils，文件的包名通常和文件所在的文件夹名一致，一般为小写字母。</li><li>当一个文件要使用其它包函数或变量时，需要先引入对应的包</li></ol><ul><li>引入方式1:<code>import &quot;包名&quot;</code></li><li>引入方式2:</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"包名"</span>  <span class="token string">"包名"</span><span class="token punctuation">)</span></code></pre><ul><li>package指令在文件第一行，然后是import指令。</li><li>在import包时，路径从$GOPATH的src下开始，不用带src，编译器会自动从src开始引入。</li></ul><ol start="3"><li>为了让其它包的文件可以访问到本包的函数，则该函数名的首字母需要大写，类似其他语言的public，这样才能跨包访问。比如utils.go的<em>Cal</em>函数</li><li>在访问其它包函数，变量时，其语法是 包名.函数名,比如这个main.go文件中的<code>utils.Cal(90, 80, &quot;+&quot;)</code></li><li>如果包名较长，Go支持给包取别名，注意细节；取别名后，原来的包名就不能使用了<ul><li>说明：如果给包取了别名，则**需要使用别名来访问该包的函数和变量。</li></ul></li><li>在同一包下，不能有相同的函数名（也不能有相同的全局变量名），否则报重复定义</li><li>如果你要编译成一个可执行程序文件，就需要将这个包声明为main，即<code>package main</code>这个就是一个语法规范，如果你是写一个库，包名可以自定义</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210119185147993.png" alt="image-20210119185147993" loading="lazy"></p><h2 id="函数的调用机制"><a href="#函数的调用机制" class="headerlink" title="函数的调用机制"></a>函数的调用机制</h2><h3 id="通俗易懂的方式的理解"><a href="#通俗易懂的方式的理解" class="headerlink" title="通俗易懂的方式的理解"></a>通俗易懂的方式的理解</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210119185241781.png" alt="image-20210119185241781" loading="lazy"></p><h3 id="函数-调用过程"><a href="#函数-调用过程" class="headerlink" title="函数-调用过程"></a>函数-调用过程</h3><p>介绍：为了让大家更好地理解函数调用过程，看两个案例，并画出示意图，这个很重要</p><ol><li>传入一个数+1</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210119185640204.png" alt="image-20210119185640204" loading="lazy"></p><p>对上图说明</p><ol><li><p>在调用一个函数时，会给该函数分配一个新的空间，编译器会通过自身的处理让这个新的空间和其它的栈的空间去分开来</p></li><li><p>在每个函数对应的栈中，数据空间时独立的，不会混淆</p></li><li><p>当一个函数调用完毕（执行完毕）后，程序会销毁这个函数对应的栈空间。</p></li><li><p>计算两个数，并返回</p></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//一个函数 test</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>n1 <span class="token operator">=</span> n1 <span class="token operator">+</span> <span class="token number">1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"test() n1="</span><span class="token punctuation">,</span>n1<span class="token punctuation">)</span> <span class="token comment">//输入结果=？</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">getSum</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>sum <span class="token operator">:=</span> n1 <span class="token operator">+</span> n2fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"getSum sum = "</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token comment">// 30</span><span class="token comment">//当函数有return语句时，就是将结果返回给调用者</span><span class="token comment">//即谁调用我，就返回给谁</span><span class="token keyword">return</span> sum<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>n1 <span class="token operator">:=</span> <span class="token number">10</span><span class="token comment">//调用test</span><span class="token function">test</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main() n1="</span><span class="token punctuation">,</span>n1<span class="token punctuation">)</span><span class="token comment">//输出结果=？</span>sum <span class="token operator">:=</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main sum="</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token comment">// 30</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none"> ~&#x2F;go&#x2F;src&#x2F;go_code&#x2F;chapter06&#x2F;demo03&#x2F;main  go run main.go test() n1&#x3D; 11main() n1&#x3D; 10getSum sum &#x3D;  30main sum&#x3D; 30</code></pre><h3 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h3><ul><li>基本语法和说明</li></ul><pre class="language-go" data-language="go"><code class="language-go">Go函数支持返回多个值，这一点是其它编程语言没有的。<span class="token keyword">func</span> 函数名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span> （返回值类型列表） <span class="token punctuation">&#123;</span>  语句<span class="token operator">...</span>  <span class="token keyword">return</span> 返回值列表<span class="token punctuation">&#125;</span></code></pre><ol><li>如果返回多个值时，在接收时，希望忽略某个返回值，则使用<code>_</code>符号表示占位忽略</li><li>如果返回值只有一个，（返回值类型列表）可以不写<code>()</code></li></ol><ul><li><p>案例演示1</p><p>请编写要给函数，可以计算两个数的和和差，并返回结果。</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  n1 <span class="token operator">:=</span> <span class="token number">10</span>  <span class="token comment">//调用test</span>  <span class="token function">test</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main() n1="</span><span class="token punctuation">,</span>n1<span class="token punctuation">)</span><span class="token comment">//输出结果？</span>  sum <span class="token operator">:=</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main sum ="</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token comment">//30</span>  <span class="token comment">//调用getSumAndSub</span>  res1<span class="token punctuation">,</span>res2 <span class="token operator">:=</span> <span class="token function">getSumAndSub</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//res1 = 3 res2 = -1 </span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"res1=%v res2=%v\n"</span><span class="token punctuation">,</span>res1<span class="token punctuation">,</span> res2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//编写函数，可以计算两个数的和和差，并返回结果</span><span class="token keyword">func</span> <span class="token function">getSumAndSub</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">int</span> <span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  sum <span class="token operator">:=</span> n1 <span class="token operator">+</span> n2  sub <span class="token operator">:=</span> n1 <span class="token operator">-</span> n2  <span class="token keyword">return</span> sum<span class="token punctuation">,</span> sub<span class="token punctuation">&#125;</span></code></pre><ul><li><p>案例演示2</p><p>一个细节说明：希望忽略某个返回值，则使用<code>_</code>符号表示占位忽略</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//希望忽略某个返回值，则使用`_`符号表示占位忽略</span><span class="token boolean">_</span><span class="token punctuation">,</span> res3 <span class="token operator">=</span> <span class="token function">getSumAndSub</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"res3="</span><span class="token punctuation">,</span>res3<span class="token punctuation">)</span></code></pre><h2 id="函数的递归调用"><a href="#函数的递归调用" class="headerlink" title="函数的递归调用"></a>函数的递归调用</h2>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Go语言の函数、包和错误处理&quot;&gt;&lt;a href=&quot;#Go语言の函数、包和错误处理&quot; class=&quot;headerlink&quot; title=&quot;Go语言の函数、包和错误处理&quot;&gt;&lt;/a&gt;Go语言の函数、包和错误处理&lt;/h1&gt;&lt;p&gt;本文章主要讲解了Go语言的函数，包和错误处理等知识。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Go" scheme="https://mikutown.gitee.io/blog/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-13-过滤算法(1.1.34)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/19/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-13-%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95(1.1.34)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/19/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-13-%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95(1.1.34)/</id>
    <published>2021-01-19T06:28:39.000Z</published>
    <updated>2021-01-19T07:15:27.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-13-过滤算法-1-1-34"><a href="#算法练习-13-过滤算法-1-1-34" class="headerlink" title="算法练习-13-过滤算法(1.1.34)"></a>算法练习-13-过滤算法(1.1.34)</h1><ul><li>知识点<ul><li>过滤器</li></ul></li></ul><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>1.1.34 过滤。以下哪些任务需要（在数组中，比如）保存标准输入中的所有值？哪些可以被实现为一个过滤器且仅使用固定数量的变量和固定大小的数组（和N无关）？在每个问题中，输入都来自于标准输入且含有N个0到1的实数。</strong></p><ul><li><strong>打印出最大和最小的数</strong></li><li><strong>打印出所有数的中位数</strong></li><li><strong>打印出第k小的数，k小于100</strong></li><li><strong>打印出所有数的平方和</strong></li><li><strong>打印出N个数的平均值</strong></li><li><strong>打印出大于平均值的数的百分比</strong></li><li><strong>将N个数按照升序打印</strong></li><li><strong>将N个数按照随机顺序打印</strong></li></ul><hr><p><strong>1.1.34 Filtering. Which of the following require saving all the values from standard input (in an array, say), and which could be implemented as a filter using only a fixed number of variables and arrays of fixed size (not dependent on N)? For each, the input comes from standard input and consists of N real numbers between 0 and 1.</strong></p><ul><li><strong>Print the maximum and minimum numbers.</strong></li><li><strong>Print the median of the numbers.</strong></li><li><strong>Print the k th smallest value, for k less than 100.</strong></li><li><strong>Print the sum of the squares of the numbers.</strong></li><li><strong>Print the average of the N numbers.</strong></li><li><strong>Print the percentage of numbers greater than the average.</strong></li><li><strong>Print the N numbers in increasing order.</strong></li><li><strong>Print the N numbers in random order.</strong></li></ul><p><strong>分析&amp;答案</strong></p><ul><li><p>打印出最大和最小的数</p><p>只需要两个变量值的过滤器，变量名为min和max即可，当输入数字时，将数字同max和min比较大小，较大的为max，较小的为min，最后打印max和min两个数字的值即可</p></li><li><p>打印出所有数的中位数</p><p>中位数需要所有数字的有序排列，因此需要把所有数字都保存在一个数组中，将数组排序，取数组的中间数作为打印的值。</p></li><li><p>打印出第k小的数，k小于100</p><p>可以创建一个大小为k的数组作为过滤器，按照插入排序法进行插入数据的升序排序，多出去的数据直接舍弃，最后打印数组的第k个数字即可。</p></li><li><p>打印出所有数的平方和</p><p>可以创建一个名叫sum的double类型值作为过滤器，sum += num * num</p></li><li><p>打印出N个数的平均值</p><p>可以创建一个sum的double类型，求和，再创建一个count类型的计数器，用于计算输入的数据的总数，最后sum += num.   返回sum / count，即N个数的平均值。</p></li><li><p>打印出大于平均值的数的百分比</p><p>要先利用上面的计数器计算平均值，然后用数组保存这N个数的值，遍历数组，统计大于平均数的数字的个数n，最后返回(n/count)*100+”%”，即为大于平均值的数的百分比。</p></li><li><p>将N个数按照升序打印</p><p>自然是要用数组存储数据噜</p></li><li><p>将N个数按照随机顺序打印</p><p>同上，需要存储数据，而且需要random出数字，这样才能按照随机顺序打印。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-13-过滤算法-1-1-34&quot;&gt;&lt;a href=&quot;#算法练习-13-过滤算法-1-1-34&quot; class=&quot;headerlink&quot; title=&quot;算法练习-13-过滤算法(1.1.34)&quot;&gt;&lt;/a&gt;算法练习-13-过滤算法(1.1.34)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;过滤器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-12-矩阵详解(1.1.33)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/19/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-12-%E7%9F%A9%E9%98%B5%E8%AF%A6%E8%A7%A3(1.1.33)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/19/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-12-%E7%9F%A9%E9%98%B5%E8%AF%A6%E8%A7%A3(1.1.33)/</id>
    <published>2021-01-19T04:08:44.000Z</published>
    <updated>2021-01-19T06:29:14.409Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-12-矩阵详解-1-1-33"><a href="#算法练习-12-矩阵详解-1-1-33" class="headerlink" title="算法练习-12-矩阵详解(1.1.33)"></a>算法练习-12-矩阵详解(1.1.33)</h1><ul><li>知识点<ul><li>绘点</li><li>随机函数</li></ul></li></ul><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>1.1.33矩阵库。编写一个Matrix库并实现以下API</strong></p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210119121412287.png" alt="题目" loading="lazy"></p><p><strong>编写一个测试用例，从标准输入读取矩阵并测试所有方法。</strong></p><ul><li>分析</li></ul><p>在书中第一次出现矩阵的例子是：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span> <span class="token comment">// Compute dot product of row i and column j.</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>         c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这段代码被用来计算矩阵的乘积。</p><p>由此可见 用java创建矩阵，需要你创建一个二维数组。</p><pre class="language-none"><code class="language-none">使用Java实现矩阵由 m × n 个数aij排成的m行n列的数表称为m行n列的矩阵，简称m × n矩阵。而行数与列数都等于n的矩阵称为n阶矩阵或n阶方阵。向量(Vector)本题中除了矩阵还提到了向量，那向量又是什么，跟矩阵有何区别与联系呢？其实我们可以把向量当作一个点(a,b)。它与矩阵的区别是：向量可以用矩阵表示,且有时特殊矩阵就是向量。简言之就是矩阵包含向量。点乘(dot)在数学中，数量积(dot product; scalar product，也称为点积、点乘)是接受在实数R上的两个向量并返回一个实数值标量的二元运算。它是欧几里得空间的标准内积。坐标表示：已知两个非零向量 a &#x3D; (x1, y1), b &#x3D; (x2, y2)，则有a 点乘 b &#x3D; x1x2 + y1y2，即两个向量的数量积等于它们对应坐标的乘积的和。乘积两个矩阵的乘法仅当第一个矩阵A的列数和另一个矩阵B的行数相等时才能定义。乘积矩阵的行数等于左边矩阵的行数,乘积矩阵的列数等于右边矩阵的列数 。</code></pre><ul><li>答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Matrix</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 向量点乘     * @param x    double类型的一维数组     * @param y    double类型的一维数组     * @return     两个向量点乘的乘积     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">dot</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>length<span class="token operator">!=</span>y<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> x<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                a <span class="token operator">+=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 矩阵和矩阵之积     * @param a     矩阵a     * @param b     矩阵b     * @return      矩阵a，b的积矩阵c     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">mult</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">!=</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//抛出异常</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 转制矩阵     * @param a    要转制的矩阵a     * @return     返回结果     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">transpose</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 　矩阵和向量之积     * @param a    矩阵a     * @param x    向量x     * @return     矩阵a和向量x的乘积     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">mult</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span>a<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">!=</span> x<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//抛出异常</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 向量和矩阵之积     * @param x      向量x     * @param a      矩阵a     * @return       向量x和矩阵a的积     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">mult</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span>x<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>length <span class="token operator">!=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//抛出异常</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> x<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-12-矩阵详解-1-1-33&quot;&gt;&lt;a href=&quot;#算法练习-12-矩阵详解-1-1-33&quot; class=&quot;headerlink&quot; title=&quot;算法练习-12-矩阵详解(1.1.33)&quot;&gt;&lt;/a&gt;算法练习-12-矩阵详解(1.1.33)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;绘点&lt;/li&gt;
&lt;li&gt;随机函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-11-Java直方图的绘制(1.1.32)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/18/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-11-Java%E7%9B%B4%E6%96%B9%E5%9B%BE%E7%9A%84%E7%BB%98%E5%88%B6-(1.1.32)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/18/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-11-Java%E7%9B%B4%E6%96%B9%E5%9B%BE%E7%9A%84%E7%BB%98%E5%88%B6-(1.1.32)/</id>
    <published>2021-01-18T04:13:49.000Z</published>
    <updated>2021-01-18T05:08:11.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-11-Java直方图的绘制-1-1-32"><a href="#算法练习-11-Java直方图的绘制-1-1-32" class="headerlink" title="算法练习-11-Java直方图的绘制(1.1.32)"></a>算法练习-11-Java直方图的绘制(1.1.32)</h1><ul><li>知识点<ul><li>直方图概念</li></ul></li></ul><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>1.1.32 直方图。假设标准输入流中含有一系列 double 值。编写一段程序，从命令行接受一个整数 N 和 两个 doubl 值 l 和 r。将 (l，r) 分为 N 段并使用 StdDraw 画出输入流中的值落入每段的数量的直方图。</strong></p><hr><p><strong>1.1.32 Histogram. Suppose that the standard input stream is a sequence of double values. Write a program that takes an integer N and two double values l and r from the command line and uses StdDraw to plot a histogram of the count of the numbers in the standard input stream that fall in each of the N intervals defined by dividing (l , r) into N equal-sized intervals.</strong></p><ul><li>直方图是什么？</li></ul><pre class="language-none"><code class="language-none">直方图(Histogram)又称质量分布图。是一种统计报告图，由一系列高度不等的纵向条纹或线段表示数据分布的情况。 一般用横轴表示数据类型，纵轴表示分布情况。应用步骤(1)收集数据。作直方图的数据一般应大于50个。(2)确定数据的极差(R)。用数据的最大值减去最小值 求得。(3)确定组距(h)。先确定直方图的组数，然后以此组数去除极差，可得直方图每组的宽度，即组距。组数的确定要适当。组数太少，会引起较大计算误差；组数太多，会影响数据分组规律的明显性，且计算工作量加大。(4)确定各组的界限值。为避免出现数据值与组界限值重合而造成频数据计算困难，组的界限值单位应取最小测量单位的1&#x2F;2。分组时应把数据表中最大值和最小值包括在内。　　第一组下限值为：最小值-0.5;　　第一组上限值为：第一组下限值加组距;　　第二组下限值就是第一组的上限值；　　第二组上限值就是第二组的下限值加组距；　　第三组以后，依此类推定出各组的组界。(5)编制频数分布表。把多个组上下界限值分别填入频数分布表内，并把数据表中的各个数据列入相应的组，统计各组频数据(f )。(6)按数据值比例画出横坐标。(7)按频数值比例画纵坐标。以观测值数目或百分数表示。(8)画直方图。按纵坐标画出每个长方形的高度，它代表取落在此长方形中的数据数。(注意：每个长方形的宽度都是相等的。)在直方图上应标注出公差范围(T)、样本容量(n)、样本平均值(x)、样本标准偏差值(s)和x的位置等。</code></pre><ul><li>首先做一个柱状图，了解一下 StdDraw类中filledRectangle的方法：</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * bar chart example    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">barChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>       <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">StdRandom</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//矩形一半的宽</span>           <span class="token keyword">double</span> rw <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">/</span> <span class="token class-name">N</span><span class="token punctuation">;</span>           <span class="token comment">// 矩形一半的高</span>           <span class="token keyword">double</span> rh <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span><span class="token number">2.0</span><span class="token punctuation">;</span>           <span class="token comment">//矩形中心点x轴的坐标</span>           <span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> i <span class="token operator">/</span> <span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token class-name">N</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>           <span class="token comment">// 矩形中心点y轴的坐标</span>           <span class="token keyword">double</span> y <span class="token operator">=</span> rh<span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x="</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">",y="</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">",rw="</span> <span class="token operator">+</span> rw <span class="token operator">+</span> <span class="token string">",rh="</span> <span class="token operator">+</span> rh<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">StdDraw</span><span class="token punctuation">.</span><span class="token function">filledRectangle</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> rw<span class="token punctuation">,</span> rh<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span></code></pre><ul><li>答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * solution     * @param N the numbers of intervals     * @param l interval left value    * @param r interval right value    * @param a double stream    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">histogramSolution</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token keyword">double</span> l<span class="token punctuation">,</span> <span class="token keyword">double</span> r<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">// double stream的组距</span>       <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">double</span> interval <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token class-name">N</span><span class="token punctuation">;</span>       <span class="token comment">// histogram 的组距</span>       <span class="token keyword">double</span> histogramInterval <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token class-name">N</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">// double stream 组距左边的值</span>           <span class="token keyword">double</span> dsLeft <span class="token operator">=</span> interval <span class="token operator">*</span> i <span class="token operator">+</span> l<span class="token punctuation">;</span>           <span class="token comment">// double stream 组距右边的值</span>           <span class="token keyword">double</span> dsRight <span class="token operator">=</span> interval <span class="token operator">*</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> l<span class="token punctuation">;</span>           <span class="token comment">// 矩形中心位置x轴的坐标</span>           <span class="token keyword">double</span> x <span class="token operator">=</span> histogramInterval <span class="token operator">*</span>i <span class="token operator">+</span>histogramInterval <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>           <span class="token comment">// 频次，代表直方图的高</span>           <span class="token keyword">int</span> countTemp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token comment">// 频次</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> dsLeft <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dsRight <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   countTemp <span class="token operator">++</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">double</span> p <span class="token operator">=</span> <span class="token punctuation">(</span>countTemp <span class="token operator">*</span> <span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>           <span class="token comment">//double p = (countTemp * 1.0) / N;</span>           <span class="token comment">// 矩形中心位置y周的坐标</span>           <span class="token keyword">double</span> y <span class="token operator">=</span> p <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>           <span class="token class-name">StdDraw</span><span class="token punctuation">.</span><span class="token function">filledRectangle</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> histogramInterval <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span></code></pre><p>用main方法调用：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//barChart();</span>       <span class="token comment">// represent argument N</span>       <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>       <span class="token comment">// represent argument l</span>       <span class="token comment">// represent argument r</span>       <span class="token keyword">double</span> l <span class="token operator">=</span> <span class="token number">1.09</span><span class="token punctuation">;</span>       <span class="token keyword">double</span> r <span class="token operator">=</span> <span class="token number">23.32</span><span class="token punctuation">;</span>       <span class="token comment">// represent double stream</span>       <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1.08</span><span class="token punctuation">,</span> <span class="token number">1.21</span><span class="token punctuation">,</span> <span class="token number">2.33</span><span class="token punctuation">,</span> <span class="token number">3.35</span><span class="token punctuation">,</span> <span class="token number">8.78</span><span class="token punctuation">,</span> <span class="token number">6.98</span><span class="token punctuation">,</span> <span class="token number">7.99</span><span class="token punctuation">,</span> <span class="token number">10.21</span><span class="token punctuation">,</span> <span class="token number">15.22</span><span class="token punctuation">,</span> <span class="token number">21.23</span><span class="token punctuation">,</span> <span class="token number">14.51</span><span class="token punctuation">,</span> <span class="token number">16.77</span><span class="token punctuation">,</span> <span class="token number">18.23</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>       <span class="token function">histogramSolution</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210118130552755.png" alt="image-20210118130552755" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-11-Java直方图的绘制-1-1-32&quot;&gt;&lt;a href=&quot;#算法练习-11-Java直方图的绘制-1-1-32&quot; class=&quot;headerlink&quot; title=&quot;算法练习-11-Java直方图的绘制(1.1.32)&quot;&gt;&lt;/a&gt;算法练习-11-Java直方图的绘制(1.1.32)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;直方图概念&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-10-Java绘制点、线、圆(1.1.31)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/18/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-10-Java%E7%BB%98%E5%88%B6%E7%82%B9%E3%80%81%E7%BA%BF%E3%80%81%E5%9C%86-(1.1.31)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/18/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-10-Java%E7%BB%98%E5%88%B6%E7%82%B9%E3%80%81%E7%BA%BF%E3%80%81%E5%9C%86-(1.1.31)/</id>
    <published>2021-01-18T02:21:53.000Z</published>
    <updated>2021-01-18T04:13:23.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-10-Java绘制点、线、圆-1-1-31"><a href="#算法练习-10-Java绘制点、线、圆-1-1-31" class="headerlink" title="算法练习-10-Java绘制点、线、圆(1.1.31)"></a>算法练习-10-Java绘制点、线、圆(1.1.31)</h1><ul><li>知识点<ul><li>绘点</li><li>随机函数</li></ul></li></ul><a id="more"></a><h2 id="1-1-31-随机连接。"><a href="#1-1-31-随机连接。" class="headerlink" title="1.1.31 随机连接。"></a>1.1.31 随机连接。</h2><p><strong>1.1.31 随机连接。编写一段程序，从命令行接受一个整数 N 和 double 值 p(0 到 1 之间)作为参数， 在一个圆上画出大小为 0.05 且间距相等的 N 个点，然后将每对点按照概率 p 用灰线连接。</strong></p><p><strong>1.1.31 Random connections. Write a program that takes as command-line arguments an integer N and a double value p (between 0 and 1), plots N equally spaced dots of size .05 on the circumference of a circle, and then, with probability p for each pair of points, draws a gray line connecting them.</strong></p><ul><li><p>分析</p><p>这道题考查了Random库和StdDraw库的使用</p><p><code>StdRandom.uniform()</code>生成0到1之间的数</p><p><code>StdDraw.point(0.5,0.5)</code>方法可以生成居中的点</p></li><li><p>举例 </p></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//设置画笔颜色</span><span class="token class-name">StdDraw</span><span class="token punctuation">.</span><span class="token function">setPenColor</span><span class="token punctuation">(</span><span class="token class-name">StdDraw</span><span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置画笔的大小（直径）</span><span class="token class-name">StdDraw</span><span class="token punctuation">.</span><span class="token function">setPenRadius</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//画个点</span><span class="token class-name">StdDraw</span><span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210118103145830.png" alt="image-20210118103145830" loading="lazy"></p><p>这也从侧面印证，不设置X轴和Y轴的话，默认的X轴和Y轴大小是1个单位<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210118103356211.png" alt="image-20210118103356211" loading="lazy"></p><ul><li>答案</li></ul><p>我们首先要画个圆，画圆的方法是<code>public static void circle(double x,double y, double radius)</code> 比如我们通过如下代码画一个半径是0.5的圆：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">StdDraw</span><span class="token punctuation">.</span><span class="token function">circle</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210118103639421.png" alt="image-20210118103639421" loading="lazy"></p><p>此时，计算点的位置（使用角度）             </p><p>总共 N 个点，平均分布在圆上。所以每个点占的圆的角度为360/N。整数可能除不尽，使用 double 360.0/N           </p><p> 将极坐标系中的角度转换为直角坐标系中的坐标,使用 for 循环存储每个点                x = 0.5(原点) + 0.5(半径)*cos(360.0/N * Math.PI/180 * i)(第i个点所占的角度)                y = 0.5(原点) + 0.5(半径)*sin(360.0/N * Math.PI/180 * i)(第i个点所占的角度)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Paintintintin</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> <span class="token class-name">N</span>  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入点的数量:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入连线概率（double类型）："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StdDraw</span><span class="token punctuation">.</span><span class="token function">circle</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> angle <span class="token operator">=</span> <span class="token number">360.0</span><span class="token operator">/</span><span class="token class-name">N</span><span class="token punctuation">;</span>        <span class="token class-name">StdDraw</span><span class="token punctuation">.</span><span class="token function">setPenRadius</span><span class="token punctuation">(</span><span class="token number">0.05</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Point</span> points<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> xs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            xs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>angle <span class="token operator">*</span> i <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span>PI <span class="token operator">/</span> <span class="token number">180</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>angle <span class="token operator">*</span> i <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span>PI <span class="token operator">/</span> <span class="token number">180</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            points<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>xs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">StdDraw</span><span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span>xs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//圆画完了</span>        <span class="token class-name">StdDraw</span><span class="token punctuation">.</span><span class="token function">setPenRadius</span><span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StdRandom</span><span class="token punctuation">.</span><span class="token function">bernoulli</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">StdDraw</span><span class="token punctuation">.</span><span class="token function">line</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span>  <span class="token class-name">Point</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> x<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> y<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> x<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setX</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> y<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setY</span><span class="token punctuation">(</span><span class="token keyword">double</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>当输入10，0.3时：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210118114518476.png" alt="image-20210118114518476" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-10-Java绘制点、线、圆-1-1-31&quot;&gt;&lt;a href=&quot;#算法练习-10-Java绘制点、线、圆-1-1-31&quot; class=&quot;headerlink&quot; title=&quot;算法练习-10-Java绘制点、线、圆(1.1.31)&quot;&gt;&lt;/a&gt;算法练习-10-Java绘制点、线、圆(1.1.31)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;绘点&lt;/li&gt;
&lt;li&gt;随机函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-9-两数互质的判断(1.1.30)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/16/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-9-%E4%B8%A4%E6%95%B0%E4%BA%92%E8%B4%A8%E7%9A%84%E5%88%A4%E6%96%AD-(1.1.30)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/16/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-9-%E4%B8%A4%E6%95%B0%E4%BA%92%E8%B4%A8%E7%9A%84%E5%88%A4%E6%96%AD-(1.1.30)/</id>
    <published>2021-01-16T05:24:18.000Z</published>
    <updated>2021-01-16T06:23:08.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-9-两数互质的判断-1-1-30"><a href="#算法练习-9-两数互质的判断-1-1-30" class="headerlink" title="算法练习-9-两数互质的判断(1.1.30)"></a>算法练习-9-两数互质的判断(1.1.30)</h1><ul><li>知识点<ul><li>最大公约数</li><li>两数互质的条件</li></ul></li></ul><a id="more"></a><h2 id="1-1-30-数组练习。"><a href="#1-1-30-数组练习。" class="headerlink" title="1.1.30 数组练习。"></a>1.1.30 <strong>数组练习。</strong></h2><p><strong>1.1.30 数组练习。编写一段程序，创建一个 N×N 的布尔数组 a[][]。其中当 i 和 j 互质时(没有相同 因子)，a[i][j] 为 true，否则为 false。</strong></p><p><strong>1.1.30 Array exercise. Write a code fragment that creates an N-by-N boolean array a[][] such that a[i][j] is true if i and j are relatively prime (have no common factors), and false otherwise.</strong></p><pre class="language-none"><code class="language-none">互质互质是公约数只有1的两个整数，叫做互质整数。公约数只有1的两个自然数，叫做互质自然数，后者是前者的特殊情形。互质数具有以下定理：（1）两个数的公因数只有1的两个非零自然数,叫做互质数；举例：2和3，公因数只有1，为互质数；（2）多个数的若干个最大公因数只有1的正整数，叫做互质数；（3）两个不同的质数，为互质数；（4）1和任何自然数互质。两个不同的质数互质。一个质数和一个合数，这两个数不是倍数关系时互质。不含相同质因数的两个合数互质；（5）任何相邻的两个数互质；（6）任取出两个正整数他们互质的概率（最大公约数为一）为6&#x2F;pi^2。</code></pre><pre class="language-none"><code class="language-none">公约数公约数，亦称“公因数”。它是一个能被若干个整数同时均整除的整数。如果一个整数同时是几个整数的约数，称这个整数为它们的“公约数”；公约数中最大的称为最大公约数。对任意的若干个正整数，1总是它们的公因数。最大公约数(Greatest Common Divisor(GCD))最大公因数，也称最大公约数、最大公因子，指两个或多个整数共有约数中最大的一个。a，b的最大公约数记为（a，b），同样的，a，b，c的最大公约数记为（a，b，c），多个整数的最大公约数也有同样的记号。求最大公约数有多种方法，常见的有质因数分解法、短除法、辗转相除法、更相减损法。与最大公约数相对应的概念是最小公倍数，a，b的最小公倍数记为[a，b]。</code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdIn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practice04</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> m<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">%</span> n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> m <span class="token operator">%</span> n<span class="token punctuation">;</span>            m <span class="token operator">=</span> n<span class="token punctuation">;</span>            n <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">==</span><span class="token function">gcd</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-9-两数互质的判断-1-1-30&quot;&gt;&lt;a href=&quot;#算法练习-9-两数互质的判断-1-1-30&quot; class=&quot;headerlink&quot; title=&quot;算法练习-9-两数互质的判断(1.1.30)&quot;&gt;&lt;/a&gt;算法练习-9-两数互质的判断(1.1.30)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;最大公约数&lt;/li&gt;
&lt;li&gt;两数互质的条件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-8-搜索有序数组中的相等数-(1.1.29)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/16/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-8-%E6%90%9C%E7%B4%A2%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%9B%B8%E7%AD%89%E6%95%B0-(1.1.29)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/16/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-8-%E6%90%9C%E7%B4%A2%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%9B%B8%E7%AD%89%E6%95%B0-(1.1.29)/</id>
    <published>2021-01-16T04:48:40.000Z</published>
    <updated>2021-01-16T06:23:16.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-8-搜索有序数组中的相等数-1-1-29"><a href="#算法练习-8-搜索有序数组中的相等数-1-1-29" class="headerlink" title="算法练习-8-搜索有序数组中的相等数-(1.1.29)"></a>算法练习-8-搜索有序数组中的相等数-(1.1.29)</h1><ul><li>知识点<ul><li>等值键</li></ul></li></ul><a id="more"></a><h2 id="1-1-29"><a href="#1-1-29" class="headerlink" title="1.1.29"></a>1.1.29</h2><h3 id="1-1-29-等值键。"><a href="#1-1-29-等值键。" class="headerlink" title="1.1.29 等值键。"></a><strong>1.1.29 等值键。</strong></h3><p><strong>为 BinarySearch 类添加一个静态方法 rank()，它接受一个键和一个整型有序数组(可能存在重复键)作为参数并返回数组中小于该键的元素数量，以及一个类似的方法 count() 来 返回数组中等于该键的元素的数量。注意:如果 i 和 j 分别是 rank(key,a) 和 count(key,a) 的返回值，那么 a[i..i+j-1] 就是数组中所有和 key 相等的元素。</strong></p><p><strong>1.1.29 Equal keys. Add to BinarySearch a static method rank() that takes a key and a sorted array of int values (some of which may be equal) as arguments and returns the number of elements that are smaller than the key and a similar method count() that returns the number of elements equal to the key. Note : If i and j are the values returned by rank(key, a) and count(key, a) respectively , then a[i..i+j-1] are the values in the array that are equal to key.</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">BinarySearch1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hi <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;=</span> hi<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Key is in a[lo..hi] or not present.</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span>      <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> hi <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> lo <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span> hi <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> lowers <span class="token operator">=</span> <span class="token function">rank</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> lowers<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> a<span class="token punctuation">.</span>length <span class="token operator">||</span> key <span class="token operator">!=</span> a<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">++</span>cnt<span class="token punctuation">;</span>            <span class="token operator">++</span>index<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">rank</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">33</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-8-搜索有序数组中的相等数-1-1-29&quot;&gt;&lt;a href=&quot;#算法练习-8-搜索有序数组中的相等数-1-1-29&quot; class=&quot;headerlink&quot; title=&quot;算法练习-8-搜索有序数组中的相等数-(1.1.29)&quot;&gt;&lt;/a&gt;算法练习-8-搜索有序数组中的相等数-(1.1.29)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;等值键&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Go语言の程序流程控制</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/15/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/15/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</id>
    <published>2021-01-15T14:28:36.000Z</published>
    <updated>2021-01-18T10:10:46.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go语言の程序流程控制"><a href="#Go语言の程序流程控制" class="headerlink" title="Go语言の程序流程控制"></a>Go语言の程序流程控制</h1><h2 id="程序流程控制介绍"><a href="#程序流程控制介绍" class="headerlink" title="程序流程控制介绍"></a>程序流程控制介绍</h2><p>在程序中，程序运行的流程控制决定程序是如何执行的，是我们必须掌握的，主要有三大流程控制语句。</p><ol><li>顺序控制</li><li>分支控制</li><li>循环控制</li></ol><a id="more"></a><h2 id="顺序控制"><a href="#顺序控制" class="headerlink" title="顺序控制"></a>顺序控制</h2><p>​    程序从上到下逐行执行，中间没有任何判断和跳转。</p><p>​    一个案例说明，必须下面的代码中，没有判断，也没有跳转，因此程序按照默认的流程执行，即顺序控制。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> days <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">97</span><span class="token keyword">var</span> week <span class="token builtin">int</span> <span class="token operator">=</span> days <span class="token operator">/</span> <span class="token number">7</span><span class="token keyword">var</span> day <span class="token builtin">int</span> <span class="token operator">=</span> days <span class="token operator">%</span> <span class="token number">7</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d个星期零%d天\n"</span><span class="token punctuation">,</span> week<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token keyword">var</span> huashi <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">134.2</span><span class="token keyword">var</span> sheshi <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">5.0</span> <span class="token operator">/</span> <span class="token number">9</span> <span class="token operator">*</span> <span class="token punctuation">(</span>huashi <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v 对应的摄氏温度=%v \n"</span><span class="token punctuation">,</span> huashi<span class="token punctuation">,</span> sheshi<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">13个星期零6天134.2对应的摄氏温度&#x3D; 19 </code></pre><h3 id="程序控制的流程图"><a href="#程序控制的流程图" class="headerlink" title="程序控制的流程图"></a>程序控制的流程图</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210115235239983.png" alt="image-20210115235239983" loading="lazy"></p><h3 id="顺序控制举例和注意事项"><a href="#顺序控制举例和注意事项" class="headerlink" title="顺序控制举例和注意事项"></a>顺序控制举例和注意事项</h3><p>​    Golang中定义变量时采用合法的前向引用。如：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> num1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">//声明了num1</span>  <span class="token keyword">var</span> num2 <span class="token builtin">int</span> <span class="token operator">=</span> num1 <span class="token operator">+</span> <span class="token number">20</span> <span class="token comment">//使用num1</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>错误形式：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> num2 <span class="token builtin">int</span> <span class="token operator">=</span> num1 <span class="token operator">+</span> <span class="token number">20</span> <span class="token comment">//使用num1</span>  <span class="token keyword">var</span> num1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">//声明num1 (❌)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="分支控制"><a href="#分支控制" class="headerlink" title="分支控制"></a>分支控制</h2><h3 id="分支控制的基本介绍"><a href="#分支控制的基本介绍" class="headerlink" title="分支控制的基本介绍"></a>分支控制的基本介绍</h3><p>分支控制就是让程序有选择执行。有下面三种形式</p><ol><li>单分支</li><li>双分支</li><li>多分枝</li></ol><h3 id="单分支控制"><a href="#单分支控制" class="headerlink" title="单分支控制"></a>单分支控制</h3><ul><li>基本语法</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> 条件表达式<span class="token punctuation">&#123;</span>  执行代码块<span class="token punctuation">&#125;</span></code></pre><p><strong>说明：当条件表达式为true时，就会执行{}的代码。注意{}是必须有的，就算你只写一行代码。</strong></p><ul><li>应用案例</li></ul><p>编写一个程序，可以输入人的年龄,如果该同志的年龄大于 18 岁,则输出 “你年龄大 于 18,要对自己的行为负责!”。      需求—【分析】—&gt;代码</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> age <span class="token builtin">int</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入年龄："</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>age<span class="token punctuation">)</span>    <span class="token keyword">if</span> age <span class="token operator">></span> <span class="token number">18</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你年龄大于18，要对自己的行为负责！"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go请输入年龄：10➜  main go run .&#x2F;main.go请输入年龄：29你年龄大于18，要对自己的行为负责！➜  main </code></pre><ul><li><p>单分支的流程图</p><p>流程图可以用<strong>图形方式</strong>来更加清晰的描述程序执行的流程。</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210116001333710.png" alt="image-20210116001333710" loading="lazy"></p></li><li><p>单分支的细节说明</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> age <span class="token operator">:=</span> <span class="token number">20</span><span class="token punctuation">;</span> age <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你年龄大于18，要对自己的行为负责!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="双分支控制"><a href="#双分支控制" class="headerlink" title="双分支控制"></a>双分支控制</h3><ul><li>基本语法</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> 条件表达式<span class="token punctuation">&#123;</span>  执行代码块<span class="token number">1</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  执行代码块<span class="token number">2</span><span class="token punctuation">&#125;</span></code></pre><p><strong>说明：当条件表达式成立，即执行代码块1，否则执行代码块2.{}也是必须有的。</strong></p><ul><li>应用案例</li></ul><p>编写一个程序,可以输入人的年龄,如果该同志的年龄大于 18 岁,则输出 “你年龄大于 18,要对 自己的行为负责!”。否则 ,输出”你的年龄不大这次放过你了.”</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> age <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入年龄："</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>age<span class="token punctuation">)</span><span class="token keyword">if</span> age <span class="token operator">></span> <span class="token number">18</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你年龄大于18，要对自己的行为负责！"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你的年龄不大这次放过你了."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go请输入年龄：19你年龄大于18，要对自己的行为负责！➜  main go run .&#x2F;main.go请输入年龄：12你的年龄不大这次放过你了.</code></pre><ul><li>双分支流程图的分析</li></ul><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210116001729636.png" alt="image-20210116001729636" loading="lazy"></p><ul><li>对双分支的总结</li></ul><ol><li>从上图看，条件表达式就是age&gt;18</li><li>执行代码块1 就是 fmt.Prinltn(“你的年龄大于18”)…</li><li>执行代码块2 就是 fmt.Println(“你的年龄不大”)…</li><li>双分支<strong>只会执行其中的一个分支。</strong></li></ol><h3 id="单分支和双分支的案例"><a href="#单分支和双分支的案例" class="headerlink" title="单分支和双分支的案例"></a>单分支和双分支的案例</h3><ol><li>对下列代码，若有输出，指出输出结果.</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> x <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">var</span> y <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hihihi"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"x is ="</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果是 hihihi</span></code></pre><ol start="2"><li>对下列代码，若有输出，指出输出结果.</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> x <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">2</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token keyword">else</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token comment">//没有&#123;&#125; 所以编译错误哦</span></code></pre><ol start="3"><li>对下列代码，若有输出，指出输出结果.</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> x <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//编译错误，因为else不能换行</span></code></pre><ol start="4"><li>对下列代码，若有输出，指出输出结果.</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> x <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//输出ok 但是建议把if(x>2)写成if x > 2</span></code></pre><ol start="5"><li>编写程序，声明 2 个 int32 型变量并赋值。判断两数之和，如果大于等于 50，打印“hello world!</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> n1 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">10</span>  <span class="token keyword">var</span> n2 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">50</span>  <span class="token keyword">if</span> n1 <span class="token operator">+</span> n2 <span class="token operator">>=</span><span class="token number">50</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello,world"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="6"><li>编写程序，声明 2 个 float64 型变量并赋值。判断第一个数大于 10.0，且第 2 个数小于 20.0，打 印两数之和。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> n3 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">11.0</span><span class="token keyword">var</span> n4 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">17.0</span><span class="token keyword">if</span> n3 <span class="token operator">></span> <span class="token number">10.0</span> <span class="token operator">&amp;&amp;</span> n4 <span class="token operator">&lt;</span> <span class="token number">20.0</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"和="</span><span class="token punctuation">,</span><span class="token punctuation">(</span>n3<span class="token operator">+</span>n4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="7"><li>定义两个变量 int32，判断二者的和，是否能被 3 又能被 5 整除，打印提示信息</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> num1 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">var</span> num2 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"能被3又能被5整除"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="8"><li>判断一个年份是否是闰年，闰年的条件是符合下面二者之一:(1)年份能被4整除，但不能被100 整除;(2)能被 400 整除</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> year <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">2019</span><span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">||</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token string">"是闰年!``"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="多分支控制"><a href="#多分支控制" class="headerlink" title="多分支控制"></a>多分支控制</h3><ul><li>基本语法</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> 条件表达式<span class="token number">1</span> <span class="token punctuation">&#123;</span>  执行代码块<span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">&#123;</span>  执行代码块<span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  执行代码块n<span class="token punctuation">&#125;</span></code></pre><ul><li>说明：</li></ul><ol><li>多分支的判断流程如下：<ol><li>先判断条件表达式1是否成立，如果为真，就执行代码块1</li><li>如果条件表达式1如果为假，就去判断条件表达式2是否成立，如果条件表达式2为真，就执行代码块2</li><li>以此类推</li><li>如果所有的条件表达式不成立，则执行else的语句块。</li></ol></li><li>else 不是必须的</li><li>多分支只能有一个执行入口。</li></ol><ul><li>看一个多分支的流程图</li></ul><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210116005439355.png" alt="image-20210116005439355" loading="lazy"></p><ul><li>多分支的快速入门案例</li></ul><p>岳小鹏参加 Golang 考试，他和父亲岳不群达成承诺: 如果:</p><p>​    成绩为 100 分时，奖励一辆 BMW; </p><p>​    成绩为(80，99]时，奖励一台 iphone7plus; </p><p>​    当成绩为[60,80]时，奖励一个 iPad; </p><p>​    其它时，什么奖励也没有。 请从键盘输入岳小鹏的期末成绩，并加以判断</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> score <span class="token builtin">int</span>  fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"请输入成绩:"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>score<span class="token punctuation">)</span>  <span class="token keyword">if</span> score <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"奖励BMW"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> score <span class="token operator">></span> <span class="token number">80</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">99</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"奖励一台iphone12 pro max"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> score <span class="token operator">>=</span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span><span class="token number">80</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"奖励一个iPad"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"啥也没"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>多分支的课堂练习</p><p>案例演示2</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> b <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> b<span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token operator">!</span>b<span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token comment">//c</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果是b</span><span class="token comment">//如果写成b=flase;能编译通过吗？如果能，结果是？（不能通过，if的条件表达式不是赋值语句)</span></code></pre><p>​    案例演示3</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210116012330224.png" alt="image-20210116012330224" loading="lazy"></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> a <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">1.0</span><span class="token keyword">var</span> b <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">4.0</span><span class="token keyword">var</span> c <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">2.0</span>m <span class="token operator">:=</span> b <span class="token operator">*</span> b <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> a <span class="token operator">*</span> c<span class="token comment">//多分支判断</span><span class="token keyword">if</span> m <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>  x1 <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">+</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> a  x2 <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">-</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> a  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x1=%v x2=%v \n"</span><span class="token punctuation">,</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">&#123;</span>  x1 <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">+</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> a  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x1=%v\n"</span><span class="token punctuation">,</span> x1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"无解..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.gox1&#x3D;-4%                                                                                           ➜  main go run .&#x2F;main.gox1&#x3D;-0.5857864376269049 x2&#x3D;-3.414213562373095%                                                    ➜  main go run .&#x2F;main.gox1&#x3D;-0.5857864376269049 x2&#x3D;-3.414213562373095 ➜  main </code></pre><p>​    案例演示4</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210116013022820.png" alt="image-20210116013022820" loading="lazy"></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> height <span class="token builtin">int32</span><span class="token keyword">var</span> money <span class="token builtin">float32</span><span class="token keyword">var</span> handsome <span class="token builtin">bool</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入身高（厘米）"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>height<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入财富（千万）"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>money<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入是否帅气（true or false）"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>handsome<span class="token punctuation">)</span><span class="token keyword">if</span> height <span class="token operator">></span> <span class="token number">180</span> <span class="token operator">&amp;&amp;</span> money <span class="token operator">></span><span class="token number">1.0</span> <span class="token operator">&amp;&amp;</span> handsome <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"一定要嫁给他！！！"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> height <span class="token operator">></span> <span class="token number">180</span> <span class="token operator">||</span> money <span class="token operator">></span><span class="token number">1.0</span> <span class="token operator">||</span> handsome<span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"勉勉强强嫁给他吧"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"不嫁......"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go请输入年龄：10➜  main go run .&#x2F;main.go请输入年龄：29➜  main go run .&#x2F;main.go请输入身高（厘米）190请输入财富（千万）12请输入是否帅气（true or false）true一定要嫁给他！！！➜  main go run .&#x2F;main.go请输入身高（厘米）120请输入财富（千万）1请输入是否帅气（true or false）false不嫁......➜  main go run .&#x2F;main.go请输入身高（厘米）120请输入财富（千万）1.2请输入是否帅气（true or false）false勉勉强强嫁给他吧➜  main </code></pre><h3 id="嵌套分支"><a href="#嵌套分支" class="headerlink" title="嵌套分支"></a>嵌套分支</h3><ul><li><p>基本介绍</p><p>在一个分支结构中又完整的嵌套了另一个完整的分支结构，里面的分支的结构称为内层分支外面的分支结构称为外层分支。</p></li><li><p>基本语法</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> 条件表达式<span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> 条件表达式<span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>说明：嵌套分支不宜过多，建议控制在3层内</strong></p><ul><li>示例代码1</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> second <span class="token builtin">float64</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入秒数"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>second<span class="token punctuation">)</span><span class="token keyword">if</span> second <span class="token operator">&lt;=</span> <span class="token number">8</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> gender <span class="token builtin">string</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入性别"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gender<span class="token punctuation">)</span>  <span class="token keyword">if</span> gender <span class="token operator">==</span> <span class="token string">"男"</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"进入决赛的男子组"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"进入决赛的女子组"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"out......"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go 请输入秒数100out......➜  main go run .&#x2F;main.go请输入秒数3请输入性别男进入决赛的男子组➜  main go run .&#x2F;main.go请输入秒数4请输入性别女进入决赛的女子组</code></pre><ul><li><p>示例代码2</p><p>出票系统：根据淡旺季的月份和年龄，打印票价</p><p>4到10是旺季：</p><p>​    成人（18-60）：60</p><p>​    儿童（&lt;18):半价 30</p><p>​    老人（&gt;60): 1/3 20</p><p>淡季: </p><p>​    成人:40</p><p>​    其他:20</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> month <span class="token builtin">int</span><span class="token keyword">var</span> age <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入月份"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>month<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>month<span class="token operator">>=</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> month <span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入购票人年龄:"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>age<span class="token punctuation">)</span>  <span class="token keyword">if</span> age<span class="token operator">&lt;</span><span class="token number">18</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"您购买的票是旺季儿童票，享受半价优惠：30元"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> age <span class="token operator">></span> <span class="token number">60</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"您购买的票是旺季老人票，享受1/3折：20元"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"您购买的票是旺季成人票，原价购买，60元"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入购票人年龄:"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>age<span class="token punctuation">)</span>  <span class="token keyword">if</span> age<span class="token operator">&lt;</span><span class="token number">18</span> <span class="token operator">||</span> age<span class="token operator">></span><span class="token number">60</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"您购买的票是淡季其他票，享受半价优惠：20元"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"您购买的票是淡季成人票，原价购买，40元"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go 请输入秒数100➜  main go run .&#x2F;main.go# command-line-arguments➜  main go run .&#x2F;main.go请输入月份6请输入购票人年龄:19您购买的票是旺季成人票，60元➜  main go run .&#x2F;main.go请输入月份2请输入购票人年龄:12您购买的票是淡季其他票，20元➜  main go run .&#x2F;main.go请输入月份9请输入购票人年龄:61您购买的票是旺季老人票，20元➜  main go run .&#x2F;main.go请输入月份10请输入购票人年龄:71您购买的票是旺季老人票，20元➜  main </code></pre><h2 id="switch分支控制"><a href="#switch分支控制" class="headerlink" title="switch分支控制"></a>switch分支控制</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>switch语句用于基于不同条件执行不同动作，每一个case分支都是唯一的，从上到下逐疫测试，知道匹配为止。</li><li>匹配项后面也不需要再加break</li></ol><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">switch</span> 表达式 <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> 表达式<span class="token number">1</span><span class="token punctuation">,</span>表达式<span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">:</span>  语句块<span class="token number">1</span>  <span class="token keyword">case</span> 表达式<span class="token number">3</span>，表达式<span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">:</span>  语句块<span class="token number">2</span>  <span class="token comment">//这里可以有多个case语句</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>  语句块<span class="token punctuation">&#125;</span></code></pre><h3 id="switch的流程图"><a href="#switch的流程图" class="headerlink" title="switch的流程图"></a>switch的流程图</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210116152411706.png" alt="image-20210116152411706" loading="lazy"></p><ul><li>说明和总结<ol><li>switch的执行的流程是，先执行表达式，得到值，然后和case的表达式进行比较，如果相等，就匹配到，然后执行对应的case的语句块，然后退出switch控制。</li><li>如果switch的表达式的值没有和任何的case的表达式匹配成功，则执行default的语句块，执行后退出switch的控制</li><li>golang的case后的表达式可以有多个，使用 逗号 间隔。</li><li>golang中的case语句块不需要写break，因为默认会有，即在默认情况下，当程序执行完case语句块后，就直接退出该switch控制结构。</li></ol></li></ul><h3 id="switch快速入门案例"><a href="#switch快速入门案例" class="headerlink" title="switch快速入门案例"></a>switch快速入门案例</h3><ul><li><p>案例：</p><p>请编写一个程序，该程序可以接收一个字符，比如: a,b,c,d,e,f,g a表示星期一，b表示星期二 … 根据用户的输入显示相依的信息.要求使用 switch 语句完成</p></li><li><p>代码</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token comment">//分析思路</span><span class="token comment">//1. 定义一个变量接收字符</span><span class="token comment">//2. 使用switch完成</span><span class="token keyword">var</span> key <span class="token builtin">byte</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入一个字符 a,b,c,d,e,f,g"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token keyword">switch</span> key <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token string">'a'</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周一"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">'b'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周二"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">'c'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周三"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">'d'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周四"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">'e'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周五"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">'f'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周六"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">'g'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周日"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"输入有误..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">请输入一个字符 a,b,c,d,e,f,ga周一➜  main ➜  main go run .&#x2F;main.go请输入一个字符 a,b,c,d,e,f,gq输入有误...</code></pre><h3 id="switch的使用的注意事项"><a href="#switch的使用的注意事项" class="headerlink" title="switch的使用的注意事项"></a>switch的使用的注意事项</h3><ol><li>case/switch后是一个表达式（即：常量值、变量、一个有返回值的函数等都可以）</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//写一个很简单的函数</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span>char <span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">byte</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> char <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//</span>  <span class="token keyword">var</span> key <span class="token builtin">byte</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入一个字符 a,b,c,d,e,f,g"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">)</span>    <span class="token keyword">switch</span> <span class="token function">test</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">&#123;</span> <span class="token comment">//修改成函数了哦！！</span><span class="token keyword">case</span> <span class="token string">'a'</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周一"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">'b'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周二"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">'c'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周三"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">'d'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周四"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">'e'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周五"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">'f'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周六"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">'g'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"周日"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"输入有误..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>case后的各个表达式的值的数据类型，必须和switch的表达式数据类型一致</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> n1 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">var</span> n2 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">switch</span> n1 <span class="token punctuation">&#123;</span><span class="token keyword">case</span> n2 <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span> <span class="token comment">//错误，因为n2和n1的数据类型不一致</span><span class="token keyword">default</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"没匹配到"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="3"><li>case 后面可以带多个表达式，使用逗号间隔。比如<code>case 表达式1，表达式2...</code></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> n1 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">var</span> n2 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">switch</span> n1 <span class="token punctuation">&#123;</span><span class="token keyword">case</span> n2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span><span class="token keyword">default</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"没匹配到"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="4"><li>case后面的表达式如果是常量值（字面量），则要求不能重复</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> n1 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">var</span> n2 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">switch</span> n1 <span class="token punctuation">&#123;</span><span class="token keyword">case</span> n2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">:</span>        <span class="token comment">//case后面可以有多个表达式</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span> <span class="token keyword">case</span> <span class="token number">5</span> <span class="token punctuation">:</span>                <span class="token comment">// 错误，因为前面我们有常量5，因此重复，就会报错哦</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok2~"</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"没匹配到"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="5"><li>case后面不需要带break，程序匹配到一个case后就会执行对应的代码块，然后退出switch，如果一个都匹配不到，则执行default</li><li>default语句不是必须的</li><li>switch后也可以不带表达式，类似 if-else分支来使用。【案例演示】</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> age <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">switch</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> age <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"age == 10"</span><span class="token punctuation">)</span><span class="token keyword">case</span> age <span class="token operator">==</span> <span class="token number">20</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"age == 20"</span><span class="token punctuation">)</span><span class="token keyword">default</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"没有匹配到哦"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>score <span class="token operator">:=</span> <span class="token number">90</span><span class="token keyword">switch</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> score <span class="token operator">></span> <span class="token number">90</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"成绩优秀.."</span><span class="token punctuation">)</span><span class="token keyword">case</span> score <span class="token operator">>=</span><span class="token number">70</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"成绩优良.."</span><span class="token punctuation">)</span><span class="token keyword">case</span> score <span class="token operator">>=</span><span class="token number">60</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">70</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"成绩及格.."</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"不及格！"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="8"><li>switch后也可以直接声明/定义一个变量，分号结束，<strong>不推荐</strong>。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">switch</span> grade <span class="token operator">:=</span> <span class="token number">90</span><span class="token punctuation">;</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> grade <span class="token operator">></span> <span class="token number">90</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"成绩优秀.."</span><span class="token punctuation">)</span><span class="token keyword">case</span> grade <span class="token operator">>=</span><span class="token number">70</span> <span class="token operator">&amp;&amp;</span> grade <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"成绩优良.."</span><span class="token punctuation">)</span><span class="token keyword">case</span> grade <span class="token operator">>=</span><span class="token number">60</span> <span class="token operator">&amp;&amp;</span> grade <span class="token operator">&lt;=</span> <span class="token number">70</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"成绩及格.."</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"不及格！"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="9"><li>switch穿透-fallthrough，如果在case语句块后增加fallthrough，则会继续执行下一个case，也叫switch穿透。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//switch的穿透fallthrought</span><span class="token keyword">var</span> num <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">switch</span> num <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">10</span> <span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span><span class="token keyword">fallthrough</span><span class="token comment">//默认只能穿透一层</span><span class="token keyword">case</span> <span class="token number">20</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok2"</span><span class="token punctuation">)</span><span class="token keyword">fallthrough</span><span class="token keyword">case</span> <span class="token number">30</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok3"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"没有匹配到哦"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.gook1ok2ok3➜  main </code></pre><ol start="10"><li>Type Switch : switch 语句还可以被用于 type-switch 来判断某个interface变量中实际指向的变量类型【interface体验】</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> x <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">10.0</span>x <span class="token operator">=</span> y<span class="token keyword">switch</span> i <span class="token operator">:=</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" x 的类型～ : %T"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x 是 int 型"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token builtin">float64</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x 是 float64 型 "</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">float64</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x 是 func(int) 型"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x 是 bool 或 string 型"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"未知型"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.gox 是 float64 型 </code></pre><h3 id="switch课堂练习"><a href="#switch课堂练习" class="headerlink" title="switch课堂练习"></a>switch课堂练习</h3><ol><li>使用switch把小写类型的char型转为大写（键盘输入）。只转换a,b,c,d,e 其他的输出”other”。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> ch <span class="token builtin">byte</span>fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ch<span class="token punctuation">)</span> <span class="token comment">//获取输入</span><span class="token comment">//fmt.Printf("%c",ch)</span><span class="token comment">//fmt.Println();</span><span class="token keyword">switch</span> ch <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token string">'a'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">'b'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">'c'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">'d'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">'e'</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"E"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"other"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>对学生成绩大于60分的，输出“合格”。低于60分的，输出“不合格”。（注：输入的成绩不能大于100）</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> score <span class="token builtin">float64</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入成绩"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>score<span class="token punctuation">)</span><span class="token keyword">switch</span> <span class="token function">int</span><span class="token punctuation">(</span>score <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"输入有误..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go请输入成绩86及格➜  main go run .&#x2F;main.go请输入成绩12不及格</code></pre><h3 id="switch和if的比较"><a href="#switch和if的比较" class="headerlink" title="switch和if的比较"></a>switch和if的比较</h3><p>总结了什么情况下使用switch，什么情况下使用if</p><ol><li>如果判断的具体数值不多，而且符合整数、浮点数、字符、字符串这几种类型。建议使用switch语句，简洁高效。</li><li>其他情况：对区间判断和结果为bool类型的判断，使用if，if的使用范围更广。</li></ol><h2 id="for循环控制"><a href="#for循环控制" class="headerlink" title="for循环控制"></a>for循环控制</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>听其名而知其意。这就是让我们的一段代码循环的执行。</p><h3 id="一个实际的需求"><a href="#一个实际的需求" class="headerlink" title="一个实际的需求"></a>一个实际的需求</h3><ul><li><p>案例：</p><p>编写一个程序，可以打印10句</p><p>“你好 Golang！”。想一想怎么做？</p><ul><li>使用传统的方式实现</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li>for循环的快速入门</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好 Golang"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="for循环的基本语法"><a href="#for循环的基本语法" class="headerlink" title="for循环的基本语法"></a>for循环的基本语法</h3></li><li><p>语法格式</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> 循环变量初始化；循环条件；循环变量迭代 <span class="token punctuation">&#123;</span>  循环操作（语句）<span class="token punctuation">&#125;</span></code></pre></li><li><p>对上面的语法格式说明</p><ul><li>对for循环来说，有四个要素：<ol><li>循环变量初始化</li><li>循环条件</li><li>循环操作（语句），有人也叫循环体</li><li>循环变量迭代</li></ol></li></ul></li><li><p>for循环执行的顺序说明：</p><ol><li>执行循环变量初始化，比如 <code>i:=1</code></li><li>执行循环条件，比如 <code>i &lt;= 10</code></li><li>如果循环条件为真，就执行循环操作：比如<code>fmt.Println(&quot;...&quot;)</code></li><li>执行循环变量迭代，比如 <code>i++</code></li><li>反复执行2， 3， 4步骤，直到 循环条件为False，就退出for循环。</li></ol></li></ul><h3 id="for循环执行流程分析"><a href="#for循环执行流程分析" class="headerlink" title="for循环执行流程分析"></a>for循环执行流程分析</h3><ul><li>for循环的流程图</li></ul><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210116180659978.png" alt="image-20210116180659978" loading="lazy"></p><ul><li>对照代码分析for循环的执行过程</li></ul><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210116180736110.png" alt="image-20210116180736110" loading="lazy"></p><h3 id="for循环的使用注意事项和细节讨论"><a href="#for循环的使用注意事项和细节讨论" class="headerlink" title="for循环的使用注意事项和细节讨论"></a>for循环的使用注意事项和细节讨论</h3><ol><li>循环条件是返回一个布尔值的表达式</li><li>for循环的第二种使用方式</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> 循环执行条件 <span class="token punctuation">&#123;</span>  <span class="token comment">//循环执行语句</span><span class="token punctuation">&#125;</span></code></pre><p>将变量初始化和变量迭代写到其他位置</p><ul><li>案例演示：</li></ul><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210116180912128.png" alt="image-20210116180912128" loading="lazy"></p><ol start="3"><li>for循环的第三种使用方式</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//循环执行语句</span><span class="token punctuation">&#125;</span></code></pre><p>上面的写法等价 <code>for ; ; &#123;&#125;</code> 是一个<strong>无限循环</strong>，通常需要<strong>配合break语句</strong>使用</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210116181324388.png" alt="image-20210116181324388" loading="lazy"></p><ol start="4"><li>Golang提供for-range的方式，可以方便遍历字符串和数组（注：数组的遍历，我们放到讲数组的时候再讲解），<strong>案例说明如何遍历字符串</strong>。</li></ol><ul><li>字符串遍历方式1-传统方式</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> str <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"hello,world"</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%c \n"</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//使用到下标</span><span class="token punctuation">&#125;</span></code></pre><ul><li>字符串遍历方式2-for-range</li></ul><pre class="language-go" data-language="go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>str <span class="token operator">=</span> <span class="token string">"abc~ok"</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> str <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"index=%d, val=%c \n"</span><span class="token punctuation">,</span>index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>上面代码的细节讨论</p><p>如果我们的字符串含有中文，那么传统的遍历字符串方式就是错误的，会出现乱码。原因是传统的对字符串的遍历是按照<strong>字节来遍历</strong>，而一个汉字在utf8编码是对应3个字节。</p><p>如何解决？</p><p>​    需要要将 str 转成 []rune切片。</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> str <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"hello,world!北京"</span>str2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">// 就是把str转成[]rune</span><span class="token keyword">for</span> i <span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%c \n"</span><span class="token punctuation">,</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//使用到下标</span><span class="token punctuation">&#125;</span></code></pre><p>​    对应for-range遍历方式而言，是按照字符方式遍历。因此如果有字符串有中文，也是ok的</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> str <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"abc~ok上海"</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> str <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"index=%d, val=%c \n"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>golang中还有一个<strong>byte</strong>数据类型与rune相似，它们都是用来表示字符类型的变量类型。它们的不同在于：</p><ul><li>byte 等同于int8，常用来处理ascii字符</li><li>rune 等同于int32,常用来处理unicode或utf-8字符</li></ul><h3 id="for循环的课堂练习"><a href="#for循环的课堂练习" class="headerlink" title="for循环的课堂练习"></a>for循环的课堂练习</h3><ol><li>打印1-100之间所有是9的倍数的整数的个数及总和。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> sum <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">9</span><span class="token operator">==</span><span class="token number">0</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>sum <span class="token operator">+=</span> i<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"sum = %d \n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go0 9 18 27 36 45 54 63 72 81 90 99 sum &#x3D; 594 ➜  main </code></pre><ol start="2"><li>完成下面的表达式输出，6是可变的。</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210116183346993.png" alt="image-20210116183346993" loading="lazy"></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> n <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"请输入参数:"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token keyword">var</span> m <span class="token builtin">int</span> <span class="token operator">=</span> n<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d \n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>m<span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>m<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go请输入参数:60 + 6 &#x3D; 6 1 + 5 &#x3D; 6 2 + 4 &#x3D; 6 3 + 3 &#x3D; 6 4 + 2 &#x3D; 6 5 + 1 &#x3D; 6 6 + 0 &#x3D; 6 ➜  main go run .&#x2F;main.go请输入参数:80 + 8 &#x3D; 8 1 + 7 &#x3D; 8 2 + 6 &#x3D; 8 3 + 5 &#x3D; 8 4 + 4 &#x3D; 8 5 + 3 &#x3D; 8 6 + 2 &#x3D; 8 7 + 1 &#x3D; 8 8 + 0 &#x3D; 8 </code></pre><h2 id="while和do-while的实现"><a href="#while和do-while的实现" class="headerlink" title="while和do..while的实现"></a>while和do..while的实现</h2><p>​    Go语言没有while和do…while语法，这一点需要注意，如果我们需要使用类似的其他语言（java/c的while和do…while)，<strong>可以通过for循环来实现其使用效果。</strong></p><h3 id="while循环的实现"><a href="#while循环的实现" class="headerlink" title="while循环的实现"></a>while循环的实现</h3><pre class="language-go" data-language="go"><code class="language-go">循环变量初始化<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> 循环条件表达式 <span class="token punctuation">&#123;</span>    <span class="token keyword">break</span> <span class="token comment">//跳出for循环..</span>  <span class="token punctuation">&#125;</span>  循环操作（语句）  循环变量迭代<span class="token punctuation">&#125;</span></code></pre><ul><li>说明<ol><li>for循环是一个无限循环</li><li>break语句就是跳出for循环</li></ol></li><li>使用上面的while实现完成输出10句“HelloWorld”</li></ul><pre class="language-go" data-language="go"><code class="language-go">i <span class="token operator">:=</span> <span class="token number">10</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">0</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"HelloWorld \n"</span><span class="token punctuation">)</span>  i<span class="token operator">--</span><span class="token punctuation">&#125;</span></code></pre><h3 id="do-while的实现"><a href="#do-while的实现" class="headerlink" title="do..while的实现"></a>do..while的实现</h3><pre class="language-go" data-language="go"><code class="language-go">循环变量初始化<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>  循环操作（语句）  循环变量迭代  <span class="token keyword">if</span> 循环条件表达式 <span class="token punctuation">&#123;</span>    <span class="token keyword">break</span> <span class="token comment">//跳出for循环..</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre><ul><li><p>说明</p><ol><li>上面的循环是先执行，再判断，因此至少执行一次。</li><li>当循环条件成立后，就会执行break，break就是跳出for循环，结束循环。</li></ol></li><li><p>案例演示</p><p>使用do..while实现10句“HelloWorldd”</p></li></ul><pre class="language-go" data-language="go"><code class="language-go">i <span class="token operator">:=</span> <span class="token number">10</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"HelloWorld \n"</span><span class="token punctuation">)</span>i<span class="token operator">--</span><span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">0</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="多重循环控制（重点，难点）"><a href="#多重循环控制（重点，难点）" class="headerlink" title="多重循环控制（重点，难点）"></a>多重循环控制（重点，难点）</h2><h3 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>将一个循环放在另一个循环体内，就形成了嵌套循环。在外边的 for 称为外层循环在里面的 for 循环称为内层循环。【建议一般使用两层，最多不要超过3层】</li><li>实质上，嵌套循环就是把内层循环当成外层循环的循环体。当只有内层循环的循环条件为 false 时，才会完全跳出内层循环，才可结束外层的当次循环，开始下一次的循环。</li><li>外层循环次数为 <strong>m</strong> 次，内层为 <strong>n</strong> 次，则内层循环体实际上需要执行 <strong>m*n</strong> 次</li></ol><h3 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h3><ol><li>统计 3 个班成绩情况，每个班有 5 名同学，求出各个班的平均分和所有班级的平均分[学生的成绩从键盘输入]</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> classNum <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">var</span> stuNum <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">var</span> sum <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token keyword">var</span> score <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token keyword">var</span> totalsum <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> classNum<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> stuNum<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"请输入%d班级的 第%d个学生的成绩： \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>score<span class="token punctuation">)</span>sum <span class="token operator">+=</span> score<span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"第%d个班级的平均分为：%v \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> sum <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">(</span>stuNum<span class="token punctuation">)</span><span class="token punctuation">)</span>totalsum <span class="token operator">+=</span> sum<span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"全体学生的平均分为: %v \n"</span><span class="token punctuation">,</span> totalsum <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>classNum<span class="token punctuation">)</span> <span class="token operator">*</span> stuNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>统计三个班及格人数，每个班有5名同学</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> classNum <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">var</span> stuNum <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">var</span> sum <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token keyword">var</span> score <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token keyword">var</span> totalsum <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> classNum<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>sum <span class="token operator">=</span> <span class="token number">0.0</span>topNum <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> stuNum<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"请输入%d班级的 第%d个学生的成绩： \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>score<span class="token punctuation">)</span><span class="token keyword">if</span> score <span class="token operator">>=</span> <span class="token number">60</span> <span class="token punctuation">&#123;</span>topNum<span class="token operator">++</span><span class="token punctuation">&#125;</span>sum <span class="token operator">+=</span> score<span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"第%d个班级的及格人数为%d, 平均分为：%v \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> topNum<span class="token punctuation">,</span> sum <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">(</span>stuNum<span class="token punctuation">)</span><span class="token punctuation">)</span>totalsum <span class="token operator">+=</span> sum<span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"全体学生的平均分为: %v \n"</span><span class="token punctuation">,</span> totalsum <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>classNum<span class="token punctuation">)</span> <span class="token operator">*</span> stuNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go请输入1班级的 第1个学生的成绩： 88请输入1班级的 第2个学生的成绩： 88请输入1班级的 第3个学生的成绩： 66请输入1班级的 第4个学生的成绩： 77请输入1班级的 第5个学生的成绩： 88第1个班级的平均分为：81.4 请输入2班级的 第1个学生的成绩： 请输入2班级的 第2个学生的成绩： 9请输入2班级的 第3个学生的成绩： 00请输入2班级的 第4个学生的成绩： 7请输入2班级的 第5个学生的成绩： 6➜  main go run .&#x2F;main.go请输入1班级的 第1个学生的成绩： 59请输入1班级的 第2个学生的成绩： 59请输入1班级的 第3个学生的成绩： 5请输入1班级的 第4个学生的成绩： 69请输入1班级的 第5个学生的成绩： 69第1个班级的及格人数为2, 平均分为：52.2 请输入2班级的 第1个学生的成绩： 99请输入2班级的 第2个学生的成绩： 99请输入2班级的 第3个学生的成绩： 99请输入2班级的 第4个学生的成绩： 99请输入2班级的 第5个学生的成绩： 99第2个班级的及格人数为5, 平均分为：99 请输入3班级的 第1个学生的成绩： 98请输入3班级的 第2个学生的成绩： 98请输入3班级的 第3个学生的成绩： 98请输入3班级的 第4个学生的成绩： 98请输入3班级的 第5个学生的成绩： 98第3个班级的及格人数为5, 平均分为：98 全体学生的平均分为: 83.06666666666666 </code></pre><ol start="3"><li>打印金字塔 【经典案例】</li></ol><p>使用for循环完成下面的案例：请编写一个程序，可以接受一个整数，表示层数，打印出金字塔。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token comment">/*     * ********   *******      **********/</span><span class="token keyword">var</span> n <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"请输入层数："</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> j <span class="token operator">:=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><strong>有手就行</strong></p><pre class="language-none"><code class="language-none">请输入层数：3   *  *** *****➜  main go run .&#x2F;main.go请输入层数：5     *    ***   *****  ******* *********➜  main go run .&#x2F;main.go请输入层数：12            *           ***          *****         *******        *********       ***********      *************     ***************    *****************   *******************  ********************* ***********************➜  main </code></pre><ol start="4"><li>打印出九九乘法表</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d*%d=%d\t"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">1*1&#x3D;11*2&#x3D;2   2*2&#x3D;41*3&#x3D;3   2*3&#x3D;6   3*3&#x3D;91*4&#x3D;4   2*4&#x3D;8   3*4&#x3D;12  4*4&#x3D;161*5&#x3D;5   2*5&#x3D;10  3*5&#x3D;15  4*5&#x3D;20  5*5&#x3D;251*6&#x3D;6   2*6&#x3D;12  3*6&#x3D;18  4*6&#x3D;24  5*6&#x3D;30  6*6&#x3D;361*7&#x3D;7   2*7&#x3D;14  3*7&#x3D;21  4*7&#x3D;28  5*7&#x3D;35  6*7&#x3D;42  7*7&#x3D;491*8&#x3D;8   2*8&#x3D;16  3*8&#x3D;24  4*8&#x3D;32  5*8&#x3D;40  6*8&#x3D;48  7*8&#x3D;56  8*8&#x3D;641*9&#x3D;9   2*9&#x3D;18  3*9&#x3D;27  4*9&#x3D;36  5*9&#x3D;45  6*9&#x3D;54  7*9&#x3D;63  8*9&#x3D;72  9*9&#x3D;81</code></pre><h2 id="跳转控制语句–break"><a href="#跳转控制语句–break" class="headerlink" title="跳转控制语句–break"></a>跳转控制语句–break</h2><h3 id="看一个具体需求，引出break"><a href="#看一个具体需求，引出break" class="headerlink" title="看一个具体需求，引出break"></a>看一个具体需求，引出break</h3><p>随机生成1-100的一个数，直到生成了99这个数，看看你一共用了几次？</p><ul><li><p>分析：</p><p>编写一个无限循环的控制，不停的生成随机数，当生成了99时，退出这个无限循环 </p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//如何生成随机数</span><span class="token comment">//在Go中需要生成一个随机种子，否则返回的值总是固定的。</span><span class="token comment">//time.Now().Unix():返回一个从1970.1.1 00:00:00到现在的秒数</span>rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">,</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><h3 id="break的快速入门案例"><a href="#break的快速入门案例" class="headerlink" title="break的快速入门案例"></a>break的快速入门案例</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> n <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">var</span> count <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span>rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">&#123;</span>n <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">99</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"生成99共进行了 %d 次"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li>运行结果：</li></ul><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go生成99共进行了 26 次➜  main go run .&#x2F;main.go生成99共进行了 76 次➜  main go run .&#x2F;main.go生成99共进行了 15 次➜  main go run .&#x2F;main.go生成99共进行了 15 次➜  main go run .&#x2F;main.go生成99共进行了 25 次</code></pre><h3 id="基本介绍-3"><a href="#基本介绍-3" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>​    break语句用于终止某个语句块的执行，用于中断当前for循环或跳出switch语句。</p><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token punctuation">&#123;</span>  <span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span>  <span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span>  <span class="token keyword">break</span>  <span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span>  <span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><h3 id="以for循环使用break为例，画出示意图"><a href="#以for循环使用break为例，画出示意图" class="headerlink" title="以for循环使用break为例，画出示意图"></a>以for循环使用break为例，画出示意图</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210118150052072.png" alt="image-20210118150052072" loading="lazy"></p><h3 id="break的注意事项和使用细节"><a href="#break的注意事项和使用细节" class="headerlink" title="break的注意事项和使用细节"></a>break的注意事项和使用细节</h3><ol><li>break语句出现在多层嵌套的语句块中时，可以<strong>通过标签</strong>指明要终止的是哪一层语句块</li><li>案例：</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> i <span class="token builtin">int</span><span class="token keyword">var</span> j <span class="token builtin">int</span><span class="token keyword">var</span> k <span class="token builtin">int</span><span class="token comment">//lable2:</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>lable1<span class="token punctuation">:</span><span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">122</span><span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span><span class="token comment">//break // break 默认会跳出最近的for循环</span><span class="token keyword">break</span> lable1<span class="token comment">//break lable2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i:%d j:%d k:%d \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol start="3"><li>对上面案例的说明：<ol><li>break默认会跳出最近的for循环</li><li>break后面可以指定标签，跳出标签对应的for循环</li></ol></li></ol><h3 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h3><ol><li>100以内的数求和，求出 当和 第一次大于20的当前数</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> sum <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> i<span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">></span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i:%d \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.goi:6 ➜  main </code></pre><ol start="2"><li>实现登录验证，有三次机会，如果用户名为“张无忌”，密码“888”提示登录成功，否则提示还有几次机会。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> username <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"张无忌"</span><span class="token keyword">var</span> loginname <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">var</span> loginpwd <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">var</span> pwd <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"888"</span><span class="token keyword">var</span> count <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">for</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> count <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"欢迎登陆，剩余的尝试登录次数错误次数：%d次 \n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"请输入用户名："</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>loginname<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>loginpwd<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"已经无法继续登陆了！"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> loginname <span class="token operator">==</span> username <span class="token operator">&amp;&amp;</span> loginpwd <span class="token operator">==</span> pwd <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"登录成功！"</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>count<span class="token operator">--</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"密码输入错误，剩余尝试次数减一！\n"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go欢迎登陆，剩余的尝试登录次数错误次数：3次 请输入用户名：张三丰请输入密码：888密码输入错误，剩余尝试次数减一！欢迎登陆，剩余的尝试登录次数错误次数：2次 请输入用户名：张无忌请输入密码：888登录成功！</code></pre><h2 id="跳转控制语句-continue"><a href="#跳转控制语句-continue" class="headerlink" title="跳转控制语句-continue"></a>跳转控制语句-continue</h2><h3 id="基本介绍-4"><a href="#基本介绍-4" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>continue语句用于结束本次循环，继续执行下一次循环。</li><li>continue语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环，这个和前面的break标签的使用的规则一样。</li></ul><h3 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token punctuation">&#123;</span>  <span class="token operator">...</span><span class="token operator">...</span>  <span class="token keyword">continue</span>  <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span></code></pre><h3 id="continue流程图"><a href="#continue流程图" class="headerlink" title="continue流程图"></a>continue流程图</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210118174458834.png" alt="image-20210118174458834" loading="lazy"></p><h3 id="案例分析continue的使用"><a href="#案例分析continue的使用" class="headerlink" title="案例分析continue的使用"></a>案例分析continue的使用</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210118175856162.png" alt="image-20210118175856162" loading="lazy"></p><h3 id="continue的课堂练习"><a href="#continue的课堂练习" class="headerlink" title="continue的课堂练习"></a>continue的课堂练习</h3><ul><li>continue实现：打印1到100之间的奇数（要求使用for循环+continue）</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99 </code></pre><h2 id="跳转控制语句-goto"><a href="#跳转控制语句-goto" class="headerlink" title="跳转控制语句-goto"></a>跳转控制语句-goto</h2><h3 id="goto的基本介绍"><a href="#goto的基本介绍" class="headerlink" title="goto的基本介绍"></a>goto的基本介绍</h3><ol><li>Go语言的goto语句可以无条件地转移到程序中指定的行。</li><li>goto语句通常与条件语句配合使用。可用来实现条件转移，跳出循环体等功能。</li><li>在Go程序设计中一般不主张使用goto语句，以免造成程序流程的混乱，使理解和调试程序都产生困难</li></ol><h3 id="goto基本语法"><a href="#goto基本语法" class="headerlink" title="goto基本语法"></a>goto基本语法</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">goto</span> label <span class="token operator">...</span><span class="token operator">...</span>label<span class="token punctuation">:</span>statement</code></pre><h3 id="goto的流程图"><a href="#goto的流程图" class="headerlink" title="goto的流程图"></a>goto的流程图</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210118180436848.png" alt="image-20210118180436848" loading="lazy"></p><h3 id="快速入门案例"><a href="#快速入门案例" class="headerlink" title="快速入门案例"></a>快速入门案例</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> n <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token comment">//演示goto的使用</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span><span class="token keyword">if</span> n <span class="token operator">></span> <span class="token number">20</span> <span class="token punctuation">&#123;</span><span class="token keyword">goto</span> label1<span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok2"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok3"</span><span class="token punctuation">)</span>label1<span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok4"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok5"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok6"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok7"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.gook1ok4ok5ok6ok7</code></pre><h2 id="跳转控制语句-return"><a href="#跳转控制语句-return" class="headerlink" title="跳转控制语句-return"></a>跳转控制语句-return</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>return使用在方法或者函数中，表示跳出所在的方法或函数，在讲解函数的时候，会详细的介绍。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">3</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"哇哇"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">➜  main go run .&#x2F;main.go哇哇 1哇哇 2</code></pre><ul><li>说明<ol><li>如果return是在普通的函数，则表示跳出该函数，即不再执行函数中return后面代码，也可以理解成终止函数。</li><li>如果return是在main函数，表示终止main函数，也就是说终止程序。</li></ol></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Go语言の程序流程控制&quot;&gt;&lt;a href=&quot;#Go语言の程序流程控制&quot; class=&quot;headerlink&quot; title=&quot;Go语言の程序流程控制&quot;&gt;&lt;/a&gt;Go语言の程序流程控制&lt;/h1&gt;&lt;h2 id=&quot;程序流程控制介绍&quot;&gt;&lt;a href=&quot;#程序流程控制介绍&quot; class=&quot;headerlink&quot; title=&quot;程序流程控制介绍&quot;&gt;&lt;/a&gt;程序流程控制介绍&lt;/h2&gt;&lt;p&gt;在程序中，程序运行的流程控制决定程序是如何执行的，是我们必须掌握的，主要有三大流程控制语句。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;顺序控制&lt;/li&gt;
&lt;li&gt;分支控制&lt;/li&gt;
&lt;li&gt;循环控制&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="Go" scheme="https://mikutown.gitee.io/blog/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-7-删除有序数组中的重复元素(1.1.28)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/15/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-7-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-(1.1.28)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/15/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-7-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-(1.1.28)/</id>
    <published>2021-01-15T06:13:56.000Z</published>
    <updated>2021-01-15T12:27:16.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-7-删除有序数组中的重复元素-1-1-28"><a href="#算法练习-7-删除有序数组中的重复元素-1-1-28" class="headerlink" title="算法练习-7-删除有序数组中的重复元素-(1.1.28)"></a>算法练习-7-删除有序数组中的重复元素-(1.1.28)</h1><p>知识点</p><ul><li>遍历数组</li><li>打印数组中的每个元素</li></ul><a id="more"></a><h2 id="1-1-28"><a href="#1-1-28" class="headerlink" title="1.1.28"></a>1.1.28</h2><h3 id="删除重复元素。修改BinarySearch类中的测试用例来删去排序之后白名单中的所有重复元素。"><a href="#删除重复元素。修改BinarySearch类中的测试用例来删去排序之后白名单中的所有重复元素。" class="headerlink" title="删除重复元素。修改BinarySearch类中的测试用例来删去排序之后白名单中的所有重复元素。"></a><strong>删除重复元素。修改BinarySearch类中的测试用例来删去排序之后白名单中的所有重复元素。</strong></h3><p><strong>1.1.28 Remove duplicates. Modify the test client in BinarySearch to remove any duplicate keys in the whitelist after the sort.</strong></p><p>（这是一道Leetcode题目，原题描述如下：</p><pre class="language-none"><code class="language-none">Remove Duplicates from Sorted ArrayGiven a sorted array, remove the duplicates in place such that each element appear only once and return the new length.Do not allocate extra space for another array, you must do this in place with constant memory.For example,Given input array nums &#x3D; [1,1,2],Your function should return length &#x3D; 2, with the first two elements of nums being 1 and 2 respectively. It doesn&#39;t matter what you leave beyond the new length.</code></pre><ul><li><p>我自己的思路</p><p>写一个接收数组信息的函数getArr，输入数组大小和数组内容后，使用冒泡排序进行数组的排序，从小到大，方便之后的去重。</p><p>又写了一个生成数组元素个数的count数组的函数getCount，返回一个数组count，count[i]表示数组arr中i元素的数量。</p><p>然后写了一个函数delSurplus，参数是两个数组（arr和count），通过for循环将多余的元素用后面的元素依次覆盖，但是我的方法有个缺点是不支持数组里负数的元素，可以加另一个count进行去重。</p></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdIn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">BinarySearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取key在数组a中的位置，若没有则返回-1     * @param a     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hi <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;=</span> hi<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Key is in a[lo..hi] or not present.</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span>      <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> hi <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> lo <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取key在数组a中的位置，若没有则返回-1     * @param key     * @param a     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 对数组进行冒泡排序     * @param arr     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 生成手动输入后的有序数组     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入数组的大小（一个整数）:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入数组的数字，以空格隔开或者回车隔开:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"将输入的数组排序后:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"arr["</span><span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"]="</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 生成计数数组     * @param arr     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            count<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"计数数组的值为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"count["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 通过count数组删除arr中的重复元素，并返回一个新的数组     * @param arr     * @param count     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">delSurplus</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> del <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                del <span class="token operator">=</span> <span class="token function">rank</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> del<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> array<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token function">getArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token function">getCount</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token function">delSurplus</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"去重后结果为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"array["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果</p><pre class="language-none"><code class="language-none">请输入数组的大小（一个整数）:10请输入数组的数字，以空格隔开或者回车隔开:9 7 7 5 5 4 4 2 2 1将输入的数组排序后:arr[0]&#x3D;1arr[1]&#x3D;2arr[2]&#x3D;2arr[3]&#x3D;4arr[4]&#x3D;4arr[5]&#x3D;5arr[6]&#x3D;5arr[7]&#x3D;7arr[8]&#x3D;7arr[9]&#x3D;9计数数组的值为：count[0]&#x3D;0 count[1]&#x3D;1 count[2]&#x3D;2 count[3]&#x3D;0 count[4]&#x3D;2 count[5]&#x3D;2 count[6]&#x3D;0 count[7]&#x3D;2 count[8]&#x3D;0 count[9]&#x3D;1 去重后结果为：array[0]&#x3D;1 array[1]&#x3D;2 array[2]&#x3D;4 array[3]&#x3D;5 array[4]&#x3D;7 array[5]&#x3D;9 </code></pre><p>参考答案：</p><p>a)实现思路：数组索引从头移至数组倒数第二个，当前数组索引元素值与下一元素值进行比较，相同时将当前元素值标记成标记值。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token class-name">ArrayOfSorted</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ArrayOfSorted</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token class-name">ArrayOfStored</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token class-name">ArraryOfSorted</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>b)在a思路的基础上增加规则：当前元素与下一个元素不同并且当前元素与前一个元素值相同时那么当前元素标记成标记值。当前元素是倒数第二个元素并且与最后一个元素相同，那么将最后一个元素标记成标记值。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token class-name">IsRepeart</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token class-name">ArrayOfSorted</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ArrayOfSorted</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token class-name">ArrayOfStored</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token class-name">ArraryOfSorted</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token class-name">IsRepeart</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token class-name">ArrayOfStored</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token class-name">ArrayOfStored</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">IsRepeart</span><span class="token punctuation">)</span> <span class="token class-name">ArrayOfStored</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token class-name">IsRepeart</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>还有一个思路</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practise_01_01_28</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span><span class="token operator">++</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/longjin2018/p/9848669.html">https://www.cnblogs.com/longjin2018/p/9848669.html</a></p><p><a href="https://xiaozhuanlan.com/topic/6054279138">https://xiaozhuanlan.com/topic/6054279138</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-7-删除有序数组中的重复元素-1-1-28&quot;&gt;&lt;a href=&quot;#算法练习-7-删除有序数组中的重复元素-1-1-28&quot; class=&quot;headerlink&quot; title=&quot;算法练习-7-删除有序数组中的重复元素-(1.1.28)&quot;&gt;&lt;/a&gt;算法练习-7-删除有序数组中的重复元素-(1.1.28)&lt;/h1&gt;&lt;p&gt;知识点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;遍历数组&lt;/li&gt;
&lt;li&gt;打印数组中的每个元素&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-6-二项分布的递归实现(1.1.27)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/15/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-6-%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83%E7%9A%84%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0-(1.1.27)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/15/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-6-%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83%E7%9A%84%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0-(1.1.27)/</id>
    <published>2021-01-15T05:24:58.000Z</published>
    <updated>2021-01-15T12:27:41.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-6-二项分布的递归实现-1-1-27"><a href="#算法练习-6-二项分布的递归实现-1-1-27" class="headerlink" title="算法练习-6-二项分布的递归实现-(1.1.27)"></a>算法练习-6-二项分布的递归实现-(1.1.27)</h1><p>知识点：</p><ul><li>二项分布</li></ul><a id="more"></a><h2 id="1-1-27"><a href="#1-1-27" class="headerlink" title="1.1.27"></a>1.1.27</h2><h3 id="二项分布。"><a href="#二项分布。" class="headerlink" title="二项分布。"></a><strong>二项分布。</strong></h3><p><strong>1.1.27 二项分布。估计用以下代码计算binomial(100, 50)将会产生的递归调用次数:</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">binomial</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> p<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">binomial</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">+</span> p<span class="token operator">*</span><span class="token function">binomial</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>将已经计算过的值保存在数组中并给出一个更好的实现。</strong></p><p><strong>1.1.27 Binomial distribution. Estimate the number of recursive calls that would be used by the code to compute binomial(100, 50). Develop a better implementation that is based on saving computed values in an array.</strong></p><ul><li>分析</li></ul><p>二项分布的含义：从N个独立的是/非实验中，成功次数的离散概率分布。每次实验的成功概率为p。</p><p>概率质量公式为：<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210115135839132.png" alt="image-20210115135839132" loading="lazy"></p><p>对于k=0，1，2…n 其中</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210115135915178.png" alt="image-20210115135915178" loading="lazy"></p><p>补充说明：<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210115135935309.png" alt="image-20210115135935309" loading="lazy"></p><p>分析此递归算法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1.0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span></code></pre><p>表示的就是这三个等式</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210115135935309.png" alt="image-20210115135935309" loading="lazy"></p><p>而<code> return (1.0 - p)*binomial(N-1, k, p) + p*binomial(N-1, k-1,p);</code>是因为<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210115140523866.png" alt="image-20210115140523866" loading="lazy"></p><p>使用循环数组替换递归算法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">binomial02</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token class-name">N</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">-</span>p<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">*</span>b<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">-</span>p<span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> b<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>分析： </p><p>​    我们为数组b分配了（N+1）*（K+1）个大小的空间</p><pre class="language-none"><code class="language-none"> b[0][0]  b[0][1]  b[0][2]  b[0][3]  b[0][4]  b[0][5] b[1][0]  b[1][1]  b[1][2]  b[1][3]  b[1][4]  b[1][5] b[2][0]  b[2][1]  b[2][2]  b[2][3]  b[2][4]  b[2][5] b[3][0]  b[3][1]  b[3][2]  b[3][3]  b[3][4]  b[3][5] b[4][0]  b[4][1]  b[4][2]  b[4][3]  b[4][4]  b[4][5] b[5][0]  b[5][1]  b[5][2]  b[5][3]  b[5][4]  b[5][5] b[6][0]  b[6][1]  b[6][2]  b[6][3]  b[6][4]  b[6][5] b[7][0]  b[7][1]  b[7][2]  b[7][3]  b[7][4]  b[7][5] b[8][0]  b[8][1]  b[8][2]  b[8][3]  b[8][4]  b[8][5] b[9][0]  b[9][1]  b[9][2]  b[9][3]  b[9][4]  b[9][5]b[10][0] b[10][1] b[10][2] b[10][3] b[10][4] b[10][5]</code></pre><p>第一个for循环是为第一列进行赋值，双重循环并没有涉及第一行和第一列的赋值。我们可以看出 b[10][5] = 0.25 * b[10-1][5-1] + 0.75 * b[10-1][5] ，而b[9][4] =  0.25 * b[8][3] + 0.75 * b[8][4]</p><p>b[9][5] =  0.25 * b[8][4] + 0.75 * b[8][5]</p><p>相当于 <code>return ( 1.0 - p ) * binomial(n-1, k, p) + p * binomial(n-1, k-1, p);</code> 也就是用循环数组的方式代替了递归调用。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://ddrv.cn/a/63651">http://ddrv.cn/a/63651</a></p><p><a href="https://zhangjia.tv/670.html">https://zhangjia.tv/670.html</a> </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-6-二项分布的递归实现-1-1-27&quot;&gt;&lt;a href=&quot;#算法练习-6-二项分布的递归实现-1-1-27&quot; class=&quot;headerlink&quot; title=&quot;算法练习-6-二项分布的递归实现-(1.1.27)&quot;&gt;&lt;/a&gt;算法练习-6-二项分布的递归实现-(1.1.27)&lt;/h1&gt;&lt;p&gt;知识点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二项分布&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-5-排序预习(1.1.26)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/15/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-5-%E6%8E%92%E5%BA%8F%E9%A2%84%E4%B9%A0(1.1.26)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/15/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-5-%E6%8E%92%E5%BA%8F%E9%A2%84%E4%B9%A0(1.1.26)/</id>
    <published>2021-01-15T04:55:50.000Z</published>
    <updated>2021-01-15T12:48:46.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-5-排序预习-1-1-26"><a href="#算法练习-5-排序预习-1-1-26" class="headerlink" title="算法练习-5-排序预习(1.1.26)"></a>算法练习-5-排序预习(1.1.26)</h1><h2 id="1-1-26"><a href="#1-1-26" class="headerlink" title="1.1.26"></a>1.1.26</h2><h3 id="将三个数字排序。"><a href="#将三个数字排序。" class="headerlink" title="将三个数字排序。"></a><strong>将三个数字排序。</strong></h3><p><strong>1.1.26 将三个数字排序。假设 a、b、c 和 t 都是同一种原始数字类型的变量。证明以下代码能够将 a、 b、c 按照升序排列:</strong><br><strong>if (a &gt; b) { t = a; a = b; b = t; }</strong><br><strong>if (a &gt; c) { t = a; a = c; c = t; }</strong><br><strong>if (b &gt; c) { t = b; b = c; c = t; }</strong></p><p><strong>1.1.26 Sorting three numbers. Suppose that the variables a, b, c, and t are all of the same numeric primitive type. Show that the following code puts a, b, and c in ascending order:</strong><br><strong>if (a &gt; b) { t = a; a = b; b = t; }</strong><br><strong>if (a &gt; c) { t = a; a = c; c = t; }</strong><br><strong>if (b &gt; c) { t = b; b = c; c = t; }</strong></p><ul><li>答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sortdemo</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前：a="</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">" b="</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">" c="</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t <span class="token operator">=</span> a<span class="token punctuation">;</span> a <span class="token operator">=</span> b<span class="token punctuation">;</span> b <span class="token operator">=</span> t<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t <span class="token operator">=</span> a<span class="token punctuation">;</span> a <span class="token operator">=</span> c<span class="token punctuation">;</span> c <span class="token operator">=</span> t<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t <span class="token operator">=</span> b<span class="token punctuation">;</span> b <span class="token operator">=</span> c<span class="token punctuation">;</span> c <span class="token operator">=</span> t<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后：a="</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">" b="</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">" c="</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> b <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sortdemo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>运行结果</li></ul><pre class="language-none"><code class="language-none">231342排序前：a&#x3D;23 b&#x3D;13 c&#x3D;42排序后：a&#x3D;13 b&#x3D;23 c&#x3D;42432312排序前：a&#x3D;43 b&#x3D;23 c&#x3D;12排序后：a&#x3D;12 b&#x3D;23 c&#x3D;43122334排序前：a&#x3D;12 b&#x3D;23 c&#x3D;34排序后：a&#x3D;12 b&#x3D;23 c&#x3D;34</code></pre><p>分析代码可知，a在两次与b，c的比较后成为了最小的值</p><p>b在与c比较后又成为了第二小的值 因此最后的结果为c最大，b次之，a最小。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算法练习-5-排序预习-1-1-26&quot;&gt;&lt;a href=&quot;#算法练习-5-排序预习-1-1-26&quot; class=&quot;headerlink&quot; title=&quot;算法练习-5-排序预习(1.1.26)&quot;&gt;&lt;/a&gt;算法练习-5-排序预习(1.1.26)&lt;/h1&gt;&lt;h2 id=</summary>
      
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-4-二分法查找的递归实现（1.1.22-1.1.25)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/12/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-4-%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE%E7%9A%84%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%EF%BC%881.1.22-1.1.25)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/12/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-4-%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE%E7%9A%84%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%EF%BC%881.1.22-1.1.25)/</id>
    <published>2021-01-12T06:16:59.000Z</published>
    <updated>2021-01-12T12:57:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-4-二分法查找的递归实现（1-1-22-1-1-25"><a href="#算法练习-4-二分法查找的递归实现（1-1-22-1-1-25" class="headerlink" title="算法练习-4-二分法查找的递归实现（1.1.22-1.1.25)"></a>算法练习-4-二分法查找的递归实现（1.1.22-1.1.25)</h1><ul><li>知识点<ul><li>二分法查找（BinarySearch)</li><li>递归</li><li>欧几里得算法</li></ul></li></ul><a id="more"></a><h2 id="1-1-22-1-1-25"><a href="#1-1-22-1-1-25" class="headerlink" title="1.1.22-1.1.25"></a>1.1.22-1.1.25</h2><h3 id="使用1-1-6-4-中的-rank-递归方法"><a href="#使用1-1-6-4-中的-rank-递归方法" class="headerlink" title="使用1.1.6.4 中的 rank()递归方法"></a><strong>使用1.1.6.4 中的 rank()递归方法</strong></h3><p>1.1.22 重新实现 BinarySearch 并跟踪该方法的调用。每当该方法被调用时，打印出它的参数 lo 和 hi 并按照递归的深度缩进。提示 :为递归方法加一个参数来保存递归的深度。</p><p><em>1.1.22 Write a version of Binary Search that uses the recursive rank() given on page 25 and traces the method calls. Each time the recursive method is called, print the argument values lo and hi, indented by the depth of the recursion. Hint: Add an argument to the recursive method that keeps track of the depth.</em></p><p>书中的rank方法示例代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">rank</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">//如果key存在于a[]中，它的索引不会小于lo且不会大于hi</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lo <span class="token operator">></span> hi<span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">rank</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> a<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">rank</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> a<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>                           <span class="token keyword">return</span> mid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>关于递归，我们再回顾一下书中关于递归的描述：</p><ul><li>编写递归代码时最重要的有以下三点：<ul><li>递归总有个最简单的情况。</li><li>递归调用总是去尝试解决一个规模更小的子问题，这样递归才能收敛到最简单的情况。</li><li>递归调用的父问题和尝试解决的子问题之间不应该有交集。</li></ul></li></ul><p>答案：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> rank <span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">rank</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> rank <span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> lo<span class="token punctuation">,</span><span class="token keyword">int</span> hi<span class="token punctuation">,</span><span class="token keyword">int</span> deep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hi <span class="token operator">&lt;</span> lo<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> deep <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lo: "</span><span class="token operator">+</span>lo<span class="token operator">+</span><span class="token string">" hi: "</span><span class="token operator">+</span>hi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> rank <span class="token punctuation">(</span>key<span class="token punctuation">,</span>a<span class="token punctuation">,</span>lo<span class="token punctuation">,</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>deep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> rank <span class="token punctuation">(</span>key<span class="token punctuation">,</span>a<span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>hi<span class="token punctuation">,</span>deep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> mid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>测试用例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">rank</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/**打印出的结果  lo: 0  hi: 16    lo: 9  hi: 16      lo: 9  hi: 11**/</span></code></pre><h3 id="为BinarySearch的测试用例添加一个参数："><a href="#为BinarySearch的测试用例添加一个参数：" class="headerlink" title="为BinarySearch的测试用例添加一个参数："></a>为BinarySearch的测试用例添加一个参数：</h3><p>1.1.23 + 打印出标准输入中不在白名单上的值；-，则打印出标准输入中在名单的值。</p><p><em>1.1.23 Add to the BinarySearch test client the ability to respond to a second argument: + to print numbers from standard input that are not in the whitelist, - to print numbers that are in the whitelist.</em></p><p>分析：</p><p>解答这道题需要我们对IDE环境，给读者解释一下这道题的意思，“+”和“-”是作为参数传进来的。当传入的参数是“+”时则打印出标准输入中不在白名单上的值。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>day01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">BinarySearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hi <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;=</span> hi<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Key is in a[lo..hi] or not present.</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span>      <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> hi <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> lo <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//这里参数symbol本来是要传进来的，这里写死，是为了Demo方便</span>        <span class="token keyword">char</span> symbol <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> whitelist <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// sort the array</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>whitelist<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// read integer key from standard input; print if not in whitelist</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> found <span class="token operator">=</span> <span class="token function">rank</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>whitelist<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'+'</span> <span class="token operator">==</span> symbol <span class="token operator">&amp;&amp;</span> found <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">==</span> symbol <span class="token operator">&amp;&amp;</span> found <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="给出使用欧几里得算法105和24的最大公约数的过程中得到的一系列p和q的值。"><a href="#给出使用欧几里得算法105和24的最大公约数的过程中得到的一系列p和q的值。" class="headerlink" title="给出使用欧几里得算法105和24的最大公约数的过程中得到的一系列p和q的值。"></a>给出使用欧几里得算法105和24的最大公约数的过程中得到的一系列p和q的值。</h3><p>1.1.24 扩展算法中的代码得到一个程序Euclid,从命令行接受两个参数，计算它们的最大公约数并打印出每次调用递归方法时的两个参数。使用你的程序计算1 111 111和1 234 567的最大公约数。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practice03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"gcd(105,24)=%d"</span><span class="token punctuation">,</span><span class="token function">gcd</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span><span class="token keyword">int</span> q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p=%d,q=%d"</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> p <span class="token operator">%</span> q<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果</p><pre class="language-none"><code class="language-none">p&#x3D;105,q&#x3D;24p&#x3D;24,q&#x3D;9p&#x3D;9,q&#x3D;6p&#x3D;6,q&#x3D;3p&#x3D;3,q&#x3D;0gcd(105,24)&#x3D;3</code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practice03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"gcd(1111111,1234567)=%d"</span><span class="token punctuation">,</span><span class="token function">gcd</span><span class="token punctuation">(</span><span class="token number">1111111</span><span class="token punctuation">,</span><span class="token number">1234567</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span><span class="token keyword">int</span> q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p=%d,q=%d"</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> p <span class="token operator">%</span> q<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果</p><pre class="language-none"><code class="language-none">p&#x3D;1111111,q&#x3D;1234567p&#x3D;1234567,q&#x3D;1111111p&#x3D;1111111,q&#x3D;123456p&#x3D;123456,q&#x3D;7p&#x3D;7,q&#x3D;4p&#x3D;4,q&#x3D;3p&#x3D;3,q&#x3D;1p&#x3D;1,q&#x3D;0gcd(1111111,1234567)&#x3D;1</code></pre><h3 id="使用数学归纳法"><a href="#使用数学归纳法" class="headerlink" title="使用数学归纳法"></a>使用数学归纳法</h3><p>证明欧几里得算法能够计算任意一堆非负整数p和q的最大公约数。</p><ul><li><p>分析：</p><p>欧几里德的算法关键在于证明等式gcd(a,b)=gcd(b,a mod b)的正确性。</p></li><li><p>定理：</p><p>a，b为正整数，则gcd(a,b)=gcd(b,a mod b) </p></li><li><p>证明：</p><pre class="language-none"><code class="language-none">k,r为整数，设r &#x3D; a mod b,则a可以表示成a&#x3D;kb+r。假设d是&#123;a,b&#125;的一个公约数，则d整除a,d整除b，而r&#x3D;a-kb，因此d整除r，d也是b和r的公约数。 假设d是&#123;b,r&#125;的一个公约数，则d整除b,d整除r，而a&#x3D;kb+r，因此d整除a, d也是a和b的公约数。因此&#123;a,b&#125;和&#123;b,r&#125;的公因子集合是一样的。特别地，&#123;a,b&#125;的最大共因子和&#123;b,r&#125;的最大公因子是一样的，即gcd(a,b)&#x3D;gcd(b,a mod b)。</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2></li></ul><p><a href="https://xiaozhuanlan.com/topic/1539086427">算法练习(4):二分法查找的递归实现(1.1.22-1.1.25) － 小专栏 (xiaozhuanlan.com)</a></p><p><a href="https://www.cnblogs.com/longjin2018/p/9848621.html">Algs4-1.1.24欧几里得算法求最大公约数 - 修电脑的龙生 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-4-二分法查找的递归实现（1-1-22-1-1-25&quot;&gt;&lt;a href=&quot;#算法练习-4-二分法查找的递归实现（1-1-22-1-1-25&quot; class=&quot;headerlink&quot; title=&quot;算法练习-4-二分法查找的递归实现（1.1.22-1.1.25)&quot;&gt;&lt;/a&gt;算法练习-4-二分法查找的递归实现（1.1.22-1.1.25)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;二分法查找（BinarySearch)&lt;/li&gt;
&lt;li&gt;递归&lt;/li&gt;
&lt;li&gt;欧几里得算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Go语言の运算符</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/09/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/09/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2021-01-09T13:43:50.000Z</published>
    <updated>2021-01-11T11:03:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go语言の运算符"><a href="#Go语言の运算符" class="headerlink" title="Go语言の运算符"></a>Go语言の运算符</h1><p>本文介绍了Go语言的运算符</p><a id="more"></a><h2 id="运算符的基本介绍"><a href="#运算符的基本介绍" class="headerlink" title="运算符的基本介绍"></a>运算符的基本介绍</h2><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等等</p><ol><li>算术运算符</li><li>赋值运算符</li><li>比较运算符/关系运算符</li><li>逻辑运算符</li><li>位运算符</li><li>其他运算符</li></ol><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p>算术运算符是对数值类型的变量进行运算的，比如：加减乘除。在Go程序中使用的非常多</p><h3 id="算术运算符的一览表"><a href="#算术运算符的一览表" class="headerlink" title="算术运算符的一览表"></a>算术运算符的一览表</h3><table><thead><tr><th>运算符</th><th>运算</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-4</td><td>-4</td></tr><tr><td>+</td><td>加</td><td>5+5</td><td>10</td></tr><tr><td>-</td><td>减</td><td>6-4</td><td>2</td></tr><tr><td>*</td><td>乘</td><td>3*4</td><td>12</td></tr><tr><td>/</td><td>除</td><td>5/5</td><td>1</td></tr><tr><td>%</td><td>取模（取余）</td><td>7%5</td><td>2</td></tr><tr><td>++</td><td>自增</td><td>a=2 a++</td><td>a=3</td></tr><tr><td>–</td><td>自减</td><td>a=2 a–</td><td>a=1</td></tr><tr><td>+</td><td>字符串相加</td><td>“He” + “llo”</td><td>“Hello”</td></tr></tbody></table><h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><ul><li>案例：演示算术运算符的使用。</li></ul><p>+，-，*，/，%，++，–，重点讲解/、%</p><p>自增：++</p><p>自减：–</p><ul><li>演示/的使用的特点</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//重点讲解 / 、%</span><span class="token comment">//说明：如果运算的数都是整数，那么除后，去掉小数部分，保留整数部分</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">var</span> n1 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">4</span> <span class="token comment">//</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token comment">//如果我们希望保留小数部分，则需要有浮点数参与运算</span><span class="token keyword">var</span> n2 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">10.0</span> <span class="token operator">/</span> <span class="token number">4</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><strong>运行结果</strong></p><pre class="language-none"><code class="language-none">222.5</code></pre><ul><li>演示 % 的使用特点</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//演示 % 的使用</span><span class="token comment">// 看一个公式 a % b = a - a / b * b</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"10 % 3 ="</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">// =-1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"-10 % 3 = "</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// =-10-(-10)/3*3=-10-(-9)=-1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"10 % -3 = "</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// =1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"-10 % -3 = "</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//=-1</span><span class="token punctuation">&#125;</span></code></pre><p><strong>运行结果</strong></p><pre class="language-none"><code class="language-none">10 % 3 &#x3D; 1-10 % 3 &#x3D;  -110 % -3 &#x3D;  1-10 % -3 &#x3D;  -1</code></pre><ul><li>++和–的使用</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//演示 ++ 和 -- 的使用</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>i<span class="token operator">++</span> <span class="token comment">//等价 i = i + 1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment">//11</span>i<span class="token operator">--</span> <span class="token comment">//等价 i = i - 1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment">// 10</span><span class="token punctuation">&#125;</span></code></pre><p><strong>运行结果</strong></p><pre class="language-none"><code class="language-none">i&#x3D; 11i&#x3D; 10</code></pre><h3 id="算术运算符使用的注意事项"><a href="#算术运算符使用的注意事项" class="headerlink" title="算术运算符使用的注意事项"></a>算术运算符使用的注意事项</h3><ol><li>对于除号”/“，它的整数除和小数除是有区别的：整数之间做除法时，只保留整数部分而舍弃小数部分。例如： x:=19/5, 结果是3</li><li>当对一个数取模时，可以等价 a%b=a-a/b*b, 这样我们可以看到 取模的一个本质运算。</li><li>Golang的自增自减只能当作一个独立语言使用时，不能这样使用：</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//在Golang中，++ 和 -- 只能独立使用</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token keyword">var</span> a <span class="token builtin">int</span>a <span class="token operator">=</span> i<span class="token operator">++</span> <span class="token comment">//错误 i++只能独立使用</span>a <span class="token operator">=</span> i<span class="token operator">--</span> <span class="token comment">//错误 i--只能独立使用</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="4"><li>Golang的++和–只能写在变量的后面，不能写在变量的前面，即：只有a++,a–；没有++a,–a</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>i<span class="token operator">++</span><span class="token operator">++</span>i <span class="token comment">//错误，在Golang没有 前++</span>i<span class="token operator">--</span><span class="token operator">--</span>i <span class="token comment">//错误，在Golang没有 前--</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span></code></pre><ol start="5"><li>Golang的设计者去掉 c/java 中的自增自减的容易混淆的写法，让Golang更加简洁，统一。（强制性的）</li></ol><h3 id="课堂练习1"><a href="#课堂练习1" class="headerlink" title="课堂练习1"></a>课堂练习1</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>i <span class="token operator">=</span> i<span class="token operator">++</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">//问 结果是多少，为什么？</span><span class="token comment">//上面的代码报错，因为i=i++编译不通过</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">if</span> i<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">10</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token comment">//问 结果是多少，为什么？</span><span class="token comment">//上面的代码报错，因为i++ > 10编译不通过</span></code></pre><h3 id="课堂练习2"><a href="#课堂练习2" class="headerlink" title="课堂练习2"></a>课堂练习2</h3><ol><li>假如还有97天放假，问:97天相当于几个星期零几天?</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> day <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">97</span><span class="token keyword">var</span> week <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">97</span> <span class="token operator">/</span> <span class="token number">7</span><span class="token keyword">var</span> day <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">97</span> <span class="token operator">%</span> <span class="token number">7</span></code></pre><ul><li>解答</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> day <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">97</span><span class="token keyword">var</span> week <span class="token builtin">int</span> <span class="token operator">=</span> day <span class="token operator">/</span> <span class="token number">7</span><span class="token keyword">var</span> aday <span class="token builtin">int</span> <span class="token operator">=</span> day <span class="token operator">%</span> <span class="token number">7</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>week<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>aday<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/**打印结果：13    6 **/</span></code></pre><ol start="2"><li>定义一个变量保存华氏温度，华氏温度转换摄氏温度的公式为5/9*(华氏温度-100),请求出华氏温度对应的摄氏温度。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> huashi <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">134.2</span><span class="token keyword">var</span> sheshi <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">5.0</span> <span class="token operator">/</span> <span class="token number">9</span> <span class="token operator">*</span> <span class="token punctuation">(</span>huashi <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v 对应的摄氏温度=%v\n"</span><span class="token punctuation">,</span> huashi<span class="token punctuation">,</span> sheshi<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/**134.2 对应的摄氏温度=19**/</span></code></pre><h2 id="关系运算符（比较运算符）"><a href="#关系运算符（比较运算符）" class="headerlink" title="关系运算符（比较运算符）"></a>关系运算符（比较运算符）</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>关系运算符的结果都是bool型，也就是 要么是true，要么是false</li><li>关系表达式常用于<strong>if结构</strong>的条件中或<strong>循环结构</strong>的条件中</li></ol><h3 id="关系运算符一览图"><a href="#关系运算符一览图" class="headerlink" title="关系运算符一览图"></a>关系运算符一览图</h3><table><thead><tr><th>运算符</th><th>运算</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td>==</td><td>相等于</td><td>4==3</td><td>false</td></tr><tr><td>!=</td><td>不等于</td><td>4！=3</td><td>true</td></tr><tr><td>&lt;</td><td>小于</td><td>4&lt;3</td><td>false</td></tr><tr><td>&gt;</td><td>大于</td><td>4&gt;3</td><td>true</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4&lt;=3</td><td>false</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>4&gt;=3</td><td>true</td></tr></tbody></table><h3 id="案例演示-1"><a href="#案例演示-1" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//演示关系运算符的使用</span>varn1int<span class="token operator">=</span><span class="token number">9</span>varn2int<span class="token operator">=</span><span class="token number">8</span>fmt<span class="token punctuation">.</span> <span class="token function">Println</span><span class="token punctuation">(</span>n1 <span class="token operator">==</span> n2<span class="token punctuation">)</span> <span class="token comment">//false</span>fmt<span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token function">Print1n</span><span class="token punctuation">(</span>n1 <span class="token operator">!=</span> n2<span class="token punctuation">)</span> <span class="token comment">//true</span>fmt <span class="token punctuation">.</span><span class="token function">Print1n</span><span class="token punctuation">(</span>n1 <span class="token operator">></span> n2<span class="token punctuation">)</span> <span class="token comment">//true</span>fmt<span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token function">Print1n</span><span class="token punctuation">(</span>n1 <span class="token operator">>=</span> n2<span class="token punctuation">)</span> <span class="token comment">//true</span>fmt <span class="token punctuation">.</span><span class="token function">Print1n</span><span class="token punctuation">(</span>n1 <span class="token operator">&lt;</span> n2<span class="token punctuation">)</span> <span class="token comment">//flase</span>fmt <span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n1 <span class="token operator">&lt;=</span> n2<span class="token punctuation">)</span> <span class="token comment">//flase</span>flag<span class="token operator">:=</span>n1<span class="token operator">></span>n2fmt<span class="token punctuation">.</span> <span class="token function">Print1n</span><span class="token punctuation">(</span><span class="token string">" flag="</span><span class="token punctuation">,</span> f1ag<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> </code></pre><h3 id="关系运算符的细节说明"><a href="#关系运算符的细节说明" class="headerlink" title="关系运算符的细节说明"></a>关系运算符的细节说明</h3><ol><li>关系运算符的结果都是bool型，也就是要么是true，要么是false。</li><li>关系运算符组成的表达式，我们称为关系表达式：a&gt;b</li><li>**比较运算符”==”不能误写成”=” **</li></ol><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>用于连接多个条件（一般来讲就是关系表达式），最终的结果也是一个bool值</p><h3 id="逻辑运算的说明"><a href="#逻辑运算的说明" class="headerlink" title="逻辑运算的说明"></a>逻辑运算的说明</h3><p><strong>假定A值为true，B值为false</strong></p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td><strong>逻辑与</strong>运算符。如果两边的操作数都是true，则为true，否则为false</td><td>（A&amp;&amp;B)为false</td></tr><tr><td>||</td><td><strong>逻辑或</strong>运算符。如果两边的操作数有一个true,则为true，否则为false。</td><td>（A||B）为true</td></tr><tr><td>！</td><td><strong>逻辑非</strong>运算符。如果条件为true，则逻辑为false，否则为true。</td><td>！(A&amp;&amp;B)为true</td></tr></tbody></table><h3 id="案例演示-2"><a href="#案例演示-2" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//演示逻辑运算符的使用8&amp;</span><span class="token keyword">var</span> age <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">40</span><span class="token keyword">if</span> age <span class="token operator">></span><span class="token number">30</span><span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;</span> <span class="token number">50</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span> <span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> age <span class="token operator">></span><span class="token number">30</span><span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;</span> <span class="token number">40</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span> <span class="token function">Print1n</span><span class="token punctuation">(</span> <span class="token string">"ok2"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//演示逻辑运算符的使用</span><span class="token keyword">if</span> age<span class="token operator">></span><span class="token number">38I</span>lage<span class="token operator">&lt;</span><span class="token number">5</span>e<span class="token punctuation">&#123;</span>fmt <span class="token punctuation">.</span> <span class="token function">PrintIn</span><span class="token punctuation">(</span> <span class="token string">"ok3"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> age<span class="token operator">></span><span class="token number">30</span><span class="token operator">|</span>age<span class="token operator">&lt;</span><span class="token number">40</span><span class="token punctuation">&#123;</span>fmt <span class="token punctuation">.</span> <span class="token function">Println</span><span class="token punctuation">(</span> <span class="token string">"ok4"</span> <span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//演示逻辑运算符的使用!</span><span class="token keyword">if</span> age<span class="token operator">></span><span class="token number">30</span><span class="token punctuation">&#123;</span>fmt <span class="token punctuation">.</span> <span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok5"</span> <span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span><span class="token punctuation">(</span>age <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span> <span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok6"</span> <span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="注意事项和细节说明"><a href="#注意事项和细节说明" class="headerlink" title="注意事项和细节说明"></a>注意事项和细节说明</h3><ol><li><p>&amp;&amp;也叫<strong>短路与</strong>：如果<strong>第一个条件为false</strong>，则第二个条件不会判断，最终结果为<strong>false</strong></p></li><li><p>||也叫<strong>短路或</strong>：如果<strong>第一个条件为true</strong>，则第二个条件不会判断，最终结果为<strong>true</strong></p></li><li><p>案例演示</p></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//声明一个函数(测试)</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span> <span class="token string">"test..."</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span><span class="token number">10</span><span class="token comment">//短路与</span><span class="token comment">//说明因为i &lt; 9为false ,因此后面的test() 就不执行</span><span class="token keyword">if</span> i<span class="token operator">&lt;</span><span class="token number">9</span> <span class="token operator">&amp;&amp;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span> <span class="token function">Println</span><span class="token punctuation">(</span> <span class="token string">"ok.."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//说明 因为 i > 9为true ,因此后面的test() 就不执行</span><span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">||</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span> <span class="token function">Print1n</span><span class="token punctuation">(</span> <span class="token string">"hello..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><h3 id="基本的介绍"><a href="#基本的介绍" class="headerlink" title="基本的介绍"></a>基本的介绍</h3><p>赋值运算符就是将某个运算后的值，赋给指定的变量。</p><h3 id="赋值运算符的分类"><a href="#赋值运算符的分类" class="headerlink" title="赋值运算符的分类"></a>赋值运算符的分类</h3><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>简单的赋值运算符，将一个表达式的值赋给一个左值</td><td>C=A+B将A+B表达式结果赋值给C</td></tr><tr><td>+=</td><td>相加后再赋值</td><td>C+=A 等于 C=C+A</td></tr><tr><td>-=</td><td>相减后再赋值</td><td>C-=A 等于 C=C-A</td></tr><tr><td>*=</td><td>相乘后再赋值</td><td>C*=A 等于 C=C*A</td></tr><tr><td>/=</td><td>相除后再赋值</td><td>C/=A 等于 C=C/A</td></tr><tr><td>%=</td><td>求余后再赋值</td><td>C%=A 等于 C=C%A</td></tr><tr><td>&lt;&lt;=</td><td>左移后赋值</td><td>C&lt;&lt;=2 等于 C=C&lt;&lt;2</td></tr><tr><td>&gt;&gt;=</td><td>右移后赋值</td><td>C&gt;&gt;=2 等于 C=C&gt;&gt;2</td></tr><tr><td>&amp;=</td><td>按位与后赋值</td><td>C&amp;=2 等于 C=C&amp;2</td></tr><tr><td>^=</td><td>按位异或后赋值</td><td>C^=2 等于 C=C^2</td></tr><tr><td>|=</td><td>按位或后赋值</td><td>C|=2 等于 C=C|2</td></tr></tbody></table><p>**说明:**后半部分的赋值运算涉及到二进制相关知识哦！</p><h3 id="赋值运算的案例演示"><a href="#赋值运算的案例演示" class="headerlink" title="赋值运算的案例演示"></a>赋值运算的案例演示</h3><ol><li>赋值基本案例</li><li>有两个变量，a和b，要求将其进行交换，最终打印结果</li><li>+=的使用案例</li><li>案例</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//赋值运算符的使用演示</span>    <span class="token comment">//var i int</span>    <span class="token comment">// i = 10 // 基本赋值</span>        <span class="token comment">//有两个变量，a和b，要求将其进行交换，最终打印结果</span>    <span class="token comment">// a = 9, b = 2 ==> a = 2 , b = 9</span>    a <span class="token operator">:=</span> <span class="token number">9</span>    b <span class="token operator">:=</span> <span class="token number">2</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"交换前的情况： a = %v, b = %v\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>    <span class="token comment">//定义一个临时变量</span>    t <span class="token operator">:=</span> a    a <span class="token operator">=</span> b    b <span class="token operator">=</span> t    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"交换后的情况: a = %v, b = %v\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>        <span class="token comment">//复合赋值的操作</span>    a <span class="token operator">+=</span> <span class="token number">17</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a+=17 --> a = a + 17 = %v"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="赋值运算符的特点"><a href="#赋值运算符的特点" class="headerlink" title="赋值运算符的特点"></a>赋值运算符的特点</h3><ol><li>运算顺序从右往左</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> c <span class="token builtin">int</span>c <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">3</span> <span class="token comment">// 赋值运算的执行顺序是从右向左</span></code></pre><ol start="2"><li>赋值运算符的左边 只能是变量，右边可以是变量，表达式，常量值！</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//赋值运算符的左边 只能是变量，右边可以是变量，表达式，常量值！</span><span class="token comment">//表达式:任何有值的都可以看做是表达式</span><span class="token keyword">var</span> d <span class="token builtin">int</span>d <span class="token operator">=</span> a <span class="token comment">//</span>d <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token comment">// =的右边是表达式</span>d <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">90</span> <span class="token comment">// =的右边是表达式</span>d <span class="token operator">=</span> <span class="token number">890</span> <span class="token comment">//890常量</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span></code></pre><ol start="3"><li>复合赋值运算符等价于下面的效果</li></ol><p>a += 3  &lt;==&gt; a = a + 3</p><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p>有两个变量，a和b，要求将其进行交换，但是不允许使用中间变量，最终打印结果</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>a <span class="token operator">=</span> a <span class="token operator">+</span> b    b <span class="token operator">=</span> a <span class="token operator">-</span> b   <span class="token comment">//    = a+b-b = a</span>a <span class="token operator">=</span> a <span class="token operator">-</span> b   <span class="token comment">//    = a+b-a = b</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a = %v b = %v "</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span></code></pre><p>牛牛牛！</p><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算符”&amp;”是双目运算符。其功能是参与运算的两数各对应的二进位相与。运算规则是:同时为1，结果为1,否则为0</td></tr><tr><td>|</td><td>按位或运算符川”是双目运算符。其功能是参 与运算的两数各对应的二进位相或.运算规则是:同时为1，结果为1,否则为0</td></tr><tr><td>^</td><td>按位异或运算符”是双目运算符。其功能是参与运算的两数各对应的二进位相异或。运算规则是:当二进位不同时，结果为1,否则为0</td></tr><tr><td>&lt;&lt;</td><td>左移运算符&lt;&lt;”是双目运算符。其功能把&lt;&lt;”左边的运算数的各二进位全部左移若干位，高位丢弃，低位补0。左移n位就是乘以2的n次方。</td></tr><tr><td>&gt;&gt;</td><td>右移运算符&gt;&gt;”是双目运算符。其功能是把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，右移n位就是除以2的n次方</td></tr></tbody></table><h2 id="其他运算符说明"><a href="#其他运算符说明" class="headerlink" title="其他运算符说明"></a>其他运算符说明</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;</td><td>返回变量存储地址</td><td>&a;将给出变量a的实际地址</td></tr><tr><td>*</td><td>指针变量</td><td>*a;是一个指针变量</td></tr></tbody></table><p>举例说明：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//演示一下 &amp; 和 * 的使用</span>    a <span class="token operator">:=</span> <span class="token number">100</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a的地址="</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span>        <span class="token keyword">var</span> ptr <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ptr指向的值是:"</span> ，<span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="课堂案例"><a href="#课堂案例" class="headerlink" title="课堂案例"></a>课堂案例</h3><ul><li>案例1：求两个数的最大值</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//求两个数的最大值</span>    <span class="token keyword">var</span> n1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">var</span> n2 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">40</span>    <span class="token keyword">var</span> max <span class="token builtin">int</span>    <span class="token keyword">if</span> n1 <span class="token operator">></span> n2<span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> n1    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> n2    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"max="</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li>案例2：求三个数的最大值</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//求两个数的最大值</span>    <span class="token keyword">var</span> n1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">var</span> n2 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">40</span>    <span class="token keyword">var</span> max <span class="token builtin">int</span>    <span class="token keyword">if</span> n1 <span class="token operator">></span> n2<span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> n1    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> n2    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"max="</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span>    <span class="token comment">//求三个数的最大值思路：先求两个数的最大值，再用第三个数与最大值相比，取较大的数。</span>    <span class="token keyword">var</span> n3 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">45</span>    <span class="token keyword">if</span> n3 <span class="token operator">></span> max <span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> n3    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"三个书中最大值是="</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h2><p>Go语言明确不支持三元运算符，官方<a href="https://golang.org/doc/faq#Does_Go_have_a_ternary_form">说明</a></p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210110015532.png" alt="image-20210110015532731" loading="lazy"></p><p>演示在Go语言中实现三元运算符的效果：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> n <span class="token builtin">int</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">var</span> j <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token comment">//传统的三元运算</span><span class="token comment">//n = i > j ? i : j</span><span class="token keyword">if</span> i <span class="token operator">></span> j <span class="token punctuation">&#123;</span>    n <span class="token operator">=</span> i<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    n <span class="token operator">=</span> j<span class="token punctuation">&#125;</span><span class="token keyword">return</span> n <span class="token comment">//12</span></code></pre><h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><h3 id="运算符的优先级的一览表"><a href="#运算符的优先级的一览表" class="headerlink" title="运算符的优先级的一览表"></a>运算符的优先级的一览表</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210110015754.png" alt="image-20210110015754417" loading="lazy"></p><h3 id="对上图的说明"><a href="#对上图的说明" class="headerlink" title="对上图的说明"></a>对上图的说明</h3><ol><li>运算符有不同的优先级，所谓优先级就是表达式运算中的运算顺序。如右表，上一行运算符总优先于下一行。</li><li>只有单目运算符、赋值运算符是从右向左运算的。</li><li>梳理一个大概的优先级：<ol><li>括号，++，–</li><li>单目运算</li><li>算术运算符</li><li>移位运算</li><li>关系运算符</li><li>位运算符</li><li>逻辑运算符</li><li>赋值运算符</li><li>逗号</li></ol></li></ol><h2 id="键盘输入语句"><a href="#键盘输入语句" class="headerlink" title="键盘输入语句"></a>键盘输入语句</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在编程中，需要接收用户输入的数据，就可以使用键盘输入语句来获取。InputDemo.go</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>导入fmt包</li><li>调用fmt包的fmt.Scanln()或者fmt.Scanf()</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210110020421.png" alt="image-20210110020421015" loading="lazy"></p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210110020430.png" alt="image-20210110020430861" loading="lazy"></p><h3 id="案例演示-3"><a href="#案例演示-3" class="headerlink" title="案例演示"></a>案例演示</h3><ul><li>要求：可以从控制台接收用户信息，【姓名，年龄，薪水，是否通过考试】</li></ul><ol><li>使用fmt.Scanln()获取</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//要求：可以从控制台接收用户信息，</span><span class="token comment">//【姓名，年龄，薪水，是否通过考试】</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//1. 先声明需要的变量</span><span class="token keyword">var</span> name <span class="token builtin">string</span><span class="token keyword">var</span> age <span class="token builtin">byte</span><span class="token keyword">var</span> sal <span class="token builtin">float32</span><span class="token keyword">var</span> isPass <span class="token builtin">bool</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入姓名"</span><span class="token punctuation">)</span><span class="token comment">//当程序执行到 fmt.Scanln(&amp;name),程序会停止在这里，等待用户输入，并回车</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>name<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入年龄"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>age<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入薪水"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sal<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入是否通过考试"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>isPass<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"名字是 %v \n年龄是 %v \n薪水是 %v \n是否通过考试 %v\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> isPass<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果</p><pre class="language-none"><code class="language-none">请输入姓名leafii请输入年龄23请输入薪水60000请输入是否通过考试true名字是 leafii年龄是 23薪水是 60000是否通过考试 true</code></pre><ol start="2"><li>使用fmt.Scanf()获取</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//要求：可以从控制台接收用户信息，</span><span class="token comment">//【姓名，年龄，薪水，是否通过考试】</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//1. 先声明需要的变量</span><span class="token keyword">var</span> name <span class="token builtin">string</span><span class="token keyword">var</span> age <span class="token builtin">byte</span><span class="token keyword">var</span> sal <span class="token builtin">float32</span><span class="token keyword">var</span> isPass <span class="token builtin">bool</span><span class="token comment">//方式2：fmt.Scanf，可以按指定的格式输入</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入你的姓名，年龄，薪水，是否通过考试，使用空格隔开"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%s %d %f %t"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sal<span class="token punctuation">,</span> <span class="token operator">&amp;</span>isPass<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"名字是 %v \n年龄是 %v \n薪水是 %v \n是否通过考试 %v\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> isPass<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">请输入你的姓名，年龄，薪水，是否通过考试，使用空格隔开leafii 23 60000 true名字是 leafii年龄是 23薪水是 60000是否通过考试 true</code></pre><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><p>对于整数，有四种表示方式：</p><ul><li>二进制：0，1，满2进1。在Golang中，不能直接使用二进制来表示一个整数，它沿用了c的特点</li><li>十进制：0-9，满10进1.</li><li>八进制：0-7，满8进1.以数字0开头表示。</li><li>十六进制：0-9及A-F，满16进1。以0x 或0X开头表示。（A到F不区分大小写）</li></ul><h3 id="进制的图示"><a href="#进制的图示" class="headerlink" title="进制的图示"></a>进制的图示</h3><table><thead><tr><th>十进制</th><th>十六进制</th><th>八进制</th><th>二进制</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>2</td><td>2</td><td>10</td></tr><tr><td>3</td><td>3</td><td>3</td><td>11</td></tr><tr><td>4</td><td>4</td><td>4</td><td>100</td></tr><tr><td>5</td><td>5</td><td>5</td><td>101</td></tr><tr><td>6</td><td>6</td><td>6</td><td>110</td></tr><tr><td>7</td><td>7</td><td>7</td><td>111</td></tr><tr><td>8</td><td>8</td><td>10</td><td>1000</td></tr><tr><td>9</td><td>9</td><td>11</td><td>1001</td></tr><tr><td>10</td><td>A</td><td>12</td><td>1010</td></tr><tr><td>11</td><td>B</td><td>13</td><td>1011</td></tr><tr><td>12</td><td>C</td><td>14</td><td>1100</td></tr><tr><td>13</td><td>D</td><td>15</td><td>1101</td></tr><tr><td>14</td><td>E</td><td>16</td><td>1110</td></tr><tr><td>15</td><td>F</td><td>17</td><td>1111</td></tr><tr><td>16</td><td>10</td><td>20</td><td>10000</td></tr><tr><td>17</td><td>11</td><td>21</td><td>10001</td></tr></tbody></table><h3 id="进制转换的介绍"><a href="#进制转换的介绍" class="headerlink" title="进制转换的介绍"></a>进制转换的介绍</h3><p>总览:</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210111155242.png" alt="image-20210111155242356" loading="lazy"></p><h3 id="其他进制转十进制"><a href="#其他进制转十进制" class="headerlink" title="其他进制转十进制"></a>其他进制转十进制</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210111155309.png" alt="image-20210111155309501" loading="lazy"></p><h3 id="二进制如何转十进制"><a href="#二进制如何转十进制" class="headerlink" title="二进制如何转十进制"></a>二进制如何转十进制</h3><p>134 = 4 * 1 + 3 * 10 + 10 * 10 = 4 + 30 + 100 = 134</p><ul><li><p><strong>规则：</strong>从最低位开始（右边），将每个位上的数提取出来，乘以2的（位数-1）次方然后<strong>求和</strong>。</p></li><li><p>案例： 请将二进制：1011转成十进制的数</p></li></ul><p>1011 = 1 * 1 + 1 * 2 + 0 * 2  * 2 + 1 * 2 * 2 * 2 = 1 + 2 + 0 + 8 = 11</p><h3 id="八进制转换成十进制实例"><a href="#八进制转换成十进制实例" class="headerlink" title="八进制转换成十进制实例"></a>八进制转换成十进制实例</h3><ul><li><p><strong>规则：</strong>从最低位开始（右边），将每个位上的数提取出来，乘以8的（位数-1）次方然后<strong>求和</strong>。</p></li><li><p>案例:请将0123转成十进制的数</p></li></ul><p>0123 = 3 * 1 + 2 * 8 + 1 * 8 * 8 + 0 * 8 * 8 * 8 = 3 + 16 + 64 = 83</p><h3 id="十六进制转成十进制"><a href="#十六进制转成十进制" class="headerlink" title="十六进制转成十进制"></a>十六进制转成十进制</h3><ul><li><p><strong>规则：</strong>从最低位开始（右边），将每个位上的数提取出来，乘以16的（位数-1）次方然后<strong>求和</strong>。</p></li><li><p>案例：请将0x34A转成十进制的数</p></li></ul><p>0x34A = 10 * 1 + 4 * 16 + 3 * 16 * 16 = 10 + 64 + 768 = 842</p><h3 id="其他进制转成10进制的课堂练习"><a href="#其他进制转成10进制的课堂练习" class="headerlink" title="其他进制转成10进制的课堂练习"></a>其他进制转成10进制的课堂练习</h3><ul><li><p>课堂练习: 请将</p><ul><li>二进制： 110001100 转成十进制</li></ul><p>110001100(2) =1 * 2 <sup>2</sup>+ 1 * 2 <sup>3</sup> + 1 * 2<sup>7</sup> + 1 * 2<sup>8</sup> = 396</p><ul><li>八进制： 02456 转成十进制</li></ul><p>02456(8) = 6 * 1 + 5 * 8 + 4 * 8<sup>2</sup> + 2 * 8<sup>3</sup> =  1326 </p><ul><li>十六进制： 0xA45 转成十进制</li></ul><p>0xA45 (16) =  5 * 1 + 4 * 16 + 10 * 16<sup>2</sup> = 2629</p></li></ul><h3 id="十进制如何转成其他进制"><a href="#十进制如何转成其他进制" class="headerlink" title="十进制如何转成其他进制"></a>十进制如何转成其他进制</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210111162140.png" alt="image-20210111162140694" loading="lazy"></p><h3 id="十进制如何转二进制"><a href="#十进制如何转二进制" class="headerlink" title="十进制如何转二进制"></a>十进制如何转二进制</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210111162210.png" alt="image-20210111162210304" loading="lazy"></p><h3 id="十进制转成八进制"><a href="#十进制转成八进制" class="headerlink" title="十进制转成八进制"></a>十进制转成八进制</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210111162234.png" alt="image-20210111162234098" loading="lazy"></p><h3 id="十进制转十六进制"><a href="#十进制转十六进制" class="headerlink" title="十进制转十六进制"></a>十进制转十六进制</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210111162324.png" alt="image-20210111162324414" loading="lazy"></p><h3 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h3><ul><li><p>请将</p><ul><li>123 转成二进制</li></ul><p>123（10） =   1111011 (2)</p><ul><li>678转成八进制</li></ul><p>678(10) = 1246(8)</p><ul><li>8912 转成十六进制</li></ul><p>8912(10) = 22D0(16)</p></li></ul><h3 id="二进制如何转成八进制、十六进制"><a href="#二进制如何转成八进制、十六进制" class="headerlink" title="二进制如何转成八进制、十六进制"></a>二进制如何转成八进制、十六进制</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210111162531.png" alt="image-20210111162531921" loading="lazy"></p><h3 id="二进制转换成八进制"><a href="#二进制转换成八进制" class="headerlink" title="二进制转换成八进制"></a>二进制转换成八进制</h3><ul><li><p>**规则:**将二进制数每三位一组(从低位开始组合),转成对应的八进制数即可。</p></li><li><p>案例:请将二进制: 11010101 转成八进制<br>11010101= 0325</p></li></ul><h3 id="二进制转成十六进制"><a href="#二进制转成十六进制" class="headerlink" title="二进制转成十六进制"></a>二进制转成十六进制</h3><ul><li><p>**规则:**将二进制数每四位一组(从低位开始组合),转成对应的十六进制数即可。</p></li><li><p>案例:请将二进制: 11010101 转成十六进制</p><p>11010101 = 0xD5</p></li><li><p>课堂练习：请将</p><ul><li>二进制：11100101 转成 八进制</li><li>二进制： 1110010110 转成 十六进制</li></ul></li></ul><h3 id="八进制、十六进制转成二进制"><a href="#八进制、十六进制转成二进制" class="headerlink" title="八进制、十六进制转成二进制"></a>八进制、十六进制转成二进制</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210111162900.png" alt="image-20210111162900928" loading="lazy"></p><h3 id="八进制转成二进制"><a href="#八进制转成二进制" class="headerlink" title="八进制转成二进制"></a>八进制转成二进制</h3><ul><li><p><strong>规则：</strong>将八进制数每一位，转成对应的一个3位的二进制数即可。</p></li><li><p>案例：请将0237转换成二进制</p><p>0237（8） = 10011111（2）</p></li></ul><h3 id="十六进制转成二进制"><a href="#十六进制转成二进制" class="headerlink" title="十六进制转成二进制"></a>十六进制转成二进制</h3><ul><li><p><strong>规则：将十六进制数每一位，转成对应的一个4位的二进制数即可。</strong></p></li><li><p>案例：请将0x237转成二进制</p><p>0x237(16) = 1000110111(2)</p></li></ul><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="位运算的思考题"><a href="#位运算的思考题" class="headerlink" title="位运算的思考题"></a>位运算的思考题</h3><ol><li> 请看下面的代码段，回答a,b,c,d结果是多少？</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">>></span> <span class="token number">2</span>    <span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">>></span> <span class="token number">2</span>    <span class="token keyword">var</span> c <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span>    <span class="token keyword">var</span> d <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span>    <span class="token comment">//a b c d结果是多少？</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b="</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"c="</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"d="</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/*a= 0b= -1c= 4d= -4*/</span></code></pre><ol start="2"><li>请回答在Golang中，下面的表达式运算的结果是：</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token operator">&amp;</span><span class="token number">7</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">^</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/**235-2*/</span></code></pre><h3 id="二进制在运算中的说明"><a href="#二进制在运算中的说明" class="headerlink" title="二进制在运算中的说明"></a>二进制在运算中的说明</h3><p>二进制是逢2进位的进位制，0、1是基本算符。</p><p>现代的电子计算机技术全部采用的是二进制，因为它只使用0、1两个数学符号，非常简单方便，易于用电子方式实现。计算机内部处理的信息，都是采用二进制数来表示的。二进制（Binary）数用0和1两个数字及其组合来表示任何数。进位规则是“逢2进1“，数字1在不同的位上代表不同的值，按从右至左的次序，这个值以二倍递增。</p><p>在计算机的内部，运行各种运算时，都是以二进制的方式来运行。</p><h3 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h3><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210111184507.png" loading="lazy"></p><h3 id="位运算符和移位运算符"><a href="#位运算符和移位运算符" class="headerlink" title="位运算符和移位运算符"></a>位运算符和移位运算符</h3><ul><li>Golang有3个位运算<ul><li>按位与&amp;    ：    两位全为1，结果为1，否则为0</li><li>按位或|    ：    两位有一个为1，结果为1，否则为0</li><li>按位异或^    ：    两位一个为0，一个为1，结果为1，否则为0</li></ul></li><li>案例练习</li></ul><p>2&amp;3=?  2|3=?  2^3=?</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//2&amp;3=?  2|3=?  2^3=?</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//2</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//3</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//3</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//-4</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210111184910.png" alt="image-20210111184910568" loading="lazy"></p><ul><li><p>Golang中有两个移位运算符：</p><ul><li>右移运算符   &gt;&gt;:    低位溢出，符号位不变，并用符号位补溢出的高位</li><li>左移运算符    &lt;&lt;:    符号位不变，低位补0</li></ul></li><li><p>案例演示</p><p>a := 1 &gt;&gt; 2   //  0000 0001 =&gt; 0000 0000  = 0</p><p>c := 1 &lt;&lt; 2 // 0000 0001 ==&gt; 0000 0100 =&gt; 4</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Go语言の运算符&quot;&gt;&lt;a href=&quot;#Go语言の运算符&quot; class=&quot;headerlink&quot; title=&quot;Go语言の运算符&quot;&gt;&lt;/a&gt;Go语言の运算符&lt;/h1&gt;&lt;p&gt;本文介绍了Go语言的运算符&lt;/p&gt;</summary>
    
    
    
    
    <category term="Go" scheme="https://mikutown.gitee.io/blog/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-3-递归（1.1.14-1.1.21)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/09/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-3-%E9%80%92%E5%BD%92%EF%BC%881.1.14-1.1.21)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/09/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-3-%E9%80%92%E5%BD%92%EF%BC%881.1.14-1.1.21)/</id>
    <published>2021-01-09T09:39:51.000Z</published>
    <updated>2021-01-09T13:38:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-3-递归（1-1-14-1-1-21"><a href="#算法练习-3-递归（1-1-14-1-1-21" class="headerlink" title="算法练习-3-递归（1.1.14-1.1.21)"></a>算法练习-3-递归（1.1.14-1.1.21)</h1><ul><li>知识点<ul><li>java的基本语法：递归调用</li><li>直方图的预习</li><li>斐波那契数列的递归调用实现以及优化</li></ul></li></ul><a id="more"></a><h2 id="1-1-14-1-1-21"><a href="#1-1-14-1-1-21" class="headerlink" title="1.1.14-1.1.21"></a>1.1.14-1.1.21</h2><h3 id="编写一个静态方法lg"><a href="#编写一个静态方法lg" class="headerlink" title="编写一个静态方法lg()"></a>编写一个静态方法lg()</h3><p>1.1.14接受一个整型参数N，返回不大于log2(N)的最大整数。不要使用Math库</p><ul><li>答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdIn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practice02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lg</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">N</span><span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span>            s<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          a <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">lg</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>运行结果：</li></ul><pre class="language-none"><code class="language-none">4 &#x2F;&#x2F; 输入2 &#x2F;&#x2F; 输出 依次类推628393</code></pre><h3 id="编写一个静态方法-histogram"><a href="#编写一个静态方法-histogram" class="headerlink" title="编写一个静态方法 histogram()"></a><strong>编写一个静态方法 histogram()</strong></h3><p>1.1.15 接受一个整型数组 a[] 和一个整数 M 为参数并返回一个大小为 M 的数组，其中第 i 个元素的值为整数 i 在参数数组中出现的次数。如果 a[] 中的值均在 0 到 M-1之间，返回数组中所有元素之和应该和 a.length 相等。</p><p>英文题目原文：</p><p><strong>1.1.15 Write a static method histogram() that takes an array a[] of int values and an integer M as arguments and returns an array of length M whose i th entry is the number of times the integer i appeared in the argument array. If the values in a[] are all between 0 and M–1, the sum of the values in the returned array should be equal to a.length.</strong></p><ul><li><p>分析</p><p>干就完了！</p></li><li><p>答案</p></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>output<span class="token punctuation">.</span></span><span class="token class-name">FastInfosetStreamWriterOutput</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdIn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdRandom</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practice02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">histogram</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token class-name">M</span><span class="token punctuation">)</span>                b<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的数组中的值均在0到M-1之间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的数组中的值不都在0到M-1之间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入数组大小："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          size <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入数组的值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入M的值:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">M</span><span class="token operator">></span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span>              <span class="token function">histogram</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>运行结果</li></ul><pre class="language-none"><code class="language-none">请输入数组大小：10请输入数组的值：1 2 2 3 3 3 4 4 4 4请输入M的值:110 1 2 3 4 0 0 0 0 0 0 输入的数组中的值均在0到M-1之间请输入数组大小：10请输入数组的值：1 2 2 3 3 3 4 4 4 13请输入M的值:120 1 2 3 3 0 0 0 0 0 0 0 输入的数组中的值不都在0到M-1之间</code></pre><ul><li><p>再分析!</p><p>其实这个题是叫你画一个直方图，来一个简单版本的代码！</p></li><li><p>答案</p></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">histogram</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">M</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length <span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                n<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">M</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m <span class="token operator">=</span> m <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>测试的main函数</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">histogram</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用函数后获取的数组："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span></code></pre><h3 id="给出-exR1-6-的返回值"><a href="#给出-exR1-6-的返回值" class="headerlink" title="给出 exR1(6) 的返回值:"></a><strong>给出 exR1(6) 的返回值:</strong></h3><p>1.1.16</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">exR1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token function">exR1</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token function">exR1</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>分析</p><p>递归的情况：<br>f(6)=f(3)+6+f(4)+6　　<br>因为f(3)=f(0)+3+f(1)+3   f(0)=””    f(1)=f(-2)+1+f(-1)+1=11<br>所以f(6)=31136+f(4)+6<br>又因为f(4)=f(1)+4+f(2)+4    f(1)=11   f(2)=f(-1)+2+f(0)+2=22<br>从而f(6)=311361142246</p></li><li><p>答案</p></li></ul><pre class="language-none"><code class="language-none">311361142246</code></pre><ul><li>补充：很多人（比如我）第一次做的时候把类型弄错了！这是<strong>string拼接而不是int加减！！！！！！</strong></li></ul><h3 id="找出以下递归函数的问题"><a href="#找出以下递归函数的问题" class="headerlink" title="找出以下递归函数的问题:"></a><strong>找出以下递归函数的问题:</strong></h3><p>1.1.17</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">exR2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token function">exR2</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token function">exR2</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>分析/答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">exR2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token function">exR2</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token function">exR2</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">;</span><span class="token comment">//1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//2</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//3</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>第二三行的代码应该先于第一行的代码（注释做标记的行），这样可以减少递归次数，提高函数的运行效率。</p><ul><li>参考答案：<ul><li>这段代码中的基础情况永远不会被访问。调用 exR2(3) 会产生调用 exR2(0)、exR2(-3) 和exR2(-6)，循环往复直到发生 StackOverflowError。</li></ul></li></ul><h3 id="请看以下递归函数"><a href="#请看以下递归函数" class="headerlink" title="请看以下递归函数:"></a><strong>请看以下递归函数:</strong></h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">mystery</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">mystery</span><span class="token punctuation">(</span>a<span class="token operator">+</span>a<span class="token punctuation">,</span> b<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token function">mystery</span><span class="token punctuation">(</span>a<span class="token operator">+</span>a<span class="token punctuation">,</span> b<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>1.1.18<strong>mystery(2, 25) 和 mystery(3, 11) 的返回值是多少?给定正整数 a 和 b，mystery(a,b)计算的结果是什么?将代码中的 + 替换为 * 并将 return 0 改为 return 1，然后回答相同 的问题。</strong></p><ul><li><p>分析</p><ul><li>当代码中为+时</li></ul><ol><li>mystery(2,25) :</li></ol><p>a=2,b=25,因为b!=0且b%2!=0，所以返回mystery(4,12) + 2</p><p>​    mystery(4,12) 中 a=4,b=12,因为b!=0 ，b%2==0，所以return mystery(8,6)</p><p>​    mystery(8,6)中，a=8,b=6  return mystery(16,3)</p><p>​    mystery(16,3)中，a=16,b=3, return mystery(32,1)+16</p><p>​    mystery(32,1)中，a=32,b=1,return mystery(64,0)+32</p><p>​    mystery(64,0)==0</p><p>所以mystery(2,25)=2+16+32+0=50</p></li><li><p>答案：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">mystery</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">mystery</span><span class="token punctuation">(</span>a<span class="token operator">+</span>a<span class="token punctuation">,</span> b<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">mystery</span><span class="token punctuation">(</span>a<span class="token operator">+</span>a<span class="token punctuation">,</span> b<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">mystery1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">mystery1</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token punctuation">,</span> b<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">mystery1</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token punctuation">,</span> b<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">mystery</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出50</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">mystery</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出33</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">mystery1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出33554432</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">mystery1</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出177147</span><span class="token punctuation">&#125;</span><span class="token comment">//这道题目考了一个思想，数据和操作，即第一个参数是数据，第二个参数是操作的。这在实际编程中也是一种解耦的思想</span></code></pre><h3 id="在计算机上运行以下程序"><a href="#在计算机上运行以下程序" class="headerlink" title="在计算机上运行以下程序:"></a><strong>在计算机上运行以下程序:</strong></h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fibonacci</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token class-name">N</span> <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>1.1.19<strong>计算机用这段程序在一个小时之内能够得到 F(N) 结果的最大 N 值是多少?开发 F(N) 的一个更好的实现，用数组保存已经计算过的值。</strong></p><ul><li>具体的值不知道，算到<code>48 4807526976</code>时就已经很慢很慢啦!</li><li>更好的实现</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>output<span class="token punctuation">.</span></span><span class="token class-name">FastInfosetStreamWriterOutput</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdIn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdRandom</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practice02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        if(N==0)</span><span class="token comment">//            return 0;</span><span class="token comment">//        if(N==1)</span><span class="token comment">//            return 1;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token class-name">N</span> <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这样可以飞速得到答案，所以递归程序看上去简单，实际上效率不高哦！</p><h3 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h3><p>1.1.20 编写一个递归的静态方法计算ln(N!)的值</p><ul><li>分析</li></ul><p>利用公式：ln(a+b)=lna + lnb，可以递归计算ln(n!)啦！</p><ul><li>答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token class-name">LogNNN</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token class-name">F</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="编程题-1"><a href="#编程题-1" class="headerlink" title="编程题"></a>编程题</h3><p>1.1.21 编写一段程序，从标准输入按行读取数据，其中每行都包含一个名字和两个整数。然后用printf()打印一张表格，每行的若干列数据包括名字、两个整数和第一个整数除以第二个整数的结果，粗确到小数点后三位。可以用这种程序将棒球球手的击球命中率或者学生的考试分数制成表格。</p><ul><li>答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdIn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practice02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token class-name">F</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//定义行号</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入数据总的行数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        row <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从键盘获取数据行数</span>        <span class="token class-name">String</span> <span class="token class-name">Name</span> <span class="token operator">=</span> <span class="token string">"Name"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> V1 <span class="token operator">=</span> <span class="token string">"Value1"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> V2 <span class="token operator">=</span> <span class="token string">"Value2"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> V3 <span class="token operator">=</span> <span class="token string">"Value3"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> num3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            num2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            num3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入名字 数字1 数字2 格式:\"Jack 100 100\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>num2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//遍历</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-8s%-8s%-8s%-8s"</span><span class="token punctuation">,</span><span class="token class-name">Name</span><span class="token punctuation">,</span>V1<span class="token punctuation">,</span>V2<span class="token punctuation">,</span>V3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//StdOut.println("Name    V1         V2        V3");</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-8s%-8s%-8s%-8.3f"</span><span class="token punctuation">,</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>num2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>num3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>运行效果</li></ul><pre class="language-none"><code class="language-none">请输入数据总的行数:3请输入名字 数字1 数字2 格式:&quot;Jack 100 100&quot;jack 123 321请输入名字 数字1 数字2 格式:&quot;Jack 100 100&quot;rose 321 123请输入名字 数字1 数字2 格式:&quot;Jack 100 100&quot;go 333 111******************************Name    Value1  Value2  Value3  jack    123     321     0.383   rose    321     123     2.610   go      333     111     3.000   ****************************** </code></pre><hr><p>参考:</p><p><a href="https://xiaozhuanlan.com/topic/8356417209">算法练习(3) :递归(1.1.15-1.1.21) － 小专栏 (xiaozhuanlan.com)</a><a href="https://xiaozhuanlan.com/kyson">https://xiaozhuanlan.com/kyson</a>)</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-3-递归（1-1-14-1-1-21&quot;&gt;&lt;a href=&quot;#算法练习-3-递归（1-1-14-1-1-21&quot; class=&quot;headerlink&quot; title=&quot;算法练习-3-递归（1.1.14-1.1.21)&quot;&gt;&lt;/a&gt;算法练习-3-递归（1.1.14-1.1.21)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;java的基本语法：递归调用&lt;/li&gt;
&lt;li&gt;直方图的预习&lt;/li&gt;
&lt;li&gt;斐波那契数列的递归调用实现以及优化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-2-二维数组(1.1.8-1.1.13)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/08/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-2-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84(1.1.8-1.1.13)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/08/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-2-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84(1.1.8-1.1.13)/</id>
    <published>2021-01-08T12:25:52.000Z</published>
    <updated>2021-01-09T13:35:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-2-二维数组-1-1-8-1-1-13"><a href="#算法练习-2-二维数组-1-1-8-1-1-13" class="headerlink" title="算法练习-2-二维数组(1.1.8-1.1.13)"></a>算法练习-2-二维数组(1.1.8-1.1.13)</h1><p><strong>知识点：</strong></p><ul><li><p>java的基本语法</p></li><li><p>十进制与二进制的转换</p></li><li><p>一维数组的逆序输出</p></li><li><p>二位数组的转置（交换行与列）</p><a id="more"></a></li></ul><h2 id="1-1-8-1-1-13"><a href="#1-1-8-1-1-13" class="headerlink" title="1.1.8-1.1.13"></a>1.1.8-1.1.13</h2><h3 id="给出以下表达式的值"><a href="#给出以下表达式的值" class="headerlink" title="给出以下表达式的值:"></a><strong>给出以下表达式的值:</strong></h3><p>1.1.8</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">a<span class="token punctuation">.</span></span> System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">b<span class="token punctuation">.</span></span> System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'b'</span> <span class="token operator">+</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span></span> System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>答案：</li></ul><pre class="language-none"><code class="language-none">b197    &#x2F;&#x2F;98+99e    &#x2F;&#x2F;97+4 --&gt; e</code></pre><h3 id="编写一段代码，"><a href="#编写一段代码，" class="headerlink" title="编写一段代码，"></a><strong>编写一段代码，</strong></h3><p>1.1.9</p><p>将一个正整数 N 用二进制表示并转换为一个 String 类型的值 s</p><ul><li>答案:</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdIn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practice02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//编写一段代码，将一个正整数 N</span>        <span class="token comment">//用二进制表示并转换为一个</span>        <span class="token comment">// String 类型的值 s</span>        <span class="token keyword">int</span> a<span class="token punctuation">;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            a <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> a<span class="token punctuation">;</span>n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>当然 用java自带的Integer类的<code>Integer.toBinaryString(N)</code>可以更加圆满的完成任务，不过我们最好自己去写一个吧，源码<a href="http://grepcode.com/file_/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/lang/Integer.java/?v=source">地址</a></p></li><li><p>这个代码简洁，但是效率很低，我们考虑使用移位运算符实现</p></li></ul><pre class="language-none"><code class="language-none">移位运算符在程序设计中，是位操作运算符的一种。移位运算符可以在二进制的基础上对数字进行平移。按照平移的方向和填充数字的规则分为三种：&lt;&lt;(左移)、&gt;&gt;(带符号右移)和&gt;&gt;&gt;(无符号右移)。</code></pre><p>移位操作符的一个性质就是<strong>右移相当于除以2，左移相当于乘以2</strong></p><ul><li>答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decimalToBinary</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> resultString <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        resultString <span class="token operator">=</span> resultString <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> resultString<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>注：</strong> </p><ul><li><p>&amp;运算</p><p>即与运算符，运算规则：0&amp;0=0，0&amp;1=1，1&amp;0=0，1&amp;1=1 即<strong>两个同时为1，结果为1，否则为0</strong></p></li></ul><p>比如： 3 &amp; 5 &lt;==&gt; 0000 0011   &amp; 0000 0101</p><p>即   0000 0011</p><p>​       0000 0101     结果是  0000 0001  转为十进制：1 即:3&amp;5 = 1</p><ul><li>| 运算</li></ul><p>运算规则：0|0=0，0|1=1，1|1=1，1|0=0 （有1就1）</p><ul><li>^运算</li></ul><p>运算规则：0^0 = 0,0^1=1,1^0=1,1^1=0(相同就0不同就1)</p><h3 id="下面这段代码有什么问题"><a href="#下面这段代码有什么问题" class="headerlink" title="下面这段代码有什么问题?"></a><strong>下面这段代码有什么问题?</strong></h3><p>1.1.10</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span></code></pre><ul><li>答案：</li></ul><pre class="language-none"><code class="language-none">new数组的时候为什么不new!!!java的数组需要分配内存的qaq！这样会产生一个 variable a might not have been initialized 的编译错误。</code></pre><h3 id="编写一段代码"><a href="#编写一段代码" class="headerlink" title="编写一段代码"></a><strong>编写一段代码</strong></h3><p>1.1.11</p><p>打印出一个二维布尔数组的内容。其中，使用 * 表示真，空格表示假。打印出行号和列号</p><ul><li>思路：</li></ul><p>新建一个二维布尔数组，随机初始化真和假，根据真假，遍历进行打印</p><ul><li>答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdRandom</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practice02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * 打印出一个二维布尔数组的内容。         * 其中，使用 * 表示真，空格表示假。         * 打印出行号和列号         */</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> uniform <span class="token operator">=</span> <span class="token class-name">StdRandom</span><span class="token punctuation">.</span><span class="token function">uniform</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>uniform<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                    b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"* "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none"> 0 1 2 3 40*     *   1* * * *   2    * * * 3  *     * 4      *   </code></pre><p><strong>其实还是挺基础的一道题</strong></p><h3 id="以下代码段会打印出什么结果？"><a href="#以下代码段会打印出什么结果？" class="headerlink" title="以下代码段会打印出什么结果？"></a>以下代码段会打印出什么结果？</h3><p>1.1.12</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>          a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">9</span><span class="token operator">-</span>i<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>          a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token comment">//end main</span><span class="token punctuation">&#125;</span><span class="token comment">//end class</span></code></pre><ul><li>答案：</li></ul><pre class="language-none"><code class="language-none">0123456789</code></pre><p>**放烟雾弹是吧，真有你的Robert Sedgewick</p><h3 id="编写一段代码-1"><a href="#编写一段代码-1" class="headerlink" title="编写一段代码"></a>编写一段代码</h3><p>1.1.13</p><p>打印出一个M行N列的二维数组的转置(交换行和列）。</p><ul><li>思路</li></ul><p>先生成一个M行N列的，然后用先N后M遍历输出。</p><ul><li>答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>output<span class="token punctuation">.</span></span><span class="token class-name">FastInfosetStreamWriterOutput</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdRandom</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practice02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">M</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">M</span><span class="token operator">+</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//初始化完成，开始遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token class-name">M</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">10 2 12 3 13 7 0 8 13 8 14 4 7 3 14 4 7 8 2 2 8 11 14 13 11 10 5 10 11 11 8 2 1 13 2 8 6 13 12 10 4 5 4 4 13 8 13 13 6 9 10 7 14 4 8 10 8 8 4 8 2 0 4 7 11 5 2 6 5 13 12 8 7 8 14 10 1 13 4 13 3 13 3 2 13 11 13 12 4 6 13 8 14 2 11 11 2 10 13 9 </code></pre><p>没有写接收参数，再来!</p><ul><li>答案</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>     <span class="token comment">//初始化</span>     <span class="token keyword">int</span> <span class="token class-name">M</span><span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> <span class="token class-name">N</span><span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>row<span class="token operator">&lt;</span><span class="token class-name">M</span><span class="token punctuation">;</span>row<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>col<span class="token operator">&lt;</span><span class="token class-name">N</span><span class="token punctuation">;</span>col<span class="token operator">++</span><span class="token punctuation">)</span>              array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">=</span>row<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>col<span class="token punctuation">;</span>     <span class="token comment">//打印未转置的元素</span>     <span class="token keyword">int</span> width<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">;</span>     <span class="token class-name">String</span> format<span class="token operator">=</span><span class="token string">"%"</span><span class="token operator">+</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"s"</span><span class="token punctuation">;</span>     <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>col<span class="token operator">&lt;</span><span class="token class-name">N</span><span class="token punctuation">;</span>col<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>row<span class="token operator">&lt;</span><span class="token class-name">M</span><span class="token punctuation">;</span>row<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>col<span class="token operator">&lt;</span><span class="token class-name">N</span><span class="token punctuation">;</span>col<span class="token operator">++</span><span class="token punctuation">)</span>                 <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span>array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token comment">//打印转置后的元素</span>      <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>row<span class="token operator">&lt;</span><span class="token class-name">M</span><span class="token punctuation">;</span>row<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>col<span class="token operator">&lt;</span><span class="token class-name">N</span><span class="token punctuation">;</span>col<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>row<span class="token operator">&lt;</span><span class="token class-name">M</span><span class="token punctuation">;</span>row<span class="token operator">++</span><span class="token punctuation">)</span>                 <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span>array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token comment">//end main</span><span class="token punctuation">&#125;</span><span class="token comment">//end class</span></code></pre><ul><li>运行结果 </li></ul><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210109003554.png" alt="image-20210109003554564" loading="lazy"></p><hr><p>参考：</p><p><a href="https://xiaozhuanlan.com/topic/5147298630">算法练习(2):二维数组(1.1.8-1.1.13) － 小专栏 (xiaozhuanlan.com)</a></p><p><a href="https://www.cnblogs.com/longjin2018/archive/2004/01/13/9848507.html">Algs4-1.1.13编写一段代码，打印出一个M行N列的二维数组的转置(交换行和列） - 修电脑的龙生 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-2-二维数组-1-1-8-1-1-13&quot;&gt;&lt;a href=&quot;#算法练习-2-二维数组-1-1-8-1-1-13&quot; class=&quot;headerlink&quot; title=&quot;算法练习-2-二维数组(1.1.8-1.1.13)&quot;&gt;&lt;/a&gt;算法练习-2-二维数组(1.1.8-1.1.13)&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;知识点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;java的基本语法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;十进制与二进制的转换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一维数组的逆序输出&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;二位数组的转置（交换行与列）&lt;/p&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法练习-1-Java基本语法(1.1.1-1.1.7)</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/07/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-1-Java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95(1.1.1-1.1.7)/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/07/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-1-Java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95(1.1.1-1.1.7)/</id>
    <published>2021-01-07T13:09:54.000Z</published>
    <updated>2021-01-09T13:34:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法练习-1-Java基本语法-1-1-1-1-1-7"><a href="#算法练习-1-Java基本语法-1-1-1-1-1-7" class="headerlink" title="算法练习-1-Java基本语法(1.1.1-1.1.7)"></a>算法练习-1-Java基本语法(1.1.1-1.1.7)</h1><p>《算法》（第四版）的第一章课后习题1.1.1-1.1.7，希望自己能坚持下去把这本书啃完！</p><p>此博客的习题知识点：</p><ul><li>java基本语法</li><li>斐波那契数列的java表示</li></ul><a id="more"></a><h2 id="1-1-1-1-1-7"><a href="#1-1-1-1-1-7" class="headerlink" title="1.1.1-1.1.7"></a>1.1.1-1.1.7</h2><p><strong>知识点</strong></p><ul><li>java的基本语法</li><li>斐波那契数列的java表示</li></ul><h3 id="给出以下表达式的值："><a href="#给出以下表达式的值：" class="headerlink" title="给出以下表达式的值："></a>给出以下表达式的值：</h3><p>1.1.1</p><p><strong>a.( 0 + 15 ) / 2<br>b.2.0e-6 * 100000000.1<br>c.true &amp;&amp; false || true &amp;&amp; true</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token comment">/*** * @author leafii * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> practice01 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * a.( 0 + 15 ) / 2         * b.2.0e-6 * 100000000.1         * c.true &amp;&amp; false || true &amp;&amp; true         */</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">2e-6</span> <span class="token operator">*</span> <span class="token number">100000000.1</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> c <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b="</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c="</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">a&#x3D;7    整除b&#x3D;200.0000002    2*10的-6 乘以 100000000.1 double类型c&#x3D;true   false &amp;&amp; true</code></pre><h3 id="给出以下表达式的类型和值"><a href="#给出以下表达式的类型和值" class="headerlink" title="给出以下表达式的类型和值:"></a><strong>给出以下表达式的类型和值:</strong></h3><p>1.1.2</p><p><strong>a. (1 + 2.236)/2<br>b. 1 + 2 + 3 + 4.0<br>c. 4.1 &gt;= 4<br>d. 1 + 2 + “3”</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token comment">/*** * @author leafii * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> practice01 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * a. (1 + 2.236)/2         * b. 1 + 2 + 3 + 4.0         * c. 4.1 >= 4         * d. 1 + 2 + "3"          */</span>        <span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2.236</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4.0</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> c <span class="token operator">=</span> <span class="token number">4.1</span> <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> d <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"3"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b="</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c="</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d="</span> <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果</p><pre class="language-none"><code class="language-none">a&#x3D;1.618    3.236&#x2F;2 doubleb&#x3D;10.0     doublec&#x3D;true     d&#x3D;33     3 和 3 拼接</code></pre><h3 id="编写一个程序"><a href="#编写一个程序" class="headerlink" title="编写一个程序"></a><strong>编写一个程序</strong></h3><p>1.1.3</p><p><strong>从命令行得到三个整数参数。如果它们都相等则打印 equal，否则打印 not equal。</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">In</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdIn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token comment">/*** * @author leafii * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> practice01 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * 编写一个程序，从命令行得到三个整数参数。         * 如果它们都相等则打印 equal，         * 否则打印 not equal。         */</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//为了能多重输入，便于测试哦</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"equal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"not equal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果</p><pre class="language-none"><code class="language-none">12 23 34not equal11 11 11equal</code></pre><h3 id="下列语句各有什么问题-如果有的话"><a href="#下列语句各有什么问题-如果有的话" class="headerlink" title="下列语句各有什么问题(如果有的话)?"></a><strong>下列语句各有什么问题(如果有的话)?</strong></h3><p>1.1.4</p><p><strong>a. if (a &gt; b) then c = 0;<br>b. if a &gt; b { c = 0; }<br>c. if (a &gt; b) c = 0;<br>d. if (a &gt; b) c = 0 else b = 0;</strong></p><pre class="language-none"><code class="language-none">a. if (a &gt; b) then c &#x3D; 0;   &#x2F;&#x2F;java中不存在then关键字b. if a &gt; b &#123; c &#x3D; 0; &#125;   &#x2F;&#x2F;没有括号，应该是(a &gt; b)c. if (a &gt; b) c &#x3D; 0;    &#x2F;&#x2F;没问题，不过最好加括号d. if (a &gt; b) c &#x3D; 0 else b &#x3D; 0; &#x2F;&#x2F;有问题 c&#x3D;0没有分号，还有二义性，没加花括号</code></pre><h3 id="编写一段程序"><a href="#编写一段程序" class="headerlink" title="编写一段程序"></a><strong>编写一段程序</strong></h3><p>1.1.5</p><p><strong>如果 double 类型的变量 x 和 y 都严格位于 0 和 1 之间则打印 true，否则打印 false</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>charpter01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">In</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdIn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token class-name">StdOut</span><span class="token punctuation">;</span><span class="token comment">/*** * @author leafii * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> practice01 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         如果 double 类型的变量 x 和 y 都严格位于 0 和 1 之间则打印 true，         否则打印 false         */</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> y <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> y<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">0.10.89true1.20.1false0.33.4false</code></pre><h3 id="下面这段程序会打印出什么"><a href="#下面这段程序会打印出什么" class="headerlink" title="下面这段程序会打印出什么?"></a><strong>下面这段程序会打印出什么?</strong></h3><p>1.1.6</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> g <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    f <span class="token operator">=</span> f <span class="token operator">+</span> g<span class="token punctuation">;</span>    g <span class="token operator">=</span> f <span class="token operator">-</span> g<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre><p>答：会打印出</p><pre class="language-none"><code class="language-none">01123581321345589144233377610</code></pre><p>分析如下：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210108020834.png" alt="image-20210108020834693" loading="lazy"></p><p><strong>注：这段代码是用来展示斐波那契数列的哦</strong></p><h3 id="分别给出以下代码段打印出的值"><a href="#分别给出以下代码段打印出的值" class="headerlink" title="分别给出以下代码段打印出的值:"></a><strong>分别给出以下代码段打印出的值:</strong></h3><p>1.1.7</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//a.</span><span class="token keyword">double</span> t <span class="token operator">=</span> <span class="token number">9.0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>t <span class="token operator">-</span> <span class="token number">9.0</span><span class="token operator">/</span>t<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">.001</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">9.0</span><span class="token operator">/</span>t <span class="token operator">+</span> t<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span><span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.5f\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//b.</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        sum<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//c. </span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        sum<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>答案：</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;a. 3.00009&#x2F;&#x2F;b.499500&#x2F;&#x2F;c.10000</code></pre><hr><p>参考：<a href="https://xiaozhuanlan.com/topic/0341275869">算法练习(1):Java 基本语法(1.1.1-1.1.7) － 小专栏 (xiaozhuanlan.com)</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;算法练习-1-Java基本语法-1-1-1-1-1-7&quot;&gt;&lt;a href=&quot;#算法练习-1-Java基本语法-1-1-1-1-1-7&quot; class=&quot;headerlink&quot; title=&quot;算法练习-1-Java基本语法(1.1.1-1.1.7)&quot;&gt;&lt;/a&gt;算法练习-1-Java基本语法(1.1.1-1.1.7)&lt;/h1&gt;&lt;p&gt;《算法》（第四版）的第一章课后习题1.1.1-1.1.7，希望自己能坚持下去把这本书啃完！&lt;/p&gt;
&lt;p&gt;此博客的习题知识点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java基本语法&lt;/li&gt;
&lt;li&gt;斐波那契数列的java表示&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>《算法》（第四版）环境搭建</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/07/%E3%80%8A%E7%AE%97%E6%B3%95%E3%80%8B%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%89%88%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/07/%E3%80%8A%E7%AE%97%E6%B3%95%E3%80%8B%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%89%88%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2021-01-07T11:43:08.000Z</published>
    <updated>2021-01-07T12:38:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《算法》（第四版）环境搭建"><a href="#《算法》（第四版）环境搭建" class="headerlink" title="《算法》（第四版）环境搭建"></a>《算法》（第四版）环境搭建</h1><p>最近开封了买了很久都没读的《算法》（红色封面的），如果想运行里面的代码需要安装一个与本书搭配的jar包，因此有了这篇博客。</p><a id="more"></a><h2 id="算法运行库的下载和配置"><a href="#算法运行库的下载和配置" class="headerlink" title="算法运行库的下载和配置"></a>算法运行库的下载和配置</h2><ol><li><p>下载作者提供的运行库，下载地址：<a href="http://algs4.cs.princeton.edu/code/">点我</a> 点开页面之后使劲往下翻，翻到下图位置时，就知道点哪个下载了 嘿嘿嘿嘿</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107200929.png" alt="image-20210107200929162" loading="lazy"></p></li></ol><p><strong>我们需要下载两个内容，一个是库，一个是测试的数据。库是algs4.jar，数据是algs4-data.zip。</strong></p><ol start="2"><li>在C盘建立目录<code>C:\Program Files\algs4</code>，然后把algs4.jar放在里面。（什么目录都可以）</li><li>在CLASSPATH环境变量中，添加值<code>C:\Program Files\algs4\algs4.jar</code> (就是刚刚存放algs4.jar的路径)</li></ol><p><strong>注:如果你没有配置过CLASSPATH，请复制以下语句进CLASSPATH，使你的CLASSPATH变成这样</strong></p><pre class="language-none"><code class="language-none">.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;C:\Users\yeyun\alsgs4\algs4.jar</code></pre><h2 id="测试数据的使用"><a href="#测试数据的使用" class="headerlink" title="测试数据的使用"></a>测试数据的使用</h2><ol><li>在idea中创建一个HelloWorld工程，选择你的JDK，下一步。</li><li>为项目添加jar包：File–&gt;Project Strcuture–&gt;Modules，然后点加号，点击，JARS…..,选择你的Jar包的位置，点确定。如图所示：</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107202545.png" alt="image-20210107202545115" loading="lazy"></p><ol start="3"><li>将测试数据解压到src目录下：</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107202658.png" alt="image-20210107202658127" loading="lazy"></p><ol start="4"><li>使用第一章第一节的测试代码：</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>day01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">BinarySearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hi <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;=</span> hi<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Key is in a[lo..hi] or not present.</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span>      <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> hi <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> lo <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// read the integers from a file</span>        <span class="token class-name">In</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">In</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> whitelist <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readAllInts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// sort the array</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>whitelist<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// read integer key from standard input; print if not in whitelist</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">BinarySearch</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>whitelist<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="5"><li>在BinarySearch类所在的文件夹右键，选择open in terminal，输入编译命令:<code>javac BinarySearch.java</code></li><li>在src文件夹上右键，点击open in terminal</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107202831.png" alt="image-20210107202831682" loading="lazy"></p><ol start="6"><li>在命令行中输入命令：<code>java top.leafii.demo.day01.BinarySearch tinyW.txt &lt; tinyT.txt</code>（注意你的包名）</li><li>成功了！运行结果如图所示：</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107203202.png" alt="image-20210107203201972" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;《算法》（第四版）环境搭建&quot;&gt;&lt;a href=&quot;#《算法》（第四版）环境搭建&quot; class=&quot;headerlink&quot; title=&quot;《算法》（第四版）环境搭建&quot;&gt;&lt;/a&gt;《算法》（第四版）环境搭建&lt;/h1&gt;&lt;p&gt;最近开封了买了很久都没读的《算法》（红色封面的），如果想运行里面的代码需要安装一个与本书搭配的jar包，因此有了这篇博客。&lt;/p&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>关于java命令报错 找不到或无法加载主类这件事</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/07/%E5%85%B3%E4%BA%8Ejava%E5%91%BD%E4%BB%A4%E6%8A%A5%E9%94%99-%E6%89%BE%E4%B8%8D%E5%88%B0%E6%88%96%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E4%B8%BB%E7%B1%BB%E8%BF%99%E4%BB%B6%E4%BA%8B/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/07/%E5%85%B3%E4%BA%8Ejava%E5%91%BD%E4%BB%A4%E6%8A%A5%E9%94%99-%E6%89%BE%E4%B8%8D%E5%88%B0%E6%88%96%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E4%B8%BB%E7%B1%BB%E8%BF%99%E4%BB%B6%E4%BA%8B/</id>
    <published>2021-01-07T07:46:37.000Z</published>
    <updated>2021-01-07T11:44:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于java命令报错-找不到或无法加载主类这件事"><a href="#关于java命令报错-找不到或无法加载主类这件事" class="headerlink" title="关于java命令报错 找不到或无法加载主类这件事"></a>关于java命令报错 找不到或无法加载主类这件事</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>今天在配置《算法》（第四版）所需要的环境后，进行java命令+输入输出流文件时报错了！报错如图所示：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107155310.png" alt="image-20210107155303487" loading="lazy"></p><p>咋回事呢？</p><a id="more"></a><h2 id="或许，是因为没有写包名？"><a href="#或许，是因为没有写包名？" class="headerlink" title="或许，是因为没有写包名？"></a>或许，是因为没有写包名？</h2><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107160102.png" alt="image-20210107160102193" loading="lazy"></p><p>还是不行!!!咋回事呢？</p><h2 id="写个HelloWorld试试？可能是java命令出问题了？"><a href="#写个HelloWorld试试？可能是java命令出问题了？" class="headerlink" title="写个HelloWorld试试？可能是java命令出问题了？"></a>写个HelloWorld试试？可能是java命令出问题了？</h2><p>在D盘根目录写一个Hello.java，代码如下（其实就是Helloworld啦）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>然而运行的时候…</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107160522.png" alt="image-20210107160522119" loading="lazy"></p><p>？？？？？？怎么回事呢？</p><h2 id="用家里的Mac的终端试试能不能写Java代码"><a href="#用家里的Mac的终端试试能不能写Java代码" class="headerlink" title="用家里的Mac的终端试试能不能写Java代码"></a>用家里的Mac的终端试试能不能写Java代码</h2><p>可以的，一样的代码，它就能运行，咱就不行，怎么回事呢？</p><h2 id="干脆重新安装JDK试试"><a href="#干脆重新安装JDK试试" class="headerlink" title="干脆重新安装JDK试试!"></a>干脆重新安装JDK试试!</h2><h3 id="卸载旧的JDK"><a href="#卸载旧的JDK" class="headerlink" title="卸载旧的JDK"></a>卸载旧的JDK</h3><p>打开控制面板–&gt;卸载程序–&gt;找到Java开头的两个应用</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107160756.png" alt="image-20210107160756288" loading="lazy"></p><p>给他们都卸载了！</p><p>把环境变量配置的JAVA_HOME,以及Path中的两个java运行路径都删除！</p><h3 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h3><p>当然是去甲骨文官网下载啦，[官网地址](<a href="https://www.oracle.com/java/technologies/javase-downloads.html">Java SE - Downloads | Oracle Technology Network | Oracle</a>)</p><p>选择合适的jdk版本的合适系统的安装包，点击下载，同意协议，登陆账户后自动开始下载</p><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><p>双击安装就好了</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ol><li><p>右键此电脑–&gt;属性–&gt;高级系统设置–&gt;环境变量</p></li><li><p>配置JAVA_HOME(在用户变量里），路径为你的java安装目录，我的安装目录如下</p></li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107162104.png" alt="image-20210107162104115" loading="lazy"></p><ol start="3"><li>配置Path（在系统变量里），路径为jdk和jre的运行目录，我的path配置如下</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107162251.png" alt="image-20210107162250997" loading="lazy"></p><ol start="4"><li>虽然在java1.6以上不需要配置CLASSPATH，但是因为我要配置额外的运行库，所以要在系统变量里配置完整CLASSPATH，值如下</li></ol><pre class="language-none"><code class="language-none">.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code></pre><ol start="5"><li>因为配置了算法第四版的运行库，所以要在CLASSPATH中添加</li></ol><pre class="language-none"><code class="language-none">;C:\Users\yeyun\alsgs4\algs4.jar</code></pre><p><strong>配置结束之后，点击三次确定，打开cmd（或gitbash），输入java -version，如果不报错并显示版本，则配置成功</strong></p><h2 id="现在再试试Helloworld能跑起来吗？"><a href="#现在再试试Helloworld能跑起来吗？" class="headerlink" title="现在再试试Helloworld能跑起来吗？"></a>现在再试试Helloworld能跑起来吗？</h2><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107162614.png" alt="image-20210107162614489" loading="lazy"></p><p>可以的，成功了！，再试试书上的示例代码可以跑起来吗？</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107162638.png" alt="image-20210107162638159" loading="lazy"></p><p>可以了！</p><h2 id="反省问题"><a href="#反省问题" class="headerlink" title="反省问题"></a>反省问题</h2><p>其实jdk并没有问题，因为在idea上运行代码，项目都没有任何问题的，只是在命令行的时候出了问题！那么是哪里出了问题呢？</p><p>是CLASSPATH环境变量配置的问题！以前配置jdk的时候没有配置CLASSPATH，所以以前可以直接用java命令运行，但是现在因为配置了算法第四版的运行库，反而配置了CLASSPATH，但是并没有配置其它的默认的CLASSPATH，导致系统不知道你在运行java命令时的此时的.class文件的目录什么的（和.;这个环境变量内容有关系），配置之后就一切正常了！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果使用java命令运行.class文件时报错：找不到或无法加载主类，请进行如下操作：</p><ol><li><p>检查你运行的类是不是处于某个包内，要在这个包的上一级目录，运行这个包中的类，并且在类名之前加上包名，如<code>java top.leafii.day01.HelloWorld</code> ，这样如果可以运行，那么就是你java命令要运行的包名没有弄清楚</p></li><li><p>检查你的环境变量是否配置正确，如果配置了其它的CLASSPATH，那就把默认的<code>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code>也加上（注意分号)</p></li><li><p>如果实在不知道怎么搞，就重装一遍JDK！不过一般都是上面这两个情况。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;关于java命令报错-找不到或无法加载主类这件事&quot;&gt;&lt;a href=&quot;#关于java命令报错-找不到或无法加载主类这件事&quot; class=&quot;headerlink&quot; title=&quot;关于java命令报错 找不到或无法加载主类这件事&quot;&gt;&lt;/a&gt;关于java命令报错 找不到或无法加载主类这件事&lt;/h1&gt;&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;今天在配置《算法》（第四版）所需要的环境后，进行java命令+输入输出流文件时报错了！报错如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/mikutown/pic/raw/master/img/20210107155310.png&quot; alt=&quot;image-20210107155303487&quot;&gt;&lt;/p&gt;
&lt;p&gt;咋回事呢？&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://mikutown.gitee.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Go语言の变量</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/04/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E5%8F%98%E9%87%8F/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/04/Go%E8%AF%AD%E8%A8%80%E3%81%AE%E5%8F%98%E9%87%8F/</id>
    <published>2021-01-04T13:22:07.000Z</published>
    <updated>2021-01-16T07:09:00.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go语言の变量"><a href="#Go语言の变量" class="headerlink" title="Go语言の变量"></a>Go语言の变量</h1><p>本文章主要写Go语言中使用的变量类型以及其知识点</p><a id="more"></a><h2 id="为什么需要变量"><a href="#为什么需要变量" class="headerlink" title="为什么需要变量"></a>为什么需要变量</h2><p><strong>因为变量是高级程序语言的程序的基本组成单位，如下面的代码的实例：</strong></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">getVal</span><span class="token punctuation">(</span>num1 <span class="token builtin">int</span><span class="token punctuation">,</span> num2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sum <span class="token operator">:=</span> num1 <span class="token operator">+</span> num2    sub <span class="token operator">:=</span> num2 <span class="token operator">-</span> num1    <span class="token keyword">return</span> sum<span class="token punctuation">,</span> sub<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sum<span class="token punctuation">,</span> sub <span class="token operator">:=</span> <span class="token function">getVal</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sum="</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span><span class="token string">"sub="</span><span class="token punctuation">,</span> sub<span class="token punctuation">)</span>    sum2<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">getVal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token comment">//只取出第一个返回值</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sum="</span><span class="token punctuation">,</span> sum2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>以上代码中的sum,sub都是变量。</p><h2 id="变量的介绍"><a href="#变量的介绍" class="headerlink" title="变量的介绍"></a>变量的介绍</h2><h3 id="变量的概念"><a href="#变量的概念" class="headerlink" title="变量的概念"></a>变量的概念</h3><p>变量相当于内存中一个数据存储空间的表示，你可以把变量看作是一个房间的门牌号，通过门牌号我们可以找到房间，同样的道理，通过变量名可以访问到变量/变量的值。</p><h3 id="变量的使用步骤"><a href="#变量的使用步骤" class="headerlink" title="变量的使用步骤"></a>变量的使用步骤</h3><ol><li>声明变量（也叫定义变量）</li><li>非变量赋值</li><li>使用变量</li></ol><h2 id="变量快速入门案例"><a href="#变量快速入门案例" class="headerlink" title="变量快速入门案例"></a>变量快速入门案例</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//定义变量/声明变量</span><span class="token keyword">var</span> i <span class="token builtin">int</span><span class="token comment">//给i赋值</span>i <span class="token operator">=</span> <span class="token number">10</span><span class="token comment">//使用变量</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104214110.png" alt="image-20210104214110288" loading="lazy"></p><h2 id="变量使用注意事项"><a href="#变量使用注意事项" class="headerlink" title="变量使用注意事项"></a>变量使用注意事项</h2><ol><li>变量表示内存中的一个存储区域</li><li>该区域有自己的名称（变量名）和类型（数据类型）</li></ol><p>示意图:</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104214226.png" alt="image-20210104214226281" loading="lazy"></p><ol start="3"><li><p>Golang变量使用的三种方式</p><ol><li>指定变量类型，声明后若不赋值，使用默认值。<code>var i int</code></li><li>根据值自行判定变量类型（类型推导）<code>var num = 10.11</code></li><li>省略var,注意 := 左侧的变量不应该是已经声明过的，否则会导致编译错误</li></ol><pre class="language-go" data-language="go"><code class="language-go">name <span class="token operator">:=</span> <span class="token string">"tom"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"name="</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span></code></pre></li><li><p>多变量声明</p><p>在编程中，有时我们需要一次性声明多个变量，Golang也提供这样的语法，举例说明:</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//该案例演示golang如何一次性声明多个变量</span>    <span class="token comment">// var n1, n2, n3 int</span>    <span class="token comment">// fmt.Println("n1=",n1, "n2=",n2 ,"n3=",n3)</span>        <span class="token comment">//方式2</span>    <span class="token comment">// var n1, name, n3 = 100, "tom", 888</span>    <span class="token comment">// fmt.Println("n1=",n1, "name=",name ,"n3=",n3)</span>        <span class="token comment">//方式3 同样可以使用类型推导</span>    n1<span class="token punctuation">,</span> name<span class="token punctuation">,</span> n3 <span class="token operator">:=</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"tom~"</span><span class="token punctuation">,</span> <span class="token number">888</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"n1="</span><span class="token punctuation">,</span>n1<span class="token punctuation">,</span> <span class="token string">"name="</span><span class="token punctuation">,</span>name <span class="token punctuation">,</span><span class="token string">"n3="</span><span class="token punctuation">,</span>n3<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span></code></pre><p>​    如何一次性声明多个全局变量【在go中函数外部定义变量就是全局变量】：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//定义全局变量</span><span class="token keyword">var</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">var</span> n2 <span class="token operator">=</span> <span class="token number">200</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token comment">//上面的声明方式，也可以改成一次性声明</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    n3 <span class="token operator">=</span> <span class="token number">300</span>    n4 <span class="token operator">=</span> <span class="token number">900</span>    name2 <span class="token operator">=</span> <span class="token string">"mary"</span><span class="token punctuation">)</span></code></pre><ol start="5"><li>该区域的数据值可以在同一类型范围内不断变化（重点）</li></ol></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">//变量使用的注意事项</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//该区域的数据值可以在同一类型范围内不断变化</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>    i <span class="token operator">=</span> <span class="token number">30</span>    i <span class="token operator">=</span> <span class="token number">50</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">1.2</span><span class="token comment">//int， 原因是不能改变数据类型</span><span class="token punctuation">&#125;</span></code></pre><ol start="6"><li>变量在<strong>同一个作用域</strong>（在一个函数或者代码块）内不能重名</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">59</span>i <span class="token operator">:=</span> <span class="token number">99</span><span class="token comment">//错误!</span></code></pre><h2 id="变量的声明，初始化和赋值"><a href="#变量的声明，初始化和赋值" class="headerlink" title="变量的声明，初始化和赋值"></a>变量的声明，初始化和赋值</h2><ul><li><p>声明变量</p><ul><li>基本语法： var 变量名 数据类型</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token comment">//这就是声明了一个变量，变量名为a</span><span class="token keyword">var</span> num1 <span class="token builtin">float32</span> <span class="token comment">//这也是声明了一个变量，表示一个单精度类型的小数，变量名是num1</span></code></pre></li><li><p>初始化变量</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//在声明变量的时候，就给值</span><span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">45</span> <span class="token comment">//这就是初始化变量a</span><span class="token comment">//使用细节，如过声明时就直接赋值，可以省略数据类型</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">400</span></code></pre></li><li><p>给变量赋值</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//先声明变量</span><span class="token keyword">var</span> num <span class="token builtin">int</span> <span class="token comment">//默认0</span><span class="token comment">//赋值</span>num <span class="token operator">=</span> <span class="token number">780</span> <span class="token comment">//这就是赋值</span></code></pre><h2 id="程序中”-“号的使用"><a href="#程序中”-“号的使用" class="headerlink" title="程序中”+“号的使用"></a>程序中”+“号的使用</h2></li></ul><ol><li>当左右两边都是数值型时，则做加法运算</li><li>当左右两边都是字符串，则做字符串拼接</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">//演示golang中"+"的使用</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">var</span> r <span class="token operator">=</span> i <span class="token operator">+</span> j    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"r="</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>        <span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">"hello"</span>    <span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">"world"</span>    <span class="token keyword">var</span> res <span class="token operator">=</span> str1 <span class="token operator">+</span> str2 <span class="token comment">//做拼接操作</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"res="</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="数据类型的基本介绍"><a href="#数据类型的基本介绍" class="headerlink" title="数据类型的基本介绍"></a>数据类型的基本介绍</h2><ul><li>每一种数据都定义了明确的数据类型，在内存中分配了不同大小的内存空间。</li></ul><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104223253.png" alt="image-20210104223253926" loading="lazy"></p><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>​    简单地说，就是用于存放整数值的，比如0，-1，2345等等。</p><h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//演示Golang中整数类型的使用</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token comment">//测试以下int8的范围 -128~127</span>    <span class="token comment">//其他的 int16,int32,int64,类推...</span>    <span class="token keyword">var</span> j <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token number">127</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"j="</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="整数的各个类型"><a href="#整数的各个类型" class="headerlink" title="整数的各个类型"></a>整数的各个类型</h3><ul><li>整形的类型</li></ul><table><thead><tr><th>类型</th><th>有无符号</th><th>占用存储空间</th><th>表数范围</th></tr></thead><tbody><tr><td>int8</td><td>有</td><td>1字节</td><td>-128~127</td></tr><tr><td>int16</td><td>有</td><td>2字节</td><td>-2<sup>15</sup>~2<sup>15</sup>-1</td></tr><tr><td>int32</td><td>有</td><td>4字节</td><td>-2<sup>31</sup>~2<sup>31</sup>-1</td></tr><tr><td>int64</td><td>有</td><td>8字节</td><td>-2<sup>63</sup>~2<sup>63</sup>-1</td></tr></tbody></table><ul><li>整形的无符号类型</li></ul><table><thead><tr><th>类型</th><th>有无符号</th><th>占用存储空间</th><th>表数范围</th></tr></thead><tbody><tr><td>uint8</td><td>无</td><td>1字节</td><td>0~255</td></tr><tr><td>uint16</td><td>无</td><td>2字节</td><td>0~2<sup>16</sup>-1</td></tr><tr><td>uint32</td><td>无</td><td>4字节</td><td>0~2<sup>32</sup>-1</td></tr><tr><td>uint64</td><td>无</td><td>8字节</td><td>0~2<sup>64</sup>-1</td></tr></tbody></table><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//测试一下uint8的范围（0~255），其他的uint16,uint32,uint64类推即可</span><span class="token keyword">var</span> k <span class="token builtin">uint16</span> <span class="token operator">=</span> <span class="token number">255</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"k="</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span></code></pre><ul><li>int的其他类型的说明：</li></ul><table><thead><tr><th>类型</th><th>有无符号</th><th>占用存储空间</th><th>表数范围</th><th>备注</th></tr></thead><tbody><tr><td>int</td><td>有</td><td>32位系统4个字节<br />64位系统8个字节</td><td>-2<sup>31</sup><del>2<sup>31</sup>-1<br />-2<sup>63</sup></del>2<sup>63</sup>-1</td><td></td></tr><tr><td>uint</td><td>无</td><td>32位系统4个字节<br />64位系统8个字节</td><td>-0<del>2<sup>32</sup>-1<br />0</del>2<sup>64</sup>-1</td><td></td></tr><tr><td>rune</td><td>有</td><td>与int32一样</td><td>-2<sup>31</sup>~2<sup>31</sup>-1</td><td>等价int32，表示一个Unicode码</td></tr><tr><td>byte</td><td>无</td><td>与uint8等价</td><td>0~255</td><td>当要存储字符时选用byte</td></tr></tbody></table><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//int,uint,rune,byte的使用</span><span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">8900</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token keyword">var</span> b <span class="token builtin">uint</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">var</span> c <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token number">255</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b="</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token string">"c="</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></code></pre><h3 id="整形的使用细节"><a href="#整形的使用细节" class="headerlink" title="整形的使用细节"></a>整形的使用细节</h3><ol><li>Golang各整数类型分：有符号和无符号，int uint的大小和系统有关</li><li>Golang的整型默认声明为int型</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//整形的使用细节</span><span class="token keyword">var</span> n1 <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">//? n1是什么类型</span><span class="token comment">//这里我们给大家介绍如何查看某个变量的数据类型</span><span class="token comment">//fmt.Println() 可以用于做格式化输出。</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"n1 的类型 %T \n"</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span></code></pre><ol start="3"><li>如何在程序查看某个变量的字节大小和数据类型 （使用较多）</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//如何在程序查看某个变量的占用字节大小和数据类型 （使用较多）</span><span class="token keyword">var</span> n2 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token comment">//unsafe.Sizeof(n1) 是unsafe包的一个函数，可以返回n1变量占用的字节数</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"n2 的 类型 %Tn2占用的字节数是 %d"</span><span class="token punctuation">,</span> n2<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ol start="4"><li>Golang程序中整型变量在使用时，遵守保小不保大的原则，即：在保证程序正确运行下，尽量使用占用空间小的数据类型。【如：年龄】</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//Golang程序中整型变量在使用时，遵守保小不保大的原则，</span><span class="token comment">//即：在保证程序正确运行下，尽量使用占用空间小的数据类型。</span><span class="token keyword">var</span> age <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token number">90</span></code></pre><ol start="5"><li>bit:计算机中的最小存储单位。byte：计算机中基本存储单元。1 byte = 8 bit</li></ol><h2 id="小数类型-浮点型"><a href="#小数类型-浮点型" class="headerlink" title="小数类型/浮点型"></a>小数类型/浮点型</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>顾名思义，小数类型就是用于存放小数的，如1.2，0.23，-1.91</p><h3 id="案例演示-1"><a href="#案例演示-1" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//演示golang中小数类型使用</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> price <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">89.12</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"price="</span><span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果如下图</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107171749.png" alt="image-20210107171748992" loading="lazy"></p><h3 id="小数类型分类"><a href="#小数类型分类" class="headerlink" title="小数类型分类"></a>小数类型分类</h3><table><thead><tr><th>类型</th><th>占用存储空间</th><th>表数范围</th></tr></thead><tbody><tr><td>单精度float32</td><td>4字节</td><td>-3.403E38~3.403E38</td></tr><tr><td>双精度float64</td><td>8字节</td><td>-1.798E308~1.798E308</td></tr></tbody></table><p><strong>说明</strong>:</p><ol><li>关于浮点数在机器中存放形式的简单说明，浮点数=符号位+指数位+尾数位，浮点数都是有符号的。</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107172259.png" alt="image-20210107172259894" loading="lazy"></p><ol start="2"><li>尾数部分可能丢失，造成精度损失。 -123.0000901</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107172329.png" alt="image-20210107172329694" loading="lazy"></p><p><strong>说明：</strong></p><ul><li>float64的精度比float32的要准确</li><li>如果我们要保存一个精度高的数，则应该选用float64</li></ul><ol start="3"><li>浮点型的存储分为三部分：符号位+指数位+尾数位    在存储过程中，精度会有丢失哦</li></ol><h3 id="浮点型使用细节"><a href="#浮点型使用细节" class="headerlink" title="浮点型使用细节"></a>浮点型使用细节</h3><ol><li><p>Golang浮点类型有固定的范围和字段长度，不受具体的操作系统的影响。</p></li><li><p>Golang的浮点型默认声明为float64类型。</p></li><li><p>浮点型常量有两种表示形式</p><ul><li>十进制数形式：如：5.12        .512（必须有小数点）</li><li>科学计数法形式：如： 5.1234e2 = 5.12 * 10 ^ 2      5.12E-2 = 5.12/(10^2)</li></ul></li><li><p>通常情况下，应该使用float64，因为它精度更高。</p></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//Golang的浮点型默认声明为float64类型</span><span class="token keyword">var</span> num5 <span class="token operator">=</span> <span class="token number">1.1</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"num5的数据类型是 %T \n"</span><span class="token punctuation">,</span> num5<span class="token punctuation">)</span><span class="token comment">//十进制数形式：如：5.12        .512（必须有小数点）</span>num6 <span class="token operator">:=</span> <span class="token number">5.12</span>num7 <span class="token operator">:=</span> <span class="token number">.123</span> <span class="token comment">//->0.123</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"num6="</span><span class="token punctuation">,</span> num6<span class="token punctuation">,</span> <span class="token string">"num7="</span><span class="token punctuation">,</span> num7<span class="token punctuation">)</span><span class="token comment">//科学计数法形式：如： 5.1234e2 = 5.12 * 10 ^ 2      5.12E-2 = 5.12/(10^2)</span>num8 <span class="token operator">:=</span> <span class="token number">5.1234e2</span> <span class="token comment">// 5.1234 * 10 ^ 2</span>num8 <span class="token operator">:=</span> <span class="token number">5.1234E2</span> <span class="token comment">// 5.1234 * 10 ^ 2</span></code></pre><h2 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h2><h3 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>在Golang中没有专门的字符类型，如果要存储单个字符(字母)，一般使用byte来保存。</p><p><strong>字符串就是一串固定长度的字符连接起来的字符序列。</strong>Go的字符串是由单个字节连接起来的。也就是说对于传统的字符串是由字符组成的，而Go的字符串不同，它是由字节组成的。</p><h3 id="案例演示-2"><a href="#案例演示-2" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//演示Golang中字符类型使用</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> c1 <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token keyword">var</span> c2 <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token string">'0'</span>   <span class="token comment">//字符的0</span><span class="token comment">//当我们直接输出byte值，就是输出了对应字符的码值</span><span class="token comment">//'a' ==> </span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"c1="</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"c2="</span><span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token comment">//如果我们希望输出对应字符，需要使用格式化输出</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c1=%c c2=%c\n"</span><span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token comment">//var c3 byte = '北' //overflow溢出</span><span class="token keyword">var</span> c3 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token string">'北'</span> <span class="token comment">//overflow溢出</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c3=%c c3对应码值=%d\n"</span><span class="token punctuation">,</span> c3<span class="token punctuation">,</span> c3<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107183135.png" alt="image-20210107183135116" loading="lazy"></p><p><strong>对上述代码的说明</strong></p><ol><li>如果我们保存的字符在ASCII表中，比如[0-1，a-z,A-Z]  我们可以直接保存到byte中</li><li>如果我们要保存的字符的对应码值大于255，这时我们可以考虑使用int类型保存</li><li>如果我们需要按照字符的方式输出，此时就需要进行格式化输出，即<code>fmt.Printf(&quot;%c&quot;,c1)</code></li></ol><h3 id="字符类型使用细节"><a href="#字符类型使用细节" class="headerlink" title="字符类型使用细节"></a>字符类型使用细节</h3><ol><li>字符常量是用单引号（”)括起来的单个字符。例如<code>var c1 byte = &#39;a&#39;</code>,<code>car c2 int = &#39;中&#39;</code>,<code>var c3 byte = &#39;9&#39;</code></li><li>Go中允许使用转义字符’\‘来将其后面的字符转变为特殊字符型常量。例如：<code>var c3 char = &#39;\n&#39;  </code>（\n表示换行符）</li><li>Go语言的字符使UTF-8编码，如果想查询字符对应的utf8码值，请点击[链接](<a href="http://www.mytju.com/classcode/tools/encode_utf8.asp">查看字符编码（UTF-8） (mytju.com)</a>). 英文字母占1个自己，汉字占3个字节</li><li>在Go中，字符的本质是一个整数，直接输出时，是该字符对应的 UTF-8编码的码值。</li><li>可以直接给某个变量赋一个数字，然后按格式化输出%c,会输出该数字对应的Unicode字符，如</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> c4 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">22269</span> <span class="token comment">//22269 -> '国'</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c4 = %c\n"</span><span class="token punctuation">,</span> c4<span class="token punctuation">)</span></code></pre><ol start="6"><li>字符类型可以进行运算，它相当于一个整数，因为每个字符都有对应的Unicode码。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> n1 <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'a'</span>   <span class="token comment">// 10+97 = 107</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"n1 = %c\n"</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span> <span class="token comment">//输出为k</span></code></pre><h3 id="字符类型本质探讨"><a href="#字符类型本质探讨" class="headerlink" title="字符类型本质探讨"></a>字符类型本质探讨</h3><ol><li>字符型存储到计算机中，需要将字符对应的码值（整数）找出来<ul><li>存储： 字符 –&gt; 对应码值  –&gt; 二进制 –&gt; 存储</li><li>读取： 二进制 –&gt;  码值 –&gt; 字符 –&gt; 读取</li></ul></li><li>字符和码值的对应关系是通过字符编码表决定的（这是规定）</li><li>Go语言的编码都统一成了UTF-8。这非常的方便，再也没有编码乱码的困扰了。</li></ol><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><h3 id="基本介绍-3"><a href="#基本介绍-3" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>布尔类型，又名bool类型，bool类型数据只允许取值true和false</li><li>bool类型占1个字节</li><li>bool类型适用于逻辑运算，一般用于程序流程控制（之后会详细了解）<ul><li>if条件控制语句</li><li>for循环控制语句</li></ul></li></ol><h3 id="案例演示-3"><a href="#案例演示-3" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"unsafe"</span><span class="token punctuation">)</span><span class="token comment">//演示Golang中bool类型的使用</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token boolean">false</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b="</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token comment">//注意事项</span><span class="token comment">//1. bool类型占用的存储空间是1字节</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b 的占用空间 = "</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//2. bool类型只能取true或false</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107185952.png" alt="image-20210107185952514" loading="lazy"></p><h2 id="string类型"><a href="#string类型" class="headerlink" title="string类型"></a>string类型</h2><h3 id="基本介绍-4"><a href="#基本介绍-4" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>字符串就是一串固定长度的字符连接起来的字符序列。Go的字符串是由单个字节连接起来的。Go语言的字符串的字节使用UTF-8编码标识Unicode文本</p><h3 id="案例演示-4"><a href="#案例演示-4" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//演示Golang中string类型的使用</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//string的基本使用</span><span class="token keyword">var</span> address <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"北京长城 厉害了1234 hello world！"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="string的注意事项和细节"><a href="#string的注意事项和细节" class="headerlink" title="string的注意事项和细节"></a>string的注意事项和细节</h3><ol><li>Go语言的字符串的字节使用UTF-8编码标识Unicode文本，这样Golang统一使用UTF-8编码，中文乱码问题不会再困扰程序员。</li><li>字符串一旦赋值了，字符串就不能修改了：在Go中字符串是不可变的。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello"</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span>    <span class="token comment">//这里不能修改str的内容，也就是说Go中的字符串是不可变的</span></code></pre><ol start="3"><li>字符串的两种表示形式<ol><li>双引号，会识别转义字符</li><li>反引号，以字符串的原生形式输出，包括换行和特殊字符，可以实现防止攻击，输出源代码等效果。</li></ol></li></ol><p>【案例演示】</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//演示Golang中string类型的使用</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//string的基本使用</span>address <span class="token operator">:=</span> <span class="token string">"abc\nabc"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>str2 <span class="token operator">:=</span> <span class="token string">`package mainimport ("fmt")//演示Golang中string类型的使用func main() &#123;//string的基本使用var address string = "北京长城 厉害了1234 hello world！"fmt.Println(address)&#125;`</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果:</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107190838.png" alt="image-20210107190838210" loading="lazy"></p><ol start="4"><li>字符串拼接方式</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//字符串拼接方式</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello"</span> <span class="token operator">+</span> <span class="token string">"world"</span>str <span class="token operator">+=</span> <span class="token string">" haha!"</span></code></pre><ol start="5"><li>当一行字符串太长时，需要用到多行字符串，可以如下处理</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//当一个拼接的操作很长时，怎么办？可以分行写，但是注意，需要将+保留在上一行。</span>str4 <span class="token operator">:=</span> <span class="token string">"hello"</span> <span class="token operator">+</span> <span class="token string">"world"</span> <span class="token operator">+</span> <span class="token string">"hello"</span> <span class="token operator">+</span> <span class="token string">"world"</span> <span class="token operator">+</span> <span class="token string">"hello"</span> <span class="token operator">+</span> <span class="token string">"world"</span> <span class="token operator">+</span> <span class="token string">"hello"</span> <span class="token operator">+</span> <span class="token string">"world"</span> <span class="token operator">+</span> <span class="token string">"hello"</span> <span class="token operator">+</span> <span class="token string">"world"</span> <span class="token operator">+</span><span class="token string">"hello"</span> <span class="token operator">+</span> <span class="token string">"world"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span></code></pre><h2 id="基本数据类型的默认值"><a href="#基本数据类型的默认值" class="headerlink" title="基本数据类型的默认值"></a>基本数据类型的默认值</h2><h3 id="基本介绍-5"><a href="#基本介绍-5" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>在Go中，数据类型都有一个默认值，当程序员没有赋值时，就会保留默认值，在Go中，默认值又叫零值。</p><h3 id="基本数据类型的默认值-1"><a href="#基本数据类型的默认值-1" class="headerlink" title="基本数据类型的默认值"></a>基本数据类型的默认值</h3><table><thead><tr><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>整形</td><td>0</td></tr><tr><td>浮点型</td><td>0</td></tr><tr><td>字符串</td><td>“”</td></tr><tr><td>布尔类型</td><td>false</td></tr></tbody></table><h2 id="基本数据类型的相互转换"><a href="#基本数据类型的相互转换" class="headerlink" title="基本数据类型的相互转换"></a>基本数据类型的相互转换</h2><h3 id="基本介绍-6"><a href="#基本介绍-6" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>Golang和java/C不同，Go在不同类型的变量之间赋值时<strong>需要显式转换</strong>。也就是说Golang中的数据类型不能自动转换。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>表达式T(v)将值v转换为类型T</p><p>T:就是数据类型，比如int32,int64.float32等等</p><p>v：就是需要转换的变量</p><h3 id="案例演示-5"><a href="#案例演示-5" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token comment">//希望将 i => float</span><span class="token keyword">var</span> n1 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token function">float32</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">var</span> n2 <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token function">int8</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">var</span> n3 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">//低精度->高精度</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i=%v n1=%v n2=%v n3=%v \n"</span><span class="token punctuation">,</span> i <span class="token punctuation">,</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3<span class="token punctuation">)</span></code></pre><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>Go中，数据类型的转换可以是从 表示范围小–&gt;表示范围大，也可以从 表示范围大–&gt;表示范围小</li><li>被转换的是变量存储的数据（即值），变量本身的数据类型并没有变化！</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token comment">//被转换的是变量存储的数据(即值)，变量本身的数据类型并没有变化</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i type is %T\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment">// int32</span></code></pre><ol start="3"><li>在转换中，比如将 int64 转换成 int8 【-128~127】，编译时不会报错，只是转换的结果按<strong>溢出处理</strong>。和我们希望的结果不一样。因此在转换时，需要考虑范围。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//在转换中，比如将 int64  转成 int8 【-128---127】 ，编译时不会报错，</span><span class="token comment">//只是转换的结果是按溢出处理，和我们希望的结果不一样</span><span class="token keyword">var</span> num1 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">999999</span><span class="token keyword">var</span> num2 <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token function">int8</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token comment">// </span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"num2="</span><span class="token punctuation">,</span> num2<span class="token punctuation">)</span></code></pre><h3 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h3><ul><li>练习1</li></ul><p>如何修改一下代码，使之正确</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> n1 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">12</span>    <span class="token keyword">var</span> n2 <span class="token builtin">int64</span>    <span class="token keyword">var</span> n3 <span class="token builtin">int8</span>    n2 <span class="token operator">=</span> n1 <span class="token operator">+</span> <span class="token number">20</span>    n3 <span class="token operator">=</span> n1 <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">&#125;</span></code></pre><p>答案：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> n1 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">12</span>    <span class="token keyword">var</span> n2 <span class="token builtin">int64</span>    <span class="token keyword">var</span> n3 <span class="token builtin">int8</span>    n2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20</span>     <span class="token comment">//int32 --> int64错误</span>    n3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">int8</span><span class="token punctuation">)</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20</span>      <span class="token comment">//int32 --> int8 错误</span><span class="token punctuation">&#125;</span></code></pre><ul><li>练习2 </li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> n1 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token keyword">var</span> n3 <span class="token builtin">int8</span><span class="token keyword">var</span> n4 <span class="token builtin">int8</span>n4 <span class="token operator">=</span> <span class="token function">int8</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">127</span> <span class="token comment">//编译通过，值溢出</span>n3 <span class="token operator">=</span> <span class="token function">int8</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">128</span> <span class="token comment">//编译不通过</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n4<span class="token punctuation">)</span></code></pre><h2 id="基本数据类型和string的转换"><a href="#基本数据类型和string的转换" class="headerlink" title="基本数据类型和string的转换"></a>基本数据类型和string的转换</h2><h3 id="基本介绍-7"><a href="#基本介绍-7" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>在程序开发中，我们经常将基本数据类型转成string。或者将string转成基本数据类型。</p><h3 id="基本类型转string类型"><a href="#基本类型转string类型" class="headerlink" title="基本类型转string类型"></a>基本类型转string类型</h3><ul><li><p>方式1：fmt.Sprintf(“%参数”，表达式)   【这个比较灵活】</p><ul><li><p>函数的介绍：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//func Sprintf</span><span class="token keyword">func</span> <span class="token function">Sprintf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span>a <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token comment">//Sprintf根据format参数生成格式化的字符串并返回该字符串。</span></code></pre><p><strong>参数需要和表达式的数据类型相匹配</strong></p></li><li><p>案例演示</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//演示Golang中基本数据练习转成string使用</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> num1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token keyword">var</span> num2 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">23.456</span><span class="token keyword">var</span> b <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">var</span> mychar <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token string">'h'</span><span class="token keyword">var</span> str <span class="token builtin">string</span> <span class="token comment">//空的str</span><span class="token comment">//使用第一种方式来转换  fmt.Sprintf方法</span>str <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> num1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str type %T str=%q\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span>str <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> num2<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str type %T str=%q\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span>str <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str type %T str=%q\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> b<span class="token punctuation">)</span>str <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> mychar<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str type %T str=%q\n"</span><span class="token punctuation">,</span> mychar<span class="token punctuation">,</span> mychar<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li>运行结果</li></ul><pre class="language-none"><code class="language-none">str type string str&#x3D;&quot;99&quot;str type string str&#x3D;&quot;%!d(float64&#x3D;23.456)&quot;str type bool str&#x3D;%!q(bool&#x3D;true)str type uint8 str&#x3D;&#39;h&#39;</code></pre></li><li><p>方式2：使用strconv包的函数</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">FormatBool</span><span class="token punctuation">(</span>b <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token keyword">func</span> <span class="token function">FormatFloat</span><span class="token punctuation">(</span>f <span class="token builtin">float64</span><span class="token punctuation">,</span> fmt <span class="token builtin">byte</span><span class="token punctuation">,</span> prec<span class="token punctuation">,</span> bitSize <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token keyword">func</span> <span class="token function">FormatInt</span><span class="token punctuation">(</span>i <span class="token builtin">int64</span><span class="token punctuation">,</span> base <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token keyword">func</span> <span class="token function">FormatUint</span><span class="token punctuation">(</span>i <span class="token builtin">uint64</span><span class="token punctuation">,</span> base <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span></code></pre><ul><li>案例说明</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"strconv"</span><span class="token punctuation">)</span><span class="token comment">//第二种方式strconv函数</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> num3 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token keyword">var</span> num4 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">23.456</span><span class="token keyword">var</span> b2 <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">var</span> str <span class="token builtin">string</span> <span class="token comment">//空str</span>str <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str type %T str=%q\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token comment">//strconv.FormatFloat(num3, 'f', 10, 64)</span><span class="token comment">//说明： 'f'格式 10：表示小数位保留10位 64：表示这个小数是float64</span>str <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatFloat</span><span class="token punctuation">(</span>num4<span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str type %T str=%q\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span>str <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatBool</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str type %T str=%q\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token comment">//strconv包中有一个函数Itoa</span><span class="token keyword">var</span> num5 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">4567</span>str <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>num5<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"str type %T str=%q\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li>运行结果</li></ul><pre class="language-none"><code class="language-none">str type string str&#x3D;&quot;99&quot;str type string str&#x3D;&quot;23.4560000000&quot;str type string str&#x3D;&quot;true&quot;str type string str&#x3D;&quot;4567&quot;</code></pre><h3 id="string类型转基本数据类型"><a href="#string类型转基本数据类型" class="headerlink" title="string类型转基本数据类型"></a>string类型转基本数据类型</h3></li><li><p>使用时strconv包的函数</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ParseBool</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span>value <span class="token builtin">bool</span><span class="token punctuation">,</span>err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">ParseFloat</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span>bitSize <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>f <span class="token builtin">float64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">ParseInt</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> base <span class="token builtin">int</span><span class="token punctuation">,</span> bitSize <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token builtin">int64</span><span class="token punctuation">,</span>err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">ParseUint</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">,</span> bitSize <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>n <span class="token builtin">uint64</span><span class="token punctuation">,</span>err <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><ul><li><p>案例演示</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"strconv"</span><span class="token punctuation">)</span><span class="token comment">//第二种方式strconv函数</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> str <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"true"</span><span class="token keyword">var</span> b <span class="token builtin">bool</span><span class="token comment">// b, _ = strconv.ParseBool(str)</span><span class="token comment">//说明</span><span class="token comment">//1. strconv.ParseBool(str) 函数会返回两个值 （value bool,err error)</span><span class="token comment">//2. 因为我只想获取到value bool, 不限孤鸿去err 所以我使用_忽略</span>b <span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseBool</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"b type %T b=%v\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token keyword">var</span> str2 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"1234590"</span><span class="token keyword">var</span> n1 <span class="token builtin">int64</span><span class="token keyword">var</span> n2 <span class="token builtin">int</span>n1<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>n2 <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"n1 type %T n1=%v\n"</span><span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"n2 type %T n2=%v\n"</span><span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token keyword">var</span> str3 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"123.456"</span><span class="token keyword">var</span> f1 <span class="token builtin">float64</span>f1<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span>str3<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"f1 type %T f1=%v\n"</span><span class="token punctuation">,</span> f1<span class="token punctuation">,</span> f1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li>运行结果</li></ul><pre class="language-none"><code class="language-none">b type bool b&#x3D;truen1 type int64 n1&#x3D;1234590n2 type int n2&#x3D;1234590f1 type float64 f1&#x3D;123.456</code></pre></li><li><p>说明一下</p><p><strong>因为返回的是int64或者float64，所以如果希望得到int32，float32等，要进行如下处理：</strong></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> num5 <span class="token builtin">int</span> <span class="token number">32</span>num5 <span class="token operator">=</span> <span class="token function">int32</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></code></pre><h3 id="string转基本数据类型的注意事项"><a href="#string转基本数据类型的注意事项" class="headerlink" title="string转基本数据类型的注意事项"></a>string转基本数据类型的注意事项</h3></li></ul><p>​    在将string类型转成基本数据类型时，要确保string类型能够转成有效的数据，比如我们可以把“123”，转成一个整数，但是我们不能将”hello”转成一个整数，如果这样做，Golang直接将其转成0，其他类型也是一样的道理.float–&gt;0      bool –&gt; false</p><ul><li>案例说明：</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//注意</span><span class="token keyword">var</span> str4 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token keyword">var</span> n3 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">11</span>n3<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>str4<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"n3 type %T n3=%v\n"</span><span class="token punctuation">,</span> n3<span class="token punctuation">,</span> n3<span class="token punctuation">)</span></code></pre><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="基本介绍-8"><a href="#基本介绍-8" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>基本数据类型，变量存的就是值，也叫值类型</li><li>获取变量的地址，用&amp;，比如: var num int, 获取num的地址： &amp;num</li></ol><ul><li>分析一下基本数据类型在内存的布局</li></ul><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210108160654.png" alt="image-20210108160647027" loading="lazy"></p><ol start="3"><li>指针类型，指针变量保存的是一个地址，这个地址指向的空间存的才是值，比如：<code>var ptr *int = &amp;num</code> ，指针在内存的布局如图所示：<img src="https://gitee.com/mikutown/pic/raw/master/img/20210108160833.png" alt="image-20210108160833386" loading="lazy"></li><li>获取指针类型所指向的值，使用：<em>，比如:<code>var ptr *int</code>，使用</em>ptr获取ptr指向的值。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//演示Golang中指针类型</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//基本数据类型在内存布局</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token comment">// i 的地址是什么，&amp;i</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i的地址="</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token comment">//下面的 var ptr *int = &amp;i</span><span class="token comment">//1. ptr是一个指针变量</span><span class="token comment">//2. ptr的类型是 *int</span><span class="token comment">//3. ptr本身的值是 &amp;i</span><span class="token keyword">var</span> ptr <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>ifmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ptr=%v\n"</span><span class="token punctuation">,</span> ptr<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ptr 的地址=%v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ptr<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ptr 指向的值=%v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">ptr&#x3D;0xc000014090ptr 的地址&#x3D;0xc000006030ptr 指向的值&#x3D;10</code></pre><ol start="5"><li>一个案例再说明</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210108161524.png" alt="image-20210108161524000" loading="lazy"></p><h3 id="案例演示-6"><a href="#案例演示-6" class="headerlink" title="案例演示"></a>案例演示</h3><ol><li>写一个程序，获取一个int变量num的地址，并显示到终端</li><li>将num的地址赋给指针ptr，并通过ptr去修改num的值</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//案例演示</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> num <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">9</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"num's address=%v\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token keyword">var</span> ptr <span class="token operator">*</span><span class="token builtin">int</span>ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>num<span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token number">10</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"num=%d\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">num&#39;s address&#x3D;0xc000014090num&#x3D;10</code></pre><h3 id="指针的课堂练习"><a href="#指针的课堂练习" class="headerlink" title="指针的课堂练习"></a>指针的课堂练习</h3><ol><li>这个代码中有无错误？</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">300</span>    <span class="token keyword">var</span> ptr <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> a<span class="token comment">//错误</span>    <span class="token comment">//应该改成 var ptr *int = &amp;a(取地址)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">300</span>    <span class="token keyword">var</span> ptr <span class="token operator">*</span><span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a <span class="token comment">//错误 类型不匹配！</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">300</span>    <span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">400</span>    <span class="token keyword">var</span> ptr <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a <span class="token comment">//OK</span>    <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">//等价于a = 100</span>    ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>b <span class="token comment">// OK</span>    <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token number">200</span> <span class="token comment">//b = 200</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a=%d,b=%d,*ptr=%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//输出什么内容？</span><span class="token comment">/*输出a=100,b=200,*ptr=200*/</span></code></pre><h3 id="指针的使用细节"><a href="#指针的使用细节" class="headerlink" title="指针的使用细节"></a>指针的使用细节</h3><ol><li>值类型，都有对应的指针类型，形式为 *<strong>数据类型</strong>，比如说int的对应的指针就是<em>int,float32对应的指针类型就是 **</em>float32** 依次类推。</li><li>值类型包括：基本数据类型，int 系列，float系列， bool,string，数组和结构体struct</li></ol><h2 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h2><h3 id="值类型和引用类型的说明"><a href="#值类型和引用类型的说明" class="headerlink" title="值类型和引用类型的说明"></a>值类型和引用类型的说明</h3><ol><li>值类型：基本数据类型，int 系列，float系列， bool,string，数组和结构体struct</li><li>引用类型：指针、slice切片、map、管道chan、interface等都是引用类型</li></ol><h3 id="值类型和引用类型的使用特点"><a href="#值类型和引用类型的使用特点" class="headerlink" title="值类型和引用类型的使用特点"></a>值类型和引用类型的使用特点</h3><ol><li>值类型：变量直接存储值，内存通常在栈中分配</li></ol><p>示意图：<img src="https://gitee.com/mikutown/pic/raw/master/img/20210108185224.png" alt="image-20210108185224664" loading="lazy"></p><ol start="2"><li>引用类型：变量存储是一个地址，这个地址对应的空间才真正存储数据（值），内存通常在堆上分配，当没有任何变量引用这个地址时，该地址对应的数据空间就成为一个垃圾，由GC来回收</li></ol><p>示意图：<img src="https://gitee.com/mikutown/pic/raw/master/img/20210108185333.png" alt="image-20210108185333236" loading="lazy"></p><ol start="3"><li>内存的栈区和堆区示意图<img src="https://gitee.com/mikutown/pic/raw/master/img/20210108185352.png" alt="image-20210108185352262" loading="lazy"></li></ol><h2 id="标识符的命名规范"><a href="#标识符的命名规范" class="headerlink" title="标识符的命名规范"></a>标识符的命名规范</h2><h3 id="标识符概念"><a href="#标识符概念" class="headerlink" title="标识符概念"></a>标识符概念</h3><ol><li>Golang对各种变量，方法，函数等命名时使用的字符序列称为标识符</li><li>凡是自己可以取名字的地方都叫标识符</li></ol><h3 id="标识符的命名规则"><a href="#标识符的命名规则" class="headerlink" title="标识符的命名规则"></a>标识符的命名规则</h3><ol><li>由26个英文字母大小写，0-9，_ 组成</li><li>数字不可以开头。<code>var num int //ok</code>     <code>var 3num int  // error</code></li><li>Golang中严格区分大小写。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> num <span class="token builtin">int</span><span class="token keyword">var</span> Num <span class="token builtin">int</span></code></pre><p><strong>说明：</strong>在Golang中，num和Num是两个不同的变量</p><ol start="4"><li>标识符不能包含空格。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//这样8行！</span><span class="token keyword">var</span> ab c <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">30</span></code></pre><ol start="5"><li>下划线”_”本身在Go中是一个特殊的标识符，称为空标识符。可以代表任何其它的标识符，但是它对应的值会被忽略（比如：忽略某个返回值)。所以仅能被作为占位符使用，不能作为标识符使用。</li></ol><pre class="language-Go" data-language="Go"><code class="language-Go">&#x2F;&#x2F; _ 是空标识符，用于占用var _ int &#x3D; 40 &#x2F;&#x2F;errorfmt.Println(_) &#x2F;&#x2F;错的！8行！</code></pre><ol start="6"><li>不能以系统<strong>保留关键字</strong>作为标识符（一共有25个），比如  break, if 等等…</li></ol><h3 id="标识符的案例"><a href="#标识符的案例" class="headerlink" title="标识符的案例"></a>标识符的案例</h3><pre class="language-none"><code class="language-none">hello &#x2F;&#x2F;okhello12 &#x2F;&#x2F;ok1hello &#x2F;&#x2F;error 数字开头不可取！h-b &#x2F;&#x2F;error 不能使用！x h &#x2F;&#x2F;error 不能含有空格h_4 &#x2F;&#x2F;ok_ab &#x2F;&#x2F;okint &#x2F;&#x2F;ok 但是最好别这样使用float32 &#x2F;&#x2F;ok 但是最好别这样使用_ &#x2F;&#x2F;error 不行！Abc &#x2F;&#x2F; ok</code></pre><h3 id="标识符命名注意事项"><a href="#标识符命名注意事项" class="headerlink" title="标识符命名注意事项"></a>标识符命名注意事项</h3><ol><li>包名：保持package的名字和目录保持一致，尽量采取有意义的包名，简短，有意义，不要和标准库冲突 fmt</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210108194237.png" loading="lazy"></p><ol start="2"><li>变量名、函数名、常量名：采用驼峰法</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//举例</span><span class="token keyword">var</span> stuName <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"tom"</span>   <span class="token comment">//形式： xxxYyyZzz...</span><span class="token keyword">var</span> goodPrice <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">1234.5</span></code></pre><ol start="3"><li>如果变量名、函数名、常量名首字母大写，则可以被其他的包访问：如果首字母小写，则只能在本包中使用（注:可以简单的理解成，首字母大写是公开的，首字母小写是私有的），在golang没有public，private等关键字。</li></ol><ul><li>案例演示：</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//路径:../main/main.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"fmt"</span>    <span class="token comment">//为了使用utils.go,引入该文件所在的包(注意你的环境变量)</span><span class="token string">"go_code/chapter03/demo10/model"</span><span class="token punctuation">)</span><span class="token comment">//变量的使用事项</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//该区域的数据值可以在同一类型范围内不断变化</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>i <span class="token operator">=</span> <span class="token number">30</span>i <span class="token operator">=</span> <span class="token number">50</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token comment">//i = 1.2 //int 原因是不能改变数据类型</span><span class="token comment">//变量在同一个作用域（在一个函数或者在代码块内）不能重名</span><span class="token comment">//var i int = 59</span><span class="token comment">//i := 99</span><span class="token comment">// 我们使用utils.go 的heroName 包名，标志符</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>HeroName<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/***********************************************/</span><span class="token comment">// 路径： ../model/utils.go</span><span class="token keyword">package</span> model<span class="token keyword">var</span> HeroName <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"吴用"</span></code></pre><h2 id="系统保留关键字"><a href="#系统保留关键字" class="headerlink" title="系统保留关键字"></a>系统保留关键字</h2><h3 id="保留关键字介绍"><a href="#保留关键字介绍" class="headerlink" title="保留关键字介绍"></a>保留关键字介绍</h3><p>在Go中，为了简化代码编译过程中对代码的解析，其定义的保留关键字只有25个。详见如下</p><table><thead><tr><th>break</th><th>default</th><th>func</th><th>interface</th><th>select</th></tr></thead><tbody><tr><td>case</td><td>defer</td><td>go</td><td>map</td><td>struct</td></tr><tr><td>chan</td><td>else</td><td>goto</td><td>package</td><td>switch</td></tr><tr><td>const</td><td>fallthrough</td><td>if</td><td>range</td><td>type</td></tr><tr><td>continue</td><td>for</td><td>import</td><td>return</td><td>var</td></tr></tbody></table><h2 id="系统的预定义标识符"><a href="#系统的预定义标识符" class="headerlink" title="系统的预定义标识符"></a>系统的预定义标识符</h2><h3 id="预定义标识符介绍"><a href="#预定义标识符介绍" class="headerlink" title="预定义标识符介绍"></a>预定义标识符介绍</h3><p>除了保留关键字外，Go还提供了36个预定的标识符，其包括基础数据类型和系统内嵌函数</p><table><thead><tr><th>append</th><th>bool</th><th>byte</th><th>cap</th><th>close</th><th>complex</th></tr></thead><tbody><tr><td>complex64</td><td>complex128</td><td>uint16</td><td>copy</td><td>false</td><td>float32</td></tr><tr><td>float64</td><td>imag</td><td>int</td><td>int8</td><td>int16</td><td>uint32</td></tr><tr><td>int32</td><td>int64</td><td>iota</td><td>len</td><td>make</td><td>new</td></tr><tr><td>nil</td><td>panic</td><td>uint64</td><td>print</td><td>println</td><td>rea</td></tr><tr><td>recover</td><td>string</td><td>true</td><td>uint</td><td>uint8</td><td>uintprt</td></tr></tbody></table><hr><p><strong>Go语言の变量这节结束啦！辛苦啦！</strong></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Go语言の变量&quot;&gt;&lt;a href=&quot;#Go语言の变量&quot; class=&quot;headerlink&quot; title=&quot;Go语言の变量&quot;&gt;&lt;/a&gt;Go语言の变量&lt;/h1&gt;&lt;p&gt;本文章主要写Go语言中使用的变量类型以及其知识点&lt;/p&gt;</summary>
    
    
    
    
    <category term="Go" scheme="https://mikutown.gitee.io/blog/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言入门</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/04/Go%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/04/Go%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/</id>
    <published>2021-01-04T10:50:56.000Z</published>
    <updated>2021-01-04T13:16:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go语言入门"><a href="#Go语言入门" class="headerlink" title="Go语言入门"></a>Go语言入门</h1><p>本文章通过简单的Go语言代码说明一些Go语言编程的注意事项及知识点</p><a id="more"></a><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>要求开发一个hello.go程序，可以在屏幕打印出“hello world”</p><h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><ol><li><p>在编写Go语言代码时的目录结构：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104185351.png" alt="image-20210104185344476" loading="lazy"></p></li><li><p>编写代码，代码如下：</p></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//输出helloworld</span><span class="token keyword">package</span> main<span class="token comment">//go文件的后缀是.go</span><span class="token comment">//package main表示hello.go所在包为main包</span><span class="token comment">//在go中每个文件都必须归属于一个包</span><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">//import “fmt”说明引入一个包，包名为fmt，引入目的是使用包内函数（fmt.Println())</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//func main() &#123; </span><span class="token comment">//func表示一个函数，main是主函数，代表程序的入口</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token comment">//表示调用fmt的Println输出hello world字符串</span><span class="token punctuation">&#125;</span></code></pre><ol start="3"><li>在cmd中通过go build命令对go语言进行编译，生成exe文件，默认生成的exe文件与你的代码文件的名称相同，在Windows系统下是后缀为exe可执行文件，在Linux系统中直接生成可执行文件。执行结果如下图所示：</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104185820.png" alt="image-20210104185820505" loading="lazy"></p><ol start="4"><li>也可以通过go run 命令直接运行hello.go源代码（类似于执行一个脚本文件的形式），执行结果如下图所示：</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104185928.png" alt="image-20210104185928753" loading="lazy"></p><h2 id="Golang代码执行流程分析"><a href="#Golang代码执行流程分析" class="headerlink" title="Golang代码执行流程分析"></a>Golang代码执行流程分析</h2><ul><li>如果是对源码编译后，再执行，Go的执行流程如下图：</li></ul><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104190557.png" alt="image-20210104190557423" loading="lazy"></p><ul><li>如果我们直接对源码进行go run 指令，Go的执行流程如下图:</li></ul><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104190627.png" alt="image-20210104190627117" loading="lazy"></p><p><strong>两种执行流程的方式区别</strong></p><pre><code>1. 如果我们先编译生成了可执行文件，那么我们可以将该可执行文件拷贝到没有go开发环境的机器上，仍然可以运行。2. 如果我们是直接go run我们写的源代码，那么如果想要在另一台电脑上也运行，那么那台电脑必须安装Go语言的运行环境，否则无法执行。3. 在编译时，编译器会将程序运行依赖的库文件也包含在可执行文件中，所以可执行文件变大了很多。（go语言的helloworld代码只有5KB，生成的可执行文件有接近2000KB）</code></pre><h2 id="编译和运行说明"><a href="#编译和运行说明" class="headerlink" title="编译和运行说明"></a>编译和运行说明</h2><ol><li>有了Go语言代码的源文件，可以通过编译器将其编译成机器可以识别的二进制码文件</li><li>在该源文件目录下，通过go build 对hello.go文件进行编译，可以指定生成的可执行文件名，在Windows下，必须是.exe的后缀。</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104191106.png" alt="image-20210104191106197" loading="lazy"></p><ol start="3"><li>如果程序没有错误，那么没有任何提示，并会在当前目录中生成一个可执行文件，该文件是一个二进制码文件，也是可以直接执行的程序。</li><li>如果程序有错误，编译时，会在错误的那一行报错。这有助于程序员的调试。</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104191223.png" alt="image-20210104191223077" loading="lazy"></p><ol start="5"><li>运行有两种形式<ul><li>直接运行生成的可执行文件，比如hello.exe</li><li>通过运行工具go run 对源代码文件直接进行运行。</li></ul></li></ol><h2 id="Go语言开发的注意事项"><a href="#Go语言开发的注意事项" class="headerlink" title="Go语言开发的注意事项"></a>Go语言开发的注意事项</h2><ol><li>Go语言源代码的扩展名为.go</li><li>Go应用程序的执行入口是main()函数。（与java/c相同）</li><li>Go语言严格区分大小写</li><li>Go方法由一条条语句构成，每个语句后不需要分号（编译时会自动为每行后添加分号），这也体现了Go语言代码的简洁性。</li><li>Go编译器都是一行一行进行编译的，因此我们一行就写一条语句，不能把多条语句写在同一个，否则会报错。</li><li>Go语言定义的变量或者import的包如果没有被使用到，代码是无法编译通过的。</li><li>大括号必须成对出现!</li></ol><hr><h2 id="Go语言的转义字符"><a href="#Go语言的转义字符" class="headerlink" title="Go语言的转义字符"></a>Go语言的转义字符</h2><p>常用的转义字符如下：</p><ul><li>\t:表示一个制表符，通常用于排版</li><li>\n:换行符</li><li>\:一个\</li><li>\“:一个”</li><li>\r:一个回车</li></ul><p>案例代码：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span> <span class="token comment">//fmt提供格式化，输入，输出的函数</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//演示转义字符的使用</span><span class="token comment">// \t的使用</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"tom\tjack"</span><span class="token punctuation">)</span><span class="token comment">// \n的使用</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"tom\njack"</span><span class="token punctuation">)</span><span class="token comment">// \\的使用</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello\\world"</span><span class="token punctuation">)</span><span class="token comment">// \"的使用</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"qwq\"ovo"</span><span class="token punctuation">)</span><span class="token comment">// \r的使用</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"owowo\rovo"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行效果：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104193240.png" alt="image-20210104193239992" loading="lazy"></p><p><strong>注：换行符是直接换行，而回车是指把光标移到头部，将原来字符串中的语句的头部替换为回车后的字符，就如同示例中的owowo中前半段的owo就被\r之后的ovo替换了，最后打印出了ovowo</strong></p><h3 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h3><p>要求使用一条输出语句，实现下图中的效果：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104193453.png" alt="image-20210104193453339" loading="lazy"></p><p>代码：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"姓名\t年龄\t籍贯\t住址\njohn\t12\t河北\t北京"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><strong>注：学会查看编译器的报错，自己进行bug的排查</strong></p><hr><h2 id="Go语言的注释"><a href="#Go语言的注释" class="headerlink" title="Go语言的注释"></a>Go语言的注释</h2><h3 id="介绍注释"><a href="#介绍注释" class="headerlink" title="介绍注释"></a>介绍注释</h3><p>用于注解说明解释程序的文字就是注释，<strong>注释提高了代码的阅读性</strong>；</p><p>注释是一个程序员必须要具有的良好的编程习惯。将自己的思想通过注释先整理出来，再用代码去体现。</p><h3 id="Go语言中注释的两种形式"><a href="#Go语言中注释的两种形式" class="headerlink" title="Go语言中注释的两种形式"></a>Go语言中注释的两种形式</h3><ol><li><p>行注释</p><ul><li>基本语法</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//注释内容</span></code></pre><ul><li>举例</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//输出helloworld</span><span class="token keyword">package</span> main<span class="token comment">//go文件的后缀是.go</span><span class="token comment">//package main表示hello.go所在包为main包</span><span class="token comment">//在go中每个文件都必须归属于一个包</span><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">//import “fmt”说明引入一个包，包名为fmt，引入目的是使用包内函数（fmt.Println())</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//func main() &#123; </span><span class="token comment">//func表示一个函数，main是主函数，代表程序的入口</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token comment">//表示调用fmt的Println输出hello world字符串</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>块注释（多行注释）</p><ul><li>基本语法</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">/*注释内容*/</span></code></pre><ul><li>举例说明</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">/*这是一个多行注释*/</span></code></pre></li></ol><ul><li>使用细节<ul><li>对于行注释和块注释，被注释的文字，不会被Go编译器执行。</li><li>块注释里不允许有块注释嵌套。</li></ul></li></ul><hr><h2 id="规范的代码风格"><a href="#规范的代码风格" class="headerlink" title="规范的代码风格"></a>规范的代码风格</h2><h3 id="正确的注释和注释风格"><a href="#正确的注释和注释风格" class="headerlink" title="正确的注释和注释风格"></a>正确的注释和注释风格</h3><ol><li>Go官方推荐使用行注释来注释整个方法和语句</li><li>可以看Go源码中的注释的风格</li></ol><h3 id="正确的缩进和空白"><a href="#正确的缩进和空白" class="headerlink" title="正确的缩进和空白"></a>正确的缩进和空白</h3><ol><li>在VSCode中，使用tab进行代码缩进，默认整体朝右边移动，使用shift+tab可以真git向左移动。</li><li>使用gofmt来进行代码的格式化，如图所示：</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104194438.png" alt="image-20210104194438694" loading="lazy"></p><ol start="3"><li>运算符两边习惯性各加一个空格，如：2 + 4 * 5</li><li>Go语言代码风格辨析：</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello,Go!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//上面的写法是正确的</span><span class="token comment">//下面的写法是错误的，Go语言不支持这种写法</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"姓名\t年龄\t籍贯\t住址\njohn\t12\t河北\t北京"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><strong>Go语言设计者希望在一个问题上尽量只有一个解决方法</strong></p><ol start="5"><li>一行最长不超过80个字符，超过的请使用换行展示，尽量保持格式优雅。比如：</li></ol><pre class="language-go" data-language="go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHe\n"</span><span class="token punctuation">,</span><span class="token string">"lloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWor\n"</span><span class="token punctuation">,</span><span class="token string">"ldHelloWorldHelloWorldHelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><hr><h2 id="知识点总结-回顾"><a href="#知识点总结-回顾" class="headerlink" title="知识点总结/回顾"></a>知识点总结/回顾</h2><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104200730.png" alt="image-20210104200729972" loading="lazy"></p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210104200745.png" alt="image-20210104200745556" loading="lazy"></p><hr><h2 id="API-指南的链接"><a href="#API-指南的链接" class="headerlink" title="API/指南的链接"></a>API/指南的链接</h2><p>Golang简体中文官方编程指南<a href="https://tour.go-zh.org/welcome/1">地址</a></p><p>Golang中文网 <a href="https://studygolang.com/pkgdoc">在线标准库文档</a></p><p>Golang官方标准API文档<a href="https://golang.org.pkg/">地址</a> </p><p><strong>API:application program interface:应用程序编程接口，也就是我们GO各个包里的各个函数</strong></p><p><strong>Golang中调用函数的方式是<code>import 包</code>，然后使用<code>包名.函数名</code> 进行函数的调用</strong></p><hr>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Go语言入门&quot;&gt;&lt;a href=&quot;#Go语言入门&quot; class=&quot;headerlink&quot; title=&quot;Go语言入门&quot;&gt;&lt;/a&gt;Go语言入门&lt;/h1&gt;&lt;p&gt;本文章通过简单的Go语言代码说明一些Go语言编程的注意事项及知识点&lt;/p&gt;</summary>
    
    
    
    
    <category term="Go" scheme="https://mikutown.gitee.io/blog/tags/Go/"/>
    
  </entry>
  
</feed>
