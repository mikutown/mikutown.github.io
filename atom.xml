<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LeafiiのBlog</title>
  
  
  <link href="https://mikutown.gitee.io/blog/atom.xml" rel="self"/>
  
  <link href="https://mikutown.gitee.io/blog/"/>
  <updated>2021-05-13T08:23:30.750Z</updated>
  <id>https://mikutown.gitee.io/blog/</id>
  
  <author>
    <name>Leafii</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>macOs汇编入门(HelloWorld)</title>
    <link href="https://mikutown.gitee.io/blog/2021/05/13/macOs%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8-HelloWorld/"/>
    <id>https://mikutown.gitee.io/blog/2021/05/13/macOs%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8-HelloWorld/</id>
    <published>2021-05-13T08:11:30.000Z</published>
    <updated>2021-05-13T08:23:30.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="汇编入门"><a href="#汇编入门" class="headerlink" title="汇编入门"></a>汇编入门</h1><p>本文介绍在macOs下如何安装nasm以及在nasm下进行HelloWorld的编写</p><a id="more"></a><hr><h2 id="安装nasm"><a href="#安装nasm" class="headerlink" title="安装nasm"></a>安装nasm</h2><p>在终端中输入<code>brew install nasm</code>即可。默认的nasm版本太低无法写64位程序 呜呜！</p><ul><li>注：安装完成后输入命令nasm -v查看是否可以显示版本！可以显示版本就说明安装好了哦!</li></ul><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210513162324711.png" alt="image-20210513162324711" loading="lazy"></p><hr><h2 id="nasm的helloworld的编写"><a href="#nasm的helloworld的编写" class="headerlink" title="nasm的helloworld的编写"></a>nasm的helloworld的编写</h2><ol><li>编写以下代码:</li></ol><pre class="language-nasm" data-language="nasm"><code class="language-nasm"><span class="token keyword">SECTION .data</span>   <span class="token label function">msg:</span> db <span class="token string">"hello world!"</span>, <span class="token number">0x0a</span>   <span class="token label function">len:</span> equ <span class="token operator">$</span><span class="token operator">-</span>msg <span class="token operator">></span><span class="token operator">></span>SECTION .text   <span class="token keyword">global _main</span>   <span class="token label function">kernel:</span>        syscall        ret   <span class="token label function">_main:</span>        mov <span class="token register variable">rax</span>,<span class="token number">0x2000004</span>        mov <span class="token register variable">rdi</span>,<span class="token number">1</span>        mov <span class="token register variable">rsi</span>,msg        mov <span class="token register variable">rdx</span>,len        call kernel        mov <span class="token register variable">rax</span>,<span class="token number">0x2000001</span>        mov <span class="token register variable">rdi</span>,<span class="token number">0</span>        call kernel</code></pre><ol start="2"><li>保存后退出，进入iterm中该文件所在的目录，按ls确认当前文件是否在目录中</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210513161913214.png" alt="image-20210513161913214" loading="lazy"></p><ol start="3"><li><p>输入以下命令生成helloworld.o文件：<code>nasm -f macho64 -o helloworld.o helloworld.asm</code></p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210513162015318.png" alt="image-20210513162015318" loading="lazy"></p></li><li><p>输入以下命令生成helloworld可执行文件:<code>ld -o helloworld -e _main helloworld.o -lSystem</code></p></li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210513162136973.png" alt="image-20210513162136973" loading="lazy"></p><ol start="5"><li>输入命令<code>./helloworld</code>运行可执行文件</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210513162213348.png" alt="image-20210513162213348" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;汇编入门&quot;&gt;&lt;a href=&quot;#汇编入门&quot; class=&quot;headerlink&quot; title=&quot;汇编入门&quot;&gt;&lt;/a&gt;汇编入门&lt;/h1&gt;&lt;p&gt;本文介绍在macOs下如何安装nasm以及在nasm下进行HelloWorld的编写&lt;/p&gt;</summary>
    
    
    
    
    <category term="nasm" scheme="https://mikutown.gitee.io/blog/tags/nasm/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-1021-删除最外层的括号</title>
    <link href="https://mikutown.gitee.io/blog/2021/03/14/leetcode-1021-%E5%88%A0%E9%99%A4%E6%9C%80%E5%A4%96%E5%B1%82%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <id>https://mikutown.gitee.io/blog/2021/03/14/leetcode-1021-%E5%88%A0%E9%99%A4%E6%9C%80%E5%A4%96%E5%B1%82%E7%9A%84%E6%8B%AC%E5%8F%B7/</id>
    <published>2021-03-13T18:07:26.000Z</published>
    <updated>2021-03-13T18:40:54.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-1021-删除最外层的括号"><a href="#leetcode-1021-删除最外层的括号" class="headerlink" title="leetcode:1021.删除最外层的括号"></a>leetcode:1021.删除最外层的括号</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>有效括号字符串为空 <code>(&quot;&quot;)</code>、<code>&quot;(&quot; + A + &quot;)&quot; </code>或 <code>A + B</code>，其中 <code>A </code>和<code>B</code>都是有效的括号字符串，<code>+</code> 代表字符串的连接。例如，<code>&quot;&quot;</code>，<code>&quot;()&quot;</code>，<code>&quot;(())()&quot;</code> 和 <code>&quot;(()(()))&quot;</code> 都是有效的括号字符串。</p><p>如果有效字符串<code> S</code> 非空，且不存在将其拆分为 <code>S = A+B </code>的方法，我们称其为<strong>原语（primitive）</strong>，其中 <code>A </code>和 <code>B</code> 都是非空有效括号字符串。</p><p>给出一个非空有效字符串 <code>S</code>，考虑将其进行原语化分解，使得：<code>S = P_1 + P_2 + ... + P_k</code>，其中 <code>P_i </code>是有效括号字符串原语。</p><p>对<code> S</code> 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回<code>S</code>。</p><a id="more"></a><ul><li>示例1：</li></ul><pre class="language-none"><code class="language-none">输入：&quot;(()())(())&quot;输出：&quot;()()()&quot;解释：输入字符串为 &quot;(()())(())&quot;，原语化分解得到 &quot;(()())&quot; + &quot;(())&quot;，删除每个部分中的最外层括号后得到 &quot;()()&quot; + &quot;()&quot; &#x3D; &quot;()()()&quot;。</code></pre><ul><li>示例2:</li></ul><pre class="language-none"><code class="language-none">输入：&quot;(()())(())(()(()))&quot;输出：&quot;()()()()(())&quot;解释：输入字符串为 &quot;(()())(())(()(()))&quot;，原语化分解得到 &quot;(()())&quot; + &quot;(())&quot; + &quot;(()(()))&quot;，删除每个部分中的最外层括号后得到 &quot;()()&quot; + &quot;()&quot; + &quot;()(())&quot; &#x3D; &quot;()()()()(())&quot;。</code></pre><ul><li>示例3:</li></ul><pre class="language-none"><code class="language-none">输入：&quot;()()&quot;输出：&quot;&quot;解释：输入字符串为 &quot;()()&quot;，原语化分解得到 &quot;()&quot; + &quot;()&quot;，删除每个部分中的最外层括号后得到 &quot;&quot; + &quot;&quot; &#x3D; &quot;&quot;。</code></pre><p><small>提示：</small></p><ol><li><code>S.length &lt;= 10000</code></li><li><code>S[i]</code>为<code>(</code>或<code>)</code></li><li><code>S</code>是一个有效括号字符串</li></ol><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><ol><li>简洁的Java实现</li></ol><p>主要思路：定义level作为层数，初始化level为0，遍历输入的String对象的每个字符，如果遇到’(‘，就level++，如果遇到’)’就level–，如果level&gt;=1，则在要输出的字符串末尾加上被遍历的字符，代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">removeOuterParentheses</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">S</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> outputStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> <span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                level<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>level <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                outputStr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                level<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> outputStr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>作者：huaouo</p><ol start="2"><li>借助栈原语化分解后删除最外层括号——Java</li></ol><p>主要思路：遍历字符串，遇到左括号就入栈，遇到右括号就出栈，每次栈空的时候，都说明找到了一个原语，记录下每个原语的起始位置和结束位置，取原字符串在原语的起始位置+1到原语的结束位置的子串便得到原语删除了最外层括号的字符串，拼接，即可解出答案。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">removeOuterParentheses</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">S</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 初始化原语的起始位置</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 初始化原语的结束位置</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// 标志每个原语</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 遇到左括号，入栈</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 遇到的第一个左括号，是原语的开始位置，记录下原语开始位置</span>                    start <span class="token operator">=</span> i<span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 遇到右括号，出栈</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 当栈空的时候，找到了一个完整的原语</span>                    end <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">// 记录下结束位置</span>                    ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 去掉原语的最外层括号，并追加到答案中</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// 置标志为false，往后接着找下一个原语</span>                    start <span class="token operator">=</span> end<span class="token punctuation">;</span><span class="token comment">// 往后找，再次初始化原语开始位置</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>作者：zi-mo-10</p><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-outermost-parentheses">https://leetcode-cn.com/problems/remove-outermost-parentheses</a></p><p>链接：<a href="https://leetcode-cn.com/problems/remove-outermost-parentheses/solution/jian-ji-de-java-shi-xian-by-huaouo/">https://leetcode-cn.com/problems/remove-outermost-parentheses/solution/jian-ji-de-java-shi-xian-by-huaouo/</a></p><p>链接：<a href="https://leetcode-cn.com/problems/remove-outermost-parentheses/solution/chao-xiang-xi-ti-jie-si-lu-jie-zhu-zhan-yuan-yu-hu/">https://leetcode-cn.com/problems/remove-outermost-parentheses/solution/chao-xiang-xi-ti-jie-si-lu-jie-zhu-zhan-yuan-yu-hu/</a></p><p>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;leetcode-1021-删除最外层的括号&quot;&gt;&lt;a href=&quot;#leetcode-1021-删除最外层的括号&quot; class=&quot;headerlink&quot; title=&quot;leetcode:1021.删除最外层的括号&quot;&gt;&lt;/a&gt;leetcode:1021.删除最外层的括号&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;有效括号字符串为空 &lt;code&gt;(&amp;quot;&amp;quot;)&lt;/code&gt;、&lt;code&gt;&amp;quot;(&amp;quot; + A + &amp;quot;)&amp;quot; &lt;/code&gt;或 &lt;code&gt;A + B&lt;/code&gt;，其中 &lt;code&gt;A &lt;/code&gt;和&lt;code&gt;B&lt;/code&gt;都是有效的括号字符串，&lt;code&gt;+&lt;/code&gt; 代表字符串的连接。例如，&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;，&lt;code&gt;&amp;quot;()&amp;quot;&lt;/code&gt;，&lt;code&gt;&amp;quot;(())()&amp;quot;&lt;/code&gt; 和 &lt;code&gt;&amp;quot;(()(()))&amp;quot;&lt;/code&gt; 都是有效的括号字符串。&lt;/p&gt;
&lt;p&gt;如果有效字符串&lt;code&gt; S&lt;/code&gt; 非空，且不存在将其拆分为 &lt;code&gt;S = A+B &lt;/code&gt;的方法，我们称其为&lt;strong&gt;原语（primitive）&lt;/strong&gt;，其中 &lt;code&gt;A &lt;/code&gt;和 &lt;code&gt;B&lt;/code&gt; 都是非空有效括号字符串。&lt;/p&gt;
&lt;p&gt;给出一个非空有效字符串 &lt;code&gt;S&lt;/code&gt;，考虑将其进行原语化分解，使得：&lt;code&gt;S = P_1 + P_2 + ... + P_k&lt;/code&gt;，其中 &lt;code&gt;P_i &lt;/code&gt;是有效括号字符串原语。&lt;/p&gt;
&lt;p&gt;对&lt;code&gt; S&lt;/code&gt; 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回&lt;code&gt;S&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="leetcode 算法" scheme="https://mikutown.gitee.io/blog/tags/leetcode-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:1.两数之和</title>
    <link href="https://mikutown.gitee.io/blog/2021/03/13/leetcode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>https://mikutown.gitee.io/blog/2021/03/13/leetcode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2021-03-12T16:45:22.000Z</published>
    <updated>2021-03-12T17:16:21.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-1-两数之和"><a href="#leetcode-1-两数之和" class="headerlink" title="leetcode:1.两数之和"></a>leetcode:1.两数之和</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><a id="more"></a><p>你可以按任意顺序返回答案。</p><ul><li>示例1:</li></ul><pre class="language-none"><code class="language-none">输入：nums &#x3D; [2,7,11,15], target &#x3D; 9输出：[0,1]解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。</code></pre><ul><li>示例2</li></ul><pre class="language-none"><code class="language-none">输入：nums &#x3D; [3,2,4], target &#x3D; 6输出：[1,2]</code></pre><ul><li>示例3</li></ul><pre class="language-none"><code class="language-none">输入：nums &#x3D; [3,3], target &#x3D; 6输出：[0,1]</code></pre><p><small>提示：</small></p><ul><li><code>2 &lt;= nums.length &lt;= 10^3</code></li><li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li><li><code>-10^9 &lt;= target &lt;= 10^9</code></li></ul><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><ol><li>暴力解法</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                    <span class="token keyword">return</span> a<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>哈希表解法：</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> hashtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hashtable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>hashtable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*作者：LeetCode-Solution链接：https://leetcode-cn.com/problems/two-sum/solution/liang-shu-zhi-he-by-leetcode-solution/来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。*/</span></code></pre><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum">https://leetcode-cn.com/problems/two-sum</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;leetcode-1-两数之和&quot;&gt;&lt;a href=&quot;#leetcode-1-两数之和&quot; class=&quot;headerlink&quot; title=&quot;leetcode:1.两数之和&quot;&gt;&lt;/a&gt;leetcode:1.两数之和&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。&lt;/p&gt;
&lt;p&gt;你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。&lt;/p&gt;</summary>
    
    
    
    
    <category term="leetcode 算法" scheme="https://mikutown.gitee.io/blog/tags/leetcode-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>IDEA2020版如何创建Servlet的javaWeb项目</title>
    <link href="https://mikutown.gitee.io/blog/2021/03/05/IDEA2020%E7%89%88%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BAServlet%E7%9A%84javaWeb%E9%A1%B9%E7%9B%AE/"/>
    <id>https://mikutown.gitee.io/blog/2021/03/05/IDEA2020%E7%89%88%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BAServlet%E7%9A%84javaWeb%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-03-05T05:01:33.000Z</published>
    <updated>2021-03-05T06:37:05.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA2020版如何创建Servlet的javaWeb项目"><a href="#IDEA2020版如何创建Servlet的javaWeb项目" class="headerlink" title="IDEA2020版如何创建Servlet的javaWeb项目"></a>IDEA2020版如何创建Servlet的javaWeb项目</h1><p>2020款idea很多地方都变了，昨天在创建javaweb项目中发现已经不会创建了，所以我写这篇笔记记录一下QAQ</p><a id="more"></a><h2 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h2><p>主要思路：先创建空白项目，然后添加框架支持。</p><ol><li>在idea中点击file-&gt;new-&gt;Project/Module；</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305130942414.png" alt="image-20210305130942414" loading="lazy"></p><ol start="2"><li>在选中Java的情况下，直接点击Next；</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305131038713.png" alt="image-20210305131038713" loading="lazy"></p><ol start="3"><li>然后再点击下一步；</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305131256081.png" alt="image-20210305131256081" loading="lazy"></p><ol start="4"><li>填写你的项目名称和位置，点击finish;</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305132524289.png" loading="lazy"></p><ol start="5"><li><p>此时的工程目录结构如下：，我们在工程的文件夹上鼠标右键-&gt;add FrameWork Support ；<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305132814052.png" alt="image-20210305132814052" loading="lazy"><img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305132913337.png" alt="image-20210305132913337" loading="lazy"></p></li><li><p>在新的页面勾选Web Application，并点击OK；<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305133015818.png" alt="image-20210305133015818" loading="lazy"></p></li><li><p>在WEB-INF中增加 classes 和 lib<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305135513213.png" alt="image-20210305135513213" loading="lazy"></p></li><li><p>进入Project Structure配置classes和lib两个目录<img src="https://gitee.com/mikutown/pic/raw/master/img/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dhb3FpbmdsaWFuZzUyMQ==,size_16,color_FFFFFF,t_70.png" alt="img" loading="lazy"></p></li><li><p>添加TomCat到Idea中，点击AddConfiguration，点击新窗口左上角的+号，选择Tomcat下的local，配置好tomcat的路径，然后在deployment标签下添加你的项目的exploded包，点击OK;<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305134425503.png" alt="image-20210305134425503" loading="lazy"></p></li><li><p>配置ServletApi到工程的运行库里：点击File-&gt;Project Structure,点击Modules标签，点击下方的+号，选择Library…，然后选择你的相应的Tomcat，点击ok，就可以添加ServletApi到你的项目中。<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305133457558.png" alt="image-20210305133457558" loading="lazy"></p></li><li><p>新建一个Servlet类，这个就不截图了奥直接上代码</p></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了Servlet哦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="12"><li>对应的web.xml文件</li></ol><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>top.leafii.servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><ol start="13"><li>调用了HelloServlet后<img src="https://gitee.com/mikutown/pic/raw/master/img/image-20210305143055419.png" alt="image-20210305143055419" loading="lazy"></li></ol><p>可以看到 已经完成了 可以开始你的javaWeb之旅了</p><hr><p>参考链接：<a href="https://blog.csdn.net/gaoqingliang521/article/details/108677301">IntelliJ IDEA创建Servlet最新方法 Idea版本2020.2.2以及IntelliJ IDEA创建Servlet 404问题（超详细）_gaoqingliang521的专栏-CSDN博客</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;IDEA2020版如何创建Servlet的javaWeb项目&quot;&gt;&lt;a href=&quot;#IDEA2020版如何创建Servlet的javaWeb项目&quot; class=&quot;headerlink&quot; title=&quot;IDEA2020版如何创建Servlet的javaWeb项目&quot;&gt;&lt;/a&gt;IDEA2020版如何创建Servlet的javaWeb项目&lt;/h1&gt;&lt;p&gt;2020款idea很多地方都变了，昨天在创建javaweb项目中发现已经不会创建了，所以我写这篇笔记记录一下QAQ&lt;/p&gt;</summary>
    
    
    
    
    <category term="javaWeb" scheme="https://mikutown.gitee.io/blog/tags/javaWeb/"/>
    
  </entry>
  
  <entry>
    <title>常用正则表达式</title>
    <link href="https://mikutown.gitee.io/blog/2021/03/03/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://mikutown.gitee.io/blog/2021/03/03/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-03-03T08:49:47.000Z</published>
    <updated>2021-03-03T16:53:49.423Z</updated>
    
    <content type="html"><![CDATA[<p>很多不太懂正则的朋友，在遇到需要用正则校验数据时，往往是在网上去找很久，结果找来的还是不很符合要求。所以我最近把开发中常用的一些正则表达式整理了一下，在这里分享一下。给自己留个底，也给朋友们做个参考。</p><a id="more"></a><h2 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h2><pre class="language-none"><code class="language-none">1. 数字：^[0-9]*$2. n位的数字：^\d&#123;n&#125;$3. 至少n位的数字：^\d&#123;n,&#125;$4. m-n位的数字：^\d&#123;m,n&#125;$5. 零和非零开头的数字：^(0|[1-9][0-9]*)$6. 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$7. 带1-2位小数的正数或负数：^(\-)?\d+(\.\d&#123;1,2&#125;)?$8. 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$9. 有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$10. 有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$11. 非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\+?[1-9][0-9]*$12. 非零的负整数：^\-[1-9][]0-9&quot;*$ 或 ^-[1-9]\d*$13. 非负整数：^\d+$ 或 ^[1-9]\d*|0$14. 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$15. 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$16. 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$17. 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$18. 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$19. 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></pre><h2 id="二、校验字符的表达式"><a href="#二、校验字符的表达式" class="headerlink" title="二、校验字符的表达式"></a>二、校验字符的表达式</h2> <pre class="language-none"><code class="language-none">1. 汉字：^[\u4e00-\u9fa5]&#123;0,&#125;$2. 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$3. 长度为3-20的所有字符：^.&#123;3,20&#125;$4. 由26个英文字母组成的字符串：^[A-Za-z]+$5. 由26个大写英文字母组成的字符串：^[A-Z]+$6. 由26个小写英文字母组成的字符串：^[a-z]+$7. 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$8. 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;3,20&#125;$9. 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$10. 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;$11. 可以输入含有^%&amp;&#39;,;&#x3D;?$\&quot;等字符：[^%&amp;&#39;,;&#x3D;?$\x22]+ 12. 禁止输入含有~的字符：[^~\x22]+</code></pre><h2 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h2> <pre class="language-none"><code class="language-none">1. Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$2. 域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(&#x2F;.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+&#x2F;.?3. InternetURL：[a-zA-z]+:&#x2F;&#x2F;[^\s]* 或 ^http:&#x2F;&#x2F;([\w-]+\.)+[\w-]+(&#x2F;[\w-.&#x2F;?%&amp;&#x3D;]*)?$4. 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$5. 电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$6. 国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;7. 身份证号(15位、18位数字)：^\d&#123;15&#125;|\d&#123;18&#125;$ 8. 短身份证号码(数字、字母x结尾)：^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$ 9. 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$ 10. 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$11. 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?&#x3D;.*\d)(?&#x3D;.*[a-z])(?&#x3D;.*[A-Z]).&#123;8,10&#125;$ 12. 日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;13. 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$14. 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$15. 钱的输入格式： 16. 1.有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^[1-9][0-9]*$ 17. 2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ 18. 3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ 19. 4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ 20. 5.必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$ 21. 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$ 22. 7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$ 23 8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$ 24. 备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里 25. xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$26. 中文字符的正则表达式：[\u4e00-\u9fa5] 27. 双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1)) 28. 空白行的正则表达式：\n\s*\r (可以用来删除空白行) 29. HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;&#x2F;\1&gt;|&lt;.*? &#x2F;&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力) 30. 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式) 31. 腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始)32. 中国邮政编码：[1-9]\d&#123;5&#125;(?!\d) (中国邮政编码为6位数字)33. IP地址：\d+\.\d+\.\d+\.\d+ (提取IP地址时有用)34. IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</code></pre><hr><p>原文：<a href="http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html">http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;很多不太懂正则的朋友，在遇到需要用正则校验数据时，往往是在网上去找很久，结果找来的还是不很符合要求。所以我最近把开发中常用的一些正则表达式整理了一下，在这里分享一下。给自己留个底，也给朋友们做个参考。&lt;/p&gt;</summary>
    
    
    
    
    <category term="正则表达式" scheme="https://mikutown.gitee.io/blog/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>《算法》（第四版）环境搭建</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/07/%E3%80%8A%E7%AE%97%E6%B3%95%E3%80%8B%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%89%88%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/07/%E3%80%8A%E7%AE%97%E6%B3%95%E3%80%8B%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%89%88%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2021-01-07T11:43:08.000Z</published>
    <updated>2021-01-07T12:38:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《算法》（第四版）环境搭建"><a href="#《算法》（第四版）环境搭建" class="headerlink" title="《算法》（第四版）环境搭建"></a>《算法》（第四版）环境搭建</h1><p>最近开封了买了很久都没读的《算法》（红色封面的），如果想运行里面的代码需要安装一个与本书搭配的jar包，因此有了这篇博客。</p><a id="more"></a><h2 id="算法运行库的下载和配置"><a href="#算法运行库的下载和配置" class="headerlink" title="算法运行库的下载和配置"></a>算法运行库的下载和配置</h2><ol><li><p>下载作者提供的运行库，下载地址：<a href="http://algs4.cs.princeton.edu/code/">点我</a> 点开页面之后使劲往下翻，翻到下图位置时，就知道点哪个下载了 嘿嘿嘿嘿</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107200929.png" alt="image-20210107200929162" loading="lazy"></p></li></ol><p><strong>我们需要下载两个内容，一个是库，一个是测试的数据。库是algs4.jar，数据是algs4-data.zip。</strong></p><ol start="2"><li>在C盘建立目录<code>C:\Program Files\algs4</code>，然后把algs4.jar放在里面。（什么目录都可以）</li><li>在CLASSPATH环境变量中，添加值<code>C:\Program Files\algs4\algs4.jar</code> (就是刚刚存放algs4.jar的路径)</li></ol><p><strong>注:如果你没有配置过CLASSPATH，请复制以下语句进CLASSPATH，使你的CLASSPATH变成这样</strong></p><pre class="language-none"><code class="language-none">.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;C:\Users\yeyun\alsgs4\algs4.jar</code></pre><h2 id="测试数据的使用"><a href="#测试数据的使用" class="headerlink" title="测试数据的使用"></a>测试数据的使用</h2><ol><li>在idea中创建一个HelloWorld工程，选择你的JDK，下一步。</li><li>为项目添加jar包：File–&gt;Project Strcuture–&gt;Modules，然后点加号，点击，JARS…..,选择你的Jar包的位置，点确定。如图所示：</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107202545.png" alt="image-20210107202545115" loading="lazy"></p><ol start="3"><li>将测试数据解压到src目录下：</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107202658.png" alt="image-20210107202658127" loading="lazy"></p><ol start="4"><li>使用第一章第一节的测试代码：</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>leafii<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>day01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>princeton<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>algs4<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">BinarySearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hi <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;=</span> hi<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Key is in a[lo..hi] or not present.</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span>      <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> hi <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> lo <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// read the integers from a file</span>        <span class="token class-name">In</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">In</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> whitelist <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readAllInts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// sort the array</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>whitelist<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// read integer key from standard input; print if not in whitelist</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token class-name">StdIn</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">BinarySearch</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>whitelist<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token class-name">StdOut</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="5"><li>在BinarySearch类所在的文件夹右键，选择open in terminal，输入编译命令:<code>javac BinarySearch.java</code></li><li>在src文件夹上右键，点击open in terminal</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107202831.png" alt="image-20210107202831682" loading="lazy"></p><ol start="6"><li>在命令行中输入命令：<code>java top.leafii.demo.day01.BinarySearch tinyW.txt &lt; tinyT.txt</code>（注意你的包名）</li><li>成功了！运行结果如图所示：</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107203202.png" alt="image-20210107203201972" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;《算法》（第四版）环境搭建&quot;&gt;&lt;a href=&quot;#《算法》（第四版）环境搭建&quot; class=&quot;headerlink&quot; title=&quot;《算法》（第四版）环境搭建&quot;&gt;&lt;/a&gt;《算法》（第四版）环境搭建&lt;/h1&gt;&lt;p&gt;最近开封了买了很久都没读的《算法》（红色封面的），如果想运行里面的代码需要安装一个与本书搭配的jar包，因此有了这篇博客。&lt;/p&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://mikutown.gitee.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>关于java命令报错 找不到或无法加载主类这件事</title>
    <link href="https://mikutown.gitee.io/blog/2021/01/07/%E5%85%B3%E4%BA%8Ejava%E5%91%BD%E4%BB%A4%E6%8A%A5%E9%94%99-%E6%89%BE%E4%B8%8D%E5%88%B0%E6%88%96%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E4%B8%BB%E7%B1%BB%E8%BF%99%E4%BB%B6%E4%BA%8B/"/>
    <id>https://mikutown.gitee.io/blog/2021/01/07/%E5%85%B3%E4%BA%8Ejava%E5%91%BD%E4%BB%A4%E6%8A%A5%E9%94%99-%E6%89%BE%E4%B8%8D%E5%88%B0%E6%88%96%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E4%B8%BB%E7%B1%BB%E8%BF%99%E4%BB%B6%E4%BA%8B/</id>
    <published>2021-01-07T07:46:37.000Z</published>
    <updated>2021-01-07T11:44:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于java命令报错-找不到或无法加载主类这件事"><a href="#关于java命令报错-找不到或无法加载主类这件事" class="headerlink" title="关于java命令报错 找不到或无法加载主类这件事"></a>关于java命令报错 找不到或无法加载主类这件事</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>今天在配置《算法》（第四版）所需要的环境后，进行java命令+输入输出流文件时报错了！报错如图所示：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107155310.png" alt="image-20210107155303487" loading="lazy"></p><p>咋回事呢？</p><a id="more"></a><h2 id="或许，是因为没有写包名？"><a href="#或许，是因为没有写包名？" class="headerlink" title="或许，是因为没有写包名？"></a>或许，是因为没有写包名？</h2><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107160102.png" alt="image-20210107160102193" loading="lazy"></p><p>还是不行!!!咋回事呢？</p><h2 id="写个HelloWorld试试？可能是java命令出问题了？"><a href="#写个HelloWorld试试？可能是java命令出问题了？" class="headerlink" title="写个HelloWorld试试？可能是java命令出问题了？"></a>写个HelloWorld试试？可能是java命令出问题了？</h2><p>在D盘根目录写一个Hello.java，代码如下（其实就是Helloworld啦）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>然而运行的时候…</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107160522.png" alt="image-20210107160522119" loading="lazy"></p><p>？？？？？？怎么回事呢？</p><h2 id="用家里的Mac的终端试试能不能写Java代码"><a href="#用家里的Mac的终端试试能不能写Java代码" class="headerlink" title="用家里的Mac的终端试试能不能写Java代码"></a>用家里的Mac的终端试试能不能写Java代码</h2><p>可以的，一样的代码，它就能运行，咱就不行，怎么回事呢？</p><h2 id="干脆重新安装JDK试试"><a href="#干脆重新安装JDK试试" class="headerlink" title="干脆重新安装JDK试试!"></a>干脆重新安装JDK试试!</h2><h3 id="卸载旧的JDK"><a href="#卸载旧的JDK" class="headerlink" title="卸载旧的JDK"></a>卸载旧的JDK</h3><p>打开控制面板–&gt;卸载程序–&gt;找到Java开头的两个应用</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107160756.png" alt="image-20210107160756288" loading="lazy"></p><p>给他们都卸载了！</p><p>把环境变量配置的JAVA_HOME,以及Path中的两个java运行路径都删除！</p><h3 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h3><p>当然是去甲骨文官网下载啦，[官网地址](<a href="https://www.oracle.com/java/technologies/javase-downloads.html">Java SE - Downloads | Oracle Technology Network | Oracle</a>)</p><p>选择合适的jdk版本的合适系统的安装包，点击下载，同意协议，登陆账户后自动开始下载</p><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><p>双击安装就好了</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ol><li><p>右键此电脑–&gt;属性–&gt;高级系统设置–&gt;环境变量</p></li><li><p>配置JAVA_HOME(在用户变量里），路径为你的java安装目录，我的安装目录如下</p></li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107162104.png" alt="image-20210107162104115" loading="lazy"></p><ol start="3"><li>配置Path（在系统变量里），路径为jdk和jre的运行目录，我的path配置如下</li></ol><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107162251.png" alt="image-20210107162250997" loading="lazy"></p><ol start="4"><li>虽然在java1.6以上不需要配置CLASSPATH，但是因为我要配置额外的运行库，所以要在系统变量里配置完整CLASSPATH，值如下</li></ol><pre class="language-none"><code class="language-none">.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code></pre><ol start="5"><li>因为配置了算法第四版的运行库，所以要在CLASSPATH中添加</li></ol><pre class="language-none"><code class="language-none">;C:\Users\yeyun\alsgs4\algs4.jar</code></pre><p><strong>配置结束之后，点击三次确定，打开cmd（或gitbash），输入java -version，如果不报错并显示版本，则配置成功</strong></p><h2 id="现在再试试Helloworld能跑起来吗？"><a href="#现在再试试Helloworld能跑起来吗？" class="headerlink" title="现在再试试Helloworld能跑起来吗？"></a>现在再试试Helloworld能跑起来吗？</h2><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107162614.png" alt="image-20210107162614489" loading="lazy"></p><p>可以的，成功了！，再试试书上的示例代码可以跑起来吗？</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210107162638.png" alt="image-20210107162638159" loading="lazy"></p><p>可以了！</p><h2 id="反省问题"><a href="#反省问题" class="headerlink" title="反省问题"></a>反省问题</h2><p>其实jdk并没有问题，因为在idea上运行代码，项目都没有任何问题的，只是在命令行的时候出了问题！那么是哪里出了问题呢？</p><p>是CLASSPATH环境变量配置的问题！以前配置jdk的时候没有配置CLASSPATH，所以以前可以直接用java命令运行，但是现在因为配置了算法第四版的运行库，反而配置了CLASSPATH，但是并没有配置其它的默认的CLASSPATH，导致系统不知道你在运行java命令时的此时的.class文件的目录什么的（和.;这个环境变量内容有关系），配置之后就一切正常了！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果使用java命令运行.class文件时报错：找不到或无法加载主类，请进行如下操作：</p><ol><li><p>检查你运行的类是不是处于某个包内，要在这个包的上一级目录，运行这个包中的类，并且在类名之前加上包名，如<code>java top.leafii.day01.HelloWorld</code> ，这样如果可以运行，那么就是你java命令要运行的包名没有弄清楚</p></li><li><p>检查你的环境变量是否配置正确，如果配置了其它的CLASSPATH，那就把默认的<code>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code>也加上（注意分号)</p></li><li><p>如果实在不知道怎么搞，就重装一遍JDK！不过一般都是上面这两个情况。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;关于java命令报错-找不到或无法加载主类这件事&quot;&gt;&lt;a href=&quot;#关于java命令报错-找不到或无法加载主类这件事&quot; class=&quot;headerlink&quot; title=&quot;关于java命令报错 找不到或无法加载主类这件事&quot;&gt;&lt;/a&gt;关于java命令报错 找不到或无法加载主类这件事&lt;/h1&gt;&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;今天在配置《算法》（第四版）所需要的环境后，进行java命令+输入输出流文件时报错了！报错如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/mikutown/pic/raw/master/img/20210107155310.png&quot; alt=&quot;image-20210107155303487&quot;&gt;&lt;/p&gt;
&lt;p&gt;咋回事呢？&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://mikutown.gitee.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装MySQL5.7</title>
    <link href="https://mikutown.gitee.io/blog/2020/04/21/CentOs7%E5%AE%89%E8%A3%85MySQL5.7/"/>
    <id>https://mikutown.gitee.io/blog/2020/04/21/CentOs7%E5%AE%89%E8%A3%85MySQL5.7/</id>
    <published>2020-04-21T13:57:41.000Z</published>
    <updated>2021-01-02T20:00:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CentOs7安装MySQL5-7"><a href="#CentOs7安装MySQL5-7" class="headerlink" title="CentOs7安装MySQL5.7"></a>CentOs7安装MySQL5.7</h1><p>5.7相较于5.6来说，坑很多 因此写教程记录一下，以后用得上</p><h2 id="1-通过ssh连接服务器"><a href="#1-通过ssh连接服务器" class="headerlink" title="1.通过ssh连接服务器"></a>1.通过ssh连接服务器</h2><h2 id="2-安装Mysql"><a href="#2-安装Mysql" class="headerlink" title="2.安装Mysql"></a>2.安装Mysql</h2><ol><li><p>运行以下命令更新YUM源。</p><a id="more"></a></li></ol><pre class="language-none"><code class="language-none">rpm -Uvh  http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-9.noarch.rpm</code></pre><ol start="2"><li>运行以下命令安装MySQL。(镜像可能会稍微有点久，多等一会)</li></ol><pre class="language-none"><code class="language-none">yum -y install mysql-community-server</code></pre><ol start="3"><li>运行以下命令查看MySQL版本号。</li></ol><pre class="language-none"><code class="language-none">mysql -v</code></pre><p>返回结果如下，表示MySQL安装成功。<br><code>mysql  Ver 14.14 Distrib 5.7.28, for Linux (x86_64) using  EditLine wrapper</code></p><h2 id="3-配置MySQL"><a href="#3-配置MySQL" class="headerlink" title="3.配置MySQL"></a>3.配置MySQL</h2><ol><li>运行以下命令启动MySQL服务。</li></ol><pre class="language-none"><code class="language-none">systemctl start mysqld</code></pre><ol start="2"><li>运行以下命令设置MySQL服务开机自启动。</li></ol><pre class="language-none"><code class="language-none">systemctl enable mysqld</code></pre><ol start="3"><li>运行以下命令查看/var/log/mysqld.log文件，获取并记录root用户的初始密码。(下一步重置root用户密码时，会使用该初始密码)</li></ol><pre class="language-none"><code class="language-none">grep &#39;temporary password&#39; &#x2F;var&#x2F;log&#x2F;mysqld.log2019-11-13T09:22:30.998148Z 1 [Note] A temporary password is generated for root@localhost: c(dwuSJQP0pq</code></pre><ol start="4"><li>运行下列命令对MySQL进行安全性配置。</li></ol><pre class="language-none"><code class="language-none">mysql_secure_installation</code></pre><h2 id="4-配置MySQL的安全性"><a href="#4-配置MySQL的安全性" class="headerlink" title="4.配置MySQL的安全性"></a>4.配置MySQL的安全性</h2><ol><li>重置root用户的密码。</li></ol><pre class="language-none"><code class="language-none">Enter password for user root: #输入上一步获取的root用户初始密码The &#39;validate_password&#39; plugin is installed on the server.The subsequent steps will run with the existing configuration of the plugin.Using existing password for root.Estimated strength of the password: 100 Change the password for root ? ((Press y|Y for Yes, any other key for No) : Y #是否更改root用户密码，输入YNew password: #输入新密码，长度为8至30个字符，必须同时包含大小写英文字母、数字和特殊符号。特殊符号可以是()&#96; ~!@#$%^&amp;*-+&#x3D;|&#123;&#125;[]:;‘&lt;&gt;,.?&#x2F;Re-enter new password: #再次输入新密码Estimated strength of the password: 100 Do you wish to continue with the password provided?(Press y|Y for Yes, any other key for No) : Y</code></pre><ol start="2"><li>输入Y删除匿名用户账号。</li></ol><pre class="language-none"><code class="language-none">By default, a MySQL installation has an anonymous user, allowing anyone to log into MySQL without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment.Remove anonymous users? (Press y|Y for Yes, any other key for No) : Y  #是否删除匿名用户，输入YSuccess.</code></pre><ol start="3"><li>输入Y禁止root账号远程登录。</li></ol><pre class="language-none"><code class="language-none">Disallow root login remotely? (Press y|Y for Yes, any other key for No) : Y #禁止root远程登录，输入YSuccess.</code></pre><ol start="4"><li>输入Y删除test库以及对test库的访问权限。</li></ol><pre class="language-none"><code class="language-none">Remove test database and access to it? (Press y|Y for Yes, any other key for No) : Y #是否删除test库和对它的访问权限，输入Y- Dropping test database...Success.</code></pre><ol start="5"><li>输入Y重新加载授权表。</li></ol><pre class="language-none"><code class="language-none">Reload privilege tables now? (Press y|Y for Yes, any other key for No) : Y #是否重新加载授权表，输入YSuccess.All done!</code></pre><h2 id="5-远程访问MySQL数据库"><a href="#5-远程访问MySQL数据库" class="headerlink" title="5.远程访问MySQL数据库"></a>5.远程访问MySQL数据库</h2><ol><li>通过以下命令登录mysql</li></ol><pre class="language-none"><code class="language-none">mysql -uroot -p</code></pre><ol start="2"><li>依次运行以下命令创建远程登录MySQL的账号。示例账号为root、密码为root。</li></ol><pre class="language-none"><code class="language-none">mysql&gt; grant all on *.* to &#39;root&#39;@&#39;%&#39;IDENTIFIED BY &#39;root&#39;; #使用root替换dms，可设置为允许root账号远程登录。mysql&gt; flush privileges;</code></pre><h2 id="简单密码修改方式"><a href="#简单密码修改方式" class="headerlink" title="简单密码修改方式"></a>简单密码修改方式</h2><ol><li>通过以下命令登录mysql</li></ol><pre class="language-none"><code class="language-none">mysql -uroot -p</code></pre><ol start="2"><li>通过以下命令修改mysql默认的密码安全性</li></ol><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">set</span> <span class="token keyword">global</span> validate_password_policy<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.05</span> sec<span class="token punctuation">)</span> mysql<span class="token operator">></span> mysql<span class="token operator">></span> mysql<span class="token operator">></span> <span class="token keyword">set</span> <span class="token keyword">global</span> validate_password_mixed_case_count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> mysql<span class="token operator">></span> <span class="token keyword">set</span> <span class="token keyword">global</span> validate_password_number_count<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> mysql<span class="token operator">></span> <span class="token keyword">set</span> <span class="token keyword">global</span> validate_password_special_char_count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> mysql<span class="token operator">></span> <span class="token keyword">set</span> <span class="token keyword">global</span> validate_password_length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> mysql<span class="token operator">></span> <span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'validate_password%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------------------------+-------+</span><span class="token operator">|</span> Variable_name                        <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------------------+-------+</span><span class="token operator">|</span> validate_password_dictionary_file    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> validate_password_length             <span class="token operator">|</span> <span class="token number">3</span>     <span class="token operator">|</span><span class="token operator">|</span> validate_password_mixed_case_count   <span class="token operator">|</span> <span class="token number">0</span>     <span class="token operator">|</span><span class="token operator">|</span> validate_password_number_count       <span class="token operator">|</span> <span class="token number">3</span>     <span class="token operator">|</span><span class="token operator">|</span> validate_password_policy             <span class="token operator">|</span> LOW   <span class="token operator">|</span><span class="token operator">|</span> validate_password_special_char_count <span class="token operator">|</span> <span class="token number">0</span>     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------------------+-------+</span></code></pre><ol start="3"><li>修改简单密码：</li></ol><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SET</span> PASSWORD <span class="token keyword">FOR</span> <span class="token string">'root'</span><span class="token variable">@'localhost'</span> <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected<span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;CentOs7安装MySQL5-7&quot;&gt;&lt;a href=&quot;#CentOs7安装MySQL5-7&quot; class=&quot;headerlink&quot; title=&quot;CentOs7安装MySQL5.7&quot;&gt;&lt;/a&gt;CentOs7安装MySQL5.7&lt;/h1&gt;&lt;p&gt;5.7相较于5.6来说，坑很多 因此写教程记录一下，以后用得上&lt;/p&gt;
&lt;h2 id=&quot;1-通过ssh连接服务器&quot;&gt;&lt;a href=&quot;#1-通过ssh连接服务器&quot; class=&quot;headerlink&quot; title=&quot;1.通过ssh连接服务器&quot;&gt;&lt;/a&gt;1.通过ssh连接服务器&lt;/h2&gt;&lt;h2 id=&quot;2-安装Mysql&quot;&gt;&lt;a href=&quot;#2-安装Mysql&quot; class=&quot;headerlink&quot; title=&quot;2.安装Mysql&quot;&gt;&lt;/a&gt;2.安装Mysql&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;运行以下命令更新YUM源。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://mikutown.gitee.io/blog/tags/Linux/"/>
    
    <category term="MySQL" scheme="https://mikutown.gitee.io/blog/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>macOS无法通过SSH链接到Linux服务器</title>
    <link href="https://mikutown.gitee.io/blog/2020/04/21/macos%E6%97%A0%E6%B3%95%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5Linux%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://mikutown.gitee.io/blog/2020/04/21/macos%E6%97%A0%E6%B3%95%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5Linux%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-04-21T13:10:11.000Z</published>
    <updated>2021-01-02T19:59:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="macos无法通过ssh连接Linux云服务器"><a href="#macos无法通过ssh连接Linux云服务器" class="headerlink" title="macos无法通过ssh连接Linux云服务器"></a>macos无法通过ssh连接Linux云服务器</h1><h4 id="问题产生"><a href="#问题产生" class="headerlink" title="问题产生"></a>问题产生</h4><p>因为本人将自己的阿里云服务器格式化了，因此macos 通过ssh连接时提示：</p><a id="more"></a><pre class="language-none"><code class="language-none">leafii@LeafiideMacBook-Pro  ~sudo sshroot@Password:????????@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!Someone could be eavesdropping on you right now (man-in-the-middle attack)!It is also possible that the RSA host key has just been changed.The fingerprint for the RSA key sent by the remote host isea:24:31:8d:03:07:36:db:2f:74:15:5d:58:67:a3:5b.Please contact your system administrator.Add correct host key in &#x2F;var&#x2F;root&#x2F;.ssh&#x2F;known_hosts to get rid of this message.Offending key in &#x2F;var&#x2F;root&#x2F;.ssh&#x2F;known_hosts:1RSA host key for 192.168.1.203 has changed and you have requested strict checking.Host key verification failed.</code></pre><h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>Mac保存了秘钥信息，你初始化服务器之后，秘钥就变了，所以不能登录，利用上面的程序清除旧的秘钥信息即可正常登录了！</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>在终端执行命令：</p><pre class="language-none"><code class="language-none">ssh-keygen -R IP(你远程服务器ip地址)</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;macos无法通过ssh连接Linux云服务器&quot;&gt;&lt;a href=&quot;#macos无法通过ssh连接Linux云服务器&quot; class=&quot;headerlink&quot; title=&quot;macos无法通过ssh连接Linux云服务器&quot;&gt;&lt;/a&gt;macos无法通过ssh连接Linux云服务器&lt;/h1&gt;&lt;h4 id=&quot;问题产生&quot;&gt;&lt;a href=&quot;#问题产生&quot; class=&quot;headerlink&quot; title=&quot;问题产生&quot;&gt;&lt;/a&gt;问题产生&lt;/h4&gt;&lt;p&gt;因为本人将自己的阿里云服务器格式化了，因此macos 通过ssh连接时提示：&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://mikutown.gitee.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Mavenの入门</title>
    <link href="https://mikutown.gitee.io/blog/2020/04/11/Maven%E5%85%A5%E9%97%A8/"/>
    <id>https://mikutown.gitee.io/blog/2020/04/11/Maven%E5%85%A5%E9%97%A8/</id>
    <published>2020-04-10T17:41:32.000Z</published>
    <updated>2021-01-02T20:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Maven入门"><a href="#Maven入门" class="headerlink" title="Maven入门"></a>Maven入门</h1><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p>提出需求</p><p> <strong>做项目需要引入很多jar包</strong></p><p> <strong>如果使用Spring框架，要引入jar包</strong></p><p> <strong>SpringMVC Mybatis 都需要很多jar包</strong></p><a id="more"></a><p>解决办法：<br>使用maven</p><h4 id="什么是maven？"><a href="#什么是maven？" class="headerlink" title="什么是maven？"></a>什么是maven？</h4><p>　　Maven是基于项目对象模型(POM project object model)，可以通过一小段描述信息（配置）来管理项目的构建，报告和文档的软件项目管理工具，简单的说就是用来管理项目所需要的依赖且管理项目构建的工具。</p><h4 id="maven的安装与配置"><a href="#maven的安装与配置" class="headerlink" title="maven的安装与配置"></a>maven的安装与配置</h4><p>   类似tomcat maven也是需要安装和配置，还有配置到idea中的</p><ol><li><a href="http://maven.apache.org/download.cgi">下载maven</a>  推荐下载tar.gz的解压包<img src="https://gitee.com/mikutown/pic/raw/master/img/20200411014154.png" loading="lazy"></li><li>解压到指定目录</li></ol><pre class="language-none"><code class="language-none">tar -zxvf apa.... ~&#x2F;maven   </code></pre><p>我解压到了~/maven/apache……</p><ol start="3"><li>执行命令</li></ol><pre class="language-none"><code class="language-none">vim ~&#x2F;.bash_profile</code></pre><p>添加语句：</p><pre class="language-none"><code class="language-none">export M2_HOME&#x3D;$HOME&#x2F;maven&#x2F;apache-maven-3.6.2export PATH&#x3D;$PATH:$M2_HOME&#x2F;bin</code></pre><p>然后</p><pre class="language-none"><code class="language-none">resource ~&#x2F;.bash_profile</code></pre><p>然后执行</p><pre class="language-none"><code class="language-none">mvn -v</code></pre><p>显示<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200411014217.png" loading="lazy"></p><p>就是安装成功了</p><p>如果你使用的是zsh 那么就需要修改你的zshrc文件 添加</p><pre class="language-none"><code class="language-none">source ~&#x2F;.bash_profile</code></pre><p>这样就可以自动刷新.bash_profile了</p><ol start="4"><li>接下来我们对idea进行配置<img src="https://gitee.com/mikutown/pic/raw/master/img/20200411014240.png" loading="lazy"><br>切记，不但要配置当前项目，还要配置其他项目！</li></ol><p>5.配置conf文件夹中的setting.xml 在mirrors标签里添加</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span> </code></pre><p>使用阿里云的maven镜像，可以使maven下载速度更快哦</p><p>安装完毕啦！</p><hr><h4 id="新建一个maven项目"><a href="#新建一个maven项目" class="headerlink" title="新建一个maven项目"></a>新建一个maven项目</h4><p>1.<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200411014300.png" loading="lazy"><br>这里让我们选模板 因为我们只做演示和试用，所以直接点击下一步</p><p>2.这里groupid就是公司开发组的id，第二个就是项目名，第三个是版本<img src="https://gitee.com/mikutown/pic/raw/master/img/20200411014322.png" loading="lazy"></p><ol start="3"><li>然后选择项目路径</li><li>此时进入了编码界面</li></ol><hr><h4 id="maven项目路径详解"><a href="#maven项目路径详解" class="headerlink" title="maven项目路径详解"></a>maven项目路径详解</h4><p> 可以看看当前的目录结构<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200411014344.png" loading="lazy"></p><p>src中有main文件夹和test文件夹</p><p>main文件夹主要存放你的java代码，test文件夹主要用来运行你自己写的测试类。</p><p>pom.xml就是标识我们所需要的jar包的文件，如果需要添加jar包依赖，要向这个文件中添加代码</p><hr><p>例：添加mysql的java链接jar包：<br><a href="https://mvnrepository.com/">前往maven官网</a> :获取xml代码<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200411014404.png" loading="lazy"></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.38<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>将代码放置在pom.xml中，要放置在dependencies标签中<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200411014426.png" loading="lazy"></p><p>然后maven就会开始自动下载依赖包了<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200411014438.png" loading="lazy"><br>当字体不再是红色 说明jar包加载好了 此时就可以使用jar包啦！</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20200411014620.png" loading="lazy"><br>此时idea可以自动联想了，说明下载好了。<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200411014643.png" loading="lazy"><br>此时的项目可以直接添加框架支持了</p><hr><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><ol><li>Maven是一个核心引擎，提供了基本的项目处理能力和建设过程的管理，以及一系列的插件是用来执行实际建设任务。maven插件可以完成一些特定的功能。例如，集成jdk插件可以方便的修改项目的编译环境；集成tomcat插件后，无需安装tomcat服务器就可以运行tomcat进行项目的发布与测试。在pom.xml中通过plugin标签引入maven 的功能插件。</li><li>JDK编译版本的插件<br>插件可以去其他第三方仓库进行寻找，或者使用IDEA集成外部Tomcat8及其以上版本，进行项目的发布。</li></ol><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>showWarnings</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>showWarnings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li>导入依赖<br>导入依赖坐标，无需手动导入jar包就可以引入jar。在pom.xml中使用标签引入依赖。</li></ol><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="4"><li>关于scope<br><img src="https://gitee.com/mikutown/pic/raw/master/img/20200411014713.png" loading="lazy"></li></ol><ul><li>compile 编译、测试、运行，A在编译时依赖B，并且在测试和运行时也依赖<br>例如：strus-core、spring-beans。打到war包或jar包</li><li>provided 编译、和测试有效，A在编译和测试时需要B<br>例如：servlet-api就是编译和测试有用，在运行时不用（tomcat容器已提供） 不会打到war</li><li>runtime：测试、运行有效<br>例如：jdbc驱动包 ，在开发代码中针对java的jdbc接口开发，编译不用 在运行和测试时需要通过jdbc驱动包（mysql驱动）连接数据库，需要的 会打到war</li><li>test：只是测试有效，只在单元测试类中用 例如：junit 不会打到war<br>按照依赖强度，由强到弱来排序：(理解) compile&gt; provided&gt; runtime&gt; test</li></ul><hr><p>以上就是全部maven的内容，后续可能会有补充</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Maven入门&quot;&gt;&lt;a href=&quot;#Maven入门&quot; class=&quot;headerlink&quot; title=&quot;Maven入门&quot;&gt;&lt;/a&gt;Maven入门&lt;/h1&gt;&lt;h3 id=&quot;Maven&quot;&gt;&lt;a href=&quot;#Maven&quot; class=&quot;headerlink&quot; title=&quot;Maven&quot;&gt;&lt;/a&gt;Maven&lt;/h3&gt;&lt;p&gt;提出需求&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;做项目需要引入很多jar包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;如果使用Spring框架，要引入jar包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;SpringMVC Mybatis 都需要很多jar包&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Maven" scheme="https://mikutown.gitee.io/blog/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Git与Gitee环境配置</title>
    <link href="https://mikutown.gitee.io/blog/2020/03/30/Git%E4%B8%8EGitee%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://mikutown.gitee.io/blog/2020/03/30/Git%E4%B8%8EGitee%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2020-03-30T15:22:51.000Z</published>
    <updated>2021-01-02T18:58:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置git与gitee连接"><a href="#配置git与gitee连接" class="headerlink" title="配置git与gitee连接"></a>配置git与gitee连接</h2><h3 id="1-下载-amp-安装git"><a href="#1-下载-amp-安装git" class="headerlink" title="1.下载&amp;安装git"></a>1.下载&amp;安装git</h3><p>[Git官网](<a href="https://git-scm.com/">Git (git-scm.com)</a>)</p><p>按照自己的操作系统进行下载安装，如Windows就下载Windows版本的安装包，下载速度慢的话可以用bitcomit或者迅雷进行下载，速度海星=-=</p><a id="more"></a><p>双击安装包，将安装包安装在自己定义的路径（最好别有中文），新手的话定义完自定义就一直next就可以了吧……（gitee官方教程原文：请注意，如果你不熟悉每个选项的意思，请保持默认的选项）</p><p>安装完毕后 （如果以上一切正常，打开终端(Window下请打开安装git时一并安装的bash) 输入 git –version <strong>应该会显示如下类似的信息</strong>）</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">git version 2.5.0</code></pre><h3 id="2-配置git默认参数"><a href="#2-配置git默认参数" class="headerlink" title="2.配置git默认参数"></a>2.配置git默认参数</h3><p>( 在 Windows 系统上，Git 会找寻用户主目录下的 .gitconfig 文件。主目录即 $HOME 变量指定的目录，一般都是 <code>C:\Documents and Settings\$USER</code>。此外，Git 还会尝试找寻 /etc/gitconfig 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。)</p><p>使用以上代码进行用户名和邮箱的配置</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"John Doe"</span>$ <span class="token function">git</span> config --global user.email johndoe@example.com</code></pre><p>使用以下命令使客户端记住密码以便使用https进行仓库的推拉</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config --global credential.helper store</code></pre><p>可以使用git config –list命令对当前已有的配置信息进行检查</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config --listuser.name<span class="token operator">=</span>Scott Chaconuser.email<span class="token operator">=</span>schacon@gmail.comcolor.status<span class="token operator">=</span>autocolor.branch<span class="token operator">=</span>autocolor.interactive<span class="token operator">=</span>autocolor.diff<span class="token operator">=</span>auto<span class="token punctuation">..</span>.</code></pre><h3 id="3-配置ssh公钥（SSHKey）"><a href="#3-配置ssh公钥（SSHKey）" class="headerlink" title="3.配置ssh公钥（SSHKey）"></a>3.配置ssh公钥（SSHKey）</h3><p>使用以下代码创建一个sshkey：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen -t rsa -C <span class="token string">"youremail@youremail.com"</span>  <span class="token comment"># Generating public/private rsa key pair...</span><span class="token comment"># 三次回车即可生成 ssh key</span></code></pre><p>创建成功后使用cat命令查看公钥（public key)</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> ~/.ssh/id_rsa.pub</code></pre><p>将显示的内容添加到gitee的公钥页面中：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20201231022924.png" alt="image-20201231022917205" loading="lazy"></p><p>添加后，测试一下是否添加成功:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Gitee</span>$ <span class="token function">ssh</span> -T git@gitee.com<span class="token comment">#GitHub</span>$ <span class="token function">ssh</span> -T git@github.com</code></pre><p>第一次会询问你是否进行contiune，记得输入yes！</p><p>成功后的一般是这样</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Gitee</span>Welcome to Gitee.com, YourName<span class="token operator">!</span><span class="token comment">#GitHub</span>You've successfully authenticated, but GitHub does not provide shell access.</code></pre><h2 id="Git常用操作"><a href="#Git常用操作" class="headerlink" title="Git常用操作"></a>Git常用操作</h2><h3 id="在工作目录中初始化新仓库"><a href="#在工作目录中初始化新仓库" class="headerlink" title="在工作目录中初始化新仓库"></a>在工作目录中初始化新仓库</h3><p>要对现有的某个项目开始用 Git 管理，只需到此项目所在的目录，执行：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> init</code></pre><p>初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件。（在第九章我们会详细说明刚才创建的 .git 目录中究竟有哪些文件，以及都起些什么作用。）</p><p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> *.c$ <span class="token function">git</span> <span class="token function">add</span> README$ <span class="token function">git</span> commit -m <span class="token string">'initial project version'</span></code></pre><p>稍后我们再逐一解释每条命令的意思。不过现在，你已经得到了一个实际维护着若干文件的 Git 仓库。</p><h3 id="从现有仓库克隆"><a href="#从现有仓库克隆" class="headerlink" title="从现有仓库克隆"></a>从现有仓库克隆</h3><p>克隆仓库的命令格式为 <strong><code>git clone [url]</code></strong> 。比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone git@gitee.com:oschina/git-osc.git</code></pre><p>这会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录，然后从中取出最新版本的文件拷贝。如果进入这个新建的 grit 目录，你会看到仓库中的所有文件已经在里边了，准备好后续的开发和使用。如果希望在克隆的时候，自己定义要新建的仓库目录名称，可以在上面的命令末尾指定新的名字：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone git@gitee.com:oschina/git-osc.git mygrit</code></pre><p>唯一的差别就是，现在新建的目录成了 mygrit，其他的都和上边的一样。</p><h3 id="其他常用基础操作"><a href="#其他常用基础操作" class="headerlink" title="其他常用基础操作"></a>其他常用基础操作</h3><p><a href="https://gitee.com/help/articles/4114#article-header0">Git 仓库基础操作</a></p><hr><p>引用：</p><p><a href="https://www.cnblogs.com/yiven/p/8465054.html">入门级 - 码云（Gitee），GitHub 教程 - Yiven</a></p><p>[Git 知识大全 - Gitee.com](</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;配置git与gitee连接&quot;&gt;&lt;a href=&quot;#配置git与gitee连接&quot; class=&quot;headerlink&quot; title=&quot;配置git与gitee连接&quot;&gt;&lt;/a&gt;配置git与gitee连接&lt;/h2&gt;&lt;h3 id=&quot;1-下载-amp-安装git&quot;&gt;&lt;a href=&quot;#1-下载-amp-安装git&quot; class=&quot;headerlink&quot; title=&quot;1.下载&amp;amp;安装git&quot;&gt;&lt;/a&gt;1.下载&amp;amp;安装git&lt;/h3&gt;&lt;p&gt;[Git官网](&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git (git-scm.com)&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;按照自己的操作系统进行下载安装，如Windows就下载Windows版本的安装包，下载速度慢的话可以用bitcomit或者迅雷进行下载，速度海星=-=&lt;/p&gt;</summary>
    
    
    
    
    <category term="Git" scheme="https://mikutown.gitee.io/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown入门</title>
    <link href="https://mikutown.gitee.io/blog/2020/03/30/MarkDown%E5%85%A5%E9%97%A8/"/>
    <id>https://mikutown.gitee.io/blog/2020/03/30/MarkDown%E5%85%A5%E9%97%A8/</id>
    <published>2020-03-30T15:22:51.000Z</published>
    <updated>2021-01-02T18:53:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MarkDown入门"><a href="#MarkDown入门" class="headerlink" title="MarkDown入门"></a>MarkDown入门</h2><ol start="0"><li>目录<br>在md文件的最前方添加</li></ol><pre class="language-none"><code class="language-none">[TOC]</code></pre><p>  可以根据标题生成目录 </p><ol><li><p>斜体和粗体</p><pre class="language-none"><code class="language-none">*斜体*或_斜体_**粗体*****加粗斜体***~~删除线~~</code></pre><p>显示效果：</p></li></ol><p> <em>斜体</em>或<em>斜体</em><br><strong>粗体</strong><br><strong><em>加粗斜体</em></strong><br><del>删除线</del></p><a id="more"></a><ol start="2"><li>分级标题<br>可使用</li></ol><pre class="language-none"><code class="language-none"># 一级标题## 二级标题...###### 六级标题</code></pre><p>或者</p><pre class="language-none"><code class="language-none">这是一个一级标题&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;这是一个二级标题--------------------------------------------------</code></pre><ol start="3"><li>超链接<br>3.1 行内式<br> 语法说明：</li></ol><ul><li>[]里写链接文字，()里写链接地址, ()中的””中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。[链接文字]/(链接地址 “链接标题”)这样的形式。链接地址与链接标题前有一个空格。(忽略/)</li></ul><pre class="language-none"><code class="language-none">欢迎来到[迟道的主页](http:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;de4923b06bfc)欢迎来到[迟道的主页](http:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;de4923b06bfc &quot;迟道的主页&quot;)</code></pre><p>显示效果：<br>欢迎来到<a href="http://www.jianshu.com/u/de4923b06bfc">迟道的主页</a><br>欢迎来到<a href="http://www.jianshu.com/u/de4923b06bfc" title="迟道的主页">迟道的主页</a></p><p>3.2 参考式</p><p>参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用 的方式创建链接将非常好，它可以让你对链接进行统一的管理。<br>语法说明：<br>参考式链接分为两部分，文中的写法 [链接文字][链接标记]，在文本的任意位置添加[链接标记]:链接地址 “链接标题”，链接地址与链接标题前有一个空格。<br>如果链接文字本身可以做为链接标记，你也可以写成[链接文字][]<br>[链接文字]：链接地址的形式，见代码的最后一行。<br>code：</p><pre class="language-none"><code class="language-none">我经常去的几个网站[GitHub][1]、[知乎][2]以及[简书][3][简书][3]是一个不错的[写作社区][]。[1]:https:&#x2F;&#x2F;github.com &quot;GitHub&quot;[2]:https:&#x2F;&#x2F;www.zhihu.com &quot;知乎&quot;[3]:http:&#x2F;&#x2F;www.jianshu.com &quot;简书&quot;[写作社区]:http:&#x2F;&#x2F;www.jianshu.com</code></pre><p>显示效果：<br>我经常去的几个网站[GitHub][1]、[知乎][2]以及[简书][3][简书][3]是一个不错的[写作社区][]。<br>[1]:<a href="https://github.com/">https://github.com</a> “GitHub”[2]:<a href="https://www.zhihu.com/">https://www.zhihu.com</a> “知乎”[3]:<a href="http://www.jianshu.com/">http://www.jianshu.com</a> “简书”[写作社区]:<a href="http://www.jianshu.com/">http://www.jianshu.com</a><br>3.3 自动链接<br>语法说明：<br>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;;包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：<br>code：</p><pre class="language-none"><code class="language-none">&lt;http:&#x2F;&#x2F;example.com&#x2F;&gt;&lt;address@example.com&gt;</code></pre><p>显示效果：<br><a href="http://example.com/">http://example.com/</a><br><a href="mailto:&#97;&#100;&#100;&#x72;&#101;&#x73;&#x73;&#64;&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#111;&#109;">&#97;&#100;&#100;&#x72;&#101;&#x73;&#x73;&#64;&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#111;&#109;</a></p><ol start="4"><li>列表<br>4.1 无序列表<br>使用 *，+，- 表示无序列表。</li></ol><pre class="language-none"><code class="language-none">- 无序列表项 一- 无序列表项 二- 无序列表项 三</code></pre><hr><p>显示效果：</p><ul><li>无序列表项 一</li><li>无序列表项 二</li><li>无序列表项 三<br>5.2 有序列表</li></ul><p>有序列表则使用数字接着一个英文句点。<br>代码：</p><pre class="language-none"><code class="language-none">1. 有序列表项 一2. 有序列表项 二3. 有序列表项 三</code></pre><p>显示效果：</p><ol><li>有序列表项 一</li><li>有序列表项 二</li><li>有序列表项 三<br>5.3 定义型列表<br>语法说明：<br>定义型列表由名词和解释组成。一行写上定义，紧跟一行写上解释。解释的写法:紧跟一个缩进(Tab)<br>代码：</li></ol><pre class="language-none"><code class="language-none">Markdown:    轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格）代码块 2:   这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）        代码块（左侧有八个不可见的空格）</code></pre><dl><dt>显示效果：<br>Markdown</dt><dd>轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><dl><dt>代码块 2</dt><dd>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><pre><code>    代码块（左侧有八个不可见的空格）</code></pre><ol start="6"><li>表格</li></ol><p>语法说明：<br>不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。<br>列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。<br>第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐。<br>code：<br>简单方式写表格：</p><pre class="language-none"><code class="language-none">学号|姓名|分数-|-|-小明|男|75小红|女|79小陆|男|92</code></pre><p>原生方式写表格：</p><pre class="language-none"><code class="language-none">|学号|姓名|分数||-|-|-||小明|男|75||小红|女|79||小陆|男|92|</code></pre><p>为表格第二列指定方向：</p><pre class="language-none"><code class="language-none">产品|价格-|-:Leanote 高级账号|60元&#x2F;年Leanote 超级账号|120元&#x2F;年</code></pre><p>显示效果：</p><table><thead><tr><th>学号</th><th>姓名</th><th>分数</th></tr></thead><tbody><tr><td>小明</td><td>男</td><td>75</td></tr><tr><td>小红</td><td>女</td><td>79</td></tr><tr><td>小陆</td><td>男</td><td>92</td></tr></tbody></table><table><thead><tr><th>学号</th><th>姓名</th><th>分数</th></tr></thead><tbody><tr><td>小明</td><td>男</td><td>75</td></tr><tr><td>小红</td><td>女</td><td>79</td></tr><tr><td>小陆</td><td>男</td><td>92</td></tr></tbody></table><table><thead><tr><th>产品</th><th align="right">价格</th></tr></thead><tbody><tr><td>Leanote 高级账号</td><td align="right">60元/年</td></tr><tr><td>Leanote 超级账号</td><td align="right">120元/年</td></tr></tbody></table><p>注：合并表格单元格可以使用html原生代码</p><ol start="7"><li>分隔线<br>代码：</li></ol><pre class="language-none"><code class="language-none">* * *********- - ----------------------------------------</code></pre><p>显示效果都一样：</p><ol start="8"><li>插入代码<br>语法说明：<br>插入行内代码，即插入一个单词或者一句代码的情况，使用<code>code</code>这样的形式插入。<br>插入多行代码，可以使用缩进或者<code>code</code>,具体看示例。</li></ol><pre class="language-none"><code class="language-none">在三个引号后面可以添加代码的语言 可以高亮显示所选语言的语法</code></pre><ol start="9"><li>插入图片<br>code：</li></ol><pre class="language-none"><code class="language-none">![图片名称]（链接）</code></pre><ol start="10"><li>任务列表<br>代码：</li></ol><pre class="language-none"><code class="language-none">近期任务安排:- [x] 整理Markdown手册- [ ] 改善项目   - [x] 优化首页显示方式   - [x] 修复闪退问题   - [ ] 修复视频卡顿- [ ] A3项目修复   - [x] 修复数值错误</code></pre><p>效果：</p><p>近期任务安排:</p><ul><li><input checked="" disabled="" type="checkbox"> 整理Markdown手册</li><li><input disabled="" type="checkbox"> 改善项目<ul><li><input checked="" disabled="" type="checkbox"> 优化首页显示方式</li><li><input checked="" disabled="" type="checkbox"> 修复闪退问题</li><li><input disabled="" type="checkbox"> 修复视频卡顿</li></ul></li><li><input disabled="" type="checkbox"> A3项目修复<ul><li><input checked="" disabled="" type="checkbox"> 修复数值错误</li></ul></li></ul><hr><p>附录： [完整markdown笔记](</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;MarkDown入门&quot;&gt;&lt;a href=&quot;#MarkDown入门&quot; class=&quot;headerlink&quot; title=&quot;MarkDown入门&quot;&gt;&lt;/a&gt;MarkDown入门&lt;/h2&gt;&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;目录&lt;br&gt;在md文件的最前方添加&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;[TOC]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;  可以根据标题生成目录 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;斜体和粗体&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;*斜体*或_斜体_
**粗体**
***加粗斜体***
~~删除线~~&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显示效果：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; &lt;em&gt;斜体&lt;/em&gt;或&lt;em&gt;斜体&lt;/em&gt;&lt;br&gt;&lt;strong&gt;粗体&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;em&gt;加粗斜体&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;del&gt;删除线&lt;/del&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="MarkDown" scheme="https://mikutown.gitee.io/blog/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>使用nvm进行Nodejs安装</title>
    <link href="https://mikutown.gitee.io/blog/2020/03/30/%E4%BD%BF%E7%94%A8nvm%E8%BF%9B%E8%A1%8CNodejs%E5%AE%89%E8%A3%85/"/>
    <id>https://mikutown.gitee.io/blog/2020/03/30/%E4%BD%BF%E7%94%A8nvm%E8%BF%9B%E8%A1%8CNodejs%E5%AE%89%E8%A3%85/</id>
    <published>2020-03-30T15:22:51.000Z</published>
    <updated>2021-01-02T18:58:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nvm的安装和使用"><a href="#nvm的安装和使用" class="headerlink" title="nvm的安装和使用"></a>nvm的安装和使用</h2><h3 id="为什么要使用nvm？"><a href="#为什么要使用nvm？" class="headerlink" title="为什么要使用nvm？"></a>为什么要使用nvm？</h3><p>有时候需要特定版本的nodejs，但是没有必要卸载原有的nodejs，可以使用nvm（全名node.js version management，顾名思义，一个nodejs的版本管理工具）同时在电脑上安装多个版本的nodejs，并且启用合适版本的nodejs。</p><a id="more"></a><h3 id="nvm的下载"><a href="#nvm的下载" class="headerlink" title="nvm的下载"></a>nvm的下载</h3><p>点击此链接进行下载：<a href="https://github.com/coreybutler/nvm-windows/releases">Releases · coreybutler/nvm-windows (github.com)</a> （建议下载安装版，不需要复杂的配置）</p><p>下载成功后解压，双击安装包，进行安装，选择合适的非中文路径进行安装，然后选择nodejs的安装路径，确认安装。</p><p>安装成功后打开cmd，输入nvm，如果安装成功，在窗口中会如此显示：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20201231025038.png" alt="image-20201231025038094" loading="lazy"></p><h2 id="安装-管理nodejs"><a href="#安装-管理nodejs" class="headerlink" title="安装/管理nodejs"></a>安装/管理nodejs</h2><h3 id="查看本地所有已经安装的nodejs"><a href="#查看本地所有已经安装的nodejs" class="headerlink" title="查看本地所有已经安装的nodejs"></a>查看本地所有已经安装的nodejs</h3><p>有可选参数available，显示所有可下载的版本。</p><pre class="language-none"><code class="language-none">nvm list [available]</code></pre><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20201231025247.png" alt="image-20201231025247458" loading="lazy"></p><h3 id="安装特定版本的nodejs"><a href="#安装特定版本的nodejs" class="headerlink" title="安装特定版本的nodejs"></a>安装特定版本的nodejs</h3><pre class="language-none"><code class="language-none">nvm install 12.14.0</code></pre><h3 id="使用特定版本的nodejs"><a href="#使用特定版本的nodejs" class="headerlink" title="使用特定版本的nodejs"></a>使用特定版本的nodejs</h3><pre class="language-none"><code class="language-none">nvm use 12.14.0</code></pre><h3 id="卸载特定版本的nodejs"><a href="#卸载特定版本的nodejs" class="headerlink" title="卸载特定版本的nodejs"></a>卸载特定版本的nodejs</h3><pre class="language-none"><code class="language-none">nvm uninstall 12.14.0</code></pre><h2 id="nvm或者npm下载速度低的解决办法"><a href="#nvm或者npm下载速度低的解决办法" class="headerlink" title="nvm或者npm下载速度低的解决办法:"></a>nvm或者npm下载速度低的解决办法:</h2><ol><li><p>打开cmd，输入where nvm 找到nvm的安装路径</p></li><li><p>使用文件资源管理器打开该路径下的settings.txt文件</p></li><li><p>将以下代码复制到settings.txt中，配置淘宝镜像为npm和nvm的默认下载镜像，下载速度就会超级快哦</p></li></ol><pre class="language-none"><code class="language-none">node_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F;npm_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;</code></pre><hr><p>引用：</p><p><a href="https://www.cnblogs.com/gaozejie/p/10689742.html">nvm安装与使用 - #Empty - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/qq_32754575/article/details/102412473">nvm下载太慢问题解决_大大的叹号的博客-CSDN博客_nvm下载慢</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;nvm的安装和使用&quot;&gt;&lt;a href=&quot;#nvm的安装和使用&quot; class=&quot;headerlink&quot; title=&quot;nvm的安装和使用&quot;&gt;&lt;/a&gt;nvm的安装和使用&lt;/h2&gt;&lt;h3 id=&quot;为什么要使用nvm？&quot;&gt;&lt;a href=&quot;#为什么要使用nvm？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用nvm？&quot;&gt;&lt;/a&gt;为什么要使用nvm？&lt;/h3&gt;&lt;p&gt;有时候需要特定版本的nodejs，但是没有必要卸载原有的nodejs，可以使用nvm（全名node.js version management，顾名思义，一个nodejs的版本管理工具）同时在电脑上安装多个版本的nodejs，并且启用合适版本的nodejs。&lt;/p&gt;</summary>
    
    
    
    
    <category term="nodejs" scheme="https://mikutown.gitee.io/blog/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>配置Hexo博客并部署到Gitee</title>
    <link href="https://mikutown.gitee.io/blog/2020/03/30/%E9%85%8D%E7%BD%AEHexo%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0Gitee/"/>
    <id>https://mikutown.gitee.io/blog/2020/03/30/%E9%85%8D%E7%BD%AEHexo%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0Gitee/</id>
    <published>2020-03-30T15:22:51.000Z</published>
    <updated>2021-01-02T18:58:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部署hexo静态博客到gitee中"><a href="#部署hexo静态博客到gitee中" class="headerlink" title="部署hexo静态博客到gitee中"></a>部署hexo静态博客到gitee中</h2><p><strong>本文章假定你已经使用了nvm安装了nodejs12.14.0，并且已经配置了git以及gitee上的ssh密钥</strong></p><hr><a id="more"></a><h3 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1.安装Hexo"></a>1.安装Hexo</h3><p>在gitbash或者cmd中输入命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo   <span class="token comment"># 通过npm安装hexo</span><span class="token comment"># -g 指定全局安装，可以使用hexo命令</span></code></pre><h3 id="2-初始化Hexo"><a href="#2-初始化Hexo" class="headerlink" title="2.初始化Hexo"></a>2.初始化Hexo</h3><p>进入合适的目录（你要存放你hexo博客文件的地方）</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo init blog  <span class="token comment"># 初始化创建，会再桌面创建blog文件夹</span><span class="token builtin class-name">cd</span> blog    <span class="token comment"># 进入blog目录</span><span class="token function">npm</span> <span class="token function">install</span>   <span class="token comment"># 进一步安装hexo所需文件</span></code></pre><p>初始化后的文件目录及其功能如下：</p><pre class="language-none"><code class="language-none">.├── .deploy       #需要部署的文件├── node_modules  #Hexo插件├── public        #生成的静态网页文件├── scaffolds     #模板├── source        #博客正文和其他源文件等都应该放在这里|   ├── _drafts   #草稿|   └── _posts    #文章├── themes        #主题├── _config.yml   #全局配置文件└── package.json</code></pre><h3 id="3-启动Hexo"><a href="#3-启动Hexo" class="headerlink" title="3.启动Hexo"></a>3.启动Hexo</h3><pre class="language-bash" data-language="bash"><code class="language-bash">hexo clean   <span class="token comment"># 清除所有记录 /hexo c</span>hexo generate  <span class="token comment"># 生成静态网页 /hexo g</span>hexo server    <span class="token comment"># 启动服务 /hexo s</span></code></pre><p>成功启动后应该是有如下界面：</p><pre class="language-none"><code class="language-none">WARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;WARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; ATTENTION! &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;WARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;WARN   NexT repository is moving here: https:&#x2F;&#x2F;github.com&#x2F;theme-nextWARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;WARN   It&#39;s rebase to v6.0.0 and future maintenance will resume thereWARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;INFO  Hexo is running at http:&#x2F;&#x2F;localhost:4000 . Press Ctrl+C to stop.</code></pre><p>此时访问<a href="http://localhost:4000/">http://localhost:4000</a> 即可在本地访问你的博客了</p><p>如果想要在任何可以上网的设备上访问你的博客，那么你就需要将你的本地Hexo博客部署到Gitee了。</p><h3 id="4-部署Hexo博客到码云（Gitee）上"><a href="#4-部署Hexo博客到码云（Gitee）上" class="headerlink" title="4.部署Hexo博客到码云（Gitee）上"></a>4.部署Hexo博客到码云（Gitee）上</h3><p>码云（gitee）：<strong><a href="https://gitee.com/">https://gitee.com/</a></strong></p><h4 id="4-1-注册码云，创建仓库"><a href="#4-1-注册码云，创建仓库" class="headerlink" title="4.1 注册码云，创建仓库"></a>4.1 注册码云，创建仓库</h4><p>输入仓库名称，其他的保持默认即可。</p><h4 id="4-2-生成-添加SSH公钥"><a href="#4-2-生成-添加SSH公钥" class="headerlink" title="4.2 生成/添加SSH公钥"></a>4.2 生成/添加SSH公钥</h4><p>请查看<a href="https://mikutown.gitee.io/blog/2020/12/31/%E9%85%8D%E7%BD%AEgit%E4%B8%8Egitee%E8%BF%9E%E6%8E%A5/#more">我之前的博客</a></p><h4 id="4-3-配置连接Gitee"><a href="#4-3-配置连接Gitee" class="headerlink" title="4.3 配置连接Gitee"></a>4.3 配置连接Gitee</h4><p>复制我们新创建的仓库的项目地址</p><p>复制URL到hexo的配置文件_config.yml中相应的位置</p><pre class="language-yml" data-language="yml"><code class="language-yml">deploy:  type: git                        # type为git  repo: git@gitee.com:XXXXXX&#x2F;blog.git  # 仓库的 URL  branch: master</code></pre><p><strong>注意冒号后面一定要有空格</strong></p><h4 id="4-4-部署Hexo博客"><a href="#4-4-部署Hexo博客" class="headerlink" title="4.4 部署Hexo博客"></a>4.4 部署Hexo博客</h4><p>安装自动部署发布工具hexo-deployer-git，不然部署会报错</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>在博客根目录新建deployer.sh文件，输入代码（也就是新建了一个bash脚本文件）</p><pre class="language-none"><code class="language-none">hexo cleanhexo g hexo d</code></pre><p>输入之后保存退出，在bash中部署博客就只需要执行以下命令一键部署博客</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> deployer.sh</code></pre><p>这个时候在pages里启动博客，可能会无法显示css样式，这个时候你就需要修改你的_config.yml文件了</p><pre class="language-yml" data-language="yml"><code class="language-yml"># URL## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;yoursite.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;url: https:&#x2F;&#x2F;mikutown.gitee.io&#x2F;blog# 在url后面写你的博客地址root: &#x2F;blogpermalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;permalink_defaults:</code></pre><h3 id="5-Gitee-Pages设置"><a href="#5-Gitee-Pages设置" class="headerlink" title="5.Gitee Pages设置"></a>5.Gitee Pages设置</h3><p>在项目的服务中选择Pages选项，直接使用默认配置，点击启动即可。如下图所示</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210101203031.png" alt="如何进入Pages服务" loading="lazy"></p><p>点击启动后：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210101203120.png" alt="Pages服务页面" loading="lazy"></p><p><strong>博客发布成功之后，可以访问博客地址：xxxxxx，就可通过他提供的博客地址进行访问，预览在线博客啦！！</strong></p><p>如果博客的样式不对，则需要在_config.yml中配置下博客地址和路径：</p><pre class="language-none"><code class="language-none">url: “码云提供给您的博客地址”root: &#x2F;</code></pre><p>再执行命令 <code>sh deployer.sh</code> 就可以啦，之后就是美化我们的博客了。</p><h3 id="6-博客的美化"><a href="#6-博客的美化" class="headerlink" title="6.博客的美化"></a>6.博客的美化</h3><p><a href="https://hexo.io/themes/">Hexo博客主题列表</a></p><p>下载自己喜欢的主题，可以去 github 下载压缩包然后<strong>放到博客项目根目录下的 themes 中</strong>。</p><p>然后配置 <strong>_config.yml</strong></p><pre class="language-none"><code class="language-none">theme: “您的主题文件夹完整名称”  # 这里需要注意:后面要有一个空格，名称要和theme下的主题目录名称相同。</code></pre><p>修改完成，本地运行 <code>hexo s</code> 测试成功即可上传部署到 Gitee 然后点击更新即可。</p><h3 id="7-自定义博客域名"><a href="#7-自定义博客域名" class="headerlink" title="7.自定义博客域名"></a>7.自定义博客域名</h3><p>Gitee的Pages服务为每个人的博客都定义了一个地址，在Pages页面有链接，比如我的链接就是<a href="https://mikutown.gitee.io/blog">https://mikutown.gitee.io/blog</a> ，但是有的人拥有自己的域名，希望通过自己的域名访问到自己的博客，怎么办呢？就需要你去配置自定义博客域名了。</p><h4 id="7-1-购买域名"><a href="#7-1-购买域名" class="headerlink" title="7.1 购买域名"></a>7.1 购买域名</h4><p>不做过多解释，自己去买就可以了。</p><h4 id="7-2-域名解析"><a href="#7-2-域名解析" class="headerlink" title="7.2 域名解析"></a>7.2 域名解析</h4><p>因为gitee pages pro功能下线了，无法直接通过年支付99元的方式进行自定义的域名解析，因此在这里我们将自己的域名解析到GitHub，再利用页面跳转实现输入自己的域名进入自己的gitee博客。</p><h5 id="7-2-1-Github相关配置"><a href="#7-2-1-Github相关配置" class="headerlink" title="7.2.1 Github相关配置"></a>7.2.1 Github相关配置</h5><ul><li>注册自己的github账号</li><li>将自己的电脑中的ssh密钥添加到GitHub账号里，并且测试连接ok</li><li><strong>以下操作中你的GitHub用户名均用username代替</strong></li></ul><h5 id="7-2-2-新建Github项目"><a href="#7-2-2-新建Github项目" class="headerlink" title="7.2.2 新建Github项目"></a>7.2.2 新建Github项目</h5><p>新建一个仓库，仓库名称：username.github.io,其他保持默认设置，如图所示：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210101222707.png" alt="image-20210101222707265" loading="lazy"></p><h5 id="7-2-3-在本地新建index-html"><a href="#7-2-3-在本地新建index-html" class="headerlink" title="7.2.3 在本地新建index.html"></a>7.2.3 在本地新建index.html</h5><p>新建的index.html文件放在文件夹名为username.github.io的文件夹中，index.html的内容为</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"你的Gitee静态博客地址"</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--顾名思义 这是跳转到你的Gitee静态博客地址的script--></span></code></pre><h5 id="7-2-4-将文件上传到自己的github仓库了"><a href="#7-2-4-将文件上传到自己的github仓库了" class="headerlink" title="7.2.4 将文件上传到自己的github仓库了"></a>7.2.4 将文件上传到自己的github仓库了</h5><p>在你的username.github.io文件夹中打开git bash，然后输入如下命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span class="token comment"># 初始化GitHub本地仓库</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token comment"># 将本地文件夹中的所有文件加到仓库中</span><span class="token function">git</span> commit -m <span class="token string">"注释语句"</span><span class="token comment"># 此处的注释语句就是对刚才的add操作的注释，此处使用commit命令将刚才add的文件commit到仓库，注释语句啥也能写，就是不能留空 不可以留空知道了吗知道了吗知道了吗知道了吗知道了吗</span></code></pre><h5 id="7-2-5-将Github仓库与本地仓库关联"><a href="#7-2-5-将Github仓库与本地仓库关联" class="headerlink" title="7.2.5 将Github仓库与本地仓库关联"></a>7.2.5 将Github仓库与本地仓库关联</h5><p>复制GitHub的仓库地址，如图：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210101230729.png" alt="image-20210101230729018" loading="lazy"></p><p>在username.github.io文件夹中启动的gitbash中输入代码</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/username/username.github.io<span class="token comment"># 后面的https链接地址换成你自己的仓库url地址，也就是上面红框中标出来的地址</span></code></pre><h6 id="7-2-6-执行pull与push操作"><a href="#7-2-6-执行pull与push操作" class="headerlink" title="7.2.6 执行pull与push操作"></a>7.2.6 执行pull与push操作</h6><p>执行以下命令</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin master<span class="token function">git</span> push -u origin master</code></pre><p>执行完后，如果没有异常，等待执行完就上传成功了，中间可能会让你输入Username和Password，你只要输入github的账号和密码就行了。<br><strong>精髓来了：</strong><br><strong>需要注意的是push和pull类似于栈出栈压栈</strong>，而且它必须是一出一压，不能出出压压，为什么要说这个能，就是在多人共享代码的时候，有多个人同时使用或是有人使用了pull忘记了push了，以后的人再用pull就会出错，解决方案是，如果下一步应该是push了，你就敲出来git push，反之则是git pull。<br>好了，你们这些都做完了后，可以回到浏览器刷新看看是不是已经传上去了，那么最麻烦的一步就ok了，git命令的水还很深，我这一个晚上学得都是皮毛嘻嘻。</p><h5 id="7-2-7-在Github仓库中新建CNAME文件"><a href="#7-2-7-在Github仓库中新建CNAME文件" class="headerlink" title="7.2.7 在Github仓库中新建CNAME文件"></a>7.2.7 在Github仓库中新建CNAME文件</h5><p>在仓库中新建一个CNAME文件，如图所示<img src="https://gitee.com/mikutown/pic/raw/master/img/20210101231044.png" alt="image-20210101231044461" loading="lazy"></p><p>文件名为CNAME，文件内容为你购买的域名，你自己的买的域名如果是leafii.top那就输入leafii.top，个人意见是不要加那些http和/这些东西。完成这一步后，你的仓库应该有两个文件了。</p><h5 id="7-2-8-进入域名控制台进行域名解析设置"><a href="#7-2-8-进入域名控制台进行域名解析设置" class="headerlink" title="7.2.8 进入域名控制台进行域名解析设置"></a>7.2.8 进入域名控制台进行域名解析设置</h5><p>我的域名是在阿里云购买，因此以下截图来自阿里云域名控制台，在域名控制台中将@和www的域名的解析类型修改为CNAME，然后将解析地址解析为你的Github仓库名，即username.github.io，如图所示：</p><p><img src="https://gitee.com/mikutown/pic/raw/master/img/20210101231347.png" alt="image-20210101231347159" loading="lazy"></p><h5 id="7-2-9-解析设置后的操作"><a href="#7-2-9-解析设置后的操作" class="headerlink" title="7.2.9 解析设置后的操作"></a>7.2.9 解析设置后的操作</h5><p>如果解析设置完毕，等待几分钟再进行是否设置成功的尝试。</p><h5 id="7-2-10-大功告成"><a href="#7-2-10-大功告成" class="headerlink" title="7.2.10 大功告成"></a>7.2.10 大功告成</h5><p>如果你们github上传错了，也可以删除的，这里就不讲了，给你们一个链接<br><a href="https://blog.csdn.net/q420225777/article/details/80697077">https://blog.csdn.net/q420225777/article/details/80697077</a></p><hr><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://www.cnblogs.com/yizhixue-hx/p/12638361.html">Hexo + Gitee搭建个人博客</a></p><p><a href="https://blog.csdn.net/weixin_43419816/article/details/106246960">利用Github实现页面跳转</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;部署hexo静态博客到gitee中&quot;&gt;&lt;a href=&quot;#部署hexo静态博客到gitee中&quot; class=&quot;headerlink&quot; title=&quot;部署hexo静态博客到gitee中&quot;&gt;&lt;/a&gt;部署hexo静态博客到gitee中&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本文章假定你已经使用了nvm安装了nodejs12.14.0，并且已经配置了git以及gitee上的ssh密钥&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    
    <category term="Hexo" scheme="https://mikutown.gitee.io/blog/tags/Hexo/"/>
    
  </entry>
  
</feed>
